<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BHttpMethod::InvalidMethod</compoundname>
    <basecompoundref refid="classBPrivate_1_1Network_1_1BError" prot="public" virt="non-virtual">BPrivate::Network::BError</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1aecc3243315602e5ab9c7095f47827108" prot="public" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BPrivate::Network::BHttpMethod::InvalidMethod::input</definition>
        <argsstring></argsstring>
        <name>input</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::InvalidMethod::input</qualifiedname>
        <briefdescription>
<para>The input that contains the invalid contents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="72" column="8" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1afc0bc1a17c8dcd2c67e280b709566cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpMethod::InvalidMethod::InvalidMethod</definition>
        <argsstring>(const char *origin, BString input)</argsstring>
        <name>InvalidMethod</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::InvalidMethod::InvalidMethod</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>origin</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Constructor that sets the <emphasis>origin</emphasis> and the invalid <emphasis>input</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1a7f52e4d68de0f5735b223e78f3ac4b67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>virtual BString BPrivate::Network::BHttpMethod::InvalidMethod::DebugMessage</definition>
        <argsstring>() const override</argsstring>
        <name>DebugMessage</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::InvalidMethod::DebugMessage</qualifiedname>
        <reimplements refid="classBPrivate_1_1Network_1_1BError_1a93a2260671aad699aa8787fd74061f98">DebugMessage</reimplements>
        <briefdescription>
<para>Retrieve a debug message that contains all info in this error. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">[<ref refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" kindref="member">Origin</ref>]<sp/><ref refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1a397e87c6134ba1a25488ad781519016e" kindref="member">Message</ref><sp/>of<sp/>error</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>In the future this method may throw this exception when the memory for the debug message cannot be allocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classBString" kindref="compound">BString</ref> object that contains the debug message.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="70" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1a397e87c6134ba1a25488ad781519016e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char * BPrivate::Network::BHttpMethod::InvalidMethod::Message</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>Message</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::InvalidMethod::Message</qualifiedname>
        <reimplements refid="classBPrivate_1_1Network_1_1BError_1a2c1b049e967387a289b1b0b8694eca28">Message</reimplements>
        <briefdescription>
<para>Access the string representation of the message. </para>
        </briefdescription>
        <detaileddescription>
<para>Implementations should return a meaningful description of the error that occured. The primary target audience of these messages are developers, who (hopefully) see them during development, testing or in bug reports. However, if it makes sense to have the error messages be instructive to users too, then do not hesitate to do so.</para>
<para>Implementations of this function should never return <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="69" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Error that represents when a custom method does not conform to the HTTP standard. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BPrivate::Network::BError</label>
        <link refid="classBPrivate_1_1Network_1_1BError"/>
      </node>
      <node id="1">
        <label>BPrivate::Network::BHttpMethod::InvalidMethod</label>
        <link refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BPrivate::Network::BError</label>
        <link refid="classBPrivate_1_1Network_1_1BError"/>
      </node>
      <node id="1">
        <label>BPrivate::Network::BHttpMethod::InvalidMethod</label>
        <link refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>input</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BString</label>
        <link refid="classBString"/>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="64" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="65" bodyend="73"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BError_1a98953038abdab68796b3bf373ead0540" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abbf80a044f5af02aac87a65a6aba703a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abf7e40af168fdcf53eb7a86e42c9141c" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a227208ede157ae501ea3acee188e46b7" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1a7f52e4d68de0f5735b223e78f3ac4b67" prot="public" virt="virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>DebugMessage</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1aecc3243315602e5ab9c7095f47827108" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>input</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1afc0bc1a17c8dcd2c67e280b709566cda" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>InvalidMethod</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1a397e87c6134ba1a25488ad781519016e" prot="public" virt="virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>Message</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1af4a889a39e9530458aeb649d2ba12d45" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1ab80467e8f9af8142d4d7cfa311f04c68" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" prot="public" virt="virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>Origin</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a69a0b83a56c08e510e16aaba841f25e5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>WriteToOutput</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a2c7538bd21c2844cd1ee0c8ee0ba74ef" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>WriteToStream</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a0ffdd9cc030c188df03dd95e1de82bf4" prot="public" virt="virtual"><scope>BPrivate::Network::BHttpMethod::InvalidMethod</scope><name>~BError</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
