<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBAffineTransform" kind="class" language="C++" prot="public">
    <compoundname>BAffineTransform</compoundname>
    <basecompoundref refid="classBFlattenable" prot="public" virt="non-virtual">BFlattenable</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classBAffineTransform_1a3c001ed01b4cf15e42832b5f10a088fc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>const double BAffineTransform::kDefaultEpsilon</definition>
        <argsstring></argsstring>
        <name>kDefaultEpsilon</name>
        <qualifiedname>BAffineTransform::kDefaultEpsilon</qualifiedname>
        <initializer>= 1e-14</initializer>
        <briefdescription>
<para>Undocumented public variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="39" column="23" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double BAffineTransform::shx</definition>
        <argsstring></argsstring>
        <name>shx</name>
        <qualifiedname>BAffineTransform::shx</qualifiedname>
        <briefdescription>
<para>Undocumented public variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="208" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="208" bodyend="-1"/>
        <referencedby refid="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" compoundref="AffineTransform_8h" startline="222" endline="227">Apply</referencedby>
        <referencedby refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" compoundref="AffineTransform_8h" startline="231" endline="238">ApplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1ae53ecb58adc270f614dbc8aeb852ef61" compoundref="AffineTransform_8h" startline="442" endline="445">Determinant</referencedby>
        <referencedby refid="classBAffineTransform_1ae1847cda27427323d6d4635f97c1d993" compoundref="AffineTransform_8h" startline="449" endline="452">InverseDeterminant</referencedby>
        <referencedby refid="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" compoundref="AffineTransform_8h" startline="378" endline="387">operator=</referencedby>
        <referencedby refid="classBAffineTransform_1a0a0889c583b7b842e2825a6bcf341178" compoundref="AffineTransform_8h" startline="281" endline="292">PreRotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1abccb7b3b9fcb18b013bb91e10b8fecb2" compoundref="AffineTransform_8h" startline="327" endline="334">PreScaleBy</referencedby>
        <referencedby refid="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" compoundref="AffineTransform_8h" startline="254" endline="259">PreTranslateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" compoundref="AffineTransform_8h" startline="263" endline="277">RotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" compoundref="AffineTransform_8h" startline="296" endline="308">ScaleBy</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double BAffineTransform::shy</definition>
        <argsstring></argsstring>
        <name>shy</name>
        <qualifiedname>BAffineTransform::shy</qualifiedname>
        <briefdescription>
<para>Undocumented public variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="207" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="207" bodyend="-1"/>
        <referencedby refid="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" compoundref="AffineTransform_8h" startline="222" endline="227">Apply</referencedby>
        <referencedby refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" compoundref="AffineTransform_8h" startline="231" endline="238">ApplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1ae53ecb58adc270f614dbc8aeb852ef61" compoundref="AffineTransform_8h" startline="442" endline="445">Determinant</referencedby>
        <referencedby refid="classBAffineTransform_1ae1847cda27427323d6d4635f97c1d993" compoundref="AffineTransform_8h" startline="449" endline="452">InverseDeterminant</referencedby>
        <referencedby refid="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" compoundref="AffineTransform_8h" startline="378" endline="387">operator=</referencedby>
        <referencedby refid="classBAffineTransform_1a0a0889c583b7b842e2825a6bcf341178" compoundref="AffineTransform_8h" startline="281" endline="292">PreRotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1abccb7b3b9fcb18b013bb91e10b8fecb2" compoundref="AffineTransform_8h" startline="327" endline="334">PreScaleBy</referencedby>
        <referencedby refid="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" compoundref="AffineTransform_8h" startline="254" endline="259">PreTranslateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" compoundref="AffineTransform_8h" startline="263" endline="277">RotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" compoundref="AffineTransform_8h" startline="296" endline="308">ScaleBy</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double BAffineTransform::sx</definition>
        <argsstring></argsstring>
        <name>sx</name>
        <qualifiedname>BAffineTransform::sx</qualifiedname>
        <briefdescription>
<para>Undocumented public variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="206" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="206" bodyend="-1"/>
        <referencedby refid="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" compoundref="AffineTransform_8h" startline="222" endline="227">Apply</referencedby>
        <referencedby refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" compoundref="AffineTransform_8h" startline="231" endline="238">ApplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1ae53ecb58adc270f614dbc8aeb852ef61" compoundref="AffineTransform_8h" startline="442" endline="445">Determinant</referencedby>
        <referencedby refid="classBAffineTransform_1ae1847cda27427323d6d4635f97c1d993" compoundref="AffineTransform_8h" startline="449" endline="452">InverseDeterminant</referencedby>
        <referencedby refid="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" compoundref="AffineTransform_8h" startline="378" endline="387">operator=</referencedby>
        <referencedby refid="classBAffineTransform_1a0a0889c583b7b842e2825a6bcf341178" compoundref="AffineTransform_8h" startline="281" endline="292">PreRotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1abccb7b3b9fcb18b013bb91e10b8fecb2" compoundref="AffineTransform_8h" startline="327" endline="334">PreScaleBy</referencedby>
        <referencedby refid="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" compoundref="AffineTransform_8h" startline="254" endline="259">PreTranslateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" compoundref="AffineTransform_8h" startline="263" endline="277">RotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" compoundref="AffineTransform_8h" startline="296" endline="308">ScaleBy</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double BAffineTransform::sy</definition>
        <argsstring></argsstring>
        <name>sy</name>
        <qualifiedname>BAffineTransform::sy</qualifiedname>
        <briefdescription>
<para>Undocumented public variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="209" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="209" bodyend="-1"/>
        <referencedby refid="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" compoundref="AffineTransform_8h" startline="222" endline="227">Apply</referencedby>
        <referencedby refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" compoundref="AffineTransform_8h" startline="231" endline="238">ApplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1ae53ecb58adc270f614dbc8aeb852ef61" compoundref="AffineTransform_8h" startline="442" endline="445">Determinant</referencedby>
        <referencedby refid="classBAffineTransform_1ae1847cda27427323d6d4635f97c1d993" compoundref="AffineTransform_8h" startline="449" endline="452">InverseDeterminant</referencedby>
        <referencedby refid="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" compoundref="AffineTransform_8h" startline="378" endline="387">operator=</referencedby>
        <referencedby refid="classBAffineTransform_1a0a0889c583b7b842e2825a6bcf341178" compoundref="AffineTransform_8h" startline="281" endline="292">PreRotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1abccb7b3b9fcb18b013bb91e10b8fecb2" compoundref="AffineTransform_8h" startline="327" endline="334">PreScaleBy</referencedby>
        <referencedby refid="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" compoundref="AffineTransform_8h" startline="254" endline="259">PreTranslateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" compoundref="AffineTransform_8h" startline="263" endline="277">RotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" compoundref="AffineTransform_8h" startline="296" endline="308">ScaleBy</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double BAffineTransform::tx</definition>
        <argsstring></argsstring>
        <name>tx</name>
        <qualifiedname>BAffineTransform::tx</qualifiedname>
        <briefdescription>
<para>Undocumented public variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="210" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="210" bodyend="-1"/>
        <referencedby refid="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" compoundref="AffineTransform_8h" startline="222" endline="227">Apply</referencedby>
        <referencedby refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" compoundref="AffineTransform_8h" startline="231" endline="238">ApplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" compoundref="AffineTransform_8h" startline="378" endline="387">operator=</referencedby>
        <referencedby refid="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" compoundref="AffineTransform_8h" startline="254" endline="259">PreTranslateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" compoundref="AffineTransform_8h" startline="263" endline="277">RotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" compoundref="AffineTransform_8h" startline="296" endline="308">ScaleBy</referencedby>
        <referencedby refid="classBAffineTransform_1a472101df3b3a7e45d6393044949c2e54" compoundref="AffineTransform_8h" startline="245" endline="250">TranslateBy</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double BAffineTransform::ty</definition>
        <argsstring></argsstring>
        <name>ty</name>
        <qualifiedname>BAffineTransform::ty</qualifiedname>
        <briefdescription>
<para>Undocumented public variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="211" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="211" bodyend="-1"/>
        <referencedby refid="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" compoundref="AffineTransform_8h" startline="222" endline="227">Apply</referencedby>
        <referencedby refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" compoundref="AffineTransform_8h" startline="231" endline="238">ApplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" compoundref="AffineTransform_8h" startline="378" endline="387">operator=</referencedby>
        <referencedby refid="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" compoundref="AffineTransform_8h" startline="254" endline="259">PreTranslateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" compoundref="AffineTransform_8h" startline="263" endline="277">RotateBy</referencedby>
        <referencedby refid="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" compoundref="AffineTransform_8h" startline="296" endline="308">ScaleBy</referencedby>
        <referencedby refid="classBAffineTransform_1a472101df3b3a7e45d6393044949c2e54" compoundref="AffineTransform_8h" startline="245" endline="250">TranslateBy</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBAffineTransform_1ad25069639f485a0565c3bcdc22f9e75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAffineTransform::BAffineTransform</definition>
        <argsstring>()</argsstring>
        <name>BAffineTransform</name>
        <qualifiedname>BAffineTransform::BAffineTransform</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="43" column="1"/>
        <referencedby refid="classBAffineTransform_1a7c625a1d0e1920218240f5f04bab0f53" compoundref="AffineTransform_8h" startline="417" endline="420">operator*</referencedby>
        <referencedby refid="classBAffineTransform_1a1bb302fa4699269d0c544aea5a083f76" compoundref="AffineTransform_8h" startline="424" endline="427">operator/</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a5a53a6fbc72aea554bf53fce207aefba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAffineTransform::BAffineTransform</definition>
        <argsstring>(const BAffineTransform &amp;copyFrom)</argsstring>
        <name>BAffineTransform</name>
        <qualifiedname>BAffineTransform::BAffineTransform</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>copyFrom</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copyFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1aa3c9494e63680fe9cc692d16f907c392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAffineTransform::BAffineTransform</definition>
        <argsstring>(double sx, double shy, double shx, double sy, double tx, double ty)</argsstring>
        <name>BAffineTransform</name>
        <qualifiedname>BAffineTransform::BAffineTransform</qualifiedname>
        <param>
          <type>double</type>
          <declname>sx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sx</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shy</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shx</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sy</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ty</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a9af30520454fc48099b36850c5c1948d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BAffineTransform::~BAffineTransform</definition>
        <argsstring>()</argsstring>
        <name>~BAffineTransform</name>
        <qualifiedname>BAffineTransform::~BAffineTransform</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="49" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a1ea1c5d9cca7af61f3cf792140bdf34c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::Apply</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>Apply</name>
        <qualifiedname>BAffineTransform::Apply</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="74" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ac766d07792d4d3d387203f8b66d18335" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::Apply</definition>
        <argsstring>(BPoint *points, uint32 count) const</argsstring>
        <name>Apply</name>
        <qualifiedname>BAffineTransform::Apply</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1abb12f3465e5fce1dff2cf96a63da21c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BAffineTransform::Apply</definition>
        <argsstring>(const BPoint &amp;point) const</argsstring>
        <name>Apply</name>
        <qualifiedname>BAffineTransform::Apply</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="71" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::Apply</definition>
        <argsstring>(double *x, double *y) const</argsstring>
        <name>Apply</name>
        <qualifiedname>BAffineTransform::Apply</qualifiedname>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="68" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="222" bodyend="227"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ad1e4804e9c0dc94cbab2021bf7d1c6bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::ApplyInverse</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>ApplyInverse</name>
        <qualifiedname>BAffineTransform::ApplyInverse</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="75" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a7684ddcd84de76c1756a993bb93134a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::ApplyInverse</definition>
        <argsstring>(BPoint *points, uint32 count) const</argsstring>
        <name>ApplyInverse</name>
        <qualifiedname>BAffineTransform::ApplyInverse</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="78" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a476f8bc5509bcd03a0051f593db83a33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BAffineTransform::ApplyInverse</definition>
        <argsstring>(const BPoint &amp;point) const</argsstring>
        <name>ApplyInverse</name>
        <qualifiedname>BAffineTransform::ApplyInverse</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="72" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::ApplyInverse</definition>
        <argsstring>(double *x, double *y) const</argsstring>
        <name>ApplyInverse</name>
        <qualifiedname>BAffineTransform::ApplyInverse</qualifiedname>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="69" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="231" bodyend="238"/>
        <references refid="classBAffineTransform_1ae1847cda27427323d6d4635f97c1d993" compoundref="AffineTransform_8h" startline="449" endline="452">InverseDeterminant</references>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ae53ecb58adc270f614dbc8aeb852ef61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double BAffineTransform::Determinant</definition>
        <argsstring>() const</argsstring>
        <name>Determinant</name>
        <qualifiedname>BAffineTransform::Determinant</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="191" column="13" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="442" bodyend="445"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a8e9004914c3d7ac7ddb16d866cab918e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAffineTransform::Flatten</definition>
        <argsstring>(void *buffer, ssize_t size) const</argsstring>
        <name>Flatten</name>
        <qualifiedname>BAffineTransform::Flatten</qualifiedname>
        <reimplements refid="classBFlattenable_1ab934b64a8b218a4f9078ded191be6fbb">Flatten</reimplements>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="55" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a5ee0a422598727d1653c06d6769a26f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BAffineTransform::FlattenedSize</definition>
        <argsstring>() const</argsstring>
        <name>FlattenedSize</name>
        <qualifiedname>BAffineTransform::FlattenedSize</qualifiedname>
        <reimplements refid="classBFlattenable_1a9b5885d4454326ca448438960ecff466">FlattenedSize</reimplements>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="54" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ade8105273168ef46f16c28cdbe3b8baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::FlipX</definition>
        <argsstring>()</argsstring>
        <name>FlipX</name>
        <qualifiedname>BAffineTransform::FlipX</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="187" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ab9dff3a291e50ebc8262e1ebe2e57c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::FlipY</definition>
        <argsstring>()</argsstring>
        <name>FlipY</name>
        <qualifiedname>BAffineTransform::FlipY</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="188" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1af2a621be6de8415725a86ba818830e1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::GetAffineParameters</definition>
        <argsstring>(double *translationX, double *translationY, double *rotation, double *scaleX, double *scaleY, double *shearX, double *shearY) const</argsstring>
        <name>GetAffineParameters</name>
        <qualifiedname>BAffineTransform::GetAffineParameters</qualifiedname>
        <param>
          <type>double *</type>
          <declname>translationX</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>translationY</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>scaleX</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>scaleY</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>shearX</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>shearY</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>translationX</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>translationY</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleX</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleY</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shearX</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shearY</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="200" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1aac76e19af9104c7dbfb6f22b1e491396" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::GetScale</definition>
        <argsstring>(double *sx, double *sy) const</argsstring>
        <name>GetScale</name>
        <qualifiedname>BAffineTransform::GetScale</qualifiedname>
        <param>
          <type>double *</type>
          <declname>sx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sy</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sx</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sy</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="197" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a092dafbbb4e0a44ef5b6f34404cea8fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::GetScaleAbs</definition>
        <argsstring>(double *sx, double *sy) const</argsstring>
        <name>GetScaleAbs</name>
        <qualifiedname>BAffineTransform::GetScaleAbs</qualifiedname>
        <param>
          <type>double *</type>
          <declname>sx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sy</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sx</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sy</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="198" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ac8259e1870d615df3aca0982df66e6c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAffineTransform::GetTranslation</definition>
        <argsstring>(double *tx, double *ty) const</argsstring>
        <name>GetTranslation</name>
        <qualifiedname>BAffineTransform::GetTranslation</qualifiedname>
        <param>
          <type>double *</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ty</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ty</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="193" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ae1847cda27427323d6d4635f97c1d993" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double BAffineTransform::InverseDeterminant</definition>
        <argsstring>() const</argsstring>
        <name>InverseDeterminant</name>
        <qualifiedname>BAffineTransform::InverseDeterminant</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="192" column="13" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="449" bodyend="452"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <referencedby refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" compoundref="AffineTransform_8h" startline="231" endline="238">ApplyInverse</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a314a95ed4eae3167e0f4e918bb602678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::Invert</definition>
        <argsstring>()</argsstring>
        <name>Invert</name>
        <qualifiedname>BAffineTransform::Invert</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="186" column="23"/>
        <referencedby refid="classBAffineTransform_1a9e9793223eda0ab6ff25c9d43aa004c2" compoundref="AffineTransform_8h" startline="357" endline="362">MultiplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1a2bddbfbfc45c2f182b5fddff87ea83e5" compoundref="AffineTransform_8h" startline="431" endline="435">operator~</referencedby>
        <referencedby refid="classBAffineTransform_1abbb4eb0d6f98afe3f3549dfda385fb50" compoundref="AffineTransform_8h" startline="366" endline="371">PreMultiplyInverse</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a68315d0bd302b6a2dc88eff1b3928264" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::IsDilation</definition>
        <argsstring>(double epsilon=kDefaultEpsilon) const</argsstring>
        <name>IsDilation</name>
        <qualifiedname>BAffineTransform::IsDilation</qualifiedname>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval><ref refid="classBAffineTransform_1a3c001ed01b4cf15e42832b5f10a088fc" kindref="member">kDefaultEpsilon</ref></defval>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="180" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ab2d8b9f353d23c2396f4d78a30f7f662" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::IsEqual</definition>
        <argsstring>(const BAffineTransform &amp;other, double epsilon=kDefaultEpsilon) const</argsstring>
        <name>IsEqual</name>
        <qualifiedname>BAffineTransform::IsEqual</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval><ref refid="classBAffineTransform_1a3c001ed01b4cf15e42832b5f10a088fc" kindref="member">kDefaultEpsilon</ref></defval>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="182" column="5"/>
        <referencedby refid="classBAffineTransform_1a23a0ec59f04809146dfe9ffe34ce3edf" compoundref="AffineTransform_8h" startline="396" endline="399">operator!=</referencedby>
        <referencedby refid="classBAffineTransform_1ae52aa29f15e4525bf0000f01ba8731ac" compoundref="AffineTransform_8h" startline="390" endline="393">operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ac4b8ff09ab94c925d2f6e068b945bf4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::IsFixedSize</definition>
        <argsstring>() const</argsstring>
        <name>IsFixedSize</name>
        <qualifiedname>BAffineTransform::IsFixedSize</qualifiedname>
        <reimplements refid="classBFlattenable_1ac019f502749a0cc78082f5ec7c8f5b56">IsFixedSize</reimplements>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="52" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a037dddc4193a48ff8c27d1654b2325ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::IsIdentity</definition>
        <argsstring>(double epsilon=kDefaultEpsilon) const</argsstring>
        <name>IsIdentity</name>
        <qualifiedname>BAffineTransform::IsIdentity</qualifiedname>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval><ref refid="classBAffineTransform_1a3c001ed01b4cf15e42832b5f10a088fc" kindref="member">kDefaultEpsilon</ref></defval>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="178" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a43501ac1ea3dfddcbe3e0316583e3073" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::IsValid</definition>
        <argsstring>(double epsilon=kDefaultEpsilon) const</argsstring>
        <name>IsValid</name>
        <qualifiedname>BAffineTransform::IsValid</qualifiedname>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval><ref refid="classBAffineTransform_1a3c001ed01b4cf15e42832b5f10a088fc" kindref="member">kDefaultEpsilon</ref></defval>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="176" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ab9c4342d106d131da6ae68bb0221e18e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::Multiply</definition>
        <argsstring>(const BAffineTransform &amp;other)</argsstring>
        <name>Multiply</name>
        <qualifiedname>BAffineTransform::Multiply</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="149" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="349" bodyend="353"/>
        <references refid="classBAffineTransform_1a7ce88697f485af7b0ca7d6435d98489a">PreMultiply</references>
        <referencedby refid="classBAffineTransform_1a9e9793223eda0ab6ff25c9d43aa004c2" compoundref="AffineTransform_8h" startline="357" endline="362">MultiplyInverse</referencedby>
        <referencedby refid="classBAffineTransform_1a042a08b8c104bcbd6c1a2aada58fcbd5" compoundref="AffineTransform_8h" startline="403" endline="406">operator*=</referencedby>
        <referencedby refid="classBAffineTransform_1abbb4eb0d6f98afe3f3549dfda385fb50" compoundref="AffineTransform_8h" startline="366" endline="371">PreMultiplyInverse</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a9e9793223eda0ab6ff25c9d43aa004c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::MultiplyInverse</definition>
        <argsstring>(const BAffineTransform &amp;other)</argsstring>
        <name>MultiplyInverse</name>
        <qualifiedname>BAffineTransform::MultiplyInverse</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="151" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="357" bodyend="362"/>
        <references refid="classBAffineTransform_1a314a95ed4eae3167e0f4e918bb602678">Invert</references>
        <references refid="classBAffineTransform_1ab9c4342d106d131da6ae68bb0221e18e" compoundref="AffineTransform_8h" startline="349" endline="353">Multiply</references>
        <referencedby refid="classBAffineTransform_1a6570653cc8f5af3ab47a500725635dd6" compoundref="AffineTransform_8h" startline="410" endline="413">operator/=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a23a0ec59f04809146dfe9ffe34ce3edf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::operator!=</definition>
        <argsstring>(const BAffineTransform &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BAffineTransform::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="162" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="396" bodyend="399"/>
        <references refid="classBAffineTransform_1ab2d8b9f353d23c2396f4d78a30f7f662">IsEqual</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a7c625a1d0e1920218240f5f04bab0f53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::operator*</definition>
        <argsstring>(const BAffineTransform &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>BAffineTransform::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="168" column="23" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="417" bodyend="420"/>
        <references refid="classBAffineTransform_1ad25069639f485a0565c3bcdc22f9e75e">BAffineTransform</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a042a08b8c104bcbd6c1a2aada58fcbd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::operator*=</definition>
        <argsstring>(const BAffineTransform &amp;other)</argsstring>
        <name>operator*=</name>
        <qualifiedname>BAffineTransform::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="165" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="403" bodyend="406"/>
        <references refid="classBAffineTransform_1ab9c4342d106d131da6ae68bb0221e18e" compoundref="AffineTransform_8h" startline="349" endline="353">Multiply</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a1bb302fa4699269d0c544aea5a083f76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::operator/</definition>
        <argsstring>(const BAffineTransform &amp;other) const</argsstring>
        <name>operator/</name>
        <qualifiedname>BAffineTransform::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="170" column="23" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="424" bodyend="427"/>
        <references refid="classBAffineTransform_1ad25069639f485a0565c3bcdc22f9e75e">BAffineTransform</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a6570653cc8f5af3ab47a500725635dd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::operator/=</definition>
        <argsstring>(const BAffineTransform &amp;other)</argsstring>
        <name>operator/=</name>
        <qualifiedname>BAffineTransform::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="166" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="410" bodyend="413"/>
        <references refid="classBAffineTransform_1a9e9793223eda0ab6ff25c9d43aa004c2" compoundref="AffineTransform_8h" startline="357" endline="362">MultiplyInverse</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>BAffineTransform &amp; BAffineTransform::operator=</definition>
        <argsstring>(const BAffineTransform &amp;copyFrom)</argsstring>
        <name>operator=</name>
        <qualifiedname>BAffineTransform::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>copyFrom</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copyFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="157" column="23" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="378" bodyend="387"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1ae52aa29f15e4525bf0000f01ba8731ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAffineTransform::operator==</definition>
        <argsstring>(const BAffineTransform &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BAffineTransform::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="160" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="390" bodyend="393"/>
        <references refid="classBAffineTransform_1ab2d8b9f353d23c2396f4d78a30f7f662">IsEqual</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a2bddbfbfc45c2f182b5fddff87ea83e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::operator~</definition>
        <argsstring>() const</argsstring>
        <name>operator~</name>
        <qualifiedname>BAffineTransform::operator~</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="173" column="23" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="431" bodyend="435"/>
        <references refid="classBAffineTransform_1a314a95ed4eae3167e0f4e918bb602678">Invert</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a7ce88697f485af7b0ca7d6435d98489a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::PreMultiply</definition>
        <argsstring>(const BAffineTransform &amp;other)</argsstring>
        <name>PreMultiply</name>
        <qualifiedname>BAffineTransform::PreMultiply</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="150" column="23"/>
        <referencedby refid="classBAffineTransform_1ab9c4342d106d131da6ae68bb0221e18e" compoundref="AffineTransform_8h" startline="349" endline="353">Multiply</referencedby>
        <referencedby refid="classBAffineTransform_1af2010ac85b19bd022b9167dacf5b3319" compoundref="AffineTransform_8h" startline="338" endline="342">ShearBy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1abbb4eb0d6f98afe3f3549dfda385fb50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::PreMultiplyInverse</definition>
        <argsstring>(const BAffineTransform &amp;other)</argsstring>
        <name>PreMultiplyInverse</name>
        <qualifiedname>BAffineTransform::PreMultiplyInverse</qualifiedname>
        <param>
          <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="153" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="366" bodyend="371"/>
        <references refid="classBAffineTransform_1a314a95ed4eae3167e0f4e918bb602678">Invert</references>
        <references refid="classBAffineTransform_1ab9c4342d106d131da6ae68bb0221e18e" compoundref="AffineTransform_8h" startline="349" endline="353">Multiply</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a0a0889c583b7b842e2825a6bcf341178" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::PreRotateBy</definition>
        <argsstring>(double angleRadians)</argsstring>
        <name>PreRotateBy</name>
        <qualifiedname>BAffineTransform::PreRotateBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>angleRadians</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angleRadians</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="97" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="281" bodyend="292"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1abccb7b3b9fcb18b013bb91e10b8fecb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::PreScaleBy</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>PreScaleBy</name>
        <qualifiedname>BAffineTransform::PreScaleBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="116" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="327" bodyend="334"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::PreTranslateBy</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>PreTranslateBy</name>
        <qualifiedname>BAffineTransform::PreTranslateBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="85" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="254" bodyend="259"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a6379c31371e17a60efcdb1fcf4d0cd0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <qualifiedname>BAffineTransform::Reset</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="189" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a6b5f38552384b104abbee55ca3fc64fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::RotateBy</definition>
        <argsstring>(const BPoint &amp;center, double angle)</argsstring>
        <name>RotateBy</name>
        <qualifiedname>BAffineTransform::RotateBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="94" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::RotateBy</definition>
        <argsstring>(double angle)</argsstring>
        <name>RotateBy</name>
        <qualifiedname>BAffineTransform::RotateBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="93" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="263" bodyend="277"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a66d5104f6e5d1115600ac87d32303ab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::RotateByCopy</definition>
        <argsstring>(const BPoint &amp;center, double angle) const</argsstring>
        <name>RotateByCopy</name>
        <qualifiedname>BAffineTransform::RotateByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="100" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a34718366aee4a6488e902085ce47fab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::RotateByCopy</definition>
        <argsstring>(double angle) const</argsstring>
        <name>RotateByCopy</name>
        <qualifiedname>BAffineTransform::RotateByCopy</qualifiedname>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="99" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1af0b8dde4fe97c5941ecaab2a9f6bf917" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BAffineTransform::Rotation</definition>
        <argsstring>() const</argsstring>
        <name>Rotation</name>
        <qualifiedname>BAffineTransform::Rotation</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="195" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a8d5da80b595e51e4e038f3def93bbbb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BAffineTransform::Scale</definition>
        <argsstring>() const</argsstring>
        <name>Scale</name>
        <qualifiedname>BAffineTransform::Scale</qualifiedname>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="196" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1abef04ce969c13794cdf06c76567a8c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ScaleBy</definition>
        <argsstring>(const BPoint &amp;center, const BPoint &amp;scale)</argsstring>
        <name>ScaleBy</name>
        <qualifiedname>BAffineTransform::ScaleBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="113" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1abb2b2e4909d63bea13fbb7aa835ab007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ScaleBy</definition>
        <argsstring>(const BPoint &amp;center, double scale)</argsstring>
        <name>ScaleBy</name>
        <qualifiedname>BAffineTransform::ScaleBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="107" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1aa9653d485aea3db033c466d06cd4671a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ScaleBy</definition>
        <argsstring>(const BPoint &amp;center, double x, double y)</argsstring>
        <name>ScaleBy</name>
        <qualifiedname>BAffineTransform::ScaleBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="110" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1abce1c40531fbdd408a1be256b73d034c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ScaleBy</definition>
        <argsstring>(const BPoint &amp;scale)</argsstring>
        <name>ScaleBy</name>
        <qualifiedname>BAffineTransform::ScaleBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="112" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1adfa3e0a962a14bc69eb80c8737e61159" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ScaleBy</definition>
        <argsstring>(double scale)</argsstring>
        <name>ScaleBy</name>
        <qualifiedname>BAffineTransform::ScaleBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="106" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="312" bodyend="323"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ScaleBy</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>ScaleBy</name>
        <qualifiedname>BAffineTransform::ScaleBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="109" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="296" bodyend="308"/>
        <references refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" compoundref="AffineTransform_8h" startline="208">shx</references>
        <references refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" compoundref="AffineTransform_8h" startline="207">shy</references>
        <references refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" compoundref="AffineTransform_8h" startline="206">sx</references>
        <references refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" compoundref="AffineTransform_8h" startline="209">sy</references>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a712fd6053edeb1d293bc937f28e3729d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ScaleByCopy</definition>
        <argsstring>(const BPoint &amp;center, const BPoint &amp;scale) const</argsstring>
        <name>ScaleByCopy</name>
        <qualifiedname>BAffineTransform::ScaleByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="125" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a5b8af3306ee95bba9e2025de3df61aaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ScaleByCopy</definition>
        <argsstring>(const BPoint &amp;center, double scale) const</argsstring>
        <name>ScaleByCopy</name>
        <qualifiedname>BAffineTransform::ScaleByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="119" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a26c8cd7aae20955195ee7fe8324e6299" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ScaleByCopy</definition>
        <argsstring>(const BPoint &amp;center, double x, double y) const</argsstring>
        <name>ScaleByCopy</name>
        <qualifiedname>BAffineTransform::ScaleByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="122" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a51fb9330cc2c3dd9a960582970bf888a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ScaleByCopy</definition>
        <argsstring>(const BPoint &amp;scale) const</argsstring>
        <name>ScaleByCopy</name>
        <qualifiedname>BAffineTransform::ScaleByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="124" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a44efc24c5735a09de5dd2c22fdf08928" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ScaleByCopy</definition>
        <argsstring>(double scale) const</argsstring>
        <name>ScaleByCopy</name>
        <qualifiedname>BAffineTransform::ScaleByCopy</qualifiedname>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="118" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1abd46e0e45070bce7242eb64e3b58befb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ScaleByCopy</definition>
        <argsstring>(double x, double y) const</argsstring>
        <name>ScaleByCopy</name>
        <qualifiedname>BAffineTransform::ScaleByCopy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="121" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a069399a3dafbce032c426d2ed69addad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::SetScale</definition>
        <argsstring>(double scale)</argsstring>
        <name>SetScale</name>
        <qualifiedname>BAffineTransform::SetScale</qualifiedname>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="128" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a5b1e201787bb7df0fecaabe5b4872a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::SetScale</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>SetScale</name>
        <qualifiedname>BAffineTransform::SetScale</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="129" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a8db5e3f742c8b4c2c48d787aad712be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ShearBy</definition>
        <argsstring>(const BPoint &amp;center, const BPoint &amp;shear)</argsstring>
        <name>ShearBy</name>
        <qualifiedname>BAffineTransform::ShearBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>shear</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shear</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="136" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a933508f009cedee118c716e754ee4821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ShearBy</definition>
        <argsstring>(const BPoint &amp;center, double x, double y)</argsstring>
        <name>ShearBy</name>
        <qualifiedname>BAffineTransform::ShearBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="133" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1afc667d00cda4b82971d6b2e1e02a53fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ShearBy</definition>
        <argsstring>(const BPoint &amp;shear)</argsstring>
        <name>ShearBy</name>
        <qualifiedname>BAffineTransform::ShearBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>shear</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shear</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="135" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1af2010ac85b19bd022b9167dacf5b3319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::ShearBy</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>ShearBy</name>
        <qualifiedname>BAffineTransform::ShearBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="132" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="338" bodyend="342"/>
        <references refid="classBAffineTransform_1af8084f233f00df42bfbaeb59bc3a597d">AffineShearing</references>
        <references refid="classBAffineTransform_1a7ce88697f485af7b0ca7d6435d98489a">PreMultiply</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a1f4dbcc27ab3b2d02dd90a0b42269ac0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ShearByCopy</definition>
        <argsstring>(const BPoint &amp;center, const BPoint &amp;shear) const</argsstring>
        <name>ShearByCopy</name>
        <qualifiedname>BAffineTransform::ShearByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>shear</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shear</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="143" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1acbb1d202cb69593acdf1c005b1da0d08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ShearByCopy</definition>
        <argsstring>(const BPoint &amp;center, double x, double y) const</argsstring>
        <name>ShearByCopy</name>
        <qualifiedname>BAffineTransform::ShearByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="140" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a33431425e5060fac980351f79fbef2b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ShearByCopy</definition>
        <argsstring>(const BPoint &amp;shear) const</argsstring>
        <name>ShearByCopy</name>
        <qualifiedname>BAffineTransform::ShearByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>shear</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shear</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="142" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1affd22f7f7545724642c5d80eddf87e56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::ShearByCopy</definition>
        <argsstring>(double x, double y) const</argsstring>
        <name>ShearByCopy</name>
        <qualifiedname>BAffineTransform::ShearByCopy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="139" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a6e8f17e42cf26c3c263ad6fa142952e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::TranslateBy</definition>
        <argsstring>(const BPoint &amp;delta)</argsstring>
        <name>TranslateBy</name>
        <qualifiedname>BAffineTransform::TranslateBy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="83" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a472101df3b3a7e45d6393044949c2e54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> &amp;</type>
        <definition>const BAffineTransform &amp; BAffineTransform::TranslateBy</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>TranslateBy</name>
        <qualifiedname>BAffineTransform::TranslateBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="82" column="29" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="245" bodyend="250"/>
        <references refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" compoundref="AffineTransform_8h" startline="210">tx</references>
        <references refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" compoundref="AffineTransform_8h" startline="211">ty</references>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a09e1278f7f8051f7d27b08da3a6f56f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::TranslateByCopy</definition>
        <argsstring>(const BPoint &amp;delta) const</argsstring>
        <name>TranslateByCopy</name>
        <qualifiedname>BAffineTransform::TranslateByCopy</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="88" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1aa206f5321cb3f2be1b0a412d09fc42bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BAffineTransform::TranslateByCopy</definition>
        <argsstring>(double x, double y) const</argsstring>
        <name>TranslateByCopy</name>
        <qualifiedname>BAffineTransform::TranslateByCopy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="87" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a8b6a0f6bc9f1999f1f4a4e5a17610958" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
        <definition>type_code BAffineTransform::TypeCode</definition>
        <argsstring>() const</argsstring>
        <name>TypeCode</name>
        <qualifiedname>BAffineTransform::TypeCode</qualifiedname>
        <reimplements refid="classBFlattenable_1a819507fa1b0906f14299db15f6e990d1">TypeCode</reimplements>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="53" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a00b1c34cc0b696e14fb233f3ad74212f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAffineTransform::Unflatten</definition>
        <argsstring>(type_code code, const void *buffer, ssize_t size)</argsstring>
        <name>Unflatten</name>
        <qualifiedname>BAffineTransform::Unflatten</qualifiedname>
        <reimplements refid="classBFlattenable_1a41e7168574912690be159991d2b07a97">Unflatten</reimplements>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="57" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBAffineTransform_1a95f0f60c7a2fee4773ffdaeaf171ef4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>static static BAffineTransform BAffineTransform::AffineRotation</definition>
        <argsstring>(double angle)</argsstring>
        <name>AffineRotation</name>
        <qualifiedname>BAffineTransform::AffineRotation</qualifiedname>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="62" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1afad1577545cf952d96e48a42ed22346e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>static static BAffineTransform BAffineTransform::AffineScaling</definition>
        <argsstring>(double scale)</argsstring>
        <name>AffineScaling</name>
        <qualifiedname>BAffineTransform::AffineScaling</qualifiedname>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="64" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a355ff0769afed044f9d01652836534c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>static static BAffineTransform BAffineTransform::AffineScaling</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>AffineScaling</name>
        <qualifiedname>BAffineTransform::AffineScaling</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="63" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1af8084f233f00df42bfbaeb59bc3a597d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>static static BAffineTransform BAffineTransform::AffineShearing</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>AffineShearing</name>
        <qualifiedname>BAffineTransform::AffineShearing</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="65" column="23"/>
        <referencedby refid="classBAffineTransform_1af2010ac85b19bd022b9167dacf5b3319" compoundref="AffineTransform_8h" startline="338" endline="342">ShearBy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBAffineTransform_1a9bcad861f87068ae1bac663452507fea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>static static BAffineTransform BAffineTransform::AffineTranslation</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>AffineTranslation</name>
        <qualifiedname>BAffineTransform::AffineTranslation</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Undocumented public method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Undocumented </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;value&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Undocumented</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="61" column="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Undocumented class. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BAffineTransform</label>
        <link refid="classBAffineTransform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BAffineTransform</label>
        <link refid="classBAffineTransform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" line="33" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/AffineTransform.h" bodystart="33" bodyend="212"/>
    <listofallmembers>
      <member refid="classBAffineTransform_1a95f0f60c7a2fee4773ffdaeaf171ef4e" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>AffineRotation</name></member>
      <member refid="classBAffineTransform_1a355ff0769afed044f9d01652836534c7" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>AffineScaling</name></member>
      <member refid="classBAffineTransform_1afad1577545cf952d96e48a42ed22346e" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>AffineScaling</name></member>
      <member refid="classBAffineTransform_1af8084f233f00df42bfbaeb59bc3a597d" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>AffineShearing</name></member>
      <member refid="classBAffineTransform_1a9bcad861f87068ae1bac663452507fea" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>AffineTranslation</name></member>
      <member refid="classBFlattenable_1a30165696bba76fed10e37508cc4f6925" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>AllowsTypeCode</name></member>
      <member refid="classBAffineTransform_1a25faa18c510133c835a8d403bfcd4e8d" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Apply</name></member>
      <member refid="classBAffineTransform_1abb12f3465e5fce1dff2cf96a63da21c6" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Apply</name></member>
      <member refid="classBAffineTransform_1a1ea1c5d9cca7af61f3cf792140bdf34c" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Apply</name></member>
      <member refid="classBAffineTransform_1ac766d07792d4d3d387203f8b66d18335" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Apply</name></member>
      <member refid="classBAffineTransform_1a57e6fd4979a2e72ee6edd6de34c88862" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ApplyInverse</name></member>
      <member refid="classBAffineTransform_1a476f8bc5509bcd03a0051f593db83a33" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ApplyInverse</name></member>
      <member refid="classBAffineTransform_1ad1e4804e9c0dc94cbab2021bf7d1c6bf" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ApplyInverse</name></member>
      <member refid="classBAffineTransform_1a7684ddcd84de76c1756a993bb93134a8" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ApplyInverse</name></member>
      <member refid="classBAffineTransform_1ad25069639f485a0565c3bcdc22f9e75e" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>BAffineTransform</name></member>
      <member refid="classBAffineTransform_1aa3c9494e63680fe9cc692d16f907c392" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>BAffineTransform</name></member>
      <member refid="classBAffineTransform_1a5a53a6fbc72aea554bf53fce207aefba" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>BAffineTransform</name></member>
      <member refid="classBAffineTransform_1ae53ecb58adc270f614dbc8aeb852ef61" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Determinant</name></member>
      <member refid="classBAffineTransform_1a8e9004914c3d7ac7ddb16d866cab918e" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>Flatten</name></member>
      <member refid="classBAffineTransform_1a5ee0a422598727d1653c06d6769a26f9" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>FlattenedSize</name></member>
      <member refid="classBAffineTransform_1ade8105273168ef46f16c28cdbe3b8baf" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>FlipX</name></member>
      <member refid="classBAffineTransform_1ab9dff3a291e50ebc8262e1ebe2e57c03" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>FlipY</name></member>
      <member refid="classBAffineTransform_1af2a621be6de8415725a86ba818830e1e" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>GetAffineParameters</name></member>
      <member refid="classBAffineTransform_1aac76e19af9104c7dbfb6f22b1e491396" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>GetScale</name></member>
      <member refid="classBAffineTransform_1a092dafbbb4e0a44ef5b6f34404cea8fd" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>GetScaleAbs</name></member>
      <member refid="classBAffineTransform_1ac8259e1870d615df3aca0982df66e6c2" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>GetTranslation</name></member>
      <member refid="classBAffineTransform_1ae1847cda27427323d6d4635f97c1d993" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>InverseDeterminant</name></member>
      <member refid="classBAffineTransform_1a314a95ed4eae3167e0f4e918bb602678" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Invert</name></member>
      <member refid="classBAffineTransform_1a68315d0bd302b6a2dc88eff1b3928264" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>IsDilation</name></member>
      <member refid="classBAffineTransform_1ab2d8b9f353d23c2396f4d78a30f7f662" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>IsEqual</name></member>
      <member refid="classBAffineTransform_1ac4b8ff09ab94c925d2f6e068b945bf4b" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>IsFixedSize</name></member>
      <member refid="classBAffineTransform_1a037dddc4193a48ff8c27d1654b2325ec" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>IsIdentity</name></member>
      <member refid="classBAffineTransform_1a43501ac1ea3dfddcbe3e0316583e3073" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>IsValid</name></member>
      <member refid="classBAffineTransform_1a3c001ed01b4cf15e42832b5f10a088fc" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>kDefaultEpsilon</name></member>
      <member refid="classBAffineTransform_1ab9c4342d106d131da6ae68bb0221e18e" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Multiply</name></member>
      <member refid="classBAffineTransform_1a9e9793223eda0ab6ff25c9d43aa004c2" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>MultiplyInverse</name></member>
      <member refid="classBAffineTransform_1a23a0ec59f04809146dfe9ffe34ce3edf" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator!=</name></member>
      <member refid="classBAffineTransform_1a7c625a1d0e1920218240f5f04bab0f53" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator*</name></member>
      <member refid="classBAffineTransform_1a042a08b8c104bcbd6c1a2aada58fcbd5" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator*=</name></member>
      <member refid="classBAffineTransform_1a1bb302fa4699269d0c544aea5a083f76" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator/</name></member>
      <member refid="classBAffineTransform_1a6570653cc8f5af3ab47a500725635dd6" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator/=</name></member>
      <member refid="classBAffineTransform_1a4c53dc8ffbf3959419ac838e1a7ab840" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator=</name></member>
      <member refid="classBAffineTransform_1ae52aa29f15e4525bf0000f01ba8731ac" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator==</name></member>
      <member refid="classBAffineTransform_1a2bddbfbfc45c2f182b5fddff87ea83e5" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>operator~</name></member>
      <member refid="classBAffineTransform_1a7ce88697f485af7b0ca7d6435d98489a" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>PreMultiply</name></member>
      <member refid="classBAffineTransform_1abbb4eb0d6f98afe3f3549dfda385fb50" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>PreMultiplyInverse</name></member>
      <member refid="classBAffineTransform_1a0a0889c583b7b842e2825a6bcf341178" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>PreRotateBy</name></member>
      <member refid="classBAffineTransform_1abccb7b3b9fcb18b013bb91e10b8fecb2" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>PreScaleBy</name></member>
      <member refid="classBAffineTransform_1add03988f06209700da7b92b8e3b8d915" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>PreTranslateBy</name></member>
      <member refid="classBAffineTransform_1a6379c31371e17a60efcdb1fcf4d0cd0c" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Reset</name></member>
      <member refid="classBAffineTransform_1a789ff2d5272214339d0dd4b93208ebb8" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>RotateBy</name></member>
      <member refid="classBAffineTransform_1a6b5f38552384b104abbee55ca3fc64fb" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>RotateBy</name></member>
      <member refid="classBAffineTransform_1a34718366aee4a6488e902085ce47fab2" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>RotateByCopy</name></member>
      <member refid="classBAffineTransform_1a66d5104f6e5d1115600ac87d32303ab2" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>RotateByCopy</name></member>
      <member refid="classBAffineTransform_1af0b8dde4fe97c5941ecaab2a9f6bf917" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Rotation</name></member>
      <member refid="classBAffineTransform_1a8d5da80b595e51e4e038f3def93bbbb7" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>Scale</name></member>
      <member refid="classBAffineTransform_1adfa3e0a962a14bc69eb80c8737e61159" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleBy</name></member>
      <member refid="classBAffineTransform_1abb2b2e4909d63bea13fbb7aa835ab007" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleBy</name></member>
      <member refid="classBAffineTransform_1a3c1dce80ba28d91644fa749f2406a391" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleBy</name></member>
      <member refid="classBAffineTransform_1aa9653d485aea3db033c466d06cd4671a" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleBy</name></member>
      <member refid="classBAffineTransform_1abce1c40531fbdd408a1be256b73d034c" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleBy</name></member>
      <member refid="classBAffineTransform_1abef04ce969c13794cdf06c76567a8c9a" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleBy</name></member>
      <member refid="classBAffineTransform_1a44efc24c5735a09de5dd2c22fdf08928" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleByCopy</name></member>
      <member refid="classBAffineTransform_1a5b8af3306ee95bba9e2025de3df61aaa" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleByCopy</name></member>
      <member refid="classBAffineTransform_1abd46e0e45070bce7242eb64e3b58befb" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleByCopy</name></member>
      <member refid="classBAffineTransform_1a26c8cd7aae20955195ee7fe8324e6299" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleByCopy</name></member>
      <member refid="classBAffineTransform_1a51fb9330cc2c3dd9a960582970bf888a" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleByCopy</name></member>
      <member refid="classBAffineTransform_1a712fd6053edeb1d293bc937f28e3729d" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ScaleByCopy</name></member>
      <member refid="classBAffineTransform_1a069399a3dafbce032c426d2ed69addad" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>SetScale</name></member>
      <member refid="classBAffineTransform_1a5b1e201787bb7df0fecaabe5b4872a5f" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>SetScale</name></member>
      <member refid="classBAffineTransform_1af2010ac85b19bd022b9167dacf5b3319" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearBy</name></member>
      <member refid="classBAffineTransform_1a933508f009cedee118c716e754ee4821" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearBy</name></member>
      <member refid="classBAffineTransform_1afc667d00cda4b82971d6b2e1e02a53fa" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearBy</name></member>
      <member refid="classBAffineTransform_1a8db5e3f742c8b4c2c48d787aad712be8" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearBy</name></member>
      <member refid="classBAffineTransform_1affd22f7f7545724642c5d80eddf87e56" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearByCopy</name></member>
      <member refid="classBAffineTransform_1acbb1d202cb69593acdf1c005b1da0d08" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearByCopy</name></member>
      <member refid="classBAffineTransform_1a33431425e5060fac980351f79fbef2b0" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearByCopy</name></member>
      <member refid="classBAffineTransform_1a1f4dbcc27ab3b2d02dd90a0b42269ac0" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ShearByCopy</name></member>
      <member refid="classBAffineTransform_1ac0507ae12b487272cb2f6b8baec8f20f" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>shx</name></member>
      <member refid="classBAffineTransform_1a0383bca21bed077dc84747b57d46b333" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>shy</name></member>
      <member refid="classBAffineTransform_1a6f42e6d417bca34c5d9c4adc71544190" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>sx</name></member>
      <member refid="classBAffineTransform_1a4c03a79455e12d228e8d062e32dc6dc7" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>sy</name></member>
      <member refid="classBAffineTransform_1a472101df3b3a7e45d6393044949c2e54" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>TranslateBy</name></member>
      <member refid="classBAffineTransform_1a6e8f17e42cf26c3c263ad6fa142952e7" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>TranslateBy</name></member>
      <member refid="classBAffineTransform_1aa206f5321cb3f2be1b0a412d09fc42bc" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>TranslateByCopy</name></member>
      <member refid="classBAffineTransform_1a09e1278f7f8051f7d27b08da3a6f56f5" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>TranslateByCopy</name></member>
      <member refid="classBAffineTransform_1a2ea11bc896b815ffaa81abf9f1035e17" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>tx</name></member>
      <member refid="classBAffineTransform_1a13fe20ce5797799cc9dc3eaea5d18760" prot="public" virt="non-virtual"><scope>BAffineTransform</scope><name>ty</name></member>
      <member refid="classBAffineTransform_1a8b6a0f6bc9f1999f1f4a4e5a17610958" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>TypeCode</name></member>
      <member refid="classBAffineTransform_1a00b1c34cc0b696e14fb233f3ad74212f" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>Unflatten</name></member>
      <member refid="classBAffineTransform_1a9af30520454fc48099b36850c5c1948d" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>~BAffineTransform</name></member>
      <member refid="classBFlattenable_1a884e130a5d27acc15b1e4e4c505157ff" prot="public" virt="virtual"><scope>BAffineTransform</scope><name>~BFlattenable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
