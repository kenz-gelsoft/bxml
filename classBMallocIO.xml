<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMallocIO" kind="class" language="C++" prot="public">
    <compoundname>BMallocIO</compoundname>
    <basecompoundref refid="classBPositionIO" prot="public" virt="non-virtual">BPositionIO</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMallocIO_1ae7127d385d0af4ae4443ae647697f522" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMallocIO::_reserved[1]</definition>
        <argsstring>[1]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMallocIO::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="162" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMallocIO_1ae2370ffafc4b9ecefc46f87a9e136296" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BMallocIO::fBlockSize</definition>
        <argsstring></argsstring>
        <name>fBlockSize</name>
        <qualifiedname>BMallocIO::fBlockSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="156" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMallocIO_1ac108240d68dc40f1552ccc4488f92d11" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BMallocIO::fData</definition>
        <argsstring></argsstring>
        <name>fData</name>
        <qualifiedname>BMallocIO::fData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="159" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMallocIO_1a6b2ac29b02bb4ddd35fcc03ce9625b83" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BMallocIO::fLength</definition>
        <argsstring></argsstring>
        <name>fLength</name>
        <qualifiedname>BMallocIO::fLength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="158" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMallocIO_1a4eec3898015ec3ccd71ed49277aa3393" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BMallocIO::fMallocSize</definition>
        <argsstring></argsstring>
        <name>fMallocSize</name>
        <qualifiedname>BMallocIO::fMallocSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="157" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMallocIO_1a6825d250c87a16bd765bc436248ff41a" prot="private" static="no" mutable="no">
        <type>off_t</type>
        <definition>off_t BMallocIO::fPosition</definition>
        <argsstring></argsstring>
        <name>fPosition</name>
        <qualifiedname>BMallocIO::fPosition</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="160" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMallocIO_1aaa22efd3d5e51d7029ab52986ae1f71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMallocIO::BMallocIO</definition>
        <argsstring>()</argsstring>
        <name>BMallocIO</name>
        <qualifiedname>BMallocIO::BMallocIO</qualifiedname>
        <briefdescription>
<para>Create a new memory buffer with block size 256. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMallocIO_1aebc7cca39f8e57f540be76c6b937061f" kindref="member">SetBlockSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1aa4a6f48404f4ffb4587c81ac26fa36e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BMallocIO::~BMallocIO</definition>
        <argsstring>()</argsstring>
        <name>~BMallocIO</name>
        <qualifiedname>BMallocIO::~BMallocIO</qualifiedname>
        <briefdescription>
<para>Destroy the object and free the internal buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="130" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1a9b8a31c564374d8289b7581d76bf2b73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * BMallocIO::Buffer</definition>
        <argsstring>() const</argsstring>
        <name>Buffer</name>
        <qualifiedname>BMallocIO::Buffer</qualifiedname>
        <briefdescription>
<para>Return a pointer to the internal buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>As with any pointer to internal buffers the Haiku API exposes, make sure you don&apos;t change anything since it doesn&apos;t belong to you.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="145" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1aaa31f36dc078f9f873679b7c4bab8167" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BMallocIO::BufferLength</definition>
        <argsstring>() const</argsstring>
        <name>BufferLength</name>
        <qualifiedname>BMallocIO::BufferLength</qualifiedname>
        <briefdescription>
<para>Return the number of bytes in the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This number doesn&apos;t have to be the same size as the buffer is. Because memory is allocated in blocks the actual size of the buffer may be greater, but this method only returns the number of bytes that are actually used.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="146" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1af007bb9933ffa65b337ed49cdf5dd42e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BMallocIO::Position</definition>
        <argsstring>() const</argsstring>
        <name>Position</name>
        <qualifiedname>BMallocIO::Position</qualifiedname>
        <reimplements refid="classBPositionIO_1a4ebc2cd7a7493767e79fa6d88657a84a">Position</reimplements>
        <briefdescription>
<para>Return the position of the cursor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="138" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1ab32620f9be85989e04da5f77f93db604" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BMallocIO::ReadAt</definition>
        <argsstring>(off_t position, void *buffer, size_t size)</argsstring>
        <name>ReadAt</name>
        <qualifiedname>BMallocIO::ReadAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a6eb7aff1d69bf3049b2b421da52fdf8f">ReadAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
          <defname>pos</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read data at a certain position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset into the data where to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to copy the read bytes in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of read bytes, or <computeroutput>B_BAD_VALUE</computeroutput> if the provided <emphasis>buffer</emphasis> is invalid.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="132" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1af15fd592a792fce67693c4181daf7a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BMallocIO::Seek</definition>
        <argsstring>(off_t position, uint32 seekMode)</argsstring>
        <name>Seek</name>
        <qualifiedname>BMallocIO::Seek</qualifiedname>
        <reimplements refid="classBPositionIO_1af8296875d9711dd498b0fbcace028abc">Seek</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>seekMode</declname>
        </param>
        <briefdescription>
<para>Move the cursor to a given position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to move the cursor to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekMode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode determines where the cursor is placed. Possibilities:<itemizedlist>
<listitem><para><computeroutput>SEEK_SET</computeroutput> The cursor is set to <emphasis>position</emphasis>.</para>
</listitem><listitem><para><computeroutput>SEEK_CUR</computeroutput> The <computeroutput>position</computeroutput> is added to the current position of the cursor.</para>
</listitem><listitem><para><computeroutput>SEEK_END</computeroutput> The cursor is put at the end of the data, plus <emphasis>position</emphasis> added to it.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new position as an off_t.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="137" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1aebc7cca39f8e57f540be76c6b937061f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMallocIO::SetBlockSize</definition>
        <argsstring>(size_t blockSize)</argsstring>
        <name>SetBlockSize</name>
        <qualifiedname>BMallocIO::SetBlockSize</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Change the block size to a certain value. </para>
        </briefdescription>
        <detaileddescription>
<para>This class allocates memory in blocks. If you are in performance-critical code you might want to tweak this setting to create a better performance in case you know you are going to allocate more than the default block size of 256.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The new block size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="143" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1ad0d175f05abea98db9fbf3754e7d5e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMallocIO::SetSize</definition>
        <argsstring>(off_t size)</argsstring>
        <name>SetSize</name>
        <qualifiedname>BMallocIO::SetSize</qualifiedname>
        <reimplements refid="classBPositionIO_1a35613c7ee06c7c9583ca2505e1fdff28">SetSize</reimplements>
        <param>
          <type>off_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Change the size of the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This method changes the size of the current buffer. If <emphasis>size</emphasis> is smaller than the current size, the data will be cleared.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Resizing the data succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed to allocate the necessary memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="140" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1aa168631c8995ac5f325b2501e222fef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BMallocIO::WriteAt</definition>
        <argsstring>(off_t position, const void *buffer, size_t size)</argsstring>
        <name>WriteAt</name>
        <qualifiedname>BMallocIO::WriteAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a0efce1a07d1d6509e8ec00598244ace1">WriteAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
          <defname>pos</defname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write data to a certain position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset into the data where to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to copy from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written or <computeroutput>B_BAD_VALUE</computeroutput> if the provided. <emphasis>buffer</emphasis> is invalid.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="134" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMallocIO_1a1d9eef2322ec8cb88a745cbd28f143bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMallocIO::BMallocIO</definition>
        <argsstring>(const BMallocIO &amp;)</argsstring>
        <name>BMallocIO</name>
        <qualifiedname>BMallocIO::BMallocIO</qualifiedname>
        <param>
          <type>const <ref refid="classBMallocIO" kindref="compound">BMallocIO</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1a9dfdc6d82775c38d517dc055fe4e73fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMallocIO::_ReservedMallocIO1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMallocIO1</name>
        <qualifiedname>BMallocIO::_ReservedMallocIO1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="152" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1a4b830699f17badafe197f667845bdf56" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMallocIO::_ReservedMallocIO2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMallocIO2</name>
        <qualifiedname>BMallocIO::_ReservedMallocIO2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="153" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMallocIO_1af715cf4abeae8520d22b17418942fa58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMallocIO" kindref="compound">BMallocIO</ref> &amp;</type>
        <definition>BMallocIO &amp; BMallocIO::operator=</definition>
        <argsstring>(const BMallocIO &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BMallocIO::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBMallocIO" kindref="compound">BMallocIO</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="150" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> derived class that creates a memory buffer. </para>
    </briefdescription>
    <detaileddescription>
<para>This class creates a memory buffer and provides a <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> interface to work on it. The memory buffer grows and shrinks automatically. This is especially useful if you want to use a method or function that works on an object derived from <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> and you want to do something with the resulting data, or it could be useful if you want to read and write to memory in a safe way, since this class has boundary checking.</para>
<para><ref refid="classBMallocIO" kindref="compound">BMallocIO</ref> allocates a buffer based on a certain block size. This provides a mechanism that will prevent it from needing to allocate new memory too often. The default block size is 256 bytes, you can change it with <ref refid="classBMallocIO_1aebc7cca39f8e57f540be76c6b937061f" kindref="member">SetBlockSize()</ref>. If you are sure you are going to use a bigger buffer, change the block size so that you won&apos;t have to allocate more memory too often, especially if you use this class in performance-critical code.</para>
<para>If you require a <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> derived object that works on buffers you provide, have a look at <ref refid="classBMemoryIO" kindref="compound">BMemoryIO</ref>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="1">
        <label>BMallocIO</label>
        <link refid="classBMallocIO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="1">
        <label>BMallocIO</label>
        <link refid="classBMallocIO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="127" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="127" bodyend="163"/>
    <listofallmembers>
      <member refid="classBMallocIO_1ae7127d385d0af4ae4443ae647697f522" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>_reserved</name></member>
      <member refid="classBMallocIO_1a9dfdc6d82775c38d517dc055fe4e73fc" prot="private" virt="virtual"><scope>BMallocIO</scope><name>_ReservedMallocIO1</name></member>
      <member refid="classBMallocIO_1a4b830699f17badafe197f667845bdf56" prot="private" virt="virtual"><scope>BMallocIO</scope><name>_ReservedMallocIO2</name></member>
      <member refid="classBDataIO_1a67891b7afe78d6a77845dd0352218801" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>BDataIO</name></member>
      <member refid="classBMallocIO_1aaa22efd3d5e51d7029ab52986ae1f71d" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>BMallocIO</name></member>
      <member refid="classBMallocIO_1a1d9eef2322ec8cb88a745cbd28f143bc" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>BMallocIO</name></member>
      <member refid="classBPositionIO_1a08051e865cd2623fab56c3733ecbf099" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>BPositionIO</name></member>
      <member refid="classBMallocIO_1a9b8a31c564374d8289b7581d76bf2b73" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>Buffer</name></member>
      <member refid="classBMallocIO_1aaa31f36dc078f9f873679b7c4bab8167" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>BufferLength</name></member>
      <member refid="classBMallocIO_1ae2370ffafc4b9ecefc46f87a9e136296" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>fBlockSize</name></member>
      <member refid="classBMallocIO_1ac108240d68dc40f1552ccc4488f92d11" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>fData</name></member>
      <member refid="classBMallocIO_1a6b2ac29b02bb4ddd35fcc03ce9625b83" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>fLength</name></member>
      <member refid="classBDataIO_1a38a8df63b367585fe5e6b6a85c406d05" prot="public" virt="virtual"><scope>BMallocIO</scope><name>Flush</name></member>
      <member refid="classBMallocIO_1a4eec3898015ec3ccd71ed49277aa3393" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>fMallocSize</name></member>
      <member refid="classBMallocIO_1a6825d250c87a16bd765bc436248ff41a" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>fPosition</name></member>
      <member refid="classBPositionIO_1a5be704340522f36f80697c6bc883a00d" prot="public" virt="virtual"><scope>BMallocIO</scope><name>GetSize</name></member>
      <member refid="classBMallocIO_1af715cf4abeae8520d22b17418942fa58" prot="private" virt="non-virtual"><scope>BMallocIO</scope><name>operator=</name></member>
      <member refid="classBMallocIO_1af007bb9933ffa65b337ed49cdf5dd42e" prot="public" virt="virtual"><scope>BMallocIO</scope><name>Position</name></member>
      <member refid="classBPositionIO_1abce66c314f7cbd5ab6de0e6480bd7a00" prot="public" virt="virtual"><scope>BMallocIO</scope><name>Read</name></member>
      <member refid="classBMallocIO_1ab32620f9be85989e04da5f77f93db604" prot="public" virt="virtual"><scope>BMallocIO</scope><name>ReadAt</name></member>
      <member refid="classBPositionIO_1a91bab7ae60926dbe3726bc73734318b6" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>ReadAtExactly</name></member>
      <member refid="classBDataIO_1a3a0b0fc36232531a1d8c1144a7d75741" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>ReadExactly</name></member>
      <member refid="classBMallocIO_1af15fd592a792fce67693c4181daf7a30" prot="public" virt="virtual"><scope>BMallocIO</scope><name>Seek</name></member>
      <member refid="classBMallocIO_1aebc7cca39f8e57f540be76c6b937061f" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>SetBlockSize</name></member>
      <member refid="classBMallocIO_1ad0d175f05abea98db9fbf3754e7d5e51" prot="public" virt="virtual"><scope>BMallocIO</scope><name>SetSize</name></member>
      <member refid="classBPositionIO_1a50ec7f6b834893a153d46c0f3c0e09c4" prot="public" virt="virtual"><scope>BMallocIO</scope><name>Write</name></member>
      <member refid="classBMallocIO_1aa168631c8995ac5f325b2501e222fef8" prot="public" virt="virtual"><scope>BMallocIO</scope><name>WriteAt</name></member>
      <member refid="classBPositionIO_1a18100db340087226321c332182816d27" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>WriteAtExactly</name></member>
      <member refid="classBDataIO_1a0095cfffa454a82eac3dedda2e187ab7" prot="public" virt="non-virtual"><scope>BMallocIO</scope><name>WriteExactly</name></member>
      <member refid="classBDataIO_1a45daa9db670dd2e5b83efcefcf8dbaed" prot="public" virt="virtual"><scope>BMallocIO</scope><name>~BDataIO</name></member>
      <member refid="classBMallocIO_1aa4a6f48404f4ffb4587c81ac26fa36e0" prot="public" virt="virtual"><scope>BMallocIO</scope><name>~BMallocIO</name></member>
      <member refid="classBPositionIO_1a505defae83a1a6937c77b9acac2aaafe" prot="public" virt="virtual"><scope>BMallocIO</scope><name>~BPositionIO</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
