<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBEntry" kind="class" language="C++" prot="public">
    <compoundname>BEntry</compoundname>
    <basecompoundref refid="classBStatable" prot="public" virt="non-virtual">BStatable</basecompoundref>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBEntry_1a935fd85d79428a5c0ab583eca88eec01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BDirectory</definition>
        <argsstring></argsstring>
        <name>BDirectory</name>
        <qualifiedname>BEntry::BDirectory</qualifiedname>
        <param>
          <type><ref refid="classBDirectory" kindref="compound">BDirectory</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="81" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBEntry_1acab6e35bd4a0082245f848f4d8a0c146" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BFile</definition>
        <argsstring></argsstring>
        <name>BFile</name>
        <qualifiedname>BEntry::BFile</qualifiedname>
        <param>
          <type><ref refid="classBFile" kindref="compound">BFile</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="82" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBEntry_1aaf4e0590cc96d07575def1866c170767" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BNode</definition>
        <argsstring></argsstring>
        <name>BNode</name>
        <qualifiedname>BEntry::BNode</qualifiedname>
        <param>
          <type><ref refid="classBNode" kindref="compound">BNode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="83" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBEntry_1aeb71a56aec7e91f7f29faaabe1c4f04c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BSymLink</definition>
        <argsstring></argsstring>
        <name>BSymLink</name>
        <qualifiedname>BEntry::BSymLink</qualifiedname>
        <param>
          <type><ref refid="classBSymLink" kindref="compound">BSymLink</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="84" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBEntry_1a1df2ccac8411bb604b44fae9f276cee1" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BEntry::_reserved[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BEntry::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="111" column="7" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBEntry_1a894cecc195da9dd4ee12f2173d4d5bf3" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::fCStatus</definition>
        <argsstring></argsstring>
        <name>fCStatus</name>
        <qualifiedname>BEntry::fCStatus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="109" column="9" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBEntry_1a94f4498f1958c32fa45a935000c3f11a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int BEntry::fDirFd</definition>
        <argsstring></argsstring>
        <name>fDirFd</name>
        <qualifiedname>BEntry::fDirFd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="107" column="4" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBEntry_1a735ef44df0c55abc6636d1634b50c1fa" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BEntry::fName</definition>
        <argsstring></argsstring>
        <name>fName</name>
        <qualifiedname>BEntry::fName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="108" column="5" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBEntry_1a1448e81e2138396d5a3b8e755044b40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BEntry::BEntry</definition>
        <argsstring>()</argsstring>
        <name>BEntry</name>
        <qualifiedname>BEntry::BEntry</qualifiedname>
        <briefdescription>
<para>Creates an uninitialized <ref refid="classBEntry" kindref="compound">BEntry</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be followed by a call to one of the <ref refid="classBEntry_1af3d01795ef093ac81ac45baf50b7597e" kindref="member">SetTo()</ref> methods, or an assignment.</para>
<para><simplesect kind="see"><para><ref refid="classBEntry_1af3d01795ef093ac81ac45baf50b7597e" kindref="member">SetTo(const BDirectory*, const char*, bool)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBEntry_1a57d22e1aa77f89ed34260ec1b7af32a1" kindref="member">SetTo(const entry_ref*, bool)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBEntry_1a205c03c6a32622d2fe79d8c8e189bbb6" kindref="member">SetTo(const char*, bool)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBEntry_1a25452b45b354b58eae987b2bb1445316" kindref="member">operator=(const BEntry&amp;)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a678cb2d9f7f404fdaafcfe1948042332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BEntry::BEntry</definition>
        <argsstring>(const BDirectory *dir, const char *path, bool traverse=false)</argsstring>
        <name>BEntry</name>
        <qualifiedname>BEntry::BEntry</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBEntry" kindref="compound">BEntry</ref> initialized to the given directory and path combination. </para>
        </briefdescription>
        <detaileddescription>
<para>If traverse is <computeroutput>true</computeroutput> and <emphasis>path</emphasis> refers to a symlink, the <ref refid="classBEntry" kindref="compound">BEntry</ref> will refer to the linked file; if <computeroutput>false</computeroutput>, the <ref refid="classBEntry" kindref="compound">BEntry</ref> will refer to the symlink itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory in which the <emphasis>path</emphasis> resides. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative path based off of <emphasis>dir</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to traverse symbolic links.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBEntry_1af3d01795ef093ac81ac45baf50b7597e" kindref="member">BEntry::SetTo(const BDirectory*, const char *, bool)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a9d98e3bb78102f76756664bb112e5794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BEntry::BEntry</definition>
        <argsstring>(const BEntry &amp;entry)</argsstring>
        <name>BEntry</name>
        <qualifiedname>BEntry::BEntry</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Creates a copy of the given <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>the entry to be copied</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBEntry_1a25452b45b354b58eae987b2bb1445316" kindref="member">operator=(const BEntry&amp;)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a75ffe08fca4a04fc9c318fe999890d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BEntry::BEntry</definition>
        <argsstring>(const char *path, bool traverse=false)</argsstring>
        <name>BEntry</name>
        <qualifiedname>BEntry::BEntry</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBEntry" kindref="compound">BEntry</ref> initialized to the given path. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>path</emphasis> is relative, it will be reckoned off the current working directory. If <emphasis>path</emphasis> refers to a symlink and traverse is <computeroutput>true</computeroutput>, the <ref refid="classBEntry" kindref="compound">BEntry</ref> will refer to the linked file. If traverse is <computeroutput>false</computeroutput>, the <ref refid="classBEntry" kindref="compound">BEntry</ref> will refer to the symlink itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not symlinks are to be traversed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBEntry_1a205c03c6a32622d2fe79d8c8e189bbb6" kindref="member">BEntry::SetTo(const char*, bool)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a4307a4b68be87e2194cc9546b4fbfbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BEntry::BEntry</definition>
        <argsstring>(const entry_ref *ref, bool traverse=false)</argsstring>
        <name>BEntry</name>
        <qualifiedname>BEntry::BEntry</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBEntry" kindref="compound">BEntry</ref> for the file referred to by the passed in <ref refid="structentry__ref" kindref="compound">entry_ref</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If traverse is <computeroutput>true</computeroutput> and <emphasis>ref</emphasis> refers to a symlink, the <ref refid="classBEntry" kindref="compound">BEntry</ref> will refer to the linked file; if <computeroutput>false</computeroutput>, the <ref refid="classBEntry" kindref="compound">BEntry</ref> will refer to the symlink itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structentry__ref" kindref="compound">entry_ref</ref> referring to the given file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not symlinks are to be traversed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBEntry_1a57d22e1aa77f89ed34260ec1b7af32a1" kindref="member">BEntry::SetTo(const entry_ref*, bool)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ac7f297816e85d19ee0a4a2603928c6c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BEntry::~BEntry</definition>
        <argsstring>()</argsstring>
        <name>~BEntry</name>
        <qualifiedname>BEntry::~BEntry</qualifiedname>
        <briefdescription>
<para>Frees all of the allocated resources of the <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBEntry_1ab3a42dc9f04fcc655daff30222710a29" kindref="member">Unset()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="48" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ae5a3c25502bb0025910739164d7261e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BEntry::Exists</definition>
        <argsstring>() const</argsstring>
        <name>Exists</name>
        <qualifiedname>BEntry::Exists</qualifiedname>
        <briefdescription>
<para>Returns whether or not the entry exists in the filesystem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the entry exists, <computeroutput>false</computeroutput> if not.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="51" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ae1ebcff7dde858765c3bbe3ea83edf4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::GetName</definition>
        <argsstring>(char *buffer) const</argsstring>
        <name>GetName</name>
        <qualifiedname>BEntry::GetName</qualifiedname>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Gets the name of the leaf of the <ref refid="classBEntry" kindref="compound">BEntry</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>buffer</computeroutput> must be pre-allocated and of sufficient length to hold the entire string. A length of <computeroutput>B_FILE_NAME_LENGTH</computeroutput> is recommended.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated string into which the result is copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a8cd10a538a30cc94edc87e7b96551e69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::GetParent</definition>
        <argsstring>(BDirectory *dir) const</argsstring>
        <name>GetParent</name>
        <qualifiedname>BEntry::GetParent</qualifiedname>
        <param>
          <type><ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Gets the parent of the <ref refid="classBEntry" kindref="compound">BEntry</ref> as a <ref refid="classBDirectory" kindref="compound">BDirectory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the function fails, the argument is <ref refid="classBEntry_1ab3a42dc9f04fcc655daff30222710a29" kindref="member">Unset()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object into which the result is copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Attempted to get the parent of the root directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="67" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ae10d5c12f6ef3a89b7f9810514fa4123" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::GetParent</definition>
        <argsstring>(BEntry *entry) const</argsstring>
        <name>GetParent</name>
        <qualifiedname>BEntry::GetParent</qualifiedname>
        <param>
          <type><ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Gets the parent of the <ref refid="classBEntry" kindref="compound">BEntry</ref> as a <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the function fails, the argument is <ref refid="classBEntry_1ab3a42dc9f04fcc655daff30222710a29" kindref="member">Unset()</ref>. Destructive calls to <ref refid="classBEntry_1ae10d5c12f6ef3a89b7f9810514fa4123" kindref="member">GetParent()</ref> are allowed, i.e.:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBEntry" kindref="compound">BEntry</ref><sp/>entry(</highlight><highlight class="stringliteral">&quot;/boot/home/fido&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/>err;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[B_FILE_NAME_LENGTH];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Spit<sp/>out<sp/>the<sp/>path<sp/>components<sp/>backwards,<sp/>one<sp/>at<sp/>a<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>entry.GetName(name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&gt;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((err=entry.GetParent(&amp;entry))<sp/>==<sp/>B_OK);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complain<sp/>for<sp/>reasons<sp/>other<sp/>than<sp/>reaching<sp/>the<sp/>top.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>B_ENTRY_NOT_FOUND)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&gt;&gt;<sp/>Error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strerror(err));</highlight></codeline>
</programlisting></para>
<para>will output:</para>
<para><programlisting><codeline><highlight class="normal">&gt;<sp/>fido</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>home</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>boot</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>.</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBEntry" kindref="compound">BEntry</ref> object into which the result is stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Attempted to get the parent of the root directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="66" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a95bf275869e2807808bd7785fadb132b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::GetPath</definition>
        <argsstring>(BPath *path) const</argsstring>
        <name>GetPath</name>
        <qualifiedname>BEntry::GetPath</qualifiedname>
        <param>
          <type><ref refid="classBPath" kindref="compound">BPath</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Gets the path for the <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBPath" kindref="compound">BPath</ref> object into which the result is copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="65" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1aeeb2f15b9b3816c28df9c1450e1ae91c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::GetRef</definition>
        <argsstring>(entry_ref *ref) const</argsstring>
        <name>GetRef</name>
        <qualifiedname>BEntry::GetRef</qualifiedname>
        <param>
          <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Gets an <ref refid="structentry__ref" kindref="compound">entry_ref</ref> structure for the <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a preallocated <ref refid="structentry__ref" kindref="compound">entry_ref</ref> object into which the result is copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="64" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a959fc90d95796a4b21001b248b30f709" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::GetStat</definition>
        <argsstring>(struct stat *stat) const</argsstring>
        <name>GetStat</name>
        <qualifiedname>BEntry::GetStat</qualifiedname>
        <reimplements refid="classBStatable_1a0fd44591384a51393418c7360d67c51d">GetStat</reimplements>
        <param>
          <type>struct stat *</type>
          <declname>stat</declname>
          <defname>result</defname>
        </param>
        <briefdescription>
<para>Fills in a stat structure for the entry. </para>
        </briefdescription>
        <detaileddescription>
<para>The information is copied into the <computeroutput>stat</computeroutput> structure pointed to by <emphasis>result</emphasis>.</para>
<para><simplesect kind="note"><para>The <ref refid="classBStatable" kindref="compound">BStatable</ref> object does not cache the stat structure <ndash/> each time you call <ref refid="classBEntry_1a959fc90d95796a4b21001b248b30f709" kindref="member">GetStat()</ref> fresh stat information is retrieved.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated structure into which the stat information is copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="55" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1afd4ad2a7a6e6bd63f565b8243eff6edf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BEntry::InitCheck</qualifiedname>
        <briefdescription>
<para>Returns the result of the most recent construction or <ref refid="classBEntry_1af3d01795ef093ac81ac45baf50b7597e" kindref="member">SetTo()</ref> call. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>The object has been <ref refid="classBEntry_1ab3a42dc9f04fcc655daff30222710a29" kindref="member">Unset()</ref> or is uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="50" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1afc2ae2e0cd12df46f6db8fe3183657e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::MoveTo</definition>
        <argsstring>(BDirectory *dir, const char *path=NULL, bool clobber=false)</argsstring>
        <name>MoveTo</name>
        <qualifiedname>BEntry::MoveTo</qualifiedname>
        <param>
          <type><ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>clobber</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Moves the <ref refid="classBEntry" kindref="compound">BEntry</ref> to directory or directory and path combination, replacing an existing entry if clobber is true. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> object must refer to an existing file, if it is abstract, this method will fail.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBDirectory" kindref="compound">BDirectory</ref> into which the entry should be moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) new leaf name for the entry. May be a simple leaf or a relative path; either way, <computeroutput>path</computeroutput> is reckoned off of <computeroutput>dir</computeroutput>. If <computeroutput>NULL</computeroutput>, the entry retains its previous leaf name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clobber</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>false</computeroutput> and an entry already exists at the specified Spdestination, the method will fail. If <computeroutput>true</computeroutput> and such an entry exists, it will be overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_EXISTS</parametername>
</parameternamelist>
<parameterdescription>
<para>The new location already exists and <computeroutput>clobber</computeroutput> is <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Attempted to rename an abstract entry.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="71" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a69f9d8ff3c102fa3de2083cdedfe22bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BEntry::Name</definition>
        <argsstring>() const</argsstring>
        <name>Name</name>
        <qualifiedname>BEntry::Name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="53" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a255ee1c4a4a6edfc73c2b030765fbd6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BEntry::operator!=</definition>
        <argsstring>(const BEntry &amp;item) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BEntry::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns false if the <ref refid="classBEntry" kindref="compound">BEntry</ref> and <computeroutput>item</computeroutput> refer to the same entry or if they are both uninitialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether or not the items do NOT refer to the same entry. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> objects refer to different entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Both <ref refid="classBEntry" kindref="compound">BEntry</ref> objects refer to the same entry or they are both uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="76" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a25452b45b354b58eae987b2bb1445316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBEntry" kindref="compound">BEntry</ref> &amp;</type>
        <definition>BEntry &amp; BEntry::operator=</definition>
        <argsstring>(const BEntry &amp;item)</argsstring>
        <name>operator=</name>
        <qualifiedname>BEntry::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Reinitializes the <ref refid="classBEntry" kindref="compound">BEntry</ref> to be a copy of <emphasis>item</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the copy.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="78" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a0359e0e7d03ee6eb1297688d0d2dd339" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BEntry::operator==</definition>
        <argsstring>(const BEntry &amp;item) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BEntry::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the <ref refid="classBEntry" kindref="compound">BEntry</ref> and <emphasis>item</emphasis> refer to the same entry or if they are both uninitialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether or not the items refer to the same entry. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Both <ref refid="classBEntry" kindref="compound">BEntry</ref> objects refer to the same entry or they are both uninitialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> objects refer to different entries.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="75" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a8ac144783f19f65c51b39048dc682572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::Remove</definition>
        <argsstring>()</argsstring>
        <name>Remove</name>
        <qualifiedname>BEntry::Remove</qualifiedname>
        <briefdescription>
<para>Removes the entry from the file system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If any file descriptors are open on the file when <ref refid="classBEntry_1a8ac144783f19f65c51b39048dc682572" kindref="member">Remove()</ref> is called the chunk of data they refer to will continue to exist until all such file descriptors are closed. The <ref refid="classBEntry" kindref="compound">BEntry</ref> object, however, becomes abstract and no longer refers to any actual data in the filesystem.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="73" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a383c32766e863ac0e894d9b24449beb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::Rename</definition>
        <argsstring>(const char *path, bool clobber=false)</argsstring>
        <name>Rename</name>
        <qualifiedname>BEntry::Rename</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clobber</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Renames the <ref refid="classBEntry" kindref="compound">BEntry</ref> to <emphasis>path</emphasis> replacing an existing entry if <emphasis>clobber</emphasis> is <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> object must refer to an existing file, if it is abstract, this method will fail.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a string containing the new name for the entry. It may be an absolute or relative path. If it is a relative path the entry is renamed within its current directory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clobber</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>false</computeroutput> and a file with the name given by <computeroutput>path</computeroutput> already exists, the method will fail. If <computeroutput>true</computeroutput> and such a file exists, it will be overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_EXISTS</parametername>
</parameternamelist>
<parameterdescription>
<para>The new location already exists and <computeroutput>clobber</computeroutput> is <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Attempted to rename an abstract entry.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="70" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1af3d01795ef093ac81ac45baf50b7597e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::SetTo</definition>
        <argsstring>(const BDirectory *dir, const char *path, bool traverse=false)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BEntry::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reinitializes the <ref refid="classBEntry" kindref="compound">BEntry</ref> to the path or directory path combination, resolving symlinks if traverse is <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory in which the <emphasis>path</emphasis> resides. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative path based off of <emphasis>dir</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to traverse symbolic links.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="57" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a205c03c6a32622d2fe79d8c8e189bbb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::SetTo</definition>
        <argsstring>(const char *path, bool traverse=false)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BEntry::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reinitializes the <ref refid="classBEntry" kindref="compound">BEntry</ref> object to the path, resolving symlinks if traverse is <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not symlinks are to be traversed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBEntry_1a75ffe08fca4a04fc9c318fe999890d52" kindref="member">BEntry::BEntry(const char* path, bool traverse)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="61" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a57d22e1aa77f89ed34260ec1b7af32a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::SetTo</definition>
        <argsstring>(const entry_ref *ref, bool traverse=false)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BEntry::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reinitializes the <ref refid="classBEntry" kindref="compound">BEntry</ref> to the passed in <ref refid="structentry__ref" kindref="compound">entry_ref</ref> object resolving symlinks if traverse is <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structentry__ref" kindref="compound">entry_ref</ref> referring to the given file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not symlinks are to be traversed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success, or an error code on failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBEntry_1a4307a4b68be87e2194cc9546b4fbfbfc" kindref="member">BEntry::BEntry(const entry_ref* ref, bool traverse)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="59" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ab3a42dc9f04fcc655daff30222710a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BEntry::Unset</definition>
        <argsstring>()</argsstring>
        <name>Unset</name>
        <qualifiedname>BEntry::Unset</qualifiedname>
        <briefdescription>
<para>Reset the <ref refid="classBEntry" kindref="compound">BEntry</ref> to the uninitialized state. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> forgets any information about the entry it was referencing. Any attempt to get information from it after this will return B_NO_INIT. The <ref refid="classBEntry" kindref="compound">BEntry</ref> can later be pointed to another entry using <ref refid="classBEntry_1af3d01795ef093ac81ac45baf50b7597e" kindref="member">SetTo()</ref>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="62" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBEntry_1a1105a598b6a249dc3f833e15d0388f66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BEntry::_Dump</definition>
        <argsstring>(const char *name=NULL)</argsstring>
        <name>_Dump</name>
        <qualifiedname>BEntry::_Dump</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="101" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a999aee3b99d92253eacd5e6ac1672e6b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::_GetStat</definition>
        <argsstring>(struct stat *stat) const</argsstring>
        <name>_GetStat</name>
        <qualifiedname>BEntry::_GetStat</qualifiedname>
        <param>
          <type>struct stat *</type>
          <declname>stat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="103" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ab63eecf00360ebb41f21a6e411f75e9c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BEntry::_GetStat</definition>
        <argsstring>(struct stat_beos *stat) const</argsstring>
        <name>_GetStat</name>
        <qualifiedname>BEntry::_GetStat</qualifiedname>
        <reimplements refid="classBStatable_1a52d35511773ddb642e7701527c2c1308">_GetStat</reimplements>
        <param>
          <type>struct stat_beos *</type>
          <declname>stat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="104" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ab0bc7a183068eab30eeab1b4fb594f5a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BEntry::_PennyEntry1</definition>
        <argsstring>()</argsstring>
        <name>_PennyEntry1</name>
        <qualifiedname>BEntry::_PennyEntry1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="86" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a701d1e8cfe2f93fb1db8c8d9a342dd0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BEntry::_PennyEntry2</definition>
        <argsstring>()</argsstring>
        <name>_PennyEntry2</name>
        <qualifiedname>BEntry::_PennyEntry2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="87" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a559a2c1a0c8b2eed59f0f52ab53c44f4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BEntry::_PennyEntry3</definition>
        <argsstring>()</argsstring>
        <name>_PennyEntry3</name>
        <qualifiedname>BEntry::_PennyEntry3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="88" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a967c29e276cf6566374eac296e86bc8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BEntry::_PennyEntry4</definition>
        <argsstring>()</argsstring>
        <name>_PennyEntry4</name>
        <qualifiedname>BEntry::_PennyEntry4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="89" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ab8de6c875c5002f53477a2794c49eeff" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BEntry::_PennyEntry5</definition>
        <argsstring>()</argsstring>
        <name>_PennyEntry5</name>
        <qualifiedname>BEntry::_PennyEntry5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="90" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1abda6a5eaed08bd9fcfd2bd7bf31b078a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BEntry::_PennyEntry6</definition>
        <argsstring>()</argsstring>
        <name>_PennyEntry6</name>
        <qualifiedname>BEntry::_PennyEntry6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="91" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a55735788999c2c1ebf1e2e9055dc2d76" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::_Rename</definition>
        <argsstring>(BEntry &amp;target, bool clobber)</argsstring>
        <name>_Rename</name>
        <qualifiedname>BEntry::_Rename</qualifiedname>
        <param>
          <type><ref refid="classBEntry" kindref="compound">BEntry</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clobber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="99" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a25f0acbb73ef0524e897186fca18547a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::_SetName</definition>
        <argsstring>(const char *name)</argsstring>
        <name>_SetName</name>
        <qualifiedname>BEntry::_SetName</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="97" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1a48c3d799a3dedb7f6df98a5364adb5ff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BEntry::_SetTo</definition>
        <argsstring>(int dir, const char *path, bool traverse)</argsstring>
        <name>_SetTo</name>
        <qualifiedname>BEntry::_SetTo</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="95" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBEntry_1ad13d070d74409665051aee190fa634a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BEntry::set_stat</definition>
        <argsstring>(struct stat &amp;stat, uint32 what)</argsstring>
        <name>set_stat</name>
        <qualifiedname>BEntry::set_stat</qualifiedname>
        <reimplements refid="classBStatable_1abbed307846be19643f0de64f835767a3">set_stat</reimplements>
        <param>
          <type>struct stat &amp;</type>
          <declname>stat</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="94" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A location in the filesystem. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> class defines objects that represent &quot;locations&quot; in the file system hierarchy. Each location (or entry) is given as a name within a directory. For example, if you create a <ref refid="classBEntry" kindref="compound">BEntry</ref> like this:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBEntry" kindref="compound">BEntry</ref><sp/>entry(</highlight><highlight class="stringliteral">&quot;/boot/home/fido&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>the resulting <ref refid="classBEntry" kindref="compound">BEntry</ref> object represents the location of the file <computeroutput>fido</computeroutput> within the <computeroutput>/boot/home</computeroutput> directory. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BEntry</label>
        <link refid="classBEntry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BStatable</label>
        <link refid="classBStatable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BEntry</label>
        <link refid="classBEntry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BStatable</label>
        <link refid="classBStatable"/>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/storage/Entry.h" line="39" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/Entry.h" bodystart="39" bodyend="112"/>
    <listofallmembers>
      <member refid="classBEntry_1a1105a598b6a249dc3f833e15d0388f66" prot="private" virt="non-virtual"><scope>BEntry</scope><name>_Dump</name></member>
      <member refid="classBEntry_1a999aee3b99d92253eacd5e6ac1672e6b" prot="private" virt="non-virtual"><scope>BEntry</scope><name>_GetStat</name></member>
      <member refid="classBEntry_1ab63eecf00360ebb41f21a6e411f75e9c" prot="private" virt="virtual"><scope>BEntry</scope><name>_GetStat</name></member>
      <member refid="classBEntry_1ab0bc7a183068eab30eeab1b4fb594f5a" prot="private" virt="virtual"><scope>BEntry</scope><name>_PennyEntry1</name></member>
      <member refid="classBEntry_1a701d1e8cfe2f93fb1db8c8d9a342dd0a" prot="private" virt="virtual"><scope>BEntry</scope><name>_PennyEntry2</name></member>
      <member refid="classBEntry_1a559a2c1a0c8b2eed59f0f52ab53c44f4" prot="private" virt="virtual"><scope>BEntry</scope><name>_PennyEntry3</name></member>
      <member refid="classBEntry_1a967c29e276cf6566374eac296e86bc8c" prot="private" virt="virtual"><scope>BEntry</scope><name>_PennyEntry4</name></member>
      <member refid="classBEntry_1ab8de6c875c5002f53477a2794c49eeff" prot="private" virt="virtual"><scope>BEntry</scope><name>_PennyEntry5</name></member>
      <member refid="classBEntry_1abda6a5eaed08bd9fcfd2bd7bf31b078a" prot="private" virt="virtual"><scope>BEntry</scope><name>_PennyEntry6</name></member>
      <member refid="classBEntry_1a55735788999c2c1ebf1e2e9055dc2d76" prot="private" virt="non-virtual"><scope>BEntry</scope><name>_Rename</name></member>
      <member refid="classBEntry_1a1df2ccac8411bb604b44fae9f276cee1" prot="private" virt="non-virtual"><scope>BEntry</scope><name>_reserved</name></member>
      <member refid="classBEntry_1a25f0acbb73ef0524e897186fca18547a" prot="private" virt="non-virtual"><scope>BEntry</scope><name>_SetName</name></member>
      <member refid="classBEntry_1a48c3d799a3dedb7f6df98a5364adb5ff" prot="private" virt="non-virtual"><scope>BEntry</scope><name>_SetTo</name></member>
      <member refid="classBEntry_1a1448e81e2138396d5a3b8e755044b40b" prot="public" virt="non-virtual"><scope>BEntry</scope><name>BEntry</name></member>
      <member refid="classBEntry_1a678cb2d9f7f404fdaafcfe1948042332" prot="public" virt="non-virtual"><scope>BEntry</scope><name>BEntry</name></member>
      <member refid="classBEntry_1a4307a4b68be87e2194cc9546b4fbfbfc" prot="public" virt="non-virtual"><scope>BEntry</scope><name>BEntry</name></member>
      <member refid="classBEntry_1a75ffe08fca4a04fc9c318fe999890d52" prot="public" virt="non-virtual"><scope>BEntry</scope><name>BEntry</name></member>
      <member refid="classBEntry_1a9d98e3bb78102f76756664bb112e5794" prot="public" virt="non-virtual"><scope>BEntry</scope><name>BEntry</name></member>
      <member refid="classBEntry_1ae5a3c25502bb0025910739164d7261e6" prot="public" virt="non-virtual"><scope>BEntry</scope><name>Exists</name></member>
      <member refid="classBEntry_1a894cecc195da9dd4ee12f2173d4d5bf3" prot="private" virt="non-virtual"><scope>BEntry</scope><name>fCStatus</name></member>
      <member refid="classBEntry_1a94f4498f1958c32fa45a935000c3f11a" prot="private" virt="non-virtual"><scope>BEntry</scope><name>fDirFd</name></member>
      <member refid="classBEntry_1a735ef44df0c55abc6636d1634b50c1fa" prot="private" virt="non-virtual"><scope>BEntry</scope><name>fName</name></member>
      <member refid="classBStatable_1a55dea9fb7be6e844b6515f73ee0a929a" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetAccessTime</name></member>
      <member refid="classBStatable_1ac80b82a49b8c757d4bf0034d70c33eb1" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetCreationTime</name></member>
      <member refid="classBStatable_1ab27d67f089c0c4bd14cdc48f57c51a17" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetGroup</name></member>
      <member refid="classBStatable_1a5571998c1d3ca9a59ad521556b3dee63" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetModificationTime</name></member>
      <member refid="classBEntry_1ae1ebcff7dde858765c3bbe3ea83edf4a" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetName</name></member>
      <member refid="classBStatable_1ad22f2b8b8b11b151bc94d63caeb16c95" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetNodeRef</name></member>
      <member refid="classBStatable_1ae8cb57200fbeac9941622a33705d64a4" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetOwner</name></member>
      <member refid="classBEntry_1ae10d5c12f6ef3a89b7f9810514fa4123" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetParent</name></member>
      <member refid="classBEntry_1a8cd10a538a30cc94edc87e7b96551e69" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetParent</name></member>
      <member refid="classBEntry_1a95bf275869e2807808bd7785fadb132b" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetPath</name></member>
      <member refid="classBStatable_1a6a8b0225646734f4528858c72a5f9073" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetPermissions</name></member>
      <member refid="classBEntry_1aeeb2f15b9b3816c28df9c1450e1ae91c" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetRef</name></member>
      <member refid="classBStatable_1a52975e361937ae26f7c854da34e6e51a" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetSize</name></member>
      <member refid="classBEntry_1a959fc90d95796a4b21001b248b30f709" prot="public" virt="virtual"><scope>BEntry</scope><name>GetStat</name></member>
      <member refid="classBStatable_1a2488e774eaa96bf07ae6156ea320fc0a" prot="public" virt="non-virtual"><scope>BEntry</scope><name>GetVolume</name></member>
      <member refid="classBEntry_1afd4ad2a7a6e6bd63f565b8243eff6edf" prot="public" virt="non-virtual"><scope>BEntry</scope><name>InitCheck</name></member>
      <member refid="classBStatable_1a853345d2d3673b47f59dd655b6a3adca" prot="public" virt="non-virtual"><scope>BEntry</scope><name>IsDirectory</name></member>
      <member refid="classBStatable_1acaa5a30c8a6ee1f8854a787958d13eaf" prot="public" virt="non-virtual"><scope>BEntry</scope><name>IsFile</name></member>
      <member refid="classBStatable_1aa07af7f2d36c453d00e101bc6c6a487e" prot="public" virt="non-virtual"><scope>BEntry</scope><name>IsSymLink</name></member>
      <member refid="classBEntry_1afc2ae2e0cd12df46f6db8fe3183657e2" prot="public" virt="non-virtual"><scope>BEntry</scope><name>MoveTo</name></member>
      <member refid="classBEntry_1a69f9d8ff3c102fa3de2083cdedfe22bb" prot="public" virt="non-virtual"><scope>BEntry</scope><name>Name</name></member>
      <member refid="classBEntry_1a255ee1c4a4a6edfc73c2b030765fbd6e" prot="public" virt="non-virtual"><scope>BEntry</scope><name>operator!=</name></member>
      <member refid="classBEntry_1a25452b45b354b58eae987b2bb1445316" prot="public" virt="non-virtual"><scope>BEntry</scope><name>operator=</name></member>
      <member refid="classBEntry_1a0359e0e7d03ee6eb1297688d0d2dd339" prot="public" virt="non-virtual"><scope>BEntry</scope><name>operator==</name></member>
      <member refid="classBEntry_1a8ac144783f19f65c51b39048dc682572" prot="public" virt="non-virtual"><scope>BEntry</scope><name>Remove</name></member>
      <member refid="classBEntry_1a383c32766e863ac0e894d9b24449beb0" prot="public" virt="non-virtual"><scope>BEntry</scope><name>Rename</name></member>
      <member refid="classBEntry_1ad13d070d74409665051aee190fa634a6" prot="private" virt="virtual"><scope>BEntry</scope><name>set_stat</name></member>
      <member refid="classBStatable_1aab2c65df1f1459d014a0a2ba9638411e" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetAccessTime</name></member>
      <member refid="classBStatable_1a6a92b04cda608babf49f70ef4e3a2f36" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetCreationTime</name></member>
      <member refid="classBStatable_1af6e5ac17688536b3de2940a82349d043" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetGroup</name></member>
      <member refid="classBStatable_1a1f2b84cea7b32a238b41f97e0264a048" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetModificationTime</name></member>
      <member refid="classBStatable_1a640ef9862775efaa6720691ed4b58256" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetOwner</name></member>
      <member refid="classBStatable_1aaf215f1b31486d4fd65dd96229b26f97" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetPermissions</name></member>
      <member refid="classBEntry_1af3d01795ef093ac81ac45baf50b7597e" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetTo</name></member>
      <member refid="classBEntry_1a57d22e1aa77f89ed34260ec1b7af32a1" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetTo</name></member>
      <member refid="classBEntry_1a205c03c6a32622d2fe79d8c8e189bbb6" prot="public" virt="non-virtual"><scope>BEntry</scope><name>SetTo</name></member>
      <member refid="classBEntry_1ab3a42dc9f04fcc655daff30222710a29" prot="public" virt="non-virtual"><scope>BEntry</scope><name>Unset</name></member>
      <member refid="classBEntry_1ac7f297816e85d19ee0a4a2603928c6c0" prot="public" virt="virtual"><scope>BEntry</scope><name>~BEntry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
