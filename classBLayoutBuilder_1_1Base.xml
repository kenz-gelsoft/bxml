<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBLayoutBuilder_1_1Base" kind="class" language="C++" prot="public">
    <compoundname>BLayoutBuilder::Base</compoundname>
    <derivedcompoundref refid="classBLayoutBuilder_1_1Cards" prot="public" virt="non-virtual">BLayoutBuilder::Cards&lt; ParentBuilder &gt;</derivedcompoundref>
    <derivedcompoundref refid="classBLayoutBuilder_1_1Grid" prot="public" virt="non-virtual">BLayoutBuilder::Grid&lt; ParentBuilder &gt;</derivedcompoundref>
    <derivedcompoundref refid="classBLayoutBuilder_1_1Group" prot="public" virt="non-virtual">BLayoutBuilder::Group&lt; ParentBuilder &gt;</derivedcompoundref>
    <derivedcompoundref refid="classBLayoutBuilder_1_1Menu" prot="public" virt="non-virtual">BLayoutBuilder::Menu&lt; ParentBuilder &gt;</derivedcompoundref>
    <derivedcompoundref refid="classBLayoutBuilder_1_1Split" prot="public" virt="non-virtual">BLayoutBuilder::Split&lt; ParentBuilder &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>typename ParentBuilder</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBLayoutBuilder_1_1Base_1af791ae1b4d9754955042cdde27e87a1c" prot="protected" static="no" mutable="no">
        <type>ParentBuilder *</type>
        <definition>ParentBuilder* BLayoutBuilder::Base&lt; ParentBuilder &gt;::fParent</definition>
        <argsstring></argsstring>
        <name>fParent</name>
        <qualifiedname>BLayoutBuilder::Base::fParent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" line="48" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBLayoutBuilder_1_1Base_1ad9cd8d69d234fa83340b301ea7124d9d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BLayoutBuilder::Base&lt; ParentBuilder &gt;::Base</definition>
        <argsstring>()</argsstring>
        <name>Base</name>
        <qualifiedname>BLayoutBuilder::Base::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" line="40" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" bodystart="419" bodyend="423"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBLayoutBuilder_1_1Base_1a75ae941876a8df12ee260a2292cc1aca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ParentBuilder &amp;</type>
        <definition>ParentBuilder &amp; BLayoutBuilder::Base&lt; ParentBuilder &gt;::End</definition>
        <argsstring>()</argsstring>
        <name>End</name>
        <qualifiedname>BLayoutBuilder::Base::End</qualifiedname>
        <briefdescription>
<para>Returns this builder&apos;s parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" line="45" column="20" bodyfile="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classBLayoutBuilder_1_1Base_1a40d2a104752cf351a4b007c1940134b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BLayoutBuilder::Base&lt; ParentBuilder &gt;::SetParent</definition>
        <argsstring>(ParentBuilder *parent)</argsstring>
        <name>SetParent</name>
        <qualifiedname>BLayoutBuilder::Base::SetParent</qualifiedname>
        <param>
          <type>ParentBuilder *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Internal method for use by <ref refid="classBLayoutBuilder_1_1Base" kindref="compound">BLayoutBuilder::Base</ref> subclasses, this is essential to the builder stack semantics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" line="43" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" bodystart="428" bodyend="431"/>
        <referencedby refid="classBLayoutBuilder_1_1Cards_1a66aeefe036c6c879e7f5da0402dc5d3d" compoundref="LayoutBuilder_8h" startline="1611" endline="1617">BLayoutBuilder::Cards&lt; ParentBuilder &gt;::AddCards</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1a7c686da2bcc0dd839e839b503154d674" compoundref="LayoutBuilder_8h" startline="657" endline="663">BLayoutBuilder::Group&lt; ParentBuilder &gt;::AddCards</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Split_1a846cb44cb8474fc2f0e6f995d56023a2" compoundref="LayoutBuilder_8h" startline="1328" endline="1334">BLayoutBuilder::Split&lt; ParentBuilder &gt;::AddCards</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1a11ec5880acd69f8d495e4a61750ab07f" compoundref="LayoutBuilder_8h" startline="1004" endline="1011">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::AddCards</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Cards_1a5394ff381ad3c284019d4be38e9a7f14" compoundref="LayoutBuilder_8h" startline="1556" endline="1562">BLayoutBuilder::Cards&lt; ParentBuilder &gt;::AddGrid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1abc185e5d9c43241664889b3b7f8df641" compoundref="LayoutBuilder_8h" startline="600" endline="607">BLayoutBuilder::Group&lt; ParentBuilder &gt;::AddGrid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Split_1a652de90fae513fbbe5b0ac5cce11f719" compoundref="LayoutBuilder_8h" startline="1282" endline="1289">BLayoutBuilder::Split&lt; ParentBuilder &gt;::AddGrid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1ab11ccd5c5539185d6c7efa7472c219c2" compoundref="LayoutBuilder_8h" startline="956" endline="963">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::AddGrid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1af3c494eef3324a59b38502d189fd815c" compoundref="LayoutBuilder_8h" startline="920" endline="927">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::AddGroup</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Cards_1a2e70dc38a1737d1560772145af4152fd" compoundref="LayoutBuilder_8h" startline="1523" endline="1529">BLayoutBuilder::Cards&lt; ParentBuilder &gt;::AddGroup</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1a867be51d20185a93d847da2abaea3471" compoundref="LayoutBuilder_8h" startline="566" endline="573">BLayoutBuilder::Group&lt; ParentBuilder &gt;::AddGroup</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Split_1a4506d78597d896412cd29079daeb3b40" compoundref="LayoutBuilder_8h" startline="1248" endline="1255">BLayoutBuilder::Split&lt; ParentBuilder &gt;::AddGroup</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1a85f77e49b1504d800716847ab25d6d14" compoundref="LayoutBuilder_8h" startline="980" endline="987">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::AddSplit</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Cards_1a34a720ac5a077f53b041dc6baec89dcc" compoundref="LayoutBuilder_8h" startline="1589" endline="1595">BLayoutBuilder::Cards&lt; ParentBuilder &gt;::AddSplit</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1a6cc29f83a94a0c55f66720a6d9f3d949" compoundref="LayoutBuilder_8h" startline="634" endline="641">BLayoutBuilder::Group&lt; ParentBuilder &gt;::AddSplit</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Split_1a973dfce69c927a42aeee4c8a27ff3d8c" compoundref="LayoutBuilder_8h" startline="1316" endline="1323">BLayoutBuilder::Split&lt; ParentBuilder &gt;::AddSplit</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBLayoutBuilder_1_1Base" kindref="compound">Base</ref> for all other layout builders in the BLayoutBuilder namespace. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides the stack-like semantics for its subclasses. The <ref refid="classBLayoutBuilder_1_1Group" kindref="compound">BLayoutBuilder::Group</ref>, <ref refid="classBLayoutBuilder_1_1Grid" kindref="compound">BLayoutBuilder::Grid</ref> and <ref refid="classBLayoutBuilder_1_1Split" kindref="compound">BLayoutBuilder::Split</ref> all provide methods such as AddGrid() AddGroup() and AddSplit(), which make a new builder, place it on top of your builder stack and return it. Now you are operating on the new builder. When you call the <ref refid="classBLayoutBuilder_1_1Base_1a75ae941876a8df12ee260a2292cc1aca" kindref="member">End()</ref> method on the new builder, you are returned the one you had previously been using. At any point, you are calling methods on whatever builder currently resides on the top of the stack. Here&apos;s an example of how these classes work.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBLayoutBuilder_1_1Group" kindref="compound">BLayoutBuilder::Group&lt;&gt;</ref>(<ref refid="InterfaceDefs_8h_1ac5fc6e200c34376449ba20a234061eb4ae796c97ca7ee2f24f65fc51ab650726d" kindref="member">B_HORIZONTAL</ref>)</highlight></codeline>
</programlisting></para>
<para>At this point our stack just contains a single builder, it looks like this: <itemizedlist>
<listitem><para>Group&lt;&gt;</para>
</listitem>
</itemizedlist>
<programlisting><codeline><highlight class="normal">.AddGrid()</highlight></codeline>
</programlisting></para>
<para>Now there is a <ref refid="classBLayoutBuilder_1_1Grid" kindref="compound">Grid</ref> builder on top of the stack, so it looks like this <itemizedlist>
<listitem><para><ref refid="classBLayoutBuilder_1_1Group_1a9fcc084cf0a0e5dc40a845b465f6b14a" kindref="member">Group&lt;&gt;::GridBuilder</ref> </para>
</listitem>
<listitem><para>Group&lt;&gt;</para>
</listitem>
</itemizedlist>
Notice that the <ref refid="classBLayoutBuilder_1_1Grid" kindref="compound">Grid</ref> on top of the stack is not a plain Grid&lt;&gt;, but a nested type from the Group&lt;&gt; class. This is an essential part of the builder classes, as this is what allows you to pop builders off the stack and get the correct type in return.</para>
<para><programlisting><codeline><highlight class="normal">.AddSplit()</highlight></codeline>
</programlisting></para>
<para>Now our stack looks like this: <itemizedlist>
<listitem><para><ref refid="classBLayoutBuilder_1_1Grid_1aa4785850ddc540704c78f4414a0873b3" kindref="member">Group&lt;&gt;::GridBuilder::SplitBuilder</ref> </para>
</listitem>
<listitem><para><ref refid="classBLayoutBuilder_1_1Group_1a9fcc084cf0a0e5dc40a845b465f6b14a" kindref="member">Group&lt;&gt;::GridBuilder</ref> </para>
</listitem>
<listitem><para>Group&lt;&gt;</para>
</listitem>
</itemizedlist>
This could continue ad. nauseam, but at some point, you may finish with a builder, and you might want to continue manipulating the builder below it on the stack. To do this, you simply call the <ref refid="classBLayoutBuilder_1_1Base_1a75ae941876a8df12ee260a2292cc1aca" kindref="member">End()</ref> method like so:</para>
<para><programlisting><codeline><highlight class="normal">.End()</highlight></codeline>
</programlisting></para>
<para>And now the stack is back to this: <itemizedlist>
<listitem><para><ref refid="classBLayoutBuilder_1_1Group_1a9fcc084cf0a0e5dc40a845b465f6b14a" kindref="member">Group&lt;&gt;::GridBuilder</ref> </para>
</listitem>
<listitem><para>Group&lt;&gt;</para>
</listitem>
</itemizedlist>
So you are again working with the grid builder. You can add more BLayoutItems or BViews, or even more builders. Here&apos;s how it will all look together.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBLayoutBuilder_1_1Group" kindref="compound">BLayoutBuilder::Group&lt;&gt;</ref>(<ref refid="InterfaceDefs_8h_1ac5fc6e200c34376449ba20a234061eb4ae796c97ca7ee2f24f65fc51ab650726d" kindref="member">B_HORIZONTAL</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>working<sp/>with<sp/>the<sp/>Group<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="classBLayoutBuilder_1_1Group_1abc185e5d9c43241664889b3b7f8df641" kindref="member">AddGrid</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>working<sp/>with<sp/>the<sp/>Group&lt;&gt;::GridBuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classBLayoutBuilder_1_1Grid_1a85f77e49b1504d800716847ab25d6d14" kindref="member">AddSplit</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>working<sp/>with<sp/>the<sp/>Group&lt;&gt;::GridBuilder::SplitBuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classBLayoutBuilder_1_1Base_1a75ae941876a8df12ee260a2292cc1aca" kindref="member">End</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>to<sp/>the<sp/>Group&lt;&gt;::GridBuilder</highlight></codeline>
</programlisting></para>
<para>Note that the C++ language does not impose any sequence points in such method chains. This means the arguments to all calls may be evaluated in an unexpected order. For exemple, the following code may not result in adding the 3 views in rows 0, 1 and 2 in the target grid:</para>
<para><programlisting><codeline><highlight class="comment">//<sp/>Don&apos;t<sp/>do<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classBLayoutBuilder_1_1Grid" kindref="compound">BLayoutBuilder::Grid&lt;&gt;</ref>(target)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="classBLayoutBuilder_1_1Grid_1a68885aa5db050c006484e5286d1a3c55" kindref="member">Add</ref>(viewA,<sp/>row++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="classBLayoutBuilder_1_1Grid_1a68885aa5db050c006484e5286d1a3c55" kindref="member">Add</ref>(viewB,<sp/>row++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="classBLayoutBuilder_1_1Grid_1a68885aa5db050c006484e5286d1a3c55" kindref="member">Add</ref>(viewC,<sp/>row++);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BLayoutBuilder::Base&lt; ParentBuilder &gt;</label>
        <link refid="classBLayoutBuilder_1_1Base"/>
      </node>
      <node id="2">
        <label>BLayoutBuilder::Cards&lt; ParentBuilder &gt;</label>
        <link refid="classBLayoutBuilder_1_1Cards"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BLayoutBuilder::Grid&lt; ParentBuilder &gt;</label>
        <link refid="classBLayoutBuilder_1_1Grid"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BLayoutBuilder::Group&lt; ParentBuilder &gt;</label>
        <link refid="classBLayoutBuilder_1_1Group"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BLayoutBuilder::Split&lt; ParentBuilder &gt;</label>
        <link refid="classBLayoutBuilder_1_1Split"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="interface/LayoutBuilder.dox" line="22" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/LayoutBuilder.h" bodystart="38" bodyend="49"/>
    <listofallmembers>
      <member refid="classBLayoutBuilder_1_1Base_1ad9cd8d69d234fa83340b301ea7124d9d" prot="protected" virt="non-virtual"><scope>BLayoutBuilder::Base</scope><name>Base</name></member>
      <member refid="classBLayoutBuilder_1_1Base_1a75ae941876a8df12ee260a2292cc1aca" prot="public" virt="non-virtual"><scope>BLayoutBuilder::Base</scope><name>End</name></member>
      <member refid="classBLayoutBuilder_1_1Base_1af791ae1b4d9754955042cdde27e87a1c" prot="protected" virt="non-virtual"><scope>BLayoutBuilder::Base</scope><name>fParent</name></member>
      <member refid="classBLayoutBuilder_1_1Base_1a40d2a104752cf351a4b007c1940134b8" prot="public" virt="non-virtual"><scope>BLayoutBuilder::Base</scope><name>SetParent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
