<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BHttpFields::Field</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a8b17f2673c20bb7446a9a33550ec20e4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BHttpFields</definition>
        <argsstring></argsstring>
        <name>BHttpFields</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::BHttpFields</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="132" column="14" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a699a0f410335f33d6ab34b9b16ced282" prot="private" static="no" mutable="no">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref></type>
        <definition>FieldName BPrivate::Network::BHttpFields::Field::fName</definition>
        <argsstring></argsstring>
        <name>fName</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::fName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="138" column="10" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a5c7d4effb5048db0bd2fc586f056ed39" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="classBString" kindref="compound">BString</ref> &gt;</type>
        <definition>std::optional&lt;BString&gt; BPrivate::Network::BHttpFields::Field::fRawField</definition>
        <argsstring></argsstring>
        <name>fRawField</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::fRawField</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="136" column="15" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a733c84a676b75e9360872eab80060184" prot="private" static="no" mutable="no">
        <type>std::string_view</type>
        <definition>std::string_view BPrivate::Network::BHttpFields::Field::fValue</definition>
        <argsstring></argsstring>
        <name>fValue</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::fValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="139" column="17" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1abc673300d40154b52ba357c84feee066" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::Field::Field</definition>
        <argsstring>() noexcept</argsstring>
        <name>Field</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Field</qualifiedname>
        <briefdescription>
<para>Construct empty field. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructs an empty field. Because empty fields cannot be used in combination with a <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> object, it is unlikely that you will construct these empty fields yourself.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a5708e4773bf198e6a5ae4880959df9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::Field::Field</definition>
        <argsstring>(BString &amp;field)</argsstring>
        <name>Field</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Field</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Construct a field from the raw <emphasis>field</emphasis> value. </para>
        </briefdescription>
        <detaileddescription>
<para>The raw header field is checked to determine whether it corresponds to the the HTTP specification. Note that the raw field should not include any newline characters at the end of the string.</para>
<para>If succesful, the string is moved into the fields object, and the original input value will be empty.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The raw header field to move into the list of headers</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Error in case memory cannot be allocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1InvalidInput" kindref="compound">BHttpFields::InvalidInput</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This error indicates that the <emphasis>name</emphasis> or the <emphasis>value</emphasis> is empty or contains invalid characters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a93f8f1a7356364e8e82270d21e186b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::Field::Field</definition>
        <argsstring>(const Field &amp;other)</argsstring>
        <name>Field</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Field</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field" kindref="compound">Field</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other field to copy data from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Error in case memory cannot be allocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a868062bb06799fc560b4369e52dcb45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::Field::Field</definition>
        <argsstring>(const std::string_view &amp;name, const std::string_view &amp;value)</argsstring>
        <name>Field</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Field</qualifiedname>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Construct a field with a <emphasis>name</emphasis> and a <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameters are checked whether they only contain characters that are allowed by the HTTP specification.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the header field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the header field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Error in case memory cannot be allocated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1InvalidInput" kindref="compound">BHttpFields::InvalidInput</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This error indicates that the <emphasis>name</emphasis> or the <emphasis>value</emphasis> is empty or contains invalid characters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1aadec28092fdd68929d84df8d5eed8279" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::Field::Field</definition>
        <argsstring>(Field &amp;&amp;) noexcept</argsstring>
        <name>Field</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Field</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field" kindref="compound">Field</ref> &amp;&amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>After moving, the <emphasis>other</emphasis> field object will be an empty field.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1ae601531fc2ce05efb96bda88d4b10368" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpFields::Field::IsEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::IsEmpty</qualifiedname>
        <briefdescription>
<para>Check if the field is empty or has valid data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>This field is empty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>This field contains a valid name and value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="129" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1af15525b6622bb20ec9042d3f0819a0b2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;</type>
        <definition>const FieldName &amp; BPrivate::Network::BHttpFields::Field::Name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Name</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Name</qualifiedname>
        <briefdescription>
<para>Get a const reference to the field name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The name of the field as a <ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">BHttpFields::FieldName</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="126" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1abf1b3bd840a943d2c4488cd66058ccc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field" kindref="compound">Field</ref> &amp;</type>
        <definition>Field &amp; BPrivate::Network::BHttpFields::Field::operator=</definition>
        <argsstring>(const Field &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field" kindref="compound">Field</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other field to copy data from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Error in case memory cannot be allocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="122" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1aba528215b4a166ecba57bf574626352d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field" kindref="compound">Field</ref> &amp;</type>
        <definition>Field &amp; BPrivate::Network::BHttpFields::Field::operator=</definition>
        <argsstring>(Field &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field" kindref="compound">Field</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
<para>After moving, the <emphasis>other</emphasis> field object will be an empty field.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="123" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a735bfb608950414690e81876347ff9dc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view BPrivate::Network::BHttpFields::Field::RawField</definition>
        <argsstring>() const noexcept</argsstring>
        <name>RawField</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::RawField</qualifiedname>
        <briefdescription>
<para>Get a view to the field value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The raw field value as a <computeroutput>string_view</computeroutput>. The raw value does not include the line ending (\r\n).</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="128" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a9235f0ccfa2db5a085a8db532c33a022" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string_view</type>
        <definition>std::string_view BPrivate::Network::BHttpFields::Field::Value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Value</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Value</qualifiedname>
        <briefdescription>
<para>Get a const reference to the field value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The contents of the field value as a <computeroutput>std::string_view</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="127" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a4527446080e24ea6552d307dc60117cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::Field::Field</definition>
        <argsstring>(BString &amp;&amp;rawField)</argsstring>
        <name>Field</name>
        <qualifiedname>BPrivate::Network::BHttpFields::Field::Field</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;&amp;</type>
          <declname>rawField</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="134" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a HTTP header field. </para>
    </briefdescription>
    <detaileddescription>
<para>This type represents a combination of a field name and a field value. In order to be used in a HTTP header, each object must contain data that is in compliance with the HTTP specification (RFC 7230).</para>
<para>Some official HTTP specifications give additional guidelines for how to interpret specific fields. This class, however, does not supply any additional parsing for those specializations.</para>
<para>Manipulation of the contents of a HTTP field will in most cases be done through the interface of the <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> object that owns this field.</para>
<para>This type has a special &apos;empty&apos; state. This means that they do not have a key and value. Empty objects only come into existence when explicitly instantiated with the constructor with no arguments, or after the contents has been moved to another object. Empty objects cannot be added to <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> objets. You do not have to check for empty fields when working with fields coming from <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> objects.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="111" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="112" bodyend="140"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1abc673300d40154b52ba357c84feee066" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Field</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a868062bb06799fc560b4369e52dcb45d" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Field</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a5708e4773bf198e6a5ae4880959df9ec" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Field</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a93f8f1a7356364e8e82270d21e186b34" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Field</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1aadec28092fdd68929d84df8d5eed8279" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Field</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a4527446080e24ea6552d307dc60117cc" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Field</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a699a0f410335f33d6ab34b9b16ced282" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>fName</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a5c7d4effb5048db0bd2fc586f056ed39" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>fRawField</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a733c84a676b75e9360872eab80060184" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>fValue</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1ae601531fc2ce05efb96bda88d4b10368" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>IsEmpty</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1af15525b6622bb20ec9042d3f0819a0b2" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Name</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1abf1b3bd840a943d2c4488cd66058ccc6" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1aba528215b4a166ecba57bf574626352d" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a735bfb608950414690e81876347ff9dc" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>RawField</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1Field_1a9235f0ccfa2db5a085a8db532c33a022" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::Field</scope><name>Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
