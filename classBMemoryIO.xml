<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMemoryIO" kind="class" language="C++" prot="public">
    <compoundname>BMemoryIO</compoundname>
    <basecompoundref refid="classBPositionIO" prot="public" virt="non-virtual">BPositionIO</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMemoryIO_1ad8980d3b689c4e7f54126c6d1a96c8cc" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMemoryIO::_reserved[1]</definition>
        <argsstring>[1]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMemoryIO::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="123" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMemoryIO_1a3719f577de38a10a4a0e634b5fc90351" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BMemoryIO::fBuffer</definition>
        <argsstring></argsstring>
        <name>fBuffer</name>
        <qualifiedname>BMemoryIO::fBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="118" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMemoryIO_1a80ab2ab5d6cf672ea64332ee6d626d16" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BMemoryIO::fBufferSize</definition>
        <argsstring></argsstring>
        <name>fBufferSize</name>
        <qualifiedname>BMemoryIO::fBufferSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="120" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMemoryIO_1af1e5245e7137795ec5033b64374b4bd6" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BMemoryIO::fLength</definition>
        <argsstring></argsstring>
        <name>fLength</name>
        <qualifiedname>BMemoryIO::fLength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="119" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMemoryIO_1ab64fb588ea70a50e2ecfc0825c33b775" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BMemoryIO::fPosition</definition>
        <argsstring></argsstring>
        <name>fPosition</name>
        <qualifiedname>BMemoryIO::fPosition</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="121" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMemoryIO_1a94c9a6036a63231cfee6d67515235d9b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BMemoryIO::fReadOnly</definition>
        <argsstring></argsstring>
        <name>fReadOnly</name>
        <qualifiedname>BMemoryIO::fReadOnly</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="117" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMemoryIO_1ad5d3157a3f83902f7e81a2c7b61750a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMemoryIO::BMemoryIO</definition>
        <argsstring>(const void *data, size_t length)</argsstring>
        <name>BMemoryIO</name>
        <qualifiedname>BMemoryIO::BMemoryIO</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>data</declname>
          <defname>buffer</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a read-only object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <computeroutput>const</computeroutput> (read-only) buffer to adopt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMemoryIO_1a278fa4cfbac1a04bf4c99bb2a16d2dc6" kindref="member">BMemoryIO(void *buffer, size_t length)</ref> for a read-write implementation.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1a278fa4cfbac1a04bf4c99bb2a16d2dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMemoryIO::BMemoryIO</definition>
        <argsstring>(void *data, size_t length)</argsstring>
        <name>BMemoryIO</name>
        <qualifiedname>BMemoryIO::BMemoryIO</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a read/write object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer to adopt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMemoryIO_1ad5d3157a3f83902f7e81a2c7b61750a6" kindref="member">BMemoryIO(const void *buffer, size_t length)</ref> for a read-only implementation.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1a4fb9a9e955c9cb4d9235f447f64876cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BMemoryIO::~BMemoryIO</definition>
        <argsstring>()</argsstring>
        <name>~BMemoryIO</name>
        <qualifiedname>BMemoryIO::~BMemoryIO</qualifiedname>
        <briefdescription>
<para>The destructor does nothing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="97" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1ac1dbae182c93e030cd9bf1cfc49596a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BMemoryIO::Position</definition>
        <argsstring>() const</argsstring>
        <name>Position</name>
        <qualifiedname>BMemoryIO::Position</qualifiedname>
        <reimplements refid="classBPositionIO_1a4ebc2cd7a7493767e79fa6d88657a84a">Position</reimplements>
        <briefdescription>
<para>Return the current position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current position as an off_t.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="105" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1a48959adcf4da35b53b965dcae570e5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BMemoryIO::ReadAt</definition>
        <argsstring>(off_t position, void *buffer, size_t size)</argsstring>
        <name>ReadAt</name>
        <qualifiedname>BMemoryIO::ReadAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a6eb7aff1d69bf3049b2b421da52fdf8f">ReadAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
          <defname>pos</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read from a given position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset where to start reading data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to copy the read bytes into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the <emphasis>buffer</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The amount of read bytes or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The position is less than zero or the buffer given on construction is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="99" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1a49898b4f0b195b025c896e8163d625b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BMemoryIO::Seek</definition>
        <argsstring>(off_t position, uint32 seekMode)</argsstring>
        <name>Seek</name>
        <qualifiedname>BMemoryIO::Seek</qualifiedname>
        <reimplements refid="classBPositionIO_1af8296875d9711dd498b0fbcace028abc">Seek</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>seekMode</declname>
          <defname>seek_mode</defname>
        </param>
        <briefdescription>
<para>Move the cursor to a given position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to move the cursor to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seek_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode determines where the cursor is placed. Possibilities include:<itemizedlist>
<listitem><para><computeroutput>SEEK_SET</computeroutput> The cursor is set to <emphasis>position</emphasis>.</para>
</listitem><listitem><para><computeroutput>SEEK_CUR</computeroutput> The <emphasis>position</emphasis> is added to the current position of the cursor.</para>
</listitem><listitem><para><computeroutput>SEEK_END</computeroutput> The cursor is put at the end of the data, plus <emphasis>position</emphasis> added to it.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new position.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="104" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1a422e492427167bc7d779d2a8fa92072b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMemoryIO::SetSize</definition>
        <argsstring>(off_t size)</argsstring>
        <name>SetSize</name>
        <qualifiedname>BMemoryIO::SetSize</qualifiedname>
        <reimplements refid="classBPositionIO_1a35613c7ee06c7c9583ca2505e1fdff28">SetSize</reimplements>
        <param>
          <type>off_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resize the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This method does not actually resize the buffer. If the new size is greater than the size of the buffer, resizing will fail. It will only succeed if the new size is less than the size of the buffer. The buffer itself will not be resized though.</para>
<para>This method might be useful in some cases. If the buffer is larger than the data it holds, changing the size will enable you to use the <ref refid="classBMemoryIO_1a49898b4f0b195b025c896e8163d625b7" kindref="member">Seek()</ref> method with the flag <computeroutput>SEEK_END</computeroutput> and not get an error if you read or write from that position, since you actually have a buffer at the end.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer is resized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NOT_ALLOWED</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer is read-only. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>size</computeroutput> is larger than the size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="107" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1ace4180382856baecafa545fc92aabd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BMemoryIO::WriteAt</definition>
        <argsstring>(off_t position, const void *buffer, size_t size)</argsstring>
        <name>WriteAt</name>
        <qualifiedname>BMemoryIO::WriteAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a0efce1a07d1d6509e8ec00598244ace1">WriteAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
          <defname>pos</defname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write at a given position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to copy the bytes from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The amount of bytes written or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_NOT_ALLOWED</parametername>
</parameternamelist>
<parameterdescription>
<para>The object is constructed as a read-only object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The position is less than zero or the buffer given on construction is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="101" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMemoryIO_1aa640acf70e1dfc2572c21690b4e070fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMemoryIO::BMemoryIO</definition>
        <argsstring>(const BMemoryIO &amp;)</argsstring>
        <name>BMemoryIO</name>
        <qualifiedname>BMemoryIO::BMemoryIO</qualifiedname>
        <param>
          <type>const <ref refid="classBMemoryIO" kindref="compound">BMemoryIO</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1a241283427b12fc44547af10363364871" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMemoryIO::_ReservedMemoryIO1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMemoryIO1</name>
        <qualifiedname>BMemoryIO::_ReservedMemoryIO1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="113" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1ac1a402992a1f31ac8bec04cb1d927122" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMemoryIO::_ReservedMemoryIO2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMemoryIO2</name>
        <qualifiedname>BMemoryIO::_ReservedMemoryIO2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="114" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMemoryIO_1aeae7f522c50c06090ffd57e0b707d3f2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMemoryIO" kindref="compound">BMemoryIO</ref> &amp;</type>
        <definition>BMemoryIO &amp; BMemoryIO::operator=</definition>
        <argsstring>(const BMemoryIO &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BMemoryIO::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBMemoryIO" kindref="compound">BMemoryIO</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="111" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> derived class that works on memory buffers. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is used if you require access that confirms to the <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> interface on memory buffers that you created. If you would like to use that interface on new buffers, have a look at <ref refid="classBMallocIO" kindref="compound">BMallocIO</ref>.</para>
<para>This class is particularly useful if you would like to use a class or method that are written to make use of the <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> interface. It might also be used for &apos;secure&apos; reading and writing from buffers, since this class automatically checks the bounds of anything you might want to do.</para>
<para>This class reimplements the <ref refid="classBPositionIO_1abce66c314f7cbd5ab6de0e6480bd7a00" kindref="member">Read()</ref>, <ref refid="classBPositionIO_1a50ec7f6b834893a153d46c0f3c0e09c4" kindref="member">Write()</ref>, <ref refid="classBMemoryIO_1a48959adcf4da35b53b965dcae570e5b7" kindref="member">ReadAt()</ref>, Writeat(), <ref refid="classBMemoryIO_1a49898b4f0b195b025c896e8163d625b7" kindref="member">Seek()</ref> and <ref refid="classBMemoryIO_1ac1dbae182c93e030cd9bf1cfc49596a5" kindref="member">Position()</ref> interface from <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="1">
        <label>BMemoryIO</label>
        <link refid="classBMemoryIO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="1">
        <label>BMemoryIO</label>
        <link refid="classBMemoryIO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/support/DataIO.h" line="93" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/DataIO.h" bodystart="93" bodyend="124"/>
    <listofallmembers>
      <member refid="classBMemoryIO_1ad8980d3b689c4e7f54126c6d1a96c8cc" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>_reserved</name></member>
      <member refid="classBMemoryIO_1a241283427b12fc44547af10363364871" prot="private" virt="virtual"><scope>BMemoryIO</scope><name>_ReservedMemoryIO1</name></member>
      <member refid="classBMemoryIO_1ac1a402992a1f31ac8bec04cb1d927122" prot="private" virt="virtual"><scope>BMemoryIO</scope><name>_ReservedMemoryIO2</name></member>
      <member refid="classBDataIO_1a67891b7afe78d6a77845dd0352218801" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>BDataIO</name></member>
      <member refid="classBMemoryIO_1a278fa4cfbac1a04bf4c99bb2a16d2dc6" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>BMemoryIO</name></member>
      <member refid="classBMemoryIO_1ad5d3157a3f83902f7e81a2c7b61750a6" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>BMemoryIO</name></member>
      <member refid="classBMemoryIO_1aa640acf70e1dfc2572c21690b4e070fe" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>BMemoryIO</name></member>
      <member refid="classBPositionIO_1a08051e865cd2623fab56c3733ecbf099" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>BPositionIO</name></member>
      <member refid="classBMemoryIO_1a3719f577de38a10a4a0e634b5fc90351" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>fBuffer</name></member>
      <member refid="classBMemoryIO_1a80ab2ab5d6cf672ea64332ee6d626d16" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>fBufferSize</name></member>
      <member refid="classBMemoryIO_1af1e5245e7137795ec5033b64374b4bd6" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>fLength</name></member>
      <member refid="classBDataIO_1a38a8df63b367585fe5e6b6a85c406d05" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>Flush</name></member>
      <member refid="classBMemoryIO_1ab64fb588ea70a50e2ecfc0825c33b775" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>fPosition</name></member>
      <member refid="classBMemoryIO_1a94c9a6036a63231cfee6d67515235d9b" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>fReadOnly</name></member>
      <member refid="classBPositionIO_1a5be704340522f36f80697c6bc883a00d" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>GetSize</name></member>
      <member refid="classBMemoryIO_1aeae7f522c50c06090ffd57e0b707d3f2" prot="private" virt="non-virtual"><scope>BMemoryIO</scope><name>operator=</name></member>
      <member refid="classBMemoryIO_1ac1dbae182c93e030cd9bf1cfc49596a5" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>Position</name></member>
      <member refid="classBPositionIO_1abce66c314f7cbd5ab6de0e6480bd7a00" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>Read</name></member>
      <member refid="classBMemoryIO_1a48959adcf4da35b53b965dcae570e5b7" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>ReadAt</name></member>
      <member refid="classBPositionIO_1a91bab7ae60926dbe3726bc73734318b6" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>ReadAtExactly</name></member>
      <member refid="classBDataIO_1a3a0b0fc36232531a1d8c1144a7d75741" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>ReadExactly</name></member>
      <member refid="classBMemoryIO_1a49898b4f0b195b025c896e8163d625b7" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>Seek</name></member>
      <member refid="classBMemoryIO_1a422e492427167bc7d779d2a8fa92072b" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>SetSize</name></member>
      <member refid="classBPositionIO_1a50ec7f6b834893a153d46c0f3c0e09c4" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>Write</name></member>
      <member refid="classBMemoryIO_1ace4180382856baecafa545fc92aabd85" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>WriteAt</name></member>
      <member refid="classBPositionIO_1a18100db340087226321c332182816d27" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>WriteAtExactly</name></member>
      <member refid="classBDataIO_1a0095cfffa454a82eac3dedda2e187ab7" prot="public" virt="non-virtual"><scope>BMemoryIO</scope><name>WriteExactly</name></member>
      <member refid="classBDataIO_1a45daa9db670dd2e5b83efcefcf8dbaed" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>~BDataIO</name></member>
      <member refid="classBMemoryIO_1a4fb9a9e955c9cb4d9235f447f64876cd" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>~BMemoryIO</name></member>
      <member refid="classBPositionIO_1a505defae83a1a6937c77b9acac2aaafe" prot="public" virt="virtual"><scope>BMemoryIO</scope><name>~BPositionIO</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
