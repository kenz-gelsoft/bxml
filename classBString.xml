<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBString" kind="class" language="C++" prot="public">
    <compoundname>BString</compoundname>
    <includes local="no">String.h</includes>
      <sectiondef kind="user-defined">
      <header>Access</header>
      <memberdef kind="function" id="classBString_1ae4fe78b06c8e3310093b80305e14ba87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BString::String</definition>
        <argsstring>() const</argsstring>
        <name>String</name>
        <qualifiedname>BString::String</qualifiedname>
        <briefdescription>
<para>Return a pointer to the object string, <computeroutput>NUL</computeroutput> terminated. </para>
        </briefdescription>
        <detaileddescription>
<para>The pointer to the object string is guaranteed to be <computeroutput>NUL</computeroutput> terminated. You can&apos;t modify or free the pointer. Once the <ref refid="classBString" kindref="compound">BString</ref> object is deleted, the pointer becomes invalid.</para>
<para>If you want to manipulate the internal string of the object directly, have a look at <ref refid="classBString_1abd7474f601d6a852de12c9dd9174b39e" kindref="member">LockBuffer()</ref>.</para>
<para><simplesect kind="return"><para>A pointer to the object string.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="31" column="11" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="465" bodyend="470"/>
        <referencedby refid="classBString_1a48bc1f85e34ef48d1c5c3972e106262c" compoundref="String_8h" startline="512" endline="516">Append</referencedby>
        <referencedby refid="classBString_1a7aa55c1fee43eab1ae357d1df3bb5ee7" compoundref="String_8h" startline="474" endline="477">HashValue</referencedby>
        <referencedby refid="classBString_1a52d78209b34b5e05eacc4e65cfd78300" compoundref="String_8h" startline="562" endline="565">operator!=</referencedby>
        <referencedby refid="classBString_1a90698a990c4711bf01841e23495ffdeb" compoundref="String_8h" startline="504" endline="508">operator+=</referencedby>
        <referencedby refid="classBString_1add02ca2563f6feaf405587c38f1bdd21" compoundref="String_8h" startline="534" endline="537">operator&lt;</referencedby>
        <referencedby refid="classBString_1a723ff118808c6481722b2a53c3832485" compoundref="String_8h" startline="541" endline="544">operator&lt;=</referencedby>
        <referencedby refid="classBString_1a70bcc0ac40a18bc31d0cdb6b81d9235b" compoundref="String_8h" startline="527" endline="530">operator==</referencedby>
        <referencedby refid="classBString_1a24212a40b3a0b409c20131f1175f4383" compoundref="String_8h" startline="555" endline="558">operator&gt;</referencedby>
        <referencedby refid="classBString_1aabad700660a6c44424218d5c6057ab94" compoundref="String_8h" startline="548" endline="551">operator&gt;=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5ca1e86dc0053bac5268d4e0057e103a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::Length</definition>
        <argsstring>() const</argsstring>
        <name>Length</name>
        <qualifiedname>BString::Length</qualifiedname>
        <briefdescription>
<para>Get the length of the string in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An integer with the length of the string, measured in bytes.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ab7324c44bfcbd8c8b590b257eafc7886" kindref="member">CountChars()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="32" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="449" bodyend="454"/>
        <referencedby refid="classBString_1a48bc1f85e34ef48d1c5c3972e106262c" compoundref="String_8h" startline="512" endline="516">Append</referencedby>
        <referencedby refid="classBString_1aed9151cb5999b9c42b8330d45fed0835" compoundref="String_8h" startline="495" endline="500">ByteAt</referencedby>
        <referencedby refid="classBString_1ad00595bb93ed1253c1f48b3fef24174c" compoundref="String_8h" startline="458" endline="461">IsEmpty</referencedby>
        <referencedby refid="classBString_1a90698a990c4711bf01841e23495ffdeb" compoundref="String_8h" startline="504" endline="508">operator+=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab7324c44bfcbd8c8b590b257eafc7886" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::CountChars</definition>
        <argsstring>() const</argsstring>
        <name>CountChars</name>
        <qualifiedname>BString::CountChars</qualifiedname>
        <briefdescription>
<para>Returns the length of the object measured in characters. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classBString" kindref="compound">BString</ref> is somewhat aware of UTF-8 characters, so this method will count the actual number of characters in the string.</para>
<para><simplesect kind="return"><para>An integer which is the number of characters in the string.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a5ca1e86dc0053bac5268d4e0057e103a" kindref="member">Length()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="33" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a7f3becb1690bccc3bbda8be16b27b702" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::CountBytes</definition>
        <argsstring>(int32 fromCharOffset, int32 charCount) const</argsstring>
        <name>CountBytes</name>
        <qualifiedname>BString::CountBytes</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>Count the number of bytes starting from a specified character. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classBString" kindref="compound">BString</ref> is somewhat aware of UTF-8 characters, which can take up more than one byte. With this method you can count the number of bytes a subset of the string contains.</para>
<para><simplesect kind="warning"><para>This method does not check whether the input is outside of the boundaries, so make sure that you check your input values.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the character (not the byte!) from which to start the count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to count</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer with the number of bytes.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="34" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ad00595bb93ed1253c1f48b3fef24174c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>BString::IsEmpty</qualifiedname>
        <briefdescription>
<para>Check whether the string is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns <computeroutput>true</computeroutput> if the string is empty.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="36" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="458" bodyend="461"/>
        <references refid="classBString_1a5ca1e86dc0053bac5268d4e0057e103a" compoundref="String_8h" startline="449" endline="454">Length</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a7aa55c1fee43eab1ae357d1df3bb5ee7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BString::HashValue</definition>
        <argsstring>() const</argsstring>
        <name>HashValue</name>
        <qualifiedname>BString::HashValue</qualifiedname>
        <briefdescription>
<para>Return a hash value for the current string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBString_1af8b4590dfe42afd26c24db5c583ce947" kindref="member">HashValue(const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="38" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="474" bodyend="477"/>
        <references refid="classBString_1a7aa55c1fee43eab1ae357d1df3bb5ee7" compoundref="String_8h" startline="474" endline="477">HashValue</references>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
        <referencedby refid="classBString_1a7aa55c1fee43eab1ae357d1df3bb5ee7" compoundref="String_8h" startline="474" endline="477">HashValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBString_1af8b4590dfe42afd26c24db5c583ce947" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>static uint32 BString::HashValue</definition>
        <argsstring>(const char *string)</argsstring>
        <name>HashValue</name>
        <qualifiedname>BString::HashValue</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Return the hash value of a specified <computeroutput>string</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows you to use the <ref refid="classBString_1a7aa55c1fee43eab1ae357d1df3bb5ee7" kindref="member">BString::HashValue()</ref> method on any arbitrary <computeroutput>string</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string that you want to have hashed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a7aa55c1fee43eab1ae357d1df3bb5ee7" kindref="member">HashValue()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="39" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assignment</header>
      <description><para>To assign a string to the object, thus overriding the previous string that was stored, there are different methods to use. Use one of the overloaded <ref refid="classBString_1a5ff4a59b5827b6d2e435d44252b2dbca" kindref="member">Adopt()</ref> methods to take over data from another object. Use one of the assignment operators to copy data from another object, or use one of the <ref refid="classBString_1a2669e638b5b7f72790df7110dbcf0e36" kindref="member">SetTo()</ref> methods for more advanced copying. </para>
</description>
      <memberdef kind="function" id="classBString_1a6f476b32944d005de684c11ccb5ecbaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator=</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>operator=</name>
        <qualifiedname>BString::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Re-initialize the object to a copy of the data of a <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a5ff4a59b5827b6d2e435d44252b2dbca" kindref="member">Adopt(BString&amp;)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a10f9c7bb1bee806540f81028301ff932" kindref="member">SetTo(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="42" column="8"/>
        <referencedby refid="classBString_1a2669e638b5b7f72790df7110dbcf0e36" compoundref="String_8h" startline="481" endline="484">SetTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBString_1a281d1abfd26fcf20f63c32053862611b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator=</definition>
        <argsstring>(const char *string)</argsstring>
        <name>operator=</name>
        <qualifiedname>BString::operator=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <briefdescription>
<para>Re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to a copy of the data of a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string data to re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a71bcdc15df3c1eb0be34877a25644874" kindref="member">SetTo(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="43" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a4e9d677b97f1bbaf449c35066b7db996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator=</definition>
        <argsstring>(char c)</argsstring>
        <name>operator=</name>
        <qualifiedname>BString::operator=</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to a character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>char</computeroutput> to re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="44" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a701b1349ac015b29c88cb3f06b6c26cb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator=</definition>
        <argsstring>(BString &amp;&amp;string) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BString::operator=</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;&amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Move the contents of <emphasis>string</emphasis> to this <ref refid="classBString" kindref="compound">BString</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis>string</emphasis> will no longer point to the same contents.</para>
<para><simplesect kind="note"><para>This method is only available for modern C++ (C++11 or later).</para>
</simplesect>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="46" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a2669e638b5b7f72790df7110dbcf0e36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetTo</definition>
        <argsstring>(const char *string)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BString::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <briefdescription>
<para>Re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to a copy of the data of a string. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBString_1a281d1abfd26fcf20f63c32053862611b" kindref="member">operator=(const char*)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string data to re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a71bcdc15df3c1eb0be34877a25644874" kindref="member">SetTo(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="49" column="8" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="481" bodyend="484"/>
        <references refid="classBString_1a6f476b32944d005de684c11ccb5ecbaa">operator=</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a71bcdc15df3c1eb0be34877a25644874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetTo</definition>
        <argsstring>(const char *string, int32 maxLength)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BString::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
<para>Re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to a copy of the data of a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string data to re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of characters (bytes) to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a281d1abfd26fcf20f63c32053862611b" kindref="member">operator=(const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="50" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5218576d7893f29d7fc51fdcb9e81474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetTo</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BString::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
          <defname>from</defname>
        </param>
        <briefdescription>
<para>Re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to a copy of the data of a <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The string data to re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a10f9c7bb1bee806540f81028301ff932" kindref="member">SetTo(const BString&amp;, int32)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a5ff4a59b5827b6d2e435d44252b2dbca" kindref="member">Adopt(BString&amp;)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="52" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5ff4a59b5827b6d2e435d44252b2dbca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Adopt</definition>
        <argsstring>(BString &amp;from)</argsstring>
        <name>Adopt</name>
        <qualifiedname>BString::Adopt</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Adopt the data of the given <ref refid="classBString" kindref="compound">BString</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method adopts the data from a <ref refid="classBString" kindref="compound">BString</ref> removing the data from <emphasis>from</emphasis> and putting it into the <ref refid="classBString" kindref="compound">BString</ref>.</para>
<para><simplesect kind="warning"><para>The object that is adopted from is not deleted, only its private data is initialized to a <computeroutput>NULL</computeroutput> string. If the <emphasis>from</emphasis> object was created on the heap you need to clean it up yourself.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The string data to adopt.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6f476b32944d005de684c11ccb5ecbaa" kindref="member">operator=(const BString&amp;)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="53" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a10f9c7bb1bee806540f81028301ff932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetTo</definition>
        <argsstring>(const BString &amp;string, int32 maxLength)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BString::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
<para>Re-initialize the string to a copy of the given <ref refid="classBString" kindref="compound">BString</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string data to re-initialize the <ref refid="classBString" kindref="compound">BString</ref> to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of characters (bytes) to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6f476b32944d005de684c11ccb5ecbaa" kindref="member">operator=(const BString&amp;)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a3d124f5a2ad90ef4fcf0c027125bd0c9" kindref="member">Adopt(BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3d124f5a2ad90ef4fcf0c027125bd0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Adopt</definition>
        <argsstring>(BString &amp;from, int32 maxLength)</argsstring>
        <name>Adopt</name>
        <qualifiedname>BString::Adopt</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
<para>Adopt the data of the given <ref refid="classBString" kindref="compound">BString</ref> object up to <emphasis>maxLength</emphasis> characters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method adopts the data from a <ref refid="classBString" kindref="compound">BString</ref> removing the data from <emphasis>from</emphasis> and putting it into the <ref refid="classBString" kindref="compound">BString</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The string object to adopt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of characters (bytes) to adopt.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a10f9c7bb1bee806540f81028301ff932" kindref="member">SetTo(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="56" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5c6bcd8d133f8561a7d2355273da4901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetTo</definition>
        <argsstring>(char c, int32 count)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BString::SetTo</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Re-initialize the object to a string composed of a character you specify. </para>
        </briefdescription>
        <detaileddescription>
<para>This method lets you specify the length of a string and what character you want the string to contain repeatedly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character you want to initialize the <ref refid="classBString" kindref="compound">BString</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a4e9d677b97f1bbaf449c35066b7db996" kindref="member">operator=(char c)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="58" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aeebfaa616dde1aac40cf73c63f99eefc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetToChars</definition>
        <argsstring>(const char *string, int32 charCount)</argsstring>
        <name>SetToChars</name>
        <qualifiedname>BString::SetToChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a71bcdc15df3c1eb0be34877a25644874" kindref="member">SetTo(const char*, int32)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a71bcdc15df3c1eb0be34877a25644874" kindref="member">SetTo(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="60" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a4d4520886cfef8eab82925c46cc57fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetToChars</definition>
        <argsstring>(const BString &amp;string, int32 charCount)</argsstring>
        <name>SetToChars</name>
        <qualifiedname>BString::SetToChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of SetTo(BString&amp;, int32) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>SetTo(BString&amp;, int32)</para>
</simplesect>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="61" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1afdffa6e960765b6ab05155e02274e94b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::AdoptChars</definition>
        <argsstring>(BString &amp;from, int32 charCount)</argsstring>
        <name>AdoptChars</name>
        <qualifiedname>BString::AdoptChars</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a3d124f5a2ad90ef4fcf0c027125bd0c9" kindref="member">Adopt(BString&amp;, int32)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The string data to start adopting from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of UTF-8 characters to adopt.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="62" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a41beabb582880a92965c632662c46fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetToFormat</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>SetToFormat</name>
        <qualifiedname>BString::SetToFormat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Sets the string to a formatted string ala <computeroutput>sprintf()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>format</emphasis> string to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest of the parameters that are filled into <emphasis>format</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="64" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a034adf1b10fd93ce8ade226461604867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetToFormatVarArgs</definition>
        <argsstring>(const char *format, va_list args)</argsstring>
        <name>SetToFormatVarArgs</name>
        <qualifiedname>BString::SetToFormatVarArgs</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Sets the string to a formatted string ala <computeroutput>sprintf()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>format</emphasis> string to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The rest of the parameters that are filled into <emphasis>format</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="66" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5176de54d44a37209861fc76875520c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::ScanWithFormat</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>ScanWithFormat</name>
        <qualifiedname>BString::ScanWithFormat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Parse a formatted string and save elements to variables ala <computeroutput>scanf()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>format</emphasis> string to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameters that you want to store the parsed data into.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method returns the number of items that were parsed.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="70" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a9928c16f310b8a04eb401a8cddaf617c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::ScanWithFormatVarArgs</definition>
        <argsstring>(const char *format, va_list args)</argsstring>
        <name>ScanWithFormatVarArgs</name>
        <qualifiedname>BString::ScanWithFormatVarArgs</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Parse a formatted string and save elements to variables ala <computeroutput>scanf()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>format</emphasis> string to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameters that you want to store the parsed data into.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method returns the number of items that were parsed.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="72" column="4"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Substring Copying</header>
      <memberdef kind="function" id="classBString_1aaaa5b02d053305f9cb22a5fb7b215931" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::CopyInto</definition>
        <argsstring>(BString &amp;into, int32 fromOffset, int32 length) const</argsstring>
        <name>CopyInto</name>
        <qualifiedname>BString::CopyInto</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Copy the object&apos;s data (or part of it) into another <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This methods makes sure you don&apos;t copy more bytes than are available in the string. If the length exceeds the length of the string, it only copies the number of characters that are actually available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to copy into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The (zero-based) offset where to begin the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns a pointer to the string passed as the <computeroutput>into</computeroutput> parameter.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="77" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aace25b8aa915c20c77a78e839aafa687" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BString::CopyInto</definition>
        <argsstring>(char *into, int32 fromOffset, int32 length) const</argsstring>
        <name>CopyInto</name>
        <qualifiedname>BString::CopyInto</qualifiedname>
        <param>
          <type>char *</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Copy the <ref refid="classBString" kindref="compound">BString</ref> data (or part of it) into the supplied buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This methods makes sure you don&apos;t copy more bytes than are available in the string. If the length exceeds the length of the string, it only copies the number of characters that are actually available.</para>
<para>It&apos;s up to you to make sure your buffer is large enough.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer where to copy the object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The (zero-based) offset where to begin the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ad66fac3eb976b63fa11ee333fe05eb97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::CopyCharsInto</definition>
        <argsstring>(BString &amp;into, int32 fromCharOffset, int32 charCount) const</argsstring>
        <name>CopyCharsInto</name>
        <qualifiedname>BString::CopyCharsInto</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
          <defname>fromOffset</defname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1aaaa5b02d053305f9cb22a5fb7b215931" kindref="member">CopyInto(BString&amp;, int32, int32) const</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to copy into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The (zero-based) offset in bytes where to begin the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns a pointer to the string passed as the <computeroutput>into</computeroutput> parameter.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1aaaa5b02d053305f9cb22a5fb7b215931" kindref="member">CopyInto(BString&amp;, int32, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="82" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a9b80abd2d6e9ffb53dfaf36a7c5679c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::CopyCharsInto</definition>
        <argsstring>(char *into, int32 *intoLength, int32 fromCharOffset, int32 charCount) const</argsstring>
        <name>CopyCharsInto</name>
        <qualifiedname>BString::CopyCharsInto</qualifiedname>
        <param>
          <type>char *</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>intoLength</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1aace25b8aa915c20c77a78e839aafa687" kindref="member">CopyInto(char*, int32, int32) const</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer where to copy the object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intoLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of <emphasis>into</emphasis> in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The (zero-based) offset UTF-8 characters where to begin the copy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1aace25b8aa915c20c77a78e839aafa687" kindref="member">CopyInto(char*, int32, int32) const</ref></para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if <emphasis>into</emphasis> was <computeroutput>NULL</computeroutput>, <computeroutput>true</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="84" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5e862dbc2da0b2813cf0e848910a834f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::Split</definition>
        <argsstring>(const char *separator, bool noEmptyStrings, BStringList &amp;_list) const</argsstring>
        <name>Split</name>
        <qualifiedname>BString::Split</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>noEmptyStrings</declname>
        </param>
        <param>
          <type><ref refid="classBStringList" kindref="compound">BStringList</ref> &amp;</type>
          <declname>_list</declname>
        </param>
        <briefdescription>
<para>Split the string by the <emphasis>separator</emphasis> chars into <emphasis>_list</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>separator</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of <emphasis>separator</emphasis> characters to split on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noEmptyStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, do not add empty strings to <emphasis>_list</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_list</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBStringList" kindref="compound">BStringList</ref> to add the strings into.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="87" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Appending</header>
      <memberdef kind="function" id="classBString_1a90698a990c4711bf01841e23495ffdeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator+=</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>operator+=</name>
        <qualifiedname>BString::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Append the given <emphasis>string</emphasis> to the end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a08141e8a3d6d35d7a9c590a7550ead5f" kindref="member">Append(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="91" column="8" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="504" bodyend="508"/>
        <references refid="classBString_1a5ca1e86dc0053bac5268d4e0057e103a" compoundref="String_8h" startline="449" endline="454">Length</references>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
        <referencedby refid="classBString_1a7f864616085bf5ff4261ab775f698ea3" compoundref="String_8h" startline="520" endline="523">Append</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBString_1a98889adc4a2b87b38479e7cfe241b066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator+=</definition>
        <argsstring>(const char *string)</argsstring>
        <name>operator+=</name>
        <qualifiedname>BString::operator+=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <briefdescription>
<para>Append the given string to the end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the NULL-terminated string to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a0a027c7e3843bdb54d75b7825e0778c4" kindref="member">Append(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="92" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a323b0866c0eadde4e981c7d9314f34dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator+=</definition>
        <argsstring>(char c)</argsstring>
        <name>operator+=</name>
        <qualifiedname>BString::operator+=</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Append the given character to the end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6f181bee93ed5c280c93f18f32ee5751" kindref="member">Append(char, int32)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="93" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a48bc1f85e34ef48d1c5c3972e106262c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Append</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>Append</name>
        <qualifiedname>BString::Append</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Append the given <emphasis>string</emphasis> to the end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a08141e8a3d6d35d7a9c590a7550ead5f" kindref="member">Append(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="95" column="8" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="512" bodyend="516"/>
        <references refid="classBString_1a5ca1e86dc0053bac5268d4e0057e103a" compoundref="String_8h" startline="449" endline="454">Length</references>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a7f864616085bf5ff4261ab775f698ea3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Append</definition>
        <argsstring>(const char *string)</argsstring>
        <name>Append</name>
        <qualifiedname>BString::Append</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <briefdescription>
<para>Append the string data to the end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBString_1a98889adc4a2b87b38479e7cfe241b066" kindref="member">operator+=(const char *str)</ref>.</para>
<para><simplesect kind="see"><para><ref refid="classBString_1a0a027c7e3843bdb54d75b7825e0778c4" kindref="member">Append(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="96" column="8" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="520" bodyend="523"/>
        <references refid="classBString_1a90698a990c4711bf01841e23495ffdeb" compoundref="String_8h" startline="504" endline="508">operator+=</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a08141e8a3d6d35d7a9c590a7550ead5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Append</definition>
        <argsstring>(const BString &amp;string, int32 length)</argsstring>
        <name>Append</name>
        <qualifiedname>BString::Append</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Append a part of the given <emphasis>string</emphasis> to the end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a90698a990c4711bf01841e23495ffdeb" kindref="member">operator+=(const BString&amp;)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="98" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a0a027c7e3843bdb54d75b7825e0778c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Append</definition>
        <argsstring>(const char *string, int32 length)</argsstring>
        <name>Append</name>
        <qualifiedname>BString::Append</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Append a part of the given string to end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the string to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a98889adc4a2b87b38479e7cfe241b066" kindref="member">operator+=(const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="99" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6f181bee93ed5c280c93f18f32ee5751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Append</definition>
        <argsstring>(char c, int32 count)</argsstring>
        <name>Append</name>
        <qualifiedname>BString::Append</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Append the given character repeatedly to the end of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of times this character should be appended.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a323b0866c0eadde4e981c7d9314f34dc" kindref="member">operator+=(char c)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="100" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a54dc7837cc9b83344bc9223a26e97c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::AppendChars</definition>
        <argsstring>(const BString &amp;string, int32 charCount)</argsstring>
        <name>AppendChars</name>
        <qualifiedname>BString::AppendChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a08141e8a3d6d35d7a9c590a7550ead5f" kindref="member">Append(const BString&amp;, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of UTF-8 characters to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a08141e8a3d6d35d7a9c590a7550ead5f" kindref="member">Append(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="102" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a469c25b8b5c400e00d05765b7c10112c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::AppendChars</definition>
        <argsstring>(const char *string, int32 charCount)</argsstring>
        <name>AppendChars</name>
        <qualifiedname>BString::AppendChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a0a027c7e3843bdb54d75b7825e0778c4" kindref="member">Append(const char*, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of UTF-8 characters to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a0a027c7e3843bdb54d75b7825e0778c4" kindref="member">Append(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="103" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Prepending</header>
      <memberdef kind="function" id="classBString_1a7ee2c0002c617d8d1ba12a878d2c88ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Prepend</definition>
        <argsstring>(const char *string)</argsstring>
        <name>Prepend</name>
        <qualifiedname>BString::Prepend</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <briefdescription>
<para>Prepend the given string to the beginning of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to prepend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a24ffc4d0d34449f58e044e71bd74407a" kindref="member">Prepend(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="106" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6cb0db9ce9bc27d302870b0afb703e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Prepend</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>Prepend</name>
        <qualifiedname>BString::Prepend</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Prepend the given <ref refid="classBString" kindref="compound">BString</ref> to the beginning of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to prepend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a52f9e38ca2c92373dc36d727e3e9b179" kindref="member">Prepend(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="107" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a24ffc4d0d34449f58e044e71bd74407a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Prepend</definition>
        <argsstring>(const char *string, int32 length)</argsstring>
        <name>Prepend</name>
        <qualifiedname>BString::Prepend</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Prepend the given string to the beginning of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to prepend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to prepend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a7ee2c0002c617d8d1ba12a878d2c88ce" kindref="member">Prepend(const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="108" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a52f9e38ca2c92373dc36d727e3e9b179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Prepend</definition>
        <argsstring>(const BString &amp;string, int32 length)</argsstring>
        <name>Prepend</name>
        <qualifiedname>BString::Prepend</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Prepend the given <ref refid="classBString" kindref="compound">BString</ref> to the beginning of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to prepend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to prepend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6cb0db9ce9bc27d302870b0afb703e19" kindref="member">Prepend(const BString&amp;)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="109" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a9a836eab3edf578cfb01f02f280e061e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Prepend</definition>
        <argsstring>(char c, int32 count)</argsstring>
        <name>Prepend</name>
        <qualifiedname>BString::Prepend</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Prepend the given character <emphasis>count</emphasis> times to the beginning of the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to prepend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of times this character should be prepended.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="110" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aeaec6098d2b377d0b111881e0d808c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::PrependChars</definition>
        <argsstring>(const char *string, int32 charCount)</argsstring>
        <name>PrependChars</name>
        <qualifiedname>BString::PrependChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a24ffc4d0d34449f58e044e71bd74407a" kindref="member">Prepend(const char*, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to prepend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of UTF-8 characters to prepend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a24ffc4d0d34449f58e044e71bd74407a" kindref="member">Prepend(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="112" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a07062bf52a8c5bbc53e278c6c6b4e172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::PrependChars</definition>
        <argsstring>(const BString &amp;string, int32 charCount)</argsstring>
        <name>PrependChars</name>
        <qualifiedname>BString::PrependChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a52f9e38ca2c92373dc36d727e3e9b179" kindref="member">Prepend(const BString&amp;, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to prepend. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of UTF-8 characters to prepend.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a52f9e38ca2c92373dc36d727e3e9b179" kindref="member">Prepend(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="113" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inserting</header>
      <memberdef kind="function" id="classBString_1afb0fc47dfd9dcd9e8617efefbce9d529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Insert</definition>
        <argsstring>(const char *string, int32 position)</argsstring>
        <name>Insert</name>
        <qualifiedname>BString::Insert</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Inserts the given string at the given position into the <ref refid="classBString" kindref="compound">BString</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes where to insert the <emphasis>string</emphasis> into the <ref refid="classBString" kindref="compound">BString</ref>&apos;s data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6520e5056a0d5aa7913f9e28d69156b3" kindref="member">Insert(const char*, int32, int32)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a889bdacd0e127d234418f74a978f35f3" kindref="member">Insert(const char*, int32, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="117" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6520e5056a0d5aa7913f9e28d69156b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Insert</definition>
        <argsstring>(const char *string, int32 length, int32 position)</argsstring>
        <name>Insert</name>
        <qualifiedname>BString::Insert</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Inserts the given string at the given position into the <ref refid="classBString" kindref="compound">BString</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes into the data of the <ref refid="classBString" kindref="compound">BString</ref> where to insert the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1afb0fc47dfd9dcd9e8617efefbce9d529" kindref="member">Insert(const char*, int32)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a889bdacd0e127d234418f74a978f35f3" kindref="member">Insert(const char*, int32, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="118" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a889bdacd0e127d234418f74a978f35f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Insert</definition>
        <argsstring>(const char *string, int32 fromOffset, int32 length, int32 position)</argsstring>
        <name>Insert</name>
        <qualifiedname>BString::Insert</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Inserts the given string at the given position into the <ref refid="classBString" kindref="compound">BString</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes in the <emphasis>string</emphasis> to be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes into the data of the <ref refid="classBString" kindref="compound">BString</ref> where to insert the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1afb0fc47dfd9dcd9e8617efefbce9d529" kindref="member">Insert(const char*, int32)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6520e5056a0d5aa7913f9e28d69156b3" kindref="member">Insert(const char*, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="120" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac0dce8c1f797eeebce8a16a03ef5ee47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Insert</definition>
        <argsstring>(const BString &amp;string, int32 position)</argsstring>
        <name>Insert</name>
        <qualifiedname>BString::Insert</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Inserts the given <ref refid="classBString" kindref="compound">BString</ref> at the given position into the <ref refid="classBString" kindref="compound">BString</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes into the data of the <ref refid="classBString" kindref="compound">BString</ref> where to insert the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a533b9a6d36e1d3e73bbaca66e9d6e28b" kindref="member">Insert(const BString&amp;, int32, int32)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1abee262e92886c0f16f146faecd389ad3" kindref="member">Insert(const BString&amp;, int32, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="122" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a533b9a6d36e1d3e73bbaca66e9d6e28b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Insert</definition>
        <argsstring>(const BString &amp;string, int32 length, int32 position)</argsstring>
        <name>Insert</name>
        <qualifiedname>BString::Insert</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Inserts the given <ref refid="classBString" kindref="compound">BString</ref> at the given position into the <ref refid="classBString" kindref="compound">BString</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes into the data of the <ref refid="classBString" kindref="compound">BString</ref> where to insert the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac0dce8c1f797eeebce8a16a03ef5ee47" kindref="member">Insert(const BString&amp;, int32)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1abee262e92886c0f16f146faecd389ad3" kindref="member">Insert(const BString&amp;, int32, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="123" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1abee262e92886c0f16f146faecd389ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Insert</definition>
        <argsstring>(const BString &amp;string, int32 fromOffset, int32 length, int32 position)</argsstring>
        <name>Insert</name>
        <qualifiedname>BString::Insert</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Inserts the given string at the given position into the <ref refid="classBString" kindref="compound">BString</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes of the string to be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of bytes to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes into the data of the <ref refid="classBString" kindref="compound">BString</ref> where to insert the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac0dce8c1f797eeebce8a16a03ef5ee47" kindref="member">Insert(const BString&amp;, int32)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a533b9a6d36e1d3e73bbaca66e9d6e28b" kindref="member">Insert(const BString&amp;, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="125" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a38039ae5818c3fe85f5306b87c5e6462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Insert</definition>
        <argsstring>(char c, int32 count, int32 position)</argsstring>
        <name>Insert</name>
        <qualifiedname>BString::Insert</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>position</declname>
          <defname>pos</defname>
        </param>
        <briefdescription>
<para>Inserts the given character repeatedly at the given position into the <ref refid="classBString" kindref="compound">BString</ref> data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of times to insert the character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes into the data of the <ref refid="classBString" kindref="compound">BString</ref> where to insert the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="127" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a45ba52319aefb3f5b1cc2257a071c7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::InsertChars</definition>
        <argsstring>(const char *string, int32 charPosition)</argsstring>
        <name>InsertChars</name>
        <qualifiedname>BString::InsertChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charPosition</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1afb0fc47dfd9dcd9e8617efefbce9d529" kindref="member">Insert(const char*, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters where to insert the string into the data of the <ref refid="classBString" kindref="compound">BString</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1afb0fc47dfd9dcd9e8617efefbce9d529" kindref="member">Insert(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="129" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a8a478c57baf2a8a2257dea9ce019d947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::InsertChars</definition>
        <argsstring>(const char *string, int32 charCount, int32 charPosition)</argsstring>
        <name>InsertChars</name>
        <qualifiedname>BString::InsertChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charPosition</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a6520e5056a0d5aa7913f9e28d69156b3" kindref="member">Insert(const char*, int32, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters where to insert the string into the data of the <ref refid="classBString" kindref="compound">BString</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6520e5056a0d5aa7913f9e28d69156b3" kindref="member">Insert(const char*, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="130" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a439203cf7987f6a4db5d975e0211f65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::InsertChars</definition>
        <argsstring>(const char *string, int32 fromCharOffset, int32 charCount, int32 charPosition)</argsstring>
        <name>InsertChars</name>
        <qualifiedname>BString::InsertChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charPosition</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a889bdacd0e127d234418f74a978f35f3" kindref="member">Insert(const char*, int32, int32, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters of the string to be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters where to insert the string into the data of the <ref refid="classBString" kindref="compound">BString</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a889bdacd0e127d234418f74a978f35f3" kindref="member">Insert(const char*, int32, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="132" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a66128d146a7b1ecdfdd05f7bfa0e2d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::InsertChars</definition>
        <argsstring>(const BString &amp;string, int32 charPosition)</argsstring>
        <name>InsertChars</name>
        <qualifiedname>BString::InsertChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charPosition</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1ac0dce8c1f797eeebce8a16a03ef5ee47" kindref="member">Insert(const BString&amp;, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters where to insert the string into the data of the <ref refid="classBString" kindref="compound">BString</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac0dce8c1f797eeebce8a16a03ef5ee47" kindref="member">Insert(const BString&amp;, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="135" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a4aa5c50712f6c1641dc0aec266a01691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::InsertChars</definition>
        <argsstring>(const BString &amp;string, int32 charCount, int32 charPosition)</argsstring>
        <name>InsertChars</name>
        <qualifiedname>BString::InsertChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charPosition</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a533b9a6d36e1d3e73bbaca66e9d6e28b" kindref="member">Insert(const BString&amp;, int32, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters where to insert the string into the data of the <ref refid="classBString" kindref="compound">BString</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a533b9a6d36e1d3e73bbaca66e9d6e28b" kindref="member">Insert(const BString&amp;, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="137" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a190fe82234de8870a5ca176fa7bcb27a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::InsertChars</definition>
        <argsstring>(const BString &amp;string, int32 fromCharOffset, int32 charCount, int32 charPosition)</argsstring>
        <name>InsertChars</name>
        <qualifiedname>BString::InsertChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charPosition</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1abee262e92886c0f16f146faecd389ad3" kindref="member">Insert(const BString&amp;, int32, int32, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters of the string to be inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters where to insert the string into the data of the <ref refid="classBString" kindref="compound">BString</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1abee262e92886c0f16f146faecd389ad3" kindref="member">Insert(const BString&amp;, int32, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="139" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removing</header>
      <memberdef kind="function" id="classBString_1a723a55429c837aa040673cc61d9f2452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Truncate</definition>
        <argsstring>(int32 newLength, bool lazy=true)</argsstring>
        <name>Truncate</name>
        <qualifiedname>BString::Truncate</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>newLength</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lazy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Truncate the string to the new length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The new length of the string in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lazy</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the memory-optimization is postponed until later.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="144" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a09e0e1b8622dee073ebcbe4e2dccb3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::TruncateChars</definition>
        <argsstring>(int32 newCharCount, bool lazy=true)</argsstring>
        <name>TruncateChars</name>
        <qualifiedname>BString::TruncateChars</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>newCharCount</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lazy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a723a55429c837aa040673cc61d9f2452" kindref="member">Truncate(int32, bool)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newCharCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The new length of the string in UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lazy</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the memory-optimization is postponed until later.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a723a55429c837aa040673cc61d9f2452" kindref="member">Truncate(int32, bool)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="145" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a753af1661c9a723bf141518cdbcf9e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Remove</definition>
        <argsstring>(int32 from, int32 length)</argsstring>
        <name>Remove</name>
        <qualifiedname>BString::Remove</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Remove some bytes, starting at the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start removing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="147" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a9be5bd09908575d98f6dc3de443fd3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveChars</definition>
        <argsstring>(int32 fromCharOffset, int32 charCount)</argsstring>
        <name>RemoveChars</name>
        <qualifiedname>BString::RemoveChars</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a753af1661c9a723bf141518cdbcf9e05" kindref="member">Remove(int32, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters to start removing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a753af1661c9a723bf141518cdbcf9e05" kindref="member">Remove(int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="148" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6b0d529b77c4b160703fb94082eb8708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveFirst</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>RemoveFirst</name>
        <qualifiedname>BString::RemoveFirst</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Remove the first occurrence of the given <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="150" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aa8d7576976583ab0d19490ec7c597313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveLast</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>RemoveLast</name>
        <qualifiedname>BString::RemoveLast</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Remove the last occurrence of the given <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="151" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac83f3f16d78d9e481904ea40742f38aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveAll</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>RemoveAll</name>
        <qualifiedname>BString::RemoveAll</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Remove all occurrences of the given <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="152" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab62c80c4a2101ed8fe366d4a4b047340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveFirst</definition>
        <argsstring>(const char *string)</argsstring>
        <name>RemoveFirst</name>
        <qualifiedname>BString::RemoveFirst</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Remove the first occurrence of the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the string to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="154" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af81cd6acaed80eeb0703501f7f65471b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveLast</definition>
        <argsstring>(const char *string)</argsstring>
        <name>RemoveLast</name>
        <qualifiedname>BString::RemoveLast</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Remove the last occurrence of the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the string to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="155" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ae39d87233489f74ff4e8608773e8069b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveAll</definition>
        <argsstring>(const char *string)</argsstring>
        <name>RemoveAll</name>
        <qualifiedname>BString::RemoveAll</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>str</defname>
        </param>
        <briefdescription>
<para>Remove all occurrences of the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the string to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="156" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3eb8f3427ed635028c745cefad043d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveSet</definition>
        <argsstring>(const char *setOfBytesToRemove)</argsstring>
        <name>RemoveSet</name>
        <qualifiedname>BString::RemoveSet</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>setOfBytesToRemove</declname>
          <defname>setOfCharsToRemove</defname>
        </param>
        <briefdescription>
<para>Remove all the characters specified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setOfCharsToRemove</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of characters to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="158" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ae17488d24d13fcbf243c914736160271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::RemoveCharsSet</definition>
        <argsstring>(const char *setOfCharsToRemove)</argsstring>
        <name>RemoveCharsSet</name>
        <qualifiedname>BString::RemoveCharsSet</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>setOfCharsToRemove</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a3eb8f3427ed635028c745cefad043d02" kindref="member">RemoveSet(const char*)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setOfCharsToRemove</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of characters to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a3eb8f3427ed635028c745cefad043d02" kindref="member">RemoveSet(const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="159" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a8425b164bcf405ae472e340455b70dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::MoveInto</definition>
        <argsstring>(BString &amp;into, int32 from, int32 length)</argsstring>
        <name>MoveInto</name>
        <qualifiedname>BString::MoveInto</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Move the <ref refid="classBString" kindref="compound">BString</ref> data (or part of it) into another <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to move the string into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset (zero-based) in bytes where to begin the move. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>into</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="161" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aa486017d64fc2fb1d54924e0dd8e2729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BString::MoveInto</definition>
        <argsstring>(char *into, int32 from, int32 length)</argsstring>
        <name>MoveInto</name>
        <qualifiedname>BString::MoveInto</qualifiedname>
        <param>
          <type>char *</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Move the <ref refid="classBString" kindref="compound">BString</ref> data (or part of it) into the given buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to move the string into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset (zero-based) in bytes where to begin the move. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="162" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a116e29d64f4ba34b265b818ae9c70727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::MoveCharsInto</definition>
        <argsstring>(BString &amp;into, int32 fromCharOffset, int32 charCount)</argsstring>
        <name>MoveCharsInto</name>
        <qualifiedname>BString::MoveCharsInto</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a8425b164bcf405ae472e340455b70dc1" kindref="member">MoveInto(BString&amp;, int32, int32)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> where to move the string into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset (zero-based) in UTF-8 characters where to begin the move. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a8425b164bcf405ae472e340455b70dc1" kindref="member">MoveInto(BString&amp;, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="164" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ae5c0161712c97d4ace5019f7f2f76c9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::MoveCharsInto</definition>
        <argsstring>(char *into, int32 *intoLength, int32 fromCharOffset, int32 charCount)</argsstring>
        <name>MoveCharsInto</name>
        <qualifiedname>BString::MoveCharsInto</qualifiedname>
        <param>
          <type>char *</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>intoLength</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of MoveInto(char*, int32*, int32, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>into</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to move the string into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intoLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset (zero-based) in bytes where to begin the move. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset (zero-based) in UTF-8 characters where to begin the move. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> if <emphasis>into</emphasis> was <computeroutput>NULL</computeroutput>, <computeroutput>true</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para>MoveInto(char*, int32*, int32, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="166" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3eccca884e2478ae8013488a46839d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Trim</definition>
        <argsstring>()</argsstring>
        <name>Trim</name>
        <qualifiedname>BString::Trim</qualifiedname>
        <briefdescription>
<para>Removes spaces from the beginning and end of the string. </para>
        </briefdescription>
        <detaileddescription>
<para>The definition of a space is set by the <computeroutput>isspace()</computeroutput> function.</para>
<para><simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="346" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparison</header>
      <description><para>There are two different comparison methods. First of all there is the whole range of operators that return a boolean value, secondly there are methods that return an integer value, both case sensitive and case insensitive.</para>
<para>There are also global comparison operators and global compare functions. You might need these in case you have a sort routine that takes a generic comparison function, such as <ref refid="classBList_1abe55aa005c16d47128365775b7aee021" kindref="member">BList::SortItems()</ref>. See the <ref refid="String_8h" kindref="compound">String.h</ref> documentation file to see the specifics, though basically there are the same as implemented in this class. </para>
</description>
      <memberdef kind="function" id="classBString_1add02ca2563f6feaf405587c38f1bdd21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&lt;</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>BString::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is less than the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="170" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="534" bodyend="537"/>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a723ff118808c6481722b2a53c3832485" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&lt;=</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>BString::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is less than or equal to the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="171" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="541" bodyend="544"/>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a70bcc0ac40a18bc31d0cdb6b81d9235b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator==</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BString::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is equal to the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="172" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="527" bodyend="530"/>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
        <referencedby refid="classBString_1a68a2d28b93ee8348163a320bb1054b22" compoundref="String_8h" startline="569" endline="572">operator!=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBString_1aabad700660a6c44424218d5c6057ab94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&gt;=</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>BString::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is greater than or equal to the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="173" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="548" bodyend="551"/>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a24212a40b3a0b409c20131f1175f4383" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&gt;</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>BString::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is greater than the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="174" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="555" bodyend="558"/>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a52d78209b34b5e05eacc4e65cfd78300" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator!=</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BString::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is not equal to the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="175" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="562" bodyend="565"/>
        <references refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" compoundref="String_8h" startline="465" endline="470">String</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1aa6886f45135f335ed05f002bd19f842d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&lt;</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>BString::operator&lt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is less than the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a7c660e1dd749f068967cfb0f900bd96d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&lt;=</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>BString::operator&lt;=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is less than or equal to the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a67138abea38871ddb5dfc8646a1676f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator==</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BString::operator==</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this <ref refid="classBString" kindref="compound">BString</ref> is equal to the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="179" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1acc3c2882848a1bcd43c37fb1a44e7665" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&gt;=</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>BString::operator&gt;=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this string is more than or equal to a given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="180" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af7bb77100b7103935c0b325b7666e3fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator&gt;</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>BString::operator&gt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this string is more than a given string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="181" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a68a2d28b93ee8348163a320bb1054b22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::operator!=</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BString::operator!=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare if this string is not equal to a given string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="182" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="569" bodyend="572"/>
        <references refid="classBString_1a70bcc0ac40a18bc31d0cdb6b81d9235b" compoundref="String_8h" startline="527" endline="530">operator==</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a37b1225aed929fc53e83616a7f693904" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BString::operator const char *</definition>
        <argsstring>() const</argsstring>
        <name>operator const char *</name>
        <qualifiedname>BString::operator const char *</qualifiedname>
        <briefdescription>
<para>Return an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An empty string.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="184" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a58a9b35feb85f415771c9270d01c1951" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::Compare</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>Compare</name>
        <qualifiedname>BString::Compare</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="187" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a0fe7635d7e01c69fb5516b8d8ff73152" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::Compare</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>Compare</name>
        <qualifiedname>BString::Compare</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a58a9b35feb85f415771c9270d01c1951" kindref="member">Compare(const BString&amp;) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="188" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a869db6f939ee4465235969581a882403" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::Compare</definition>
        <argsstring>(const BString &amp;string, int32 length) const</argsstring>
        <name>Compare</name>
        <qualifiedname>BString::Compare</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare <emphasis>length</emphasis> characters of this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="189" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3eed375c60e77025662dc8676e683f19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::Compare</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>Compare</name>
        <qualifiedname>BString::Compare</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare <emphasis>length</emphasis> characters of this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a869db6f939ee4465235969581a882403" kindref="member">Compare(const BString&amp;, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="190" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac921329452137b65645e8e228970677c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::CompareAt</definition>
        <argsstring>(size_t offset, const BString &amp;string, int32 length) const</argsstring>
        <name>CompareAt</name>
        <qualifiedname>BString::CompareAt</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare <emphasis>length</emphasis> of characters of this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis>, starting at <emphasis>offset</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset (in bytes) to start comparison. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a869db6f939ee4465235969581a882403" kindref="member">Compare(const BString&amp;, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="192" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a9318df765a0691c02023cf37dffb76a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::CompareChars</definition>
        <argsstring>(const BString &amp;string, int32 charCount) const</argsstring>
        <name>CompareChars</name>
        <qualifiedname>BString::CompareChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of Compare(const BString&amp;, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Compare(const BString&amp;, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="195" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a4f01a732af22cca3441e08e1db3fedf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::CompareChars</definition>
        <argsstring>(const char *string, int32 charCount) const</argsstring>
        <name>CompareChars</name>
        <qualifiedname>BString::CompareChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charCount</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of Compare(const char*, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>charCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of UTF-8 characters to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Compare(const char*, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="197" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1afa13ca0ea3b514faf2f17fe3c4eb1a09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::ICompare</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>ICompare</name>
        <qualifiedname>BString::ICompare</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a58a9b35feb85f415771c9270d01c1951" kindref="member">Compare(const BString&amp;) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="200" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a74937047ffe3dd74335b051495c7f839" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::ICompare</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>ICompare</name>
        <qualifiedname>BString::ICompare</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a58a9b35feb85f415771c9270d01c1951" kindref="member">Compare(const BString&amp;) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="201" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aede54750b9c8de8ebce055863f2ce95d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::ICompare</definition>
        <argsstring>(const BString &amp;string, int32 length) const</argsstring>
        <name>ICompare</name>
        <qualifiedname>BString::ICompare</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare <emphasis>length</emphasis> characters of this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a869db6f939ee4465235969581a882403" kindref="member">Compare(const BString&amp;, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="202" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a39b56ad4107e3d45958e7b2a8ff6e33f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BString::ICompare</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>ICompare</name>
        <qualifiedname>BString::ICompare</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Lexicographically compare <emphasis>length</emphasis> characters of this <ref refid="classBString" kindref="compound">BString</ref> to another <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to compare against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to compare</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An int representing the strings relationship to each other. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically after <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>=0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> is equal to <emphasis>string</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> sorts lexicographically before <emphasis>string</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a869db6f939ee4465235969581a882403" kindref="member">Compare(const BString&amp;, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="203" column="4"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Searching</header>
      <memberdef kind="function" id="classBString_1ac77d0a8511bb3d8a513c2aaa27aef8d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirst</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>FindFirst</name>
        <qualifiedname>BString::FindFirst</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found or <computeroutput>B_ERROR</computeroutput> if we could not find <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1aa1b75e6600e3cad8a209ee465a6f5c75" kindref="member">IFindFirst(const BString&amp;) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="206" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a92a8f3038d38e86070c6053ce2ef7ad7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirst</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>FindFirst</name>
        <qualifiedname>BString::FindFirst</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a2c26c2df73056c1e45d2cd1994e7f320" kindref="member">IFindFirst(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ae729298df417b0c61a67f49e5619c72f" kindref="member">StartsWith(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac78677d2cb95830828d2c4473248efa4" kindref="member">StartsWith(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="207" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a8b7c60afce76ec240a853efeaecb2fca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirst</definition>
        <argsstring>(const BString &amp;string, int32 fromOffset) const</argsstring>
        <name>FindFirst</name>
        <qualifiedname>BString::FindFirst</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given <emphasis>string</emphasis> starting from the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer which is the offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a20207dfcbd00f4047e3e40863e1ea1a1" kindref="member">IFindFirst(const BString&amp;, int32) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac78677d2cb95830828d2c4473248efa4" kindref="member">StartsWith(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="208" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6c15db8dcc662b33937c9006f1cbf9f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirst</definition>
        <argsstring>(const char *string, int32 fromOffset) const</argsstring>
        <name>FindFirst</name>
        <qualifiedname>BString::FindFirst</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given <emphasis>string</emphasis>, starting from the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a76dc4af740f70c453ac24418756a8223" kindref="member">IFindFirst(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="210" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6ff0c2dcf64e0680b0a60e18fa5b04fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirst</definition>
        <argsstring>(char c) const</argsstring>
        <name>FindFirst</name>
        <qualifiedname>BString::FindFirst</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given character was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the character.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="212" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a739d481ce757dd7a8a8676e398c19341" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirst</definition>
        <argsstring>(char c, int32 fromOffset) const</argsstring>
        <name>FindFirst</name>
        <qualifiedname>BString::FindFirst</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given character, starting from the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset where to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given character was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the character.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="213" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab4eace227c96f8af4d517ddf12a51af5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirstChars</definition>
        <argsstring>(const BString &amp;string, int32 fromCharOffset) const</argsstring>
        <name>FindFirstChars</name>
        <qualifiedname>BString::FindFirstChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of FindFirst(const BString&amp;, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer which is the offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para>FindFirst(const BString&amp;, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="215" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a51142a6d6fcee24230381d5a4dda0a7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindFirstChars</definition>
        <argsstring>(const char *string, int32 fromCharOffset) const</argsstring>
        <name>FindFirstChars</name>
        <qualifiedname>BString::FindFirstChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of FindFirst(const char*, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>FindChars(const char*, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="217" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a52c1769f4ff328dcaa18e61c92880e80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLast</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>FindLast</name>
        <qualifiedname>BString::FindLast</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6acb54d3f9306ae8b84b6152dbcfaa1c" kindref="member">IFindLast(const BString&amp;) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a3cf975e61a07d35896d7309451fbceed" kindref="member">EndsWith(const BString&amp;) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="220" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a854708094e6e7b866fdc52ffccdcc4fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLast</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>FindLast</name>
        <qualifiedname>BString::FindLast</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset in bytes (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ab4f4422f4f307000883b64ffa02f8e69" kindref="member">IFindLast(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a0694b2a8b30e9bdde683877177c883e2" kindref="member">EndsWith(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a9ed5ad367f0eede584a05b298685d8df" kindref="member">EndsWith(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="221" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac495d2944faa115305f2dc6e04037e60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLast</definition>
        <argsstring>(const BString &amp;string, int32 beforeOffset) const</argsstring>
        <name>FindLast</name>
        <qualifiedname>BString::FindLast</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beforeOffset</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given <ref refid="classBString" kindref="compound">BString</ref>, starting from the given offset, and going backwards. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1aa20bfbe578c40a794d28883cf0bc0ce1" kindref="member">IFindLast(const BString&amp;, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="222" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a90254f7f2a9bf4d7c365a1a1a604a67b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLast</definition>
        <argsstring>(const char *string, int32 beforeOffset) const</argsstring>
        <name>FindLast</name>
        <qualifiedname>BString::FindLast</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beforeOffset</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given string, starting from the given offset, and going backwards. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a3256d109e721c3d29812eae1cd9d6545" kindref="member">IFindLast(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="224" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ae594d4ac076d0357fd4977827919a58b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLast</definition>
        <argsstring>(char c) const</argsstring>
        <name>FindLast</name>
        <qualifiedname>BString::FindLast</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to search for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the character.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="226" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac0a2148cbad211382e39c0a3073bb51e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLast</definition>
        <argsstring>(char c, int32 beforeOffset) const</argsstring>
        <name>FindLast</name>
        <qualifiedname>BString::FindLast</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beforeOffset</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given character, starting from the given offset going backwards from the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given character was found, or <computeroutput>B_ERROR</computeroutput> Could not find the character.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="227" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a7322f44fc7d5849110501f502aa0618c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLastChars</definition>
        <argsstring>(const BString &amp;string, int32 beforeCharOffset) const</argsstring>
        <name>FindLastChars</name>
        <qualifiedname>BString::FindLastChars</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beforeCharOffset</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of FindLast(const BString&amp;, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset in bytes (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para>FindLast(const BString&amp;, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="229" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ae38f115fc388c8341f6299e819898aec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::FindLastChars</definition>
        <argsstring>(const char *string, int32 beforeCharOffset) const</argsstring>
        <name>FindLastChars</name>
        <qualifiedname>BString::FindLastChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beforeCharOffset</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of FindLast(const char*, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset in bytes (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para>FindLast(const char*, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="231" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aa1b75e6600e3cad8a209ee465a6f5c75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindFirst</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>IFindFirst</name>
        <qualifiedname>BString::IFindFirst</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found or <computeroutput>B_ERROR</computeroutput> if we could not find <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1aa1b75e6600e3cad8a209ee465a6f5c75" kindref="member">IFindFirst(const BString&amp;) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="234" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a2c26c2df73056c1e45d2cd1994e7f320" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindFirst</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>IFindFirst</name>
        <qualifiedname>BString::IFindFirst</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a2c26c2df73056c1e45d2cd1994e7f320" kindref="member">IFindFirst(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ae729298df417b0c61a67f49e5619c72f" kindref="member">StartsWith(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac78677d2cb95830828d2c4473248efa4" kindref="member">StartsWith(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="235" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a20207dfcbd00f4047e3e40863e1ea1a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindFirst</definition>
        <argsstring>(const BString &amp;string, int32 fromOffset) const</argsstring>
        <name>IFindFirst</name>
        <qualifiedname>BString::IFindFirst</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given <ref refid="classBString" kindref="compound">BString</ref> case-insensitively, starting from the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer which is the offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a20207dfcbd00f4047e3e40863e1ea1a1" kindref="member">IFindFirst(const BString&amp;, int32) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac78677d2cb95830828d2c4473248efa4" kindref="member">StartsWith(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="236" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a76dc4af740f70c453ac24418756a8223" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindFirst</definition>
        <argsstring>(const char *string, int32 fromOffset) const</argsstring>
        <name>IFindFirst</name>
        <qualifiedname>BString::IFindFirst</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <briefdescription>
<para>Find the first occurrence of the given string case-insensitively, starting from the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a76dc4af740f70c453ac24418756a8223" kindref="member">IFindFirst(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="238" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6acb54d3f9306ae8b84b6152dbcfaa1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindLast</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>IFindLast</name>
        <qualifiedname>BString::IFindLast</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given <ref refid="classBString" kindref="compound">BString</ref> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a6acb54d3f9306ae8b84b6152dbcfaa1c" kindref="member">IFindLast(const BString&amp;) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a3cf975e61a07d35896d7309451fbceed" kindref="member">EndsWith(const BString&amp;) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="241" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab4f4422f4f307000883b64ffa02f8e69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindLast</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>IFindLast</name>
        <qualifiedname>BString::IFindLast</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given string case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset in bytes (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ab4f4422f4f307000883b64ffa02f8e69" kindref="member">IFindLast(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a0694b2a8b30e9bdde683877177c883e2" kindref="member">EndsWith(const char*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a9ed5ad367f0eede584a05b298685d8df" kindref="member">EndsWith(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="242" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aa20bfbe578c40a794d28883cf0bc0ce1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindLast</definition>
        <argsstring>(const BString &amp;string, int32 beforeOffset) const</argsstring>
        <name>IFindLast</name>
        <qualifiedname>BString::IFindLast</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beforeOffset</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given <ref refid="classBString" kindref="compound">BString</ref> case-insensitively, starting from the given offset going backwards. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given <ref refid="classBString" kindref="compound">BString</ref> was found, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1aa20bfbe578c40a794d28883cf0bc0ce1" kindref="member">IFindLast(const BString&amp;, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="243" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3256d109e721c3d29812eae1cd9d6545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::IFindLast</definition>
        <argsstring>(const char *string, int32 beforeOffset) const</argsstring>
        <name>IFindLast</name>
        <qualifiedname>BString::IFindLast</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beforeOffset</declname>
        </param>
        <briefdescription>
<para>Find the last occurrence of the given string case-insensitively, starting from the given offset going backwards. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start the search.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The offset (zero-based) into the data where the given string was found, <computeroutput>B_BAD_VALUE</computeroutput> if the <computeroutput>string</computeroutput> pointer is invalid, or <computeroutput>B_ERROR</computeroutput> if we could not find the <computeroutput>string</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a3256d109e721c3d29812eae1cd9d6545" kindref="member">IFindLast(const char*, int32) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="245" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a8febb7b4bf54738272cbfb9b4a72e8fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::StartsWith</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>StartsWith</name>
        <qualifiedname>BString::StartsWith</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> starts with <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> started with <emphasis>string</emphasis>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="248" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ae729298df417b0c61a67f49e5619c72f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::StartsWith</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>StartsWith</name>
        <qualifiedname>BString::StartsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> starts with <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> started with <emphasis>string</emphasis>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="249" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac78677d2cb95830828d2c4473248efa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::StartsWith</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>StartsWith</name>
        <qualifiedname>BString::StartsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> starts with <emphasis>length</emphasis> characters of <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters (bytes) of <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> started with <emphasis>length</emphasis> characters of <emphasis>string</emphasis>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="250" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a4e0e7b3f1721a3f6d04741e18e59fd1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::IStartsWith</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>IStartsWith</name>
        <qualifiedname>BString::IStartsWith</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> starts with <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> started with <emphasis>string</emphasis> case-insensitively, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="252" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aee8ed0416cce7f1f533e306fe1cd1e60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::IStartsWith</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>IStartsWith</name>
        <qualifiedname>BString::IStartsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> starts with <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> started with <emphasis>string</emphasis> case-insensitively, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="253" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aaf5b20894c34262beafcee0c7c2e2e45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::IStartsWith</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>IStartsWith</name>
        <qualifiedname>BString::IStartsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> starts with <emphasis>length</emphasis> characters of <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters (bytes) of <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> started with <emphasis>length</emphasis> characters of <emphasis>string</emphasis> case-insensitively, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="254" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3cf975e61a07d35896d7309451fbceed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::EndsWith</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>EndsWith</name>
        <qualifiedname>BString::EndsWith</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> ends with <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> ended with <emphasis>string</emphasis>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="256" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a0694b2a8b30e9bdde683877177c883e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::EndsWith</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>EndsWith</name>
        <qualifiedname>BString::EndsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> ends with <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> ended with <emphasis>string</emphasis>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="257" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a9ed5ad367f0eede584a05b298685d8df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::EndsWith</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>EndsWith</name>
        <qualifiedname>BString::EndsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> ends with <emphasis>length</emphasis> characters of <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters (bytes) of <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> ended with <emphasis>length</emphasis> characters of <emphasis>string</emphasis>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="258" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5031ad99a3b2f656090a9c6a5ac9d2c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::IEndsWith</definition>
        <argsstring>(const BString &amp;string) const</argsstring>
        <name>IEndsWith</name>
        <qualifiedname>BString::IEndsWith</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> ends with <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> ended with <emphasis>string</emphasis> case-insensitively, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="260" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a48cd9f748a80f88752c2a622642e711a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::IEndsWith</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>IEndsWith</name>
        <qualifiedname>BString::IEndsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> ends with <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> ended with <emphasis>string</emphasis> case-insensitively, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="261" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3d8e68b317a450bdc93b943b8bbf13e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::IEndsWith</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>IEndsWith</name>
        <qualifiedname>BString::IEndsWith</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the <ref refid="classBString" kindref="compound">BString</ref> ends with <emphasis>length</emphasis> characters of <emphasis>string</emphasis> case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to search for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters (bytes) of <emphasis>string</emphasis> to search for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBString" kindref="compound">BString</ref> ended with <emphasis>length</emphasis> characters of <emphasis>string</emphasis> case-insensitively, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="262" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Replacing</header>
      <memberdef kind="function" id="classBString_1a8070ebfed4804f0f647a134b938f7f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceFirst</definition>
        <argsstring>(char replaceThis, char withThis)</argsstring>
        <name>ReplaceFirst</name>
        <qualifiedname>BString::ReplaceFirst</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the first occurrence of a character with another character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to put in its place.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac2cf3c7a812fae37ac7878c68ee19501" kindref="member">IReplaceFirst(char, char)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="265" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1acf2cbd843abeb75441b5b4e6864eb502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceLast</definition>
        <argsstring>(char replaceThis, char withThis)</argsstring>
        <name>ReplaceLast</name>
        <qualifiedname>BString::ReplaceLast</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the last occurrence of a character with another character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to put in its place</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ac40dd4f1d5da500adc6b1da0da829b56" kindref="member">IReplaceLast(char, char)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="266" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a018e210b478d3b85a5a6022995eb7ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceAll</definition>
        <argsstring>(char replaceThis, char withThis, int32 fromOffset=0)</argsstring>
        <name>ReplaceAll</name>
        <qualifiedname>BString::ReplaceAll</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace all occurrences of a character with another character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start looking for the character.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a0b709adadf19668137df6208d322b119" kindref="member">IReplaceAll(char, char, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="267" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1acc0e9d99f53374f3817088df50f58eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Replace</definition>
        <argsstring>(char replaceThis, char withThis, int32 maxReplaceCount, int32 fromOffset=0)</argsstring>
        <name>Replace</name>
        <qualifiedname>BString::Replace</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxReplaceCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace a number of occurrences of a character with another character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxReplaceCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of characters that should be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start looking for the character</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1aa5bb247095ca2201ac03dc7901ba8e1c" kindref="member">IReplace(char, char, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="269" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af8228f347b375de12cee5df2cb6f0a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceFirst</definition>
        <argsstring>(const char *replaceThis, const char *withThis)</argsstring>
        <name>ReplaceFirst</name>
        <qualifiedname>BString::ReplaceFirst</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the first occurrence of a string with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a93b277b98942e2f6030c520e6b81de3b" kindref="member">IReplaceFirst(const char*, const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="271" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a7f5e6827f970ec77d27cc29680a3497b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceLast</definition>
        <argsstring>(const char *replaceThis, const char *withThis)</argsstring>
        <name>ReplaceLast</name>
        <qualifiedname>BString::ReplaceLast</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the last occurrence of a string with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ab2dc3159a9afc0efa32c8368dd3f6e39" kindref="member">IReplaceLast(const char*, const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="273" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a599028f034e9725bcdbbb49e319580c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceAll</definition>
        <argsstring>(const char *replaceThis, const char *withThis, int32 fromOffset=0)</argsstring>
        <name>ReplaceAll</name>
        <qualifiedname>BString::ReplaceAll</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace all occurrences of a string with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start looking for the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a0e6c4875e816bc208783af5902f64a6c" kindref="member">IReplaceAll(const char*, const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="275" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab72f86cac1d7bd4ce6640cc419118f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Replace</definition>
        <argsstring>(const char *replaceThis, const char *withThis, int32 maxReplaceCount, int32 fromOffset=0)</argsstring>
        <name>Replace</name>
        <qualifiedname>BString::Replace</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxReplaceCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace a number of occurrences of a string with another string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxReplaceCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of occurrences that should be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bytes to start looking for the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a92b00b20f909f73d9124fa656ddbd6f0" kindref="member">IReplace(const char*, const char*, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="277" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af3821e4a7a3747dbde8bbde5d352f540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceAllChars</definition>
        <argsstring>(const char *replaceThis, const char *withThis, int32 fromCharOffset)</argsstring>
        <name>ReplaceAllChars</name>
        <qualifiedname>BString::ReplaceAllChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1a599028f034e9725bcdbbb49e319580c8" kindref="member">ReplaceAll(const char*, const char*, int32)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters to start looking for the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a599028f034e9725bcdbbb49e319580c8" kindref="member">ReplaceAll(const char*, const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="281" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aef5e94ded7abb6e7c7d1599a333e929f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceChars</definition>
        <argsstring>(const char *replaceThis, const char *withThis, int32 maxReplaceCount, int32 fromCharOffset)</argsstring>
        <name>ReplaceChars</name>
        <qualifiedname>BString::ReplaceChars</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxReplaceCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromCharOffset</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of ReplaceAll(const char*, const char*, int32, int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxReplaceCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of occurrences that should be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromCharOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in UTF-8 characters to start looking for the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para>ReplaceAll(const char*, const char*, int32, int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="283" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac2cf3c7a812fae37ac7878c68ee19501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplaceFirst</definition>
        <argsstring>(char replaceThis, char withThis)</argsstring>
        <name>IReplaceFirst</name>
        <qualifiedname>BString::IReplaceFirst</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the first occurrence of a character with another character case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a8070ebfed4804f0f647a134b938f7f59" kindref="member">ReplaceFirst(char, char)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="287" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac40dd4f1d5da500adc6b1da0da829b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplaceLast</definition>
        <argsstring>(char replaceThis, char withThis)</argsstring>
        <name>IReplaceLast</name>
        <qualifiedname>BString::IReplaceLast</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the last occurrence of a character with another character case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1acf2cbd843abeb75441b5b4e6864eb502" kindref="member">ReplaceLast(char, char)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="288" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a0b709adadf19668137df6208d322b119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplaceAll</definition>
        <argsstring>(char replaceThis, char withThis, int32 fromOffset=0)</argsstring>
        <name>IReplaceAll</name>
        <qualifiedname>BString::IReplaceAll</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace all occurrences of a character with another character case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset where to start looking for the string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a018e210b478d3b85a5a6022995eb7ed7" kindref="member">ReplaceAll(char, char, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="289" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aa5bb247095ca2201ac03dc7901ba8e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplace</definition>
        <argsstring>(char replaceThis, char withThis, int32 maxReplaceCount, int32 fromOffset=0)</argsstring>
        <name>IReplace</name>
        <qualifiedname>BString::IReplace</qualifiedname>
        <param>
          <type>char</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>char</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxReplaceCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace a number of occurrences of a character with another character case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The char to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The char to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxReplaceCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of occurrences that should be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset where to start looking for the string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1acc0e9d99f53374f3817088df50f58eba" kindref="member">Replace(char, char, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="291" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a93b277b98942e2f6030c520e6b81de3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplaceFirst</definition>
        <argsstring>(const char *replaceThis, const char *withThis)</argsstring>
        <name>IReplaceFirst</name>
        <qualifiedname>BString::IReplaceFirst</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the first occurrence of a string with another string case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1af8228f347b375de12cee5df2cb6f0a43" kindref="member">ReplaceFirst(const char*, const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="293" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab2dc3159a9afc0efa32c8368dd3f6e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplaceLast</definition>
        <argsstring>(const char *replaceThis, const char *withThis)</argsstring>
        <name>IReplaceLast</name>
        <qualifiedname>BString::IReplaceLast</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <briefdescription>
<para>Replace the last occurrence of a string with another string. Case-insensitive. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a7f5e6827f970ec77d27cc29680a3497b" kindref="member">ReplaceLast(const char*, const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="295" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a0e6c4875e816bc208783af5902f64a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplaceAll</definition>
        <argsstring>(const char *replaceThis, const char *withThis, int32 fromOffset=0)</argsstring>
        <name>IReplaceAll</name>
        <qualifiedname>BString::IReplaceAll</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace all occurrences of a string with another string case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset where to start looking for the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1a599028f034e9725bcdbbb49e319580c8" kindref="member">ReplaceAll(const char*, const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="297" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a92b00b20f909f73d9124fa656ddbd6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::IReplace</definition>
        <argsstring>(const char *replaceThis, const char *withThis, int32 maxReplaceCount, int32 fromOffset=0)</argsstring>
        <name>IReplace</name>
        <qualifiedname>BString::IReplace</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>replaceThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>withThis</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxReplaceCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace a number of occurrences of a string with another string case-insensitively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>replaceThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>withThis</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in its place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxReplaceCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of occurrences that should be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset where to start looking for the string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBString_1ab72f86cac1d7bd4ce6640cc419118f6f" kindref="member">Replace(const char*, const char*, int32, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="299" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a84e363d092254a7f8878ea7f7a0c9ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceSet</definition>
        <argsstring>(const char *setOfBytes, char with)</argsstring>
        <name>ReplaceSet</name>
        <qualifiedname>BString::ReplaceSet</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>setOfBytes</declname>
        </param>
        <param>
          <type>char</type>
          <declname>with</declname>
        </param>
        <briefdescription>
<para>Replaces characters that are in a certain set with a chosen character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setOfBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of characters that need to be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to replace the occurrences with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="303" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af5dcd88b301b12ff3c9246f3b7608769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceSet</definition>
        <argsstring>(const char *setOfBytes, const char *with)</argsstring>
        <name>ReplaceSet</name>
        <qualifiedname>BString::ReplaceSet</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>setOfBytes</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>with</declname>
        </param>
        <briefdescription>
<para>Replaces characters that are in a certain set with a chosen string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setOfBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of chars that need to be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace the occurrences with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="304" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab97b5f53d6fe485ac0cd6baeb1e2e9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ReplaceCharsSet</definition>
        <argsstring>(const char *setOfChars, const char *with)</argsstring>
        <name>ReplaceCharsSet</name>
        <qualifiedname>BString::ReplaceCharsSet</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>setOfChars</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>with</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of <ref refid="classBString_1af5dcd88b301b12ff3c9246f3b7608769" kindref="member">ReplaceSet(const char*, const char*)</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setOfChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of UTF-8 characters that need to be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to replace the occurrences with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="307" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Indexing</header>
      <memberdef kind="function" id="classBString_1aecae63545eeac7757fce1027e38cfbcf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char BString::operator[]</definition>
        <argsstring>(int32 index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>BString::operator[]</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the character in the string at the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to read a byte. There is no bound checking though, use <ref refid="classBString_1aed9151cb5999b9c42b8330d45fed0835" kindref="member">ByteAt()</ref> if you don&apos;t know if the <computeroutput>index</computeroutput> parameter is valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (zero-based) of the byte to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a reference to the specified byte.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="311" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="488" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aed9151cb5999b9c42b8330d45fed0835" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char BString::ByteAt</definition>
        <argsstring>(int32 index) const</argsstring>
        <name>ByteAt</name>
        <qualifiedname>BString::ByteAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the character in the string at the given offset. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to read a single byte.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (zero-based) of the byte to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the specified byte, if out of bounds return 0.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="318" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="495" bodyend="500"/>
        <references refid="classBString_1a5ca1e86dc0053bac5268d4e0057e103a" compoundref="String_8h" startline="449" endline="454">Length</references>
      </memberdef>
      <memberdef kind="function" id="classBString_1a98942505915adb4b028695c6cb8c7dae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BString::CharAt</definition>
        <argsstring>(int32 charIndex, int32 *bytes=NULL) const</argsstring>
        <name>CharAt</name>
        <qualifiedname>BString::CharAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charIndex</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>bytes</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>UTF-8 aware version of ByteAt(int32). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (zero-based) of the UTF-8 character to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>An int32 pointer to hold the UTF-8 character.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the specified UTF-8 character, if out of bounds return 0.</para>
</simplesect>
<simplesect kind="see"><para>ByteAt(int32)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="319" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a7037862d1f99c300c6e7761f665fbe5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::CharAt</definition>
        <argsstring>(int32 charIndex, char *buffer, int32 *bytes) const</argsstring>
        <name>CharAt</name>
        <qualifiedname>BString::CharAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>charIndex</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>UTF-8 aware version of ByteAt(int32) with a <emphasis>buffer</emphasis> parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (zero-based) of the UTF-8 character to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to the position in the string where the character is found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>An int32 pointer to hold the UTF-8 character.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>ByteAt(int32, char*, int32*)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="320" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Low-Level Manipulation</header>
      <memberdef kind="function" id="classBString_1abd7474f601d6a852de12c9dd9174b39e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * BString::LockBuffer</definition>
        <argsstring>(int32 maxLength)</argsstring>
        <name>LockBuffer</name>
        <qualifiedname>BString::LockBuffer</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
<para>Locks the buffer and return the internal string for manipulation. </para>
        </briefdescription>
        <detaileddescription>
<para>If you want to do any low-level string manipulation on the internal buffer, you should call this method. This method includes the possibility to grow the buffer so that you don&apos;t have to worry about that yourself.</para>
<para>Make sure you call <ref refid="classBString_1a82984246845313df80527b32f8a19cc8" kindref="member">UnlockBuffer()</ref> when you&apos;re done with the manipulation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in bytes. If you don&apos;t want a bigger buffer, passing anything under the length of the string will simply return it as is.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the buffer to manipulate.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a82984246845313df80527b32f8a19cc8" kindref="member">UnlockBuffer()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="324" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a82984246845313df80527b32f8a19cc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::UnlockBuffer</definition>
        <argsstring>(int32 length=-1)</argsstring>
        <name>UnlockBuffer</name>
        <qualifiedname>BString::UnlockBuffer</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Unlocks the buffer after you are done with low-level manipulation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in bytes to trim the string to in order to keep the internal buffer sane. If you don&apos;t pass a value in it, <computeroutput>strlen()</computeroutput> will be used to determine the length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="325" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a22478fe3f170fb3a21058cb12d264207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::SetByteAt</definition>
        <argsstring>(int32 pos, char to)</argsstring>
        <name>SetByteAt</name>
        <qualifiedname>BString::SetByteAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>char</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Set a byte at position <emphasis>pos</emphasis> to character <emphasis>to</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the byte to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value that should replace the previous byte.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="326" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Case Manipulation</header>
      <memberdef kind="function" id="classBString_1a505de23603c595b798612fd9cac8a3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ToLower</definition>
        <argsstring>()</argsstring>
        <name>ToLower</name>
        <qualifiedname>BString::ToLower</qualifiedname>
        <briefdescription>
<para>Convert each of the characters in the <ref refid="classBString" kindref="compound">BString</ref> to lowercase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="329" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a114c552044efc5025e7b55a12f40ad45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::ToUpper</definition>
        <argsstring>()</argsstring>
        <name>ToUpper</name>
        <qualifiedname>BString::ToUpper</qualifiedname>
        <briefdescription>
<para>Convert each of the characters in the <ref refid="classBString" kindref="compound">BString</ref> to uppercase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="330" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aad6528190ac4ee46da09be8927f812fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::Capitalize</definition>
        <argsstring>()</argsstring>
        <name>Capitalize</name>
        <qualifiedname>BString::Capitalize</qualifiedname>
        <briefdescription>
<para>Convert the first character to uppercase, and the rest to lowercase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="332" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab15fd887bd3f17d8f7965a3867d1c9ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::CapitalizeEachWord</definition>
        <argsstring>()</argsstring>
        <name>CapitalizeEachWord</name>
        <qualifiedname>BString::CapitalizeEachWord</qualifiedname>
        <briefdescription>
<para>Convert the first character of every word to uppercase, and the rest to lowercase. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts the first character of every &quot;word&quot; (series of alphabetical characters separated by non alphabetical characters) to uppercase, and the rest to lowercase.</para>
<para><simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="333" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Escaping and De-escaping</header>
      <description><para>This class contains some methods to help you with escaping and de-escaping certain characters. Note that this is the C-style of escaping, where you place a character before the character that is to be escaped, and not HTML style escaping, where certain characters are replaced by something else. </para>
</description>
      <memberdef kind="function" id="classBString_1a06eb6cf59137d2e4b8b61a9d1fede099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::CharacterEscape</definition>
        <argsstring>(const char *original, const char *setOfCharsToEscape, char escapeWith)</argsstring>
        <name>CharacterEscape</name>
        <qualifiedname>BString::CharacterEscape</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>original</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>setOfCharsToEscape</declname>
        </param>
        <param>
          <type>char</type>
          <declname>escapeWith</declname>
        </param>
        <briefdescription>
<para>Escape selected characters on a given string. </para>
        </briefdescription>
        <detaileddescription>
<para>This version sets itself to the string supplied in the <computeroutput>original</computeroutput> parameter, and then escapes the selected characters with a supplied character.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>original</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be escaped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setOfCharsToEscape</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of characters that need to be escaped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escapeWith</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to escape with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a06127f94d618622cef17252b95187544" kindref="member">CharacterDeescape(char)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ad0f34c930befb2406cb6e19f7f6cae2f" kindref="member">CharacterDeescape(const char*, char)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="336" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a3a3f3ae002bddbd7d123730f5963bbec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::CharacterEscape</definition>
        <argsstring>(const char *setOfCharsToEscape, char escapeWith)</argsstring>
        <name>CharacterEscape</name>
        <qualifiedname>BString::CharacterEscape</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>setOfCharsToEscape</declname>
        </param>
        <param>
          <type>char</type>
          <declname>escapeWith</declname>
        </param>
        <briefdescription>
<para>Escape selected characters of this string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setOfCharsToEscape</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of characters that need to be escaped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escapeWith</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to escape with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a06127f94d618622cef17252b95187544" kindref="member">CharacterDeescape(char)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="339" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ad0f34c930befb2406cb6e19f7f6cae2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::CharacterDeescape</definition>
        <argsstring>(const char *original, char escapeChar)</argsstring>
        <name>CharacterDeescape</name>
        <qualifiedname>BString::CharacterDeescape</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>original</declname>
        </param>
        <param>
          <type>char</type>
          <declname>escapeChar</declname>
        </param>
        <briefdescription>
<para>Remove the character to escape with from a given string. </para>
        </briefdescription>
        <detaileddescription>
<para>This version sets itself to the string supplied in the <computeroutput>original</computeroutput> parameter, and then removes the escape characters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>original</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be escaped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escapeChar</parametername>
</parameternamelist>
<parameterdescription>
<para>The character that was used to escape with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a06eb6cf59137d2e4b8b61a9d1fede099" kindref="member">CharacterEscape(const char*, const char*, char)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="341" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a06127f94d618622cef17252b95187544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::CharacterDeescape</definition>
        <argsstring>(char escapeChar)</argsstring>
        <name>CharacterDeescape</name>
        <qualifiedname>BString::CharacterDeescape</qualifiedname>
        <param>
          <type>char</type>
          <declname>escapeChar</declname>
        </param>
        <briefdescription>
<para>Remove the character to escape with from this string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>escapeChar</parametername>
</parameternamelist>
<parameterdescription>
<para>The character that was used to escape with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1a3a3f3ae002bddbd7d123730f5963bbec" kindref="member">CharacterEscape(const char*, char)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="343" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>sprintf() Replacement Methods</header>
      <description><para>These methods may be slower than <computeroutput>sprintf()</computeroutput>, but they are overflow safe. </para>
</description>
      <memberdef kind="function" id="classBString_1a5bcac61c11f6641fdd6fb8561fe39ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(const char *string)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>string</emphasis> to the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ad21facd867ea1af2fcf0807809b971ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>string</emphasis> to the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a262306145bac48a8ff4ca6e2387d277a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(char c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>c</emphasis> to the <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a8dba0ae3f02dd71ee4a1fda622a695d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(bool value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>bool</computeroutput> <computeroutput>value</computeroutput> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para>In case the <emphasis>value</emphasis> is true, the string &quot;true&quot; is appended to the string. Otherwise, the string &quot;false&quot; is appended.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The boolean <computeroutput>value</computeroutput> (&quot;true&quot; of &quot;false&quot;) to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a175f003163f6725a3aeaa33380249fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(int value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>int</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>int</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ada9a27cfa92c2af1445c0a1b88032bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(unsigned int value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>unsigned int</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>unsigned int</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a1916b773fabcdd0007162319d9cfb6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(unsigned long value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>unsigned long</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>unsigned long</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab5070c8e89b58466f4ced7224223b4a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(long value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>long</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>long</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a42a9ba45e33e16572a8843d428f7c692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(unsigned long long value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>unsigned long long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>unsigned long long</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>unsigned long long</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1afede9898aa451e5ce6144916e1a160da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(long long value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>long long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>long long</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>long long</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5cb121a81c913bf33110a03ec05871d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(float value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>float</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this operator will append using <computeroutput>%.2f</computeroutput> formatting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>float</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af4181b4a4540e20077c8da261a9e1064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::operator&lt;&lt;</definition>
        <argsstring>(double value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>BString::operator&lt;&lt;</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert the <computeroutput>double</computeroutput> <emphasis>value</emphasis> to a string and append it. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this operator will append using <computeroutput>%.2f</computeroutput> formatting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>double</computeroutput> <emphasis>value</emphasis> to append.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This method always returns <computeroutput>*this</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="361" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classBString_1af74402afbb40c34f55ec5545a0f02fe4" prot="private" static="no" strong="no">
        <type></type>
        <name>PrivateDataTag</name>
        <qualifiedname>BString::PrivateDataTag</qualifiedname>
        <enumvalue id="classBString_1af74402afbb40c34f55ec5545a0f02fe4afb9d6d1db07d3626b4ec74829f80ffbe" prot="private">
          <name>PRIVATE_DATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="371" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="371" bodyend="373"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBString_1ae12e428c3957ee34070a9884220fbf09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BStringRef</definition>
        <argsstring></argsstring>
        <name>BStringRef</name>
        <qualifiedname>BString::BStringRef</qualifiedname>
        <param>
          <type>BStringRef</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="369" column="14" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBString_1ac96b60d37bd806132da680e187dc2288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Private</definition>
        <argsstring></argsstring>
        <name>Private</name>
        <qualifiedname>BString::Private</qualifiedname>
        <param>
          <type>Private</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="365" column="14" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBString_1aec3f3f0daffbcf1ee6abe5c2b56fb847" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BString::fPrivateData</definition>
        <argsstring></argsstring>
        <name>fPrivateData</name>
        <qualifiedname>BString::fPrivateData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="428" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBString_1ae436643748c316070942010faeaebfa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BString::BString</definition>
        <argsstring>()</argsstring>
        <name>BString</name>
        <qualifiedname>BString::BString</qualifiedname>
        <briefdescription>
<para>Creates an empty <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab1cb6ea986a501f59fe138e8e977fc87" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BString::BString</definition>
        <argsstring>(BString &amp;&amp;string) noexcept</argsstring>
        <name>BString</name>
        <qualifiedname>BString::BString</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;&amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Move the data from the <emphasis>string</emphasis> to this object. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new string object with the data of another <emphasis>string</emphasis>. The <emphasis>string</emphasis> will no longer point to the same contents.</para>
<para><simplesect kind="note"><para>This constructor is only available for modern C++ (C++11 or later).</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a136b1237d54e934c5861924e69e2e97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BString::BString</definition>
        <argsstring>(const BString &amp;string)</argsstring>
        <name>BString</name>
        <qualifiedname>BString::BString</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Creates and initializes a <ref refid="classBString" kindref="compound">BString</ref> as a copy of another <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> object to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ac590cf36bedda32a92b83ff7e43caa61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BString::BString</definition>
        <argsstring>(const char *string)</argsstring>
        <name>BString</name>
        <qualifiedname>BString::BString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Creates and initializes a <ref refid="classBString" kindref="compound">BString</ref> from <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1aba35927a8b82161cc557628d5651b7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BString::BString</definition>
        <argsstring>(const char *string, int32 maxLength)</argsstring>
        <name>BString</name>
        <qualifiedname>BString::BString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
<para>Creates and initializes a <ref refid="classBString" kindref="compound">BString</ref> from a <emphasis>string</emphasis> up to <emphasis>maxLength</emphasis> characters. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>maxLength</emphasis> is greater than the length of the source <emphasis>string</emphasis> then the entire source <emphasis>string</emphasis> is copied. If <emphasis>maxLength</emphasis> is less than or equal to 0 then the result is an empty <ref refid="classBString" kindref="compound">BString</ref>.</para>
<para><simplesect kind="warning"><para>In BeOS R5 passing in a negative <emphasis>maxLength</emphasis> argument will copy the entire <emphasis>string</emphasis>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> data to initialize the <ref refid="classBString" kindref="compound">BString</ref> to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of characters (bytes) to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af8eabd4ce66f2b0ab9595ece0658eb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BString::~BString</definition>
        <argsstring>()</argsstring>
        <name>~BString</name>
        <qualifiedname>BString::~BString</qualifiedname>
        <briefdescription>
<para>Free all resources associated with the object. </para>
        </briefdescription>
        <detaileddescription>
<para>The destructor also frees the internal buffer associated with the string.</para>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="28" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBString_1a7cea2239848dd17ce46537140f491751" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BString::BString</definition>
        <argsstring>(char *privateData, PrivateDataTag tag)</argsstring>
        <name>BString</name>
        <qualifiedname>BString::BString</qualifiedname>
        <param>
          <type>char *</type>
          <declname>privateData</declname>
        </param>
        <param>
          <type>PrivateDataTag</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a52d0a3c48169f2a04ccdb9202c309819" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * BString::_Clone</definition>
        <argsstring>(const char *data, int32 length)</argsstring>
        <name>_Clone</name>
        <qualifiedname>BString::_Clone</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="384" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a8e9aa71bd31f3f040355ba38e63f2c75" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::_DoAppend</definition>
        <argsstring>(const char *string, int32 length)</argsstring>
        <name>_DoAppend</name>
        <qualifiedname>BString::_DoAppend</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="390" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a885b8bedbcdcc7312254e9d7fe8bcf33" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::_DoCharacterDeescape</definition>
        <argsstring>(const char *string, char escapeChar)</argsstring>
        <name>_DoCharacterDeescape</name>
        <qualifiedname>BString::_DoCharacterDeescape</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char</type>
          <declname>escapeChar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="410" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ae4dc817d5411cefb3f810e80853520a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::_DoCharacterEscape</definition>
        <argsstring>(const char *string, const char *setOfCharsToEscape, char escapeChar)</argsstring>
        <name>_DoCharacterEscape</name>
        <qualifiedname>BString::_DoCharacterEscape</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>setOfCharsToEscape</declname>
        </param>
        <param>
          <type>char</type>
          <declname>escapeChar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="408" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af05d5923da041c1a0ea319b457f05ece" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::_DoInsert</definition>
        <argsstring>(const char *string, int32 offset, int32 length)</argsstring>
        <name>_DoInsert</name>
        <qualifiedname>BString::_DoInsert</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="392" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a374208681b2221d50eeb71f1b49e53c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::_DoPrepend</definition>
        <argsstring>(const char *string, int32 length)</argsstring>
        <name>_DoPrepend</name>
        <qualifiedname>BString::_DoPrepend</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="391" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a544cace25b3da5b701ef9b2c808cda10" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
        <definition>BString &amp; BString::_DoReplace</definition>
        <argsstring>(const char *findThis, const char *replaceWith, int32 maxReplaceCount, int32 fromOffset, bool ignoreCase)</argsstring>
        <name>_DoReplace</name>
        <qualifiedname>BString::_DoReplace</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>findThis</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>replaceWith</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>maxReplaceCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromOffset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreCase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="414" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a1a9f9feb9189bfe2cd2bd23b7e260598" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::_FindAfter</definition>
        <argsstring>(const char *string, int32 offset, int32 length) const</argsstring>
        <name>_FindAfter</name>
        <qualifiedname>BString::_FindAfter</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="398" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a497ae606dd32427d99276147e50776d7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::_FindBefore</definition>
        <argsstring>(const char *string, int32 offset, int32 length) const</argsstring>
        <name>_FindBefore</name>
        <qualifiedname>BString::_FindBefore</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="402" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a6a51e638d87a812ade8735008edd1046" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BString::_FreePrivateData</definition>
        <argsstring>()</argsstring>
        <name>_FreePrivateData</name>
        <qualifiedname>BString::_FreePrivateData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="425" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a663c62b0eefab0976ff4d29dda2e7474" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::_IFindAfter</definition>
        <argsstring>(const char *string, int32 offset, int32 length) const</argsstring>
        <name>_IFindAfter</name>
        <qualifiedname>BString::_IFindAfter</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="400" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a117f7f06e74756a21e1fec144444bb91" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::_IFindBefore</definition>
        <argsstring>(const char *string, int32 offset, int32 length) const</argsstring>
        <name>_IFindBefore</name>
        <qualifiedname>BString::_IFindBefore</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="404" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab5fb399ff5de0c1ad6bb8eaa1c842321" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BString::_Init</definition>
        <argsstring>(const char *src, int32 length)</argsstring>
        <name>_Init</name>
        <qualifiedname>BString::_Init</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="383" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a1a35a7dca13915959d64e6fa159d17a0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BString::_IsShareable</definition>
        <argsstring>() const</argsstring>
        <name>_IsShareable</name>
        <qualifiedname>BString::_IsShareable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="424" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a0a441e348d12b9adf125369f8a09fbeb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BString::_MakeWritable</definition>
        <argsstring>()</argsstring>
        <name>_MakeWritable</name>
        <qualifiedname>BString::_MakeWritable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="379" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a5491459ec1ee152fba6cc0df32cb4631" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BString::_MakeWritable</definition>
        <argsstring>(int32 length, bool copy)</argsstring>
        <name>_MakeWritable</name>
        <qualifiedname>BString::_MakeWritable</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="380" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af52a51163c017da6125b2de598deeed0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * BString::_OpenAtBy</definition>
        <argsstring>(int32 offset, int32 length)</argsstring>
        <name>_OpenAtBy</name>
        <qualifiedname>BString::_OpenAtBy</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="385" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1acc3bb637b510641f22795b229c7392b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> &amp;</type>
        <definition>int32 &amp; BString::_ReferenceCount</definition>
        <argsstring>()</argsstring>
        <name>_ReferenceCount</name>
        <qualifiedname>BString::_ReferenceCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="422" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ab71b7479a26301071af9259b8b2b3f06" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> &amp;</type>
        <definition>const int32 &amp; BString::_ReferenceCount</definition>
        <argsstring>() const</argsstring>
        <name>_ReferenceCount</name>
        <qualifiedname>BString::_ReferenceCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="423" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1af4ab735b742f50db0c17ff61ffb3e0c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BString::_ReleasePrivateData</definition>
        <argsstring>()</argsstring>
        <name>_ReleasePrivateData</name>
        <qualifiedname>BString::_ReleasePrivateData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="426" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a389ed8785db074748bdc4a587fbb5641" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BString::_ReplaceAtPositions</definition>
        <argsstring>(const PosVect *positions, int32 searchLength, const char *with, int32 withLength)</argsstring>
        <name>_ReplaceAtPositions</name>
        <qualifiedname>BString::_ReplaceAtPositions</qualifiedname>
        <param>
          <type>const PosVect *</type>
          <declname>positions</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>searchLength</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>with</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>withLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="417" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1abbc27cfcd4d257d835acdb272531bfb5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * BString::_Resize</definition>
        <argsstring>(int32 length)</argsstring>
        <name>_Resize</name>
        <qualifiedname>BString::_Resize</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="382" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1ad4271ad3904f08e67be597b1cd0aae2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BString::_SetLength</definition>
        <argsstring>(int32 length)</argsstring>
        <name>_SetLength</name>
        <qualifiedname>BString::_SetLength</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="389" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1abfba3fc3d541578365b8d652edf59637" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BString::_ShortFindAfter</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>_ShortFindAfter</name>
        <qualifiedname>BString::_ShortFindAfter</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="396" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBString_1a0477f1a0813efa648230fb3ddf0d29eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * BString::_ShrinkAtBy</definition>
        <argsstring>(int32 offset, int32 length)</argsstring>
        <name>_ShrinkAtBy</name>
        <qualifiedname>BString::_ShrinkAtBy</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="386" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classBString_1a777fea0a262e933f7b30efd39d81d65d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * BString::_Allocate</definition>
        <argsstring>(int32 length)</argsstring>
        <name>_Allocate</name>
        <qualifiedname>BString::_Allocate</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/String.h" line="381" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>String class supporting common string operations. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBString" kindref="compound">BString</ref> is a string allocation and manipulation class. The object takes care to allocate and free memory for you, so it will always be &quot;big enough&quot; to store your strings.</para>
<para>While <ref refid="classBString" kindref="compound">BString</ref> is in essence a wrapper around a byte-array, which can always be accessed with the <ref refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" kindref="member">BString::String()</ref> method, it does have some understanding of UTF-8 and it can be used for the manipulation of UTF-8 strings. For all operations that perform on bytes, there is an equivalent that operates on UTF-8 strings. See for example the <ref refid="classBString_1aaaa5b02d053305f9cb22a5fb7b215931" kindref="member">BString::CopyInto()</ref> and <ref refid="classBString_1ad66fac3eb976b63fa11ee333fe05eb97" kindref="member">BString::CopyCharsInto()</ref> methods. The main difference is that if there are any position argumens, the regular method counts the bytes and the Chars methods counts characters.</para>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/support/String.h" line="19" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/String.h" bodystart="19" bodyend="429"/>
    <listofallmembers>
      <member refid="classBString_1a777fea0a262e933f7b30efd39d81d65d" prot="private" virt="non-virtual"><scope>BString</scope><name>_Allocate</name></member>
      <member refid="classBString_1a52d0a3c48169f2a04ccdb9202c309819" prot="private" virt="non-virtual"><scope>BString</scope><name>_Clone</name></member>
      <member refid="classBString_1a8e9aa71bd31f3f040355ba38e63f2c75" prot="private" virt="non-virtual"><scope>BString</scope><name>_DoAppend</name></member>
      <member refid="classBString_1a885b8bedbcdcc7312254e9d7fe8bcf33" prot="private" virt="non-virtual"><scope>BString</scope><name>_DoCharacterDeescape</name></member>
      <member refid="classBString_1ae4dc817d5411cefb3f810e80853520a4" prot="private" virt="non-virtual"><scope>BString</scope><name>_DoCharacterEscape</name></member>
      <member refid="classBString_1af05d5923da041c1a0ea319b457f05ece" prot="private" virt="non-virtual"><scope>BString</scope><name>_DoInsert</name></member>
      <member refid="classBString_1a374208681b2221d50eeb71f1b49e53c4" prot="private" virt="non-virtual"><scope>BString</scope><name>_DoPrepend</name></member>
      <member refid="classBString_1a544cace25b3da5b701ef9b2c808cda10" prot="private" virt="non-virtual"><scope>BString</scope><name>_DoReplace</name></member>
      <member refid="classBString_1a1a9f9feb9189bfe2cd2bd23b7e260598" prot="private" virt="non-virtual"><scope>BString</scope><name>_FindAfter</name></member>
      <member refid="classBString_1a497ae606dd32427d99276147e50776d7" prot="private" virt="non-virtual"><scope>BString</scope><name>_FindBefore</name></member>
      <member refid="classBString_1a6a51e638d87a812ade8735008edd1046" prot="private" virt="non-virtual"><scope>BString</scope><name>_FreePrivateData</name></member>
      <member refid="classBString_1a663c62b0eefab0976ff4d29dda2e7474" prot="private" virt="non-virtual"><scope>BString</scope><name>_IFindAfter</name></member>
      <member refid="classBString_1a117f7f06e74756a21e1fec144444bb91" prot="private" virt="non-virtual"><scope>BString</scope><name>_IFindBefore</name></member>
      <member refid="classBString_1ab5fb399ff5de0c1ad6bb8eaa1c842321" prot="private" virt="non-virtual"><scope>BString</scope><name>_Init</name></member>
      <member refid="classBString_1a1a35a7dca13915959d64e6fa159d17a0" prot="private" virt="non-virtual"><scope>BString</scope><name>_IsShareable</name></member>
      <member refid="classBString_1a0a441e348d12b9adf125369f8a09fbeb" prot="private" virt="non-virtual"><scope>BString</scope><name>_MakeWritable</name></member>
      <member refid="classBString_1a5491459ec1ee152fba6cc0df32cb4631" prot="private" virt="non-virtual"><scope>BString</scope><name>_MakeWritable</name></member>
      <member refid="classBString_1af52a51163c017da6125b2de598deeed0" prot="private" virt="non-virtual"><scope>BString</scope><name>_OpenAtBy</name></member>
      <member refid="classBString_1acc3bb637b510641f22795b229c7392b9" prot="private" virt="non-virtual"><scope>BString</scope><name>_ReferenceCount</name></member>
      <member refid="classBString_1ab71b7479a26301071af9259b8b2b3f06" prot="private" virt="non-virtual"><scope>BString</scope><name>_ReferenceCount</name></member>
      <member refid="classBString_1af4ab735b742f50db0c17ff61ffb3e0c4" prot="private" virt="non-virtual"><scope>BString</scope><name>_ReleasePrivateData</name></member>
      <member refid="classBString_1a389ed8785db074748bdc4a587fbb5641" prot="private" virt="non-virtual"><scope>BString</scope><name>_ReplaceAtPositions</name></member>
      <member refid="classBString_1abbc27cfcd4d257d835acdb272531bfb5" prot="private" virt="non-virtual"><scope>BString</scope><name>_Resize</name></member>
      <member refid="classBString_1ad4271ad3904f08e67be597b1cd0aae2c" prot="private" virt="non-virtual"><scope>BString</scope><name>_SetLength</name></member>
      <member refid="classBString_1abfba3fc3d541578365b8d652edf59637" prot="private" virt="non-virtual"><scope>BString</scope><name>_ShortFindAfter</name></member>
      <member refid="classBString_1a0477f1a0813efa648230fb3ddf0d29eb" prot="private" virt="non-virtual"><scope>BString</scope><name>_ShrinkAtBy</name></member>
      <member refid="classBString_1a5ff4a59b5827b6d2e435d44252b2dbca" prot="public" virt="non-virtual"><scope>BString</scope><name>Adopt</name></member>
      <member refid="classBString_1a3d124f5a2ad90ef4fcf0c027125bd0c9" prot="public" virt="non-virtual"><scope>BString</scope><name>Adopt</name></member>
      <member refid="classBString_1afdffa6e960765b6ab05155e02274e94b" prot="public" virt="non-virtual"><scope>BString</scope><name>AdoptChars</name></member>
      <member refid="classBString_1a48bc1f85e34ef48d1c5c3972e106262c" prot="public" virt="non-virtual"><scope>BString</scope><name>Append</name></member>
      <member refid="classBString_1a7f864616085bf5ff4261ab775f698ea3" prot="public" virt="non-virtual"><scope>BString</scope><name>Append</name></member>
      <member refid="classBString_1a08141e8a3d6d35d7a9c590a7550ead5f" prot="public" virt="non-virtual"><scope>BString</scope><name>Append</name></member>
      <member refid="classBString_1a0a027c7e3843bdb54d75b7825e0778c4" prot="public" virt="non-virtual"><scope>BString</scope><name>Append</name></member>
      <member refid="classBString_1a6f181bee93ed5c280c93f18f32ee5751" prot="public" virt="non-virtual"><scope>BString</scope><name>Append</name></member>
      <member refid="classBString_1a54dc7837cc9b83344bc9223a26e97c39" prot="public" virt="non-virtual"><scope>BString</scope><name>AppendChars</name></member>
      <member refid="classBString_1a469c25b8b5c400e00d05765b7c10112c" prot="public" virt="non-virtual"><scope>BString</scope><name>AppendChars</name></member>
      <member refid="classBString_1ae436643748c316070942010faeaebfa1" prot="public" virt="non-virtual"><scope>BString</scope><name>BString</name></member>
      <member refid="classBString_1ac590cf36bedda32a92b83ff7e43caa61" prot="public" virt="non-virtual"><scope>BString</scope><name>BString</name></member>
      <member refid="classBString_1a136b1237d54e934c5861924e69e2e97e" prot="public" virt="non-virtual"><scope>BString</scope><name>BString</name></member>
      <member refid="classBString_1aba35927a8b82161cc557628d5651b7b8" prot="public" virt="non-virtual"><scope>BString</scope><name>BString</name></member>
      <member refid="classBString_1ab1cb6ea986a501f59fe138e8e977fc87" prot="public" virt="non-virtual"><scope>BString</scope><name>BString</name></member>
      <member refid="classBString_1a7cea2239848dd17ce46537140f491751" prot="private" virt="non-virtual"><scope>BString</scope><name>BString</name></member>
      <member refid="classBString_1aed9151cb5999b9c42b8330d45fed0835" prot="public" virt="non-virtual"><scope>BString</scope><name>ByteAt</name></member>
      <member refid="classBString_1aad6528190ac4ee46da09be8927f812fa" prot="public" virt="non-virtual"><scope>BString</scope><name>Capitalize</name></member>
      <member refid="classBString_1ab15fd887bd3f17d8f7965a3867d1c9ab" prot="public" virt="non-virtual"><scope>BString</scope><name>CapitalizeEachWord</name></member>
      <member refid="classBString_1ad0f34c930befb2406cb6e19f7f6cae2f" prot="public" virt="non-virtual"><scope>BString</scope><name>CharacterDeescape</name></member>
      <member refid="classBString_1a06127f94d618622cef17252b95187544" prot="public" virt="non-virtual"><scope>BString</scope><name>CharacterDeescape</name></member>
      <member refid="classBString_1a06eb6cf59137d2e4b8b61a9d1fede099" prot="public" virt="non-virtual"><scope>BString</scope><name>CharacterEscape</name></member>
      <member refid="classBString_1a3a3f3ae002bddbd7d123730f5963bbec" prot="public" virt="non-virtual"><scope>BString</scope><name>CharacterEscape</name></member>
      <member refid="classBString_1a98942505915adb4b028695c6cb8c7dae" prot="public" virt="non-virtual"><scope>BString</scope><name>CharAt</name></member>
      <member refid="classBString_1a7037862d1f99c300c6e7761f665fbe5b" prot="public" virt="non-virtual"><scope>BString</scope><name>CharAt</name></member>
      <member refid="classBString_1a58a9b35feb85f415771c9270d01c1951" prot="public" virt="non-virtual"><scope>BString</scope><name>Compare</name></member>
      <member refid="classBString_1a0fe7635d7e01c69fb5516b8d8ff73152" prot="public" virt="non-virtual"><scope>BString</scope><name>Compare</name></member>
      <member refid="classBString_1a869db6f939ee4465235969581a882403" prot="public" virt="non-virtual"><scope>BString</scope><name>Compare</name></member>
      <member refid="classBString_1a3eed375c60e77025662dc8676e683f19" prot="public" virt="non-virtual"><scope>BString</scope><name>Compare</name></member>
      <member refid="classBString_1ac921329452137b65645e8e228970677c" prot="public" virt="non-virtual"><scope>BString</scope><name>CompareAt</name></member>
      <member refid="classBString_1a9318df765a0691c02023cf37dffb76a6" prot="public" virt="non-virtual"><scope>BString</scope><name>CompareChars</name></member>
      <member refid="classBString_1a4f01a732af22cca3441e08e1db3fedf2" prot="public" virt="non-virtual"><scope>BString</scope><name>CompareChars</name></member>
      <member refid="classBString_1ad66fac3eb976b63fa11ee333fe05eb97" prot="public" virt="non-virtual"><scope>BString</scope><name>CopyCharsInto</name></member>
      <member refid="classBString_1a9b80abd2d6e9ffb53dfaf36a7c5679c7" prot="public" virt="non-virtual"><scope>BString</scope><name>CopyCharsInto</name></member>
      <member refid="classBString_1aaaa5b02d053305f9cb22a5fb7b215931" prot="public" virt="non-virtual"><scope>BString</scope><name>CopyInto</name></member>
      <member refid="classBString_1aace25b8aa915c20c77a78e839aafa687" prot="public" virt="non-virtual"><scope>BString</scope><name>CopyInto</name></member>
      <member refid="classBString_1a7f3becb1690bccc3bbda8be16b27b702" prot="public" virt="non-virtual"><scope>BString</scope><name>CountBytes</name></member>
      <member refid="classBString_1ab7324c44bfcbd8c8b590b257eafc7886" prot="public" virt="non-virtual"><scope>BString</scope><name>CountChars</name></member>
      <member refid="classBString_1a3cf975e61a07d35896d7309451fbceed" prot="public" virt="non-virtual"><scope>BString</scope><name>EndsWith</name></member>
      <member refid="classBString_1a0694b2a8b30e9bdde683877177c883e2" prot="public" virt="non-virtual"><scope>BString</scope><name>EndsWith</name></member>
      <member refid="classBString_1a9ed5ad367f0eede584a05b298685d8df" prot="public" virt="non-virtual"><scope>BString</scope><name>EndsWith</name></member>
      <member refid="classBString_1ac77d0a8511bb3d8a513c2aaa27aef8d7" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirst</name></member>
      <member refid="classBString_1a92a8f3038d38e86070c6053ce2ef7ad7" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirst</name></member>
      <member refid="classBString_1a8b7c60afce76ec240a853efeaecb2fca" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirst</name></member>
      <member refid="classBString_1a6c15db8dcc662b33937c9006f1cbf9f6" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirst</name></member>
      <member refid="classBString_1a6ff0c2dcf64e0680b0a60e18fa5b04fd" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirst</name></member>
      <member refid="classBString_1a739d481ce757dd7a8a8676e398c19341" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirst</name></member>
      <member refid="classBString_1ab4eace227c96f8af4d517ddf12a51af5" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirstChars</name></member>
      <member refid="classBString_1a51142a6d6fcee24230381d5a4dda0a7d" prot="public" virt="non-virtual"><scope>BString</scope><name>FindFirstChars</name></member>
      <member refid="classBString_1a52c1769f4ff328dcaa18e61c92880e80" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLast</name></member>
      <member refid="classBString_1a854708094e6e7b866fdc52ffccdcc4fa" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLast</name></member>
      <member refid="classBString_1ac495d2944faa115305f2dc6e04037e60" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLast</name></member>
      <member refid="classBString_1a90254f7f2a9bf4d7c365a1a1a604a67b" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLast</name></member>
      <member refid="classBString_1ae594d4ac076d0357fd4977827919a58b" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLast</name></member>
      <member refid="classBString_1ac0a2148cbad211382e39c0a3073bb51e" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLast</name></member>
      <member refid="classBString_1a7322f44fc7d5849110501f502aa0618c" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLastChars</name></member>
      <member refid="classBString_1ae38f115fc388c8341f6299e819898aec" prot="public" virt="non-virtual"><scope>BString</scope><name>FindLastChars</name></member>
      <member refid="classBString_1aec3f3f0daffbcf1ee6abe5c2b56fb847" prot="private" virt="non-virtual"><scope>BString</scope><name>fPrivateData</name></member>
      <member refid="classBString_1a7aa55c1fee43eab1ae357d1df3bb5ee7" prot="public" virt="non-virtual"><scope>BString</scope><name>HashValue</name></member>
      <member refid="classBString_1af8b4590dfe42afd26c24db5c583ce947" prot="public" virt="non-virtual"><scope>BString</scope><name>HashValue</name></member>
      <member refid="classBString_1afa13ca0ea3b514faf2f17fe3c4eb1a09" prot="public" virt="non-virtual"><scope>BString</scope><name>ICompare</name></member>
      <member refid="classBString_1a74937047ffe3dd74335b051495c7f839" prot="public" virt="non-virtual"><scope>BString</scope><name>ICompare</name></member>
      <member refid="classBString_1aede54750b9c8de8ebce055863f2ce95d" prot="public" virt="non-virtual"><scope>BString</scope><name>ICompare</name></member>
      <member refid="classBString_1a39b56ad4107e3d45958e7b2a8ff6e33f" prot="public" virt="non-virtual"><scope>BString</scope><name>ICompare</name></member>
      <member refid="classBString_1a5031ad99a3b2f656090a9c6a5ac9d2c7" prot="public" virt="non-virtual"><scope>BString</scope><name>IEndsWith</name></member>
      <member refid="classBString_1a48cd9f748a80f88752c2a622642e711a" prot="public" virt="non-virtual"><scope>BString</scope><name>IEndsWith</name></member>
      <member refid="classBString_1a3d8e68b317a450bdc93b943b8bbf13e3" prot="public" virt="non-virtual"><scope>BString</scope><name>IEndsWith</name></member>
      <member refid="classBString_1aa1b75e6600e3cad8a209ee465a6f5c75" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindFirst</name></member>
      <member refid="classBString_1a2c26c2df73056c1e45d2cd1994e7f320" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindFirst</name></member>
      <member refid="classBString_1a20207dfcbd00f4047e3e40863e1ea1a1" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindFirst</name></member>
      <member refid="classBString_1a76dc4af740f70c453ac24418756a8223" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindFirst</name></member>
      <member refid="classBString_1a6acb54d3f9306ae8b84b6152dbcfaa1c" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindLast</name></member>
      <member refid="classBString_1ab4f4422f4f307000883b64ffa02f8e69" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindLast</name></member>
      <member refid="classBString_1aa20bfbe578c40a794d28883cf0bc0ce1" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindLast</name></member>
      <member refid="classBString_1a3256d109e721c3d29812eae1cd9d6545" prot="public" virt="non-virtual"><scope>BString</scope><name>IFindLast</name></member>
      <member refid="classBString_1afb0fc47dfd9dcd9e8617efefbce9d529" prot="public" virt="non-virtual"><scope>BString</scope><name>Insert</name></member>
      <member refid="classBString_1a6520e5056a0d5aa7913f9e28d69156b3" prot="public" virt="non-virtual"><scope>BString</scope><name>Insert</name></member>
      <member refid="classBString_1a889bdacd0e127d234418f74a978f35f3" prot="public" virt="non-virtual"><scope>BString</scope><name>Insert</name></member>
      <member refid="classBString_1ac0dce8c1f797eeebce8a16a03ef5ee47" prot="public" virt="non-virtual"><scope>BString</scope><name>Insert</name></member>
      <member refid="classBString_1a533b9a6d36e1d3e73bbaca66e9d6e28b" prot="public" virt="non-virtual"><scope>BString</scope><name>Insert</name></member>
      <member refid="classBString_1abee262e92886c0f16f146faecd389ad3" prot="public" virt="non-virtual"><scope>BString</scope><name>Insert</name></member>
      <member refid="classBString_1a38039ae5818c3fe85f5306b87c5e6462" prot="public" virt="non-virtual"><scope>BString</scope><name>Insert</name></member>
      <member refid="classBString_1a45ba52319aefb3f5b1cc2257a071c7e8" prot="public" virt="non-virtual"><scope>BString</scope><name>InsertChars</name></member>
      <member refid="classBString_1a8a478c57baf2a8a2257dea9ce019d947" prot="public" virt="non-virtual"><scope>BString</scope><name>InsertChars</name></member>
      <member refid="classBString_1a439203cf7987f6a4db5d975e0211f65f" prot="public" virt="non-virtual"><scope>BString</scope><name>InsertChars</name></member>
      <member refid="classBString_1a66128d146a7b1ecdfdd05f7bfa0e2d48" prot="public" virt="non-virtual"><scope>BString</scope><name>InsertChars</name></member>
      <member refid="classBString_1a4aa5c50712f6c1641dc0aec266a01691" prot="public" virt="non-virtual"><scope>BString</scope><name>InsertChars</name></member>
      <member refid="classBString_1a190fe82234de8870a5ca176fa7bcb27a" prot="public" virt="non-virtual"><scope>BString</scope><name>InsertChars</name></member>
      <member refid="classBString_1aa5bb247095ca2201ac03dc7901ba8e1c" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplace</name></member>
      <member refid="classBString_1a92b00b20f909f73d9124fa656ddbd6f0" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplace</name></member>
      <member refid="classBString_1a0b709adadf19668137df6208d322b119" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplaceAll</name></member>
      <member refid="classBString_1a0e6c4875e816bc208783af5902f64a6c" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplaceAll</name></member>
      <member refid="classBString_1ac2cf3c7a812fae37ac7878c68ee19501" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplaceFirst</name></member>
      <member refid="classBString_1a93b277b98942e2f6030c520e6b81de3b" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplaceFirst</name></member>
      <member refid="classBString_1ac40dd4f1d5da500adc6b1da0da829b56" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplaceLast</name></member>
      <member refid="classBString_1ab2dc3159a9afc0efa32c8368dd3f6e39" prot="public" virt="non-virtual"><scope>BString</scope><name>IReplaceLast</name></member>
      <member refid="classBString_1ad00595bb93ed1253c1f48b3fef24174c" prot="public" virt="non-virtual"><scope>BString</scope><name>IsEmpty</name></member>
      <member refid="classBString_1a4e0e7b3f1721a3f6d04741e18e59fd1e" prot="public" virt="non-virtual"><scope>BString</scope><name>IStartsWith</name></member>
      <member refid="classBString_1aee8ed0416cce7f1f533e306fe1cd1e60" prot="public" virt="non-virtual"><scope>BString</scope><name>IStartsWith</name></member>
      <member refid="classBString_1aaf5b20894c34262beafcee0c7c2e2e45" prot="public" virt="non-virtual"><scope>BString</scope><name>IStartsWith</name></member>
      <member refid="classBString_1a5ca1e86dc0053bac5268d4e0057e103a" prot="public" virt="non-virtual"><scope>BString</scope><name>Length</name></member>
      <member refid="classBString_1abd7474f601d6a852de12c9dd9174b39e" prot="public" virt="non-virtual"><scope>BString</scope><name>LockBuffer</name></member>
      <member refid="classBString_1a116e29d64f4ba34b265b818ae9c70727" prot="public" virt="non-virtual"><scope>BString</scope><name>MoveCharsInto</name></member>
      <member refid="classBString_1ae5c0161712c97d4ace5019f7f2f76c9e" prot="public" virt="non-virtual"><scope>BString</scope><name>MoveCharsInto</name></member>
      <member refid="classBString_1a8425b164bcf405ae472e340455b70dc1" prot="public" virt="non-virtual"><scope>BString</scope><name>MoveInto</name></member>
      <member refid="classBString_1aa486017d64fc2fb1d54924e0dd8e2729" prot="public" virt="non-virtual"><scope>BString</scope><name>MoveInto</name></member>
      <member refid="classBString_1a37b1225aed929fc53e83616a7f693904" prot="public" virt="non-virtual"><scope>BString</scope><name>operator const char *</name></member>
      <member refid="classBString_1a52d78209b34b5e05eacc4e65cfd78300" prot="public" virt="non-virtual"><scope>BString</scope><name>operator!=</name></member>
      <member refid="classBString_1a68a2d28b93ee8348163a320bb1054b22" prot="public" virt="non-virtual"><scope>BString</scope><name>operator!=</name></member>
      <member refid="classBString_1a90698a990c4711bf01841e23495ffdeb" prot="public" virt="non-virtual"><scope>BString</scope><name>operator+=</name></member>
      <member refid="classBString_1a98889adc4a2b87b38479e7cfe241b066" prot="public" virt="non-virtual"><scope>BString</scope><name>operator+=</name></member>
      <member refid="classBString_1a323b0866c0eadde4e981c7d9314f34dc" prot="public" virt="non-virtual"><scope>BString</scope><name>operator+=</name></member>
      <member refid="classBString_1add02ca2563f6feaf405587c38f1bdd21" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;</name></member>
      <member refid="classBString_1aa6886f45135f335ed05f002bd19f842d" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;</name></member>
      <member refid="classBString_1a5bcac61c11f6641fdd6fb8561fe39ffc" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1ad21facd867ea1af2fcf0807809b971ca" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1a262306145bac48a8ff4ca6e2387d277a" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1a8dba0ae3f02dd71ee4a1fda622a695d3" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1a175f003163f6725a3aeaa33380249fe3" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1ada9a27cfa92c2af1445c0a1b88032bbf" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1a1916b773fabcdd0007162319d9cfb6bd" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1ab5070c8e89b58466f4ced7224223b4a6" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1a42a9ba45e33e16572a8843d428f7c692" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1afede9898aa451e5ce6144916e1a160da" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1a5cb121a81c913bf33110a03ec05871d3" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1af4181b4a4540e20077c8da261a9e1064" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;&lt;</name></member>
      <member refid="classBString_1a723ff118808c6481722b2a53c3832485" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;=</name></member>
      <member refid="classBString_1a7c660e1dd749f068967cfb0f900bd96d" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&lt;=</name></member>
      <member refid="classBString_1a6f476b32944d005de684c11ccb5ecbaa" prot="public" virt="non-virtual"><scope>BString</scope><name>operator=</name></member>
      <member refid="classBString_1a281d1abfd26fcf20f63c32053862611b" prot="public" virt="non-virtual"><scope>BString</scope><name>operator=</name></member>
      <member refid="classBString_1a4e9d677b97f1bbaf449c35066b7db996" prot="public" virt="non-virtual"><scope>BString</scope><name>operator=</name></member>
      <member refid="classBString_1a701b1349ac015b29c88cb3f06b6c26cb" prot="public" virt="non-virtual"><scope>BString</scope><name>operator=</name></member>
      <member refid="classBString_1a70bcc0ac40a18bc31d0cdb6b81d9235b" prot="public" virt="non-virtual"><scope>BString</scope><name>operator==</name></member>
      <member refid="classBString_1a67138abea38871ddb5dfc8646a1676f3" prot="public" virt="non-virtual"><scope>BString</scope><name>operator==</name></member>
      <member refid="classBString_1a24212a40b3a0b409c20131f1175f4383" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&gt;</name></member>
      <member refid="classBString_1af7bb77100b7103935c0b325b7666e3fa" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&gt;</name></member>
      <member refid="classBString_1aabad700660a6c44424218d5c6057ab94" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&gt;=</name></member>
      <member refid="classBString_1acc3c2882848a1bcd43c37fb1a44e7665" prot="public" virt="non-virtual"><scope>BString</scope><name>operator&gt;=</name></member>
      <member refid="classBString_1aecae63545eeac7757fce1027e38cfbcf" prot="public" virt="non-virtual"><scope>BString</scope><name>operator[]</name></member>
      <member refid="classBString_1a7ee2c0002c617d8d1ba12a878d2c88ce" prot="public" virt="non-virtual"><scope>BString</scope><name>Prepend</name></member>
      <member refid="classBString_1a6cb0db9ce9bc27d302870b0afb703e19" prot="public" virt="non-virtual"><scope>BString</scope><name>Prepend</name></member>
      <member refid="classBString_1a24ffc4d0d34449f58e044e71bd74407a" prot="public" virt="non-virtual"><scope>BString</scope><name>Prepend</name></member>
      <member refid="classBString_1a52f9e38ca2c92373dc36d727e3e9b179" prot="public" virt="non-virtual"><scope>BString</scope><name>Prepend</name></member>
      <member refid="classBString_1a9a836eab3edf578cfb01f02f280e061e" prot="public" virt="non-virtual"><scope>BString</scope><name>Prepend</name></member>
      <member refid="classBString_1aeaec6098d2b377d0b111881e0d808c23" prot="public" virt="non-virtual"><scope>BString</scope><name>PrependChars</name></member>
      <member refid="classBString_1a07062bf52a8c5bbc53e278c6c6b4e172" prot="public" virt="non-virtual"><scope>BString</scope><name>PrependChars</name></member>
      <member refid="classBString_1af74402afbb40c34f55ec5545a0f02fe4afb9d6d1db07d3626b4ec74829f80ffbe" prot="private" virt="non-virtual"><scope>BString</scope><name>PRIVATE_DATA</name></member>
      <member refid="classBString_1af74402afbb40c34f55ec5545a0f02fe4" prot="private" virt="non-virtual"><scope>BString</scope><name>PrivateDataTag</name></member>
      <member refid="classBString_1a753af1661c9a723bf141518cdbcf9e05" prot="public" virt="non-virtual"><scope>BString</scope><name>Remove</name></member>
      <member refid="classBString_1ac83f3f16d78d9e481904ea40742f38aa" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveAll</name></member>
      <member refid="classBString_1ae39d87233489f74ff4e8608773e8069b" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveAll</name></member>
      <member refid="classBString_1a9be5bd09908575d98f6dc3de443fd3a8" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveChars</name></member>
      <member refid="classBString_1ae17488d24d13fcbf243c914736160271" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveCharsSet</name></member>
      <member refid="classBString_1a6b0d529b77c4b160703fb94082eb8708" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveFirst</name></member>
      <member refid="classBString_1ab62c80c4a2101ed8fe366d4a4b047340" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveFirst</name></member>
      <member refid="classBString_1aa8d7576976583ab0d19490ec7c597313" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveLast</name></member>
      <member refid="classBString_1af81cd6acaed80eeb0703501f7f65471b" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveLast</name></member>
      <member refid="classBString_1a3eb8f3427ed635028c745cefad043d02" prot="public" virt="non-virtual"><scope>BString</scope><name>RemoveSet</name></member>
      <member refid="classBString_1acc0e9d99f53374f3817088df50f58eba" prot="public" virt="non-virtual"><scope>BString</scope><name>Replace</name></member>
      <member refid="classBString_1ab72f86cac1d7bd4ce6640cc419118f6f" prot="public" virt="non-virtual"><scope>BString</scope><name>Replace</name></member>
      <member refid="classBString_1a018e210b478d3b85a5a6022995eb7ed7" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceAll</name></member>
      <member refid="classBString_1a599028f034e9725bcdbbb49e319580c8" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceAll</name></member>
      <member refid="classBString_1af3821e4a7a3747dbde8bbde5d352f540" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceAllChars</name></member>
      <member refid="classBString_1aef5e94ded7abb6e7c7d1599a333e929f" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceChars</name></member>
      <member refid="classBString_1ab97b5f53d6fe485ac0cd6baeb1e2e9d8" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceCharsSet</name></member>
      <member refid="classBString_1a8070ebfed4804f0f647a134b938f7f59" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceFirst</name></member>
      <member refid="classBString_1af8228f347b375de12cee5df2cb6f0a43" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceFirst</name></member>
      <member refid="classBString_1acf2cbd843abeb75441b5b4e6864eb502" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceLast</name></member>
      <member refid="classBString_1a7f5e6827f970ec77d27cc29680a3497b" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceLast</name></member>
      <member refid="classBString_1a84e363d092254a7f8878ea7f7a0c9ae8" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceSet</name></member>
      <member refid="classBString_1af5dcd88b301b12ff3c9246f3b7608769" prot="public" virt="non-virtual"><scope>BString</scope><name>ReplaceSet</name></member>
      <member refid="classBString_1a5176de54d44a37209861fc76875520c5" prot="public" virt="non-virtual"><scope>BString</scope><name>ScanWithFormat</name></member>
      <member refid="classBString_1a9928c16f310b8a04eb401a8cddaf617c" prot="public" virt="non-virtual"><scope>BString</scope><name>ScanWithFormatVarArgs</name></member>
      <member refid="classBString_1a22478fe3f170fb3a21058cb12d264207" prot="public" virt="non-virtual"><scope>BString</scope><name>SetByteAt</name></member>
      <member refid="classBString_1a2669e638b5b7f72790df7110dbcf0e36" prot="public" virt="non-virtual"><scope>BString</scope><name>SetTo</name></member>
      <member refid="classBString_1a71bcdc15df3c1eb0be34877a25644874" prot="public" virt="non-virtual"><scope>BString</scope><name>SetTo</name></member>
      <member refid="classBString_1a5218576d7893f29d7fc51fdcb9e81474" prot="public" virt="non-virtual"><scope>BString</scope><name>SetTo</name></member>
      <member refid="classBString_1a10f9c7bb1bee806540f81028301ff932" prot="public" virt="non-virtual"><scope>BString</scope><name>SetTo</name></member>
      <member refid="classBString_1a5c6bcd8d133f8561a7d2355273da4901" prot="public" virt="non-virtual"><scope>BString</scope><name>SetTo</name></member>
      <member refid="classBString_1aeebfaa616dde1aac40cf73c63f99eefc" prot="public" virt="non-virtual"><scope>BString</scope><name>SetToChars</name></member>
      <member refid="classBString_1a4d4520886cfef8eab82925c46cc57fa6" prot="public" virt="non-virtual"><scope>BString</scope><name>SetToChars</name></member>
      <member refid="classBString_1a41beabb582880a92965c632662c46fe7" prot="public" virt="non-virtual"><scope>BString</scope><name>SetToFormat</name></member>
      <member refid="classBString_1a034adf1b10fd93ce8ade226461604867" prot="public" virt="non-virtual"><scope>BString</scope><name>SetToFormatVarArgs</name></member>
      <member refid="classBString_1a5e862dbc2da0b2813cf0e848910a834f" prot="public" virt="non-virtual"><scope>BString</scope><name>Split</name></member>
      <member refid="classBString_1a8febb7b4bf54738272cbfb9b4a72e8fb" prot="public" virt="non-virtual"><scope>BString</scope><name>StartsWith</name></member>
      <member refid="classBString_1ae729298df417b0c61a67f49e5619c72f" prot="public" virt="non-virtual"><scope>BString</scope><name>StartsWith</name></member>
      <member refid="classBString_1ac78677d2cb95830828d2c4473248efa4" prot="public" virt="non-virtual"><scope>BString</scope><name>StartsWith</name></member>
      <member refid="classBString_1ae4fe78b06c8e3310093b80305e14ba87" prot="public" virt="non-virtual"><scope>BString</scope><name>String</name></member>
      <member refid="classBString_1a505de23603c595b798612fd9cac8a3c9" prot="public" virt="non-virtual"><scope>BString</scope><name>ToLower</name></member>
      <member refid="classBString_1a114c552044efc5025e7b55a12f40ad45" prot="public" virt="non-virtual"><scope>BString</scope><name>ToUpper</name></member>
      <member refid="classBString_1a3eccca884e2478ae8013488a46839d20" prot="public" virt="non-virtual"><scope>BString</scope><name>Trim</name></member>
      <member refid="classBString_1a723a55429c837aa040673cc61d9f2452" prot="public" virt="non-virtual"><scope>BString</scope><name>Truncate</name></member>
      <member refid="classBString_1a09e0e1b8622dee073ebcbe4e2dccb3c9" prot="public" virt="non-virtual"><scope>BString</scope><name>TruncateChars</name></member>
      <member refid="classBString_1a82984246845313df80527b32f8a19cc8" prot="public" virt="non-virtual"><scope>BString</scope><name>UnlockBuffer</name></member>
      <member refid="classBString_1af8eabd4ce66f2b0ab9595ece0658eb8e" prot="public" virt="non-virtual"><scope>BString</scope><name>~BString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
