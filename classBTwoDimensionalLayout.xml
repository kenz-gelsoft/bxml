<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBTwoDimensionalLayout" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BTwoDimensionalLayout</compoundname>
    <basecompoundref refid="classBAbstractLayout" prot="public" virt="non-virtual">BAbstractLayout</basecompoundref>
    <derivedcompoundref refid="classBGridLayout" prot="public" virt="non-virtual">BGridLayout</derivedcompoundref>
    <derivedcompoundref refid="classBGroupLayout" prot="public" virt="non-virtual">BGroupLayout</derivedcompoundref>
    <innerclass refid="structBTwoDimensionalLayout_1_1ColumnRowConstraints" prot="protected">BTwoDimensionalLayout::ColumnRowConstraints</innerclass>
    <innerclass refid="structBTwoDimensionalLayout_1_1Dimensions" prot="protected">BTwoDimensionalLayout::Dimensions</innerclass>
      <sectiondef kind="user-defined">
      <header>Current settings for spacing</header>
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1ac0aa796c2d64b0068a357d969561de90" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BTwoDimensionalLayout::fLeftInset</definition>
        <argsstring></argsstring>
        <name>fLeftInset</name>
        <qualifiedname>BTwoDimensionalLayout::fLeftInset</qualifiedname>
        <briefdescription>
<para>The current left inset for this layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="98" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1a1dc695acf8c1f94f8653a4398feac5a5" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BTwoDimensionalLayout::fRightInset</definition>
        <argsstring></argsstring>
        <name>fRightInset</name>
        <qualifiedname>BTwoDimensionalLayout::fRightInset</qualifiedname>
        <briefdescription>
<para>The current right inset for this layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="99" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1abc4e661aa6fd2e9197e561892d40b2f3" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BTwoDimensionalLayout::fTopInset</definition>
        <argsstring></argsstring>
        <name>fTopInset</name>
        <qualifiedname>BTwoDimensionalLayout::fTopInset</qualifiedname>
        <briefdescription>
<para>The current top inset for this layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="100" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1a8e55843e4e569083ecd8265d4f793099" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BTwoDimensionalLayout::fBottomInset</definition>
        <argsstring></argsstring>
        <name>fBottomInset</name>
        <qualifiedname>BTwoDimensionalLayout::fBottomInset</qualifiedname>
        <briefdescription>
<para>The current bottom inset for this layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="101" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1adfad5192bbe0341d5906c5216f0dcbae" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BTwoDimensionalLayout::fHSpacing</definition>
        <argsstring></argsstring>
        <name>fHSpacing</name>
        <qualifiedname>BTwoDimensionalLayout::fHSpacing</qualifiedname>
        <briefdescription>
<para>the current horizontal spacing between columns for this layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="102" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1a898f35c225919e096d1f154ad9ff6642" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BTwoDimensionalLayout::fVSpacing</definition>
        <argsstring></argsstring>
        <name>fVSpacing</name>
        <qualifiedname>BTwoDimensionalLayout::fVSpacing</qualifiedname>
        <briefdescription>
<para>The current vertical spacing between rows for this layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="103" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Protected helper methods for inset calculation.</header>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1ab6d8341da8769dd0ad704e53adfa50d7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BTwoDimensionalLayout::AddInsets</definition>
        <argsstring>(BSize size)</argsstring>
        <name>AddInsets</name>
        <qualifiedname>BTwoDimensionalLayout::AddInsets</qualifiedname>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Add the <emphasis>size</emphasis> to all the insets for this layout. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="70" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a93aa980ac6253fc952772dc2cf283dfc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::AddInsets</definition>
        <argsstring>(float *minHeight, float *maxHeight, float *preferredHeight)</argsstring>
        <name>AddInsets</name>
        <qualifiedname>BTwoDimensionalLayout::AddInsets</qualifiedname>
        <param>
          <type>float *</type>
          <declname>minHeight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>maxHeight</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>preferredHeight</declname>
        </param>
        <briefdescription>
<para>Add to the insets, and store the modified values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">minHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add to the minimum height for this layout. The new minimum height is stored at the variable of this pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">maxHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add to the maximum height for this layout. The new maximum height is stored at the variable of this pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">preferredHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the preferred height for this layout. The new preferred heifght is stored at the variable of this pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a2e2f066f679835398fd2a0bf2044115b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BTwoDimensionalLayout::SubtractInsets</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SubtractInsets</name>
        <qualifiedname>BTwoDimensionalLayout::SubtractInsets</qualifiedname>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Substract the <emphasis>size</emphasis> from all the insets for this layout. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="73" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Hook Methods</header>
      <description><para>These methods are called automatically as needed during layout, and provide the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> class with the necessary information to properly layout the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> in this <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>. </para>
</description>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a4f14f46b98fd590a562b5914e57b111a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::PrepareItems</definition>
        <argsstring>(orientation orientation)</argsstring>
        <name>PrepareItems</name>
        <qualifiedname>BTwoDimensionalLayout::PrepareItems</qualifiedname>
        <reimplementedby refid="classBGroupLayout_1a3519b2e20a2f47421e614422ff83e3de">PrepareItems</reimplementedby>
        <param>
          <type><ref refid="InterfaceDefs_8h_1ac5fc6e200c34376449ba20a234061eb4" kindref="member">orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Prepare the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> in this <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> subclass for layout within a certain <emphasis>orientation</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a good place to update cache information that will be used in other hook methods, for example.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="75" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1ad8e56e07b576c30be9e19dba72818486" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BTwoDimensionalLayout::HasMultiColumnItems</definition>
        <argsstring>()</argsstring>
        <name>HasMultiColumnItems</name>
        <qualifiedname>BTwoDimensionalLayout::HasMultiColumnItems</qualifiedname>
        <reimplementedby refid="classBGridLayout_1aac43e2331af65b3c4fa7f07334871ed7">HasMultiColumnItems</reimplementedby>
        <briefdescription>
<para>Tests whether or not this <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> contains any <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>'s spanning more than one column. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> implementation returns false.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="76" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a3a50bf74279d04218188c5574d82ff0d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BTwoDimensionalLayout::HasMultiRowItems</definition>
        <argsstring>()</argsstring>
        <name>HasMultiRowItems</name>
        <qualifiedname>BTwoDimensionalLayout::HasMultiRowItems</qualifiedname>
        <reimplementedby refid="classBGridLayout_1af37fc1cf8cfee1ec101b7b4ee8913c1e">HasMultiRowItems</reimplementedby>
        <briefdescription>
<para>Tests whether or not this <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> contains any <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>'s spanning more than one row. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> implementation returns false.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="77" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a1e5383c9bfe9813c83d611c2069b3418" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BTwoDimensionalLayout::InternalCountColumns</definition>
        <argsstring>()=0</argsstring>
        <name>InternalCountColumns</name>
        <qualifiedname>BTwoDimensionalLayout::InternalCountColumns</qualifiedname>
        <reimplementedby refid="classBGridLayout_1a40fef2bcfdd8063cfc43c64f4a00c5fe">InternalCountColumns</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a0eb78028a7df6d1e0f46f7213eaa5ed8">InternalCountColumns</reimplementedby>
        <briefdescription>
<para>Get the number of columns in the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of columns in the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="79" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1afac018580a44f991c9d604e226226e76" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BTwoDimensionalLayout::InternalCountRows</definition>
        <argsstring>()=0</argsstring>
        <name>InternalCountRows</name>
        <qualifiedname>BTwoDimensionalLayout::InternalCountRows</qualifiedname>
        <reimplementedby refid="classBGridLayout_1a3cf37b7dd7b769b41e262b3009a3987c">InternalCountRows</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1aeff89a07380f8171d026b78737afeebe">InternalCountRows</reimplementedby>
        <briefdescription>
<para>Get the number of rows in the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of rows in the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="80" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1acfbb5ddafdbd9a22f0c2a7e23d706e6f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::GetColumnRowConstraints</definition>
        <argsstring>(orientation orientation, int32 index, ColumnRowConstraints *constraints)=0</argsstring>
        <name>GetColumnRowConstraints</name>
        <qualifiedname>BTwoDimensionalLayout::GetColumnRowConstraints</qualifiedname>
        <reimplementedby refid="classBGridLayout_1a2bc20cb5debda316d2ba0144acece99d">GetColumnRowConstraints</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1aee1e856cc71eb9c3168fbb1d98bb05df">GetColumnRowConstraints</reimplementedby>
        <param>
          <type><ref refid="InterfaceDefs_8h_1ac5fc6e200c34376449ba20a234061eb4" kindref="member">orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structBTwoDimensionalLayout_1_1ColumnRowConstraints" kindref="compound">ColumnRowConstraints</ref> *</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
<para>Fill in the <ref refid="structBTwoDimensionalLayout_1_1ColumnRowConstraints" kindref="compound">ColumnRowConstraints</ref> for a certain column or row in the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is used to communicate the size constraints and weight for a given row/column in the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="81" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a537932c4a364b7e206e87788dafe40a6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::GetItemDimensions</definition>
        <argsstring>(BLayoutItem *item, Dimensions *dimensions)=0</argsstring>
        <name>GetItemDimensions</name>
        <qualifiedname>BTwoDimensionalLayout::GetItemDimensions</qualifiedname>
        <reimplementedby refid="classBGridLayout_1a7b5b1de10775ef2d2f35dc3956a63bee">GetItemDimensions</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a4ae9dc30c3b44e806fb49013ef0efa27">GetItemDimensions</reimplementedby>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structBTwoDimensionalLayout_1_1Dimensions" kindref="compound">Dimensions</ref> *</type>
          <declname>dimensions</declname>
        </param>
        <briefdescription>
<para>Tell the base class what column and row a <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> is in as well as how many columns and rows it covers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="85" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBTwoDimensionalLayout_1a12f92bb8f3e3f0785af44f513f128c14" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class LocalLayouter</definition>
        <argsstring></argsstring>
        <name>LocalLayouter</name>
        <qualifiedname>BTwoDimensionalLayout::LocalLayouter</qualifiedname>
        <param>
          <type>LocalLayouter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="93" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1a620c8271bb44cb816d9c73f6103ace92" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BTwoDimensionalLayout::_reserved[5]</definition>
        <argsstring>[5]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BTwoDimensionalLayout::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="126" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBTwoDimensionalLayout_1a6b1000f56e28778fc5ab01209e8e7a41" prot="private" static="no" mutable="no">
        <type>LocalLayouter *</type>
        <definition>LocalLayouter* BTwoDimensionalLayout::fLocalLayouter</definition>
        <argsstring></argsstring>
        <name>fLocalLayouter</name>
        <qualifiedname>BTwoDimensionalLayout::fLocalLayouter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="124" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a98f591898a00421664defadb6aee0d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BTwoDimensionalLayout::BTwoDimensionalLayout</definition>
        <argsstring>()</argsstring>
        <name>BTwoDimensionalLayout</name>
        <qualifiedname>BTwoDimensionalLayout::BTwoDimensionalLayout</qualifiedname>
        <briefdescription>
<para>Create an empty layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1af3d37ee41a0ce6394c4d532da519f444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BTwoDimensionalLayout::BTwoDimensionalLayout</definition>
        <argsstring>(BMessage *from)</argsstring>
        <name>BTwoDimensionalLayout</name>
        <qualifiedname>BTwoDimensionalLayout::BTwoDimensionalLayout</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Unarchive constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a286cc9889f960352719001741937f7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BTwoDimensionalLayout::~BTwoDimensionalLayout</definition>
        <argsstring>()</argsstring>
        <name>~BTwoDimensionalLayout</name>
        <qualifiedname>BTwoDimensionalLayout::~BTwoDimensionalLayout</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="18" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a873328fd96e352f3822c74c10b191399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::AlignLayoutWith</definition>
        <argsstring>(BTwoDimensionalLayout *other, orientation orientation)</argsstring>
        <name>AlignLayoutWith</name>
        <qualifiedname>BTwoDimensionalLayout::AlignLayoutWith</qualifiedname>
        <param>
          <type><ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="InterfaceDefs_8h_1ac5fc6e200c34376449ba20a234061eb4" kindref="member">orientation</ref></type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Align the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>'s in the specified <emphasis>orientation</emphasis> within two or more <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>'s. </para>
        </briefdescription>
        <detaileddescription>
<para>When two (or more) <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>'s are aligned within a certain <emphasis>orientation</emphasis>, then the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>'s within those <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>'s will have identical widths or heights (depending on how the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>'s are aligned.)</para>
<para>If you align two <ref refid="classBGroupLayout" kindref="compound">BGroupLayout</ref>'s horizontally for example, then the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> at index 0 in both <ref refid="classBGroupLayout" kindref="compound">BGroupLayout</ref>'s will be given the same horizontal area. The same is true for the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> at index 1, 2, etc. Not all <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>'s have to have an item at each index for the alignment to proceed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> to be aligned with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>orientation</emphasis> on which to be aligned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="27" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a405b207a3fa1770d5349de6d66705390" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BTwoDimensionalLayout::Archive</definition>
        <argsstring>(BMessage *into, bool deep=true) const</argsstring>
        <name>Archive</name>
        <qualifiedname>BTwoDimensionalLayout::Archive</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a76c6e663adb27a10972dafe22c898bf7">Archive</reimplements>
        <reimplementedby refid="classBGridLayout_1aab5e2df95091bb76bb93628dcd01013e">Archive</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1aae43bdb3a725755664e55f13a054b510">Archive</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>into</declname>
          <defname>archive</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Archives this layout into <emphasis>archive</emphasis>. If deep is true, also archives the items in this layout, calling <ref refid="classBTwoDimensionalLayout_1af70e3bd455f4dafa684ac6352223fcc4" kindref="member">ItemArchived()</ref> for each one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="41" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a02f5827bf18fdfc50b2aef94733a97a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
        <definition>virtual BAlignment BTwoDimensionalLayout::BaseAlignment</definition>
        <argsstring>()</argsstring>
        <name>BaseAlignment</name>
        <qualifiedname>BTwoDimensionalLayout::BaseAlignment</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a4f637a263f6b087334d946bf97e307ca">BaseAlignment</reimplements>
        <briefdescription>
<para>Method to be implemented in derived classes return the preferred alignment for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="33" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a9cba96eda27d17e4d7c8c5b3046a1164" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>virtual BSize BTwoDimensionalLayout::BaseMaxSize</definition>
        <argsstring>()</argsstring>
        <name>BaseMaxSize</name>
        <qualifiedname>BTwoDimensionalLayout::BaseMaxSize</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a7e6be2609135ea8b87a370bbc49d454c">BaseMaxSize</reimplements>
        <briefdescription>
<para>Method to be implemented in derived classes return the maximum size constraint for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="31" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1ad56f8b3d3ffb022153d9a06bc5f1f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>virtual BSize BTwoDimensionalLayout::BaseMinSize</definition>
        <argsstring>()</argsstring>
        <name>BaseMinSize</name>
        <qualifiedname>BTwoDimensionalLayout::BaseMinSize</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a71018d789f5374ecf4b5acc82ea0d9a6">BaseMinSize</reimplements>
        <briefdescription>
<para>Method to be implemented in derived classes return the minimum size constraint for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="30" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a03bcab80b28f949927ce42ccc428e52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>virtual BSize BTwoDimensionalLayout::BasePreferredSize</definition>
        <argsstring>()</argsstring>
        <name>BasePreferredSize</name>
        <qualifiedname>BTwoDimensionalLayout::BasePreferredSize</qualifiedname>
        <reimplements refid="classBAbstractLayout_1afdc5353db27d60c86c2e723a846446a4">BasePreferredSize</reimplements>
        <briefdescription>
<para>Method to be implemented in derived classes return the preferred size constraint for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="32" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a360c3c27eb293edea81b8cf8742d3913" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::GetHeightForWidth</definition>
        <argsstring>(float width, float *min, float *max, float *preferred)</argsstring>
        <name>GetHeightForWidth</name>
        <qualifiedname>BTwoDimensionalLayout::GetHeightForWidth</qualifiedname>
        <reimplements refid="classBLayoutItem_1addd90adf76c9caad200f6f465c06e0bf">GetHeightForWidth</reimplements>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>preferred</declname>
        </param>
        <briefdescription>
<para>Get this <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>'s height constraints for a given <emphasis>width</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> does not have height for width constraints (<ref refid="classBTwoDimensionalLayout_1a8b14614c8b378412107043b1e8e24ead" kindref="member">HasHeightForWidth()</ref> returns <computeroutput>false</computeroutput>) it does not need to implement this method.</para>
<para><simplesect kind="note"><para>It is prudent to compare <emphasis>min</emphasis>, <emphasis>max</emphasis>, <emphasis>preferred</emphasis> to <computeroutput>NULL</computeroutput> before dereferencing them.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="36" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a6b4a8eeb31c191a4aa94129d0133f32d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::GetInsets</definition>
        <argsstring>(float *left, float *top, float *right, float *bottom) const</argsstring>
        <name>GetInsets</name>
        <qualifiedname>BTwoDimensionalLayout::GetInsets</qualifiedname>
        <param>
          <type>float *</type>
          <declname>left</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>top</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>right</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
<para>Get the insets for the <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> (in pixels). </para>
        </briefdescription>
        <detaileddescription>
<para>Passing <computeroutput>NULL</computeroutput> for any parameter is not an error, those parameters will be ignored.</para>
<para><simplesect kind="see"><para><ref refid="classBTwoDimensionalLayout_1acaf4ec650969994cb39dd015e3bebd91" kindref="member">BTwoDimensionalLayout::SetInsets()</ref>;</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a8b14614c8b378412107043b1e8e24ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BTwoDimensionalLayout::HasHeightForWidth</definition>
        <argsstring>()</argsstring>
        <name>HasHeightForWidth</name>
        <qualifiedname>BTwoDimensionalLayout::HasHeightForWidth</qualifiedname>
        <reimplements refid="classBLayoutItem_1a3186c8eec495915c5b074fe7d10dc94c">HasHeightForWidth</reimplements>
        <briefdescription>
<para>Returns whether or not this <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>'s height constraints are dependent on its width. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>By default, this method returns <computeroutput>false</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="35" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1aac851d9c86397296d0e7e69716c01926" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BTwoDimensionalLayout::Perform</definition>
        <argsstring>(perform_code d, void *arg)</argsstring>
        <name>Perform</name>
        <qualifiedname>BTwoDimensionalLayout::Perform</qualifiedname>
        <reimplements refid="classBAbstractLayout_1aa4d7d592de1e566f73f440576d1c2cac">Perform</reimplements>
        <reimplementedby refid="classBGridLayout_1a0ab603b381b9ba4d7efb3efbeae4940f">Perform</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a31d82f6cd2fdecdc0a04d60d6e3943f7">Perform</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1ad2237b0064c91c237159edc020989bab" kindref="member">perform_code</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Perform some action (Internal method defined for binary compatibility purposes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="43" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a8a4f4e152b4f6106cbc88fc0bb1f32d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::SetFrame</definition>
        <argsstring>(BRect frame)</argsstring>
        <name>SetFrame</name>
        <qualifiedname>BTwoDimensionalLayout::SetFrame</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a879dd41748f05cab421789930e7bd7af">SetFrame</reimplements>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>Set the bounding frame of this item. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>frame</emphasis> is in the coordinate system of the target view of the <ref refid="classBLayout" kindref="compound">BLayout</ref> that this item belongs to.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="39" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a03d3adcb77ff7b3073e890ce42c63f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::SetInsets</definition>
        <argsstring>(float horizontal, float vertical)</argsstring>
        <name>SetInsets</name>
        <qualifiedname>BTwoDimensionalLayout::SetInsets</qualifiedname>
        <param>
          <type>float</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
<para>Set the insets for this layout. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method to easily set similar insets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>horizontal</parametername>
</parameternamelist>
<parameterdescription>
<para>The insets to the <emphasis>left</emphasis> and <emphasis>right</emphasis> of the layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertical</parametername>
</parameternamelist>
<parameterdescription>
<para>The insets at the <emphasis>top</emphasis> and <emphasis>bottom</emphasis> of the layout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="22" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1aaae5175781d0bc8c96e1e0fcaccc81da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::SetInsets</definition>
        <argsstring>(float insets)</argsstring>
        <name>SetInsets</name>
        <qualifiedname>BTwoDimensionalLayout::SetInsets</qualifiedname>
        <param>
          <type>float</type>
          <declname>insets</declname>
        </param>
        <briefdescription>
<para>Set the insets for this layout. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that to easily set all the insets of the layout to the same value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insets</parametername>
</parameternamelist>
<parameterdescription>
<para>The inset to be applied to <emphasis>left</emphasis>, <emphasis>top</emphasis>, <emphasis>right</emphasis> and <emphasis>bottom</emphasis> of this layout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="23" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1acaf4ec650969994cb39dd015e3bebd91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::SetInsets</definition>
        <argsstring>(float left, float top, float right, float bottom)</argsstring>
        <name>SetInsets</name>
        <qualifiedname>BTwoDimensionalLayout::SetInsets</qualifiedname>
        <param>
          <type>float</type>
          <declname>left</declname>
        </param>
        <param>
          <type>float</type>
          <declname>top</declname>
        </param>
        <param>
          <type>float</type>
          <declname>right</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
<para>Set the insets for this layout. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the spacing around the edges of this layout. If you pass <computeroutput>B_USE_DEFAULT_SPACING</computeroutput> for a certain parameter, that parameter will be replaced with the value returned by BControlLook::DefaultItemSpacing().</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="20" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBTwoDimensionalLayout_1adb001699008fe0cb2eff51661da175e6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BTwoDimensionalLayout::AllArchived</definition>
        <argsstring>(BMessage *into) const</argsstring>
        <name>AllArchived</name>
        <qualifiedname>BTwoDimensionalLayout::AllArchived</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a73b50e5ee03b980b4e8f08c875528162">AllArchived</reimplements>
        <reimplementedby refid="classBGridLayout_1adddbabf3f060e0e3d20af12cf3f3dab1">AllArchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a62670753e05e05601592d49f0b5f438f">AllArchived</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>into</defname>
        </param>
        <briefdescription>
<para>Method relating to the use of <computeroutput><ref refid="classBArchiver" kindref="compound">BArchiver</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook function is called once the first <ref refid="classBArchiver" kindref="compound">BArchiver</ref> that was created in an archiving session is either destroyed, or has its Finish() method called. Implementations of this method can be used, in conjunction with <ref refid="classBArchiver_1a77f099b123416c719be2cd78eb999d19" kindref="member">BArchiver::IsArchived()</ref>, to reference objects in your archive that you do not own, depending on whether or not those objects were archived by their owners. Implementations of this method should call the implementation of their parent class, the same as for the <ref refid="classBTwoDimensionalLayout_1a405b207a3fa1770d5349de6d66705390" kindref="member">Archive()</ref> method.</para>
<para><simplesect kind="warning"><para>To guarantee that your <ref refid="classBTwoDimensionalLayout_1adb001699008fe0cb2eff51661da175e6" kindref="member">AllArchived()</ref> method will be called during archival, you must create a <ref refid="classBArchiver" kindref="compound">BArchiver</ref> object in your <ref refid="classBTwoDimensionalLayout_1a405b207a3fa1770d5349de6d66705390" kindref="member">Archive()</ref> implementation.</para>
</simplesect>
<simplesect kind="warning"><para>You should archive any objects you own in your <ref refid="classBTwoDimensionalLayout_1a405b207a3fa1770d5349de6d66705390" kindref="member">Archive()</ref> method implementation, and <bold>NOT</bold> your <ref refid="classBTwoDimensionalLayout_1adb001699008fe0cb2eff51661da175e6" kindref="member">AllArchived()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBArchiver" kindref="compound">BArchiver</ref> <ref refid="classBArchiver_1a7c82dbc0fb42795c575ac2c6a5405297" kindref="member">BArchiver::Finish()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="59" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a67ba660a95e7cf8647be8835184b6cc3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BTwoDimensionalLayout::AllUnarchived</definition>
        <argsstring>(const BMessage *from)</argsstring>
        <name>AllUnarchived</name>
        <qualifiedname>BTwoDimensionalLayout::AllUnarchived</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a2664ac14ab5dbe33a18cee88d420aa22">AllUnarchived</reimplements>
        <reimplementedby refid="classBGridLayout_1a2cd9bd9915c14ac32c0081234e12a5fb">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a25bd4f838e672aa3eb611a616c5ec5e0">AllUnarchived</reimplementedby>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Unarchives the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>&apos;s for this layout, calling <ref refid="classBTwoDimensionalLayout_1a7e98a6fb9b41e0856e353f6c0baaee12" kindref="member">ItemUnarchived()</ref> for each one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="60" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a18eeeb1d0b5fa7b4b57d8a2a9dc3824b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::DoLayout</definition>
        <argsstring>()</argsstring>
        <name>DoLayout</name>
        <qualifiedname>BTwoDimensionalLayout::DoLayout</qualifiedname>
        <reimplements refid="classBLayout_1a972a7f273fc24f7665f5918e99989658">DoLayout</reimplements>
        <briefdescription>
<para>Implemented by derived classes to position and resize the items in this layout. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="68" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1af70e3bd455f4dafa684ac6352223fcc4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BTwoDimensionalLayout::ItemArchived</definition>
        <argsstring>(BMessage *into, BLayoutItem *item, int32 index) const</argsstring>
        <name>ItemArchived</name>
        <qualifiedname>BTwoDimensionalLayout::ItemArchived</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a8f3461939aac1452b9e34ff707b38684">ItemArchived</reimplements>
        <reimplementedby refid="classBGridLayout_1aa78c81cd57baacbdb8890b0de281f720">ItemArchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1ab7a1143b436b800e42c76de98534dbc7">ItemArchived</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Hook for derived classes to add data specific to <emphasis>item</emphasis> to the <emphasis>into</emphasis> <ref refid="classBMessage" kindref="compound">BMessage</ref>. <emphasis>item</emphasis> resides at <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The same archive is passed to <ref refid="classBLayout_1a7b342780ed464d0074a63fe8fac67003" kindref="member">BLayout::ItemArchived()</ref> for all items, so any data added for each item will be stored in an array.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="62" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a7e98a6fb9b41e0856e353f6c0baaee12" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BTwoDimensionalLayout::ItemUnarchived</definition>
        <argsstring>(const BMessage *from, BLayoutItem *item, int32 index)</argsstring>
        <name>ItemUnarchived</name>
        <qualifiedname>BTwoDimensionalLayout::ItemUnarchived</qualifiedname>
        <reimplements refid="classBAbstractLayout_1a9c3fd4aa60076e9869fa937d37f55ad3">ItemUnarchived</reimplements>
        <reimplementedby refid="classBGridLayout_1ad7bda5e11e67558de88b0ccaeccd3949">ItemUnarchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a3fee09f7df25a5d730a888fc88360f09">ItemUnarchived</reimplementedby>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Hook for derived classes to retrieve data specific to <emphasis>item</emphasis> from the <emphasis>from</emphasis> <ref refid="classBMessage" kindref="compound">BMessage</ref>. <emphasis>item</emphasis> resides at <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The same archive is passed to <ref refid="classBLayout_1a7b342780ed464d0074a63fe8fac67003" kindref="member">BLayout::ItemArchived()</ref> for all items, so any data added for each item will be stored in an array. You should pass <emphasis>index</emphasis> to the <ref refid="classBMessage" kindref="compound">BMessage</ref> methods you will be using in this method.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="64" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a213da2d0c283091e48562e8fbb448c5f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::LayoutInvalidated</definition>
        <argsstring>(bool children=false)</argsstring>
        <name>LayoutInvalidated</name>
        <qualifiedname>BTwoDimensionalLayout::LayoutInvalidated</qualifiedname>
        <reimplements refid="classBAbstractLayout_1aa8d37f3c77c4fa240c0c18f800e7c64a">LayoutInvalidated</reimplements>
        <param>
          <type>bool</type>
          <declname>children</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hook method called when this layout becomes invalid. This is a good place to clear any caches your object might hold.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>children</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not child layouts have also been invalidated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="66" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBTwoDimensionalLayout_1ac922bedf8d6b1319b49c64682af1579b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BTwoDimensionalLayout::BTwoDimensionalLayout</definition>
        <argsstring>(const BTwoDimensionalLayout &amp;)</argsstring>
        <name>BTwoDimensionalLayout</name>
        <qualifiedname>BTwoDimensionalLayout::BTwoDimensionalLayout</qualifiedname>
        <param>
          <type>const <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1aad6492b112084515191d3b3bb6dcd1a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout1</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="108" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1afbf610854b7205c7ec2cf261337abfc7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout10</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout10</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout10</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="117" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1af723c2b04d954efa8f5df5ff40d058b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout2</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="109" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a3085c9a5cb21f048f3ff23504ef36969" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout3</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="110" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a1d6e2dc1b9394e561942b9fab01590dd" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout4</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout4</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="111" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a1d7cc4b014824ded3e1ffce3661d2de4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout5</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout5</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="112" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1ab24be09efca0fb52138e6ce2dfbf65ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout6</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout6</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="113" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1aa6c2755b7106dc003d67a2f1dff4fe1b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout7</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout7</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="114" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a0d099827917247a96d51df43f524f43e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout8</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout8</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="115" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1a0150f72780a5c51e1bda00c9543abe29" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BTwoDimensionalLayout::_ReservedTwoDimensionalLayout9</definition>
        <argsstring>()</argsstring>
        <name>_ReservedTwoDimensionalLayout9</name>
        <qualifiedname>BTwoDimensionalLayout::_ReservedTwoDimensionalLayout9</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="116" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1ac378c16ad2e7b6eb0b966ea7c8310dd2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::_ValidateMinMax</definition>
        <argsstring>()</argsstring>
        <name>_ValidateMinMax</name>
        <qualifiedname>BTwoDimensionalLayout::_ValidateMinMax</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="95" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBTwoDimensionalLayout_1ab7963cef622e5cef334822fc1c492496" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BTwoDimensionalLayout::operator=</definition>
        <argsstring>(const BTwoDimensionalLayout &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BTwoDimensionalLayout::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="122" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract <ref refid="classBLayout" kindref="compound">BLayout</ref> subclass arranging items within rows and columns. </para>
    </briefdescription>
    <detaileddescription>
<para>This class manages all the tricky work of actually positioning/resizing items, as well as calculating size constraints and providing extra features, such as spacing/insets and alignment of multiple <ref refid="classBTwoDimensionalLayout" kindref="compound">BTwoDimensionalLayout</ref>'s. Derived classes need only implement a few hook methods to get a working layout.</para>
<para><simplesect kind="warning"><para>This class is not yet finalized, if you use it in your software assume that it will break some time in the future.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BAbstractLayout</label>
        <link refid="classBAbstractLayout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="6">
        <label>BGridLayout</label>
        <link refid="classBGridLayout"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BGroupLayout</label>
        <link refid="classBGroupLayout"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BLayout</label>
        <link refid="classBLayout"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BLayoutItem</label>
        <link refid="classBLayoutItem"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BTwoDimensionalLayout</label>
        <link refid="classBTwoDimensionalLayout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BAbstractLayout</label>
        <link refid="classBAbstractLayout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="3">
        <label>BLayout</label>
        <link refid="classBLayout"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BLayoutItem</label>
        <link refid="classBLayoutItem"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BTwoDimensionalLayout</label>
        <link refid="classBTwoDimensionalLayout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" line="14" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/TwoDimensionalLayout.h" bodystart="14" bodyend="127"/>
    <listofallmembers>
      <member refid="classBTwoDimensionalLayout_1a620c8271bb44cb816d9c73f6103ace92" prot="private" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>_reserved</name></member>
      <member refid="classBTwoDimensionalLayout_1aad6492b112084515191d3b3bb6dcd1a3" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout1</name></member>
      <member refid="classBTwoDimensionalLayout_1afbf610854b7205c7ec2cf261337abfc7" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout10</name></member>
      <member refid="classBTwoDimensionalLayout_1af723c2b04d954efa8f5df5ff40d058b9" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout2</name></member>
      <member refid="classBTwoDimensionalLayout_1a3085c9a5cb21f048f3ff23504ef36969" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout3</name></member>
      <member refid="classBTwoDimensionalLayout_1a1d6e2dc1b9394e561942b9fab01590dd" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout4</name></member>
      <member refid="classBTwoDimensionalLayout_1a1d7cc4b014824ded3e1ffce3661d2de4" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout5</name></member>
      <member refid="classBTwoDimensionalLayout_1ab24be09efca0fb52138e6ce2dfbf65ad" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout6</name></member>
      <member refid="classBTwoDimensionalLayout_1aa6c2755b7106dc003d67a2f1dff4fe1b" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout7</name></member>
      <member refid="classBTwoDimensionalLayout_1a0d099827917247a96d51df43f524f43e" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout8</name></member>
      <member refid="classBTwoDimensionalLayout_1a0150f72780a5c51e1bda00c9543abe29" prot="private" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>_ReservedTwoDimensionalLayout9</name></member>
      <member refid="classBTwoDimensionalLayout_1ac378c16ad2e7b6eb0b966ea7c8310dd2" prot="private" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>_ValidateMinMax</name></member>
      <member refid="classBTwoDimensionalLayout_1ab6d8341da8769dd0ad704e53adfa50d7" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>AddInsets</name></member>
      <member refid="classBTwoDimensionalLayout_1a93aa980ac6253fc952772dc2cf283dfc" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>AddInsets</name></member>
      <member refid="classBLayout_1a61bab6592bb26173d12488526b203ead" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AddItem</name></member>
      <member refid="classBLayout_1a1b9a50f6a573a777afc2b27bac65c7f6" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AddItem</name></member>
      <member refid="classBLayout_1a83f286f504a1a735f07304c7647ba7f9" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AddView</name></member>
      <member refid="classBLayout_1ad7ff945dc53e94a34954da6eaf9e2268" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AddView</name></member>
      <member refid="classBLayoutItem_1a3b5b23daa375b3333fc58c9c22ce62fa" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>AlignInFrame</name></member>
      <member refid="classBTwoDimensionalLayout_1a873328fd96e352f3822c74c10b191399" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>AlignLayoutWith</name></member>
      <member refid="classBAbstractLayout_1a218c3772949ac855126f461162fc1ee9" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>Alignment</name></member>
      <member refid="classBTwoDimensionalLayout_1adb001699008fe0cb2eff51661da175e6" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AllArchived</name></member>
      <member refid="classBTwoDimensionalLayout_1a67ba660a95e7cf8647be8835184b6cc3" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AllUnarchived</name></member>
      <member refid="classBLayout_1a4f2ff9362ef1e84d7c886c58881d2be9" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>AncestorsVisible</name></member>
      <member refid="classBAbstractLayout_1a5e36e0a2cb89ef4f45905c20159ef371" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AncestorVisibilityChanged</name></member>
      <member refid="classBTwoDimensionalLayout_1a405b207a3fa1770d5349de6d66705390" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>Archive</name></member>
      <member refid="classBAbstractLayout_1a0eb40b1488e9b5f524cbc263106e7f3b" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>AttachedToLayout</name></member>
      <member refid="classBAbstractLayout_1ac31ae4b204f6731fec17f7af2ed25859" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BAbstractLayout</name></member>
      <member refid="classBAbstractLayout_1ae7eea1f1b57d19981c210085953cae76" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BAbstractLayout</name></member>
      <member refid="classBArchivable_1aed4f0566f9659b03912a859077c27c89" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BArchivable</name></member>
      <member refid="classBArchivable_1a66e6b947f092d32f287913a8c253290f" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BArchivable</name></member>
      <member refid="classBTwoDimensionalLayout_1a02f5827bf18fdfc50b2aef94733a97a0" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>BaseAlignment</name></member>
      <member refid="classBTwoDimensionalLayout_1a9cba96eda27d17e4d7c8c5b3046a1164" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>BaseMaxSize</name></member>
      <member refid="classBTwoDimensionalLayout_1ad56f8b3d3ffb022153d9a06bc5f1f8b4" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>BaseMinSize</name></member>
      <member refid="classBTwoDimensionalLayout_1a03bcab80b28f949927ce42ccc428e52f" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>BasePreferredSize</name></member>
      <member refid="classBLayout_1a95bf53912a8c34a70e63f74b155b42cb" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BLayout</name></member>
      <member refid="classBLayout_1a972a6ece042bd46710f6b945d9d87763" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BLayout</name></member>
      <member refid="classBLayoutItem_1ae147b703a6d2583545407d5f48809bac" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BLayoutItem</name></member>
      <member refid="classBLayoutItem_1ac639d9cfa9b8124106ef2d8bc5badb2e" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BLayoutItem</name></member>
      <member refid="classBTwoDimensionalLayout_1a98f591898a00421664defadb6aee0d3c" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BTwoDimensionalLayout</name></member>
      <member refid="classBTwoDimensionalLayout_1af3d37ee41a0ce6394c4d532da519f444" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BTwoDimensionalLayout</name></member>
      <member refid="classBTwoDimensionalLayout_1ac922bedf8d6b1319b49c64682af1579b" prot="private" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>BTwoDimensionalLayout</name></member>
      <member refid="classBLayout_1ab7d1b881e91213047412abdcb10eae4f" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>CountItems</name></member>
      <member refid="classBAbstractLayout_1a4535f6de7c5193ba20038b891944864b" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>DetachedFromLayout</name></member>
      <member refid="classBLayout_1a509ff18ffa060bd9aab042c4ee6af245" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>DisableLayoutInvalidation</name></member>
      <member refid="classBTwoDimensionalLayout_1a18eeeb1d0b5fa7b4b57d8a2a9dc3824b" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>DoLayout</name></member>
      <member refid="classBLayout_1a7f369cb77173c3922dddbb38db893a6c" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>EnableLayoutInvalidation</name></member>
      <member refid="classBTwoDimensionalLayout_1a8e55843e4e569083ecd8265d4f793099" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>fBottomInset</name></member>
      <member refid="classBTwoDimensionalLayout_1adfad5192bbe0341d5906c5216f0dcbae" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>fHSpacing</name></member>
      <member refid="classBTwoDimensionalLayout_1ac0aa796c2d64b0068a357d969561de90" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>fLeftInset</name></member>
      <member refid="classBTwoDimensionalLayout_1a6b1000f56e28778fc5ab01209e8e7a41" prot="private" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>fLocalLayouter</name></member>
      <member refid="classBAbstractLayout_1a931bce77912316857d2e8d2a557e4241" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>Frame</name></member>
      <member refid="classBTwoDimensionalLayout_1a1dc695acf8c1f94f8653a4398feac5a5" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>fRightInset</name></member>
      <member refid="classBTwoDimensionalLayout_1abc4e661aa6fd2e9197e561892d40b2f3" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>fTopInset</name></member>
      <member refid="classBTwoDimensionalLayout_1a898f35c225919e096d1f154ad9ff6642" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>fVSpacing</name></member>
      <member refid="classBTwoDimensionalLayout_1acfbb5ddafdbd9a22f0c2a7e23d706e6f" prot="protected" virt="pure-virtual"><scope>BTwoDimensionalLayout</scope><name>GetColumnRowConstraints</name></member>
      <member refid="classBTwoDimensionalLayout_1a360c3c27eb293edea81b8cf8742d3913" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>GetHeightForWidth</name></member>
      <member refid="classBTwoDimensionalLayout_1a6b4a8eeb31c191a4aa94129d0133f32d" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>GetInsets</name></member>
      <member refid="classBTwoDimensionalLayout_1a537932c4a364b7e206e87788dafe40a6" prot="protected" virt="pure-virtual"><scope>BTwoDimensionalLayout</scope><name>GetItemDimensions</name></member>
      <member refid="classBTwoDimensionalLayout_1a8b14614c8b378412107043b1e8e24ead" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>HasHeightForWidth</name></member>
      <member refid="classBTwoDimensionalLayout_1ad8e56e07b576c30be9e19dba72818486" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>HasMultiColumnItems</name></member>
      <member refid="classBTwoDimensionalLayout_1a3a50bf74279d04218188c5574d82ff0d" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>HasMultiRowItems</name></member>
      <member refid="classBLayout_1a1d3746cfb977dce44b052e7d58bd481c" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>IndexOfItem</name></member>
      <member refid="classBLayout_1ade2afbfa0bd50c01a1ce3db6654eaa0c" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>IndexOfView</name></member>
      <member refid="classBArchivable_1a04efcb17fa2a64a776923cc12303efcd" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>Instantiate</name></member>
      <member refid="classBTwoDimensionalLayout_1a1e5383c9bfe9813c83d611c2069b3418" prot="protected" virt="pure-virtual"><scope>BTwoDimensionalLayout</scope><name>InternalCountColumns</name></member>
      <member refid="classBTwoDimensionalLayout_1afac018580a44f991c9d604e226226e76" prot="protected" virt="pure-virtual"><scope>BTwoDimensionalLayout</scope><name>InternalCountRows</name></member>
      <member refid="classBLayout_1a2b775de411ef6e9ecb4f7c412a26bf31" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>InvalidateLayout</name></member>
      <member refid="classBLayout_1a9b5b6b764433dee59ed4d1f01aaada04" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>IsValid</name></member>
      <member refid="classBAbstractLayout_1aac40eebbdd9c0fa7e594e5d1d9201a87" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>IsVisible</name></member>
      <member refid="classBAbstractLayout_1a842b424b62039753db229d3deafd0d10" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>ItemAdded</name></member>
      <member refid="classBTwoDimensionalLayout_1af70e3bd455f4dafa684ac6352223fcc4" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>ItemArchived</name></member>
      <member refid="classBLayout_1ad47d881e6008578d2f8cc0e3c6ea467a" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>ItemAt</name></member>
      <member refid="classBAbstractLayout_1a4df45f148af285d521bc5d6a491dac7b" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>ItemRemoved</name></member>
      <member refid="classBTwoDimensionalLayout_1a7e98a6fb9b41e0856e353f6c0baaee12" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>ItemUnarchived</name></member>
      <member refid="classBLayoutItem_1ab760ea9f0eb6bb25063b5bac7a52ec3d" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>Layout</name></member>
      <member refid="classBLayout_1a25735d4b3149817ab91b2f4cff0a2fed" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>LayoutArea</name></member>
      <member refid="classBLayout_1a7d2db371223df3a53cd7a1c5f19f309a" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>LayoutContext</name></member>
      <member refid="classBLayoutItem_1a82ba24d424129d989855b74eb3a86627" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>LayoutData</name></member>
      <member refid="classBTwoDimensionalLayout_1a213da2d0c283091e48562e8fbb448c5f" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>LayoutInvalidated</name></member>
      <member refid="classBLayout_1a683aba3445c345b47c7fa38a2b6c3c1a" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>LayoutItems</name></member>
      <member refid="classBAbstractLayout_1ad1ea5d04a5c8028f8295efde7106a66c" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>MaxSize</name></member>
      <member refid="classBAbstractLayout_1a3f692cb3306ce726e3cc6d2771824cd5" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>MinSize</name></member>
      <member refid="classBTwoDimensionalLayout_1ab7963cef622e5cef334822fc1c492496" prot="private" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>operator=</name></member>
      <member refid="classBLayout_1adb34c16c239813c45d8159d3f18d96d9" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>Owner</name></member>
      <member refid="classBAbstractLayout_1a3aca5334eed301df4013fb2a3fdfd5ac" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>OwnerChanged</name></member>
      <member refid="classBTwoDimensionalLayout_1aac851d9c86397296d0e7e69716c01926" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>Perform</name></member>
      <member refid="classBAbstractLayout_1af5f21d9900c85ca053dba3938bef3fd3" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>PreferredSize</name></member>
      <member refid="classBTwoDimensionalLayout_1a4f14f46b98fd590a562b5914e57b111a" prot="protected" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>PrepareItems</name></member>
      <member refid="classBLayout_1a2a168d993feaf8fc58b53ded8243e7b7" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>Relayout</name></member>
      <member refid="classBLayout_1abf0b19d4203e1a41292137fd8a2038d0" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>RemoveItem</name></member>
      <member refid="classBLayout_1a34a299447961069bdd54d19ae7a5176a" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>RemoveItem</name></member>
      <member refid="classBLayoutItem_1af4059e73a30336f0ae6bbbc04c70dd6a" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>RemoveSelf</name></member>
      <member refid="classBLayout_1a3120e95dc34ab57ab276c324ec94654c" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>RemoveView</name></member>
      <member refid="classBLayout_1a1983a8770e7cd89c3f1afc4d961230d5" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>RequireLayout</name></member>
      <member refid="classBLayout_1aacf1392bbef13efc20277e15595bb329" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>ResetLayoutInvalidation</name></member>
      <member refid="classBAbstractLayout_1a3e7f4071b63452d77210f852cb92604d" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>SetExplicitAlignment</name></member>
      <member refid="classBAbstractLayout_1aeb41b2e1e0b6414d0de4eeb4e5fb93e4" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>SetExplicitMaxSize</name></member>
      <member refid="classBAbstractLayout_1af63e5777fabfb9be1f29286bf6931fe6" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>SetExplicitMinSize</name></member>
      <member refid="classBAbstractLayout_1a577b9839ac8e726bbecc7f3e40bb01a3" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>SetExplicitPreferredSize</name></member>
      <member refid="classBLayoutItem_1ac630c7ab0e98d5da0225792e31f596f1" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>SetExplicitSize</name></member>
      <member refid="classBTwoDimensionalLayout_1a8a4f4e152b4f6106cbc88fc0bb1f32d8" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>SetFrame</name></member>
      <member refid="classBTwoDimensionalLayout_1acaf4ec650969994cb39dd015e3bebd91" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>SetInsets</name></member>
      <member refid="classBTwoDimensionalLayout_1a03d3adcb77ff7b3073e890ce42c63f9a" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>SetInsets</name></member>
      <member refid="classBTwoDimensionalLayout_1aaae5175781d0bc8c96e1e0fcaccc81da" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>SetInsets</name></member>
      <member refid="classBLayoutItem_1abffd9c09f9951f25b4a752a06e4040c3" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>SetLayoutData</name></member>
      <member refid="classBAbstractLayout_1ae40de089e697c7ecb8466ec3e8bd87e8" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>SetVisible</name></member>
      <member refid="classBTwoDimensionalLayout_1a2e2f066f679835398fd2a0bf2044115b" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>SubtractInsets</name></member>
      <member refid="classBLayout_1a14639db95758a7b1b9604473e8f3a7c9" prot="public" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>TargetView</name></member>
      <member refid="classBLayout_1aefd7bf5546d6b69d1561e7baebf15387" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>View</name></member>
      <member refid="classBLayout_1a7df37ec98c2d29dca5ce4f2246c5665a" prot="protected" virt="non-virtual"><scope>BTwoDimensionalLayout</scope><name>VisibilityChanged</name></member>
      <member refid="classBAbstractLayout_1ad838535e6e51bb5b22b5dc7b05bbf5af" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>~BAbstractLayout</name></member>
      <member refid="classBArchivable_1af1a37be4b953423787b0d0be0b345ff3" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>~BArchivable</name></member>
      <member refid="classBLayout_1aa3250586083f6cbd106051efaa6982d9" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>~BLayout</name></member>
      <member refid="classBLayoutItem_1ab2ab08ac19615c24d09f3461926acce2" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>~BLayoutItem</name></member>
      <member refid="classBTwoDimensionalLayout_1a286cc9889f960352719001741937f7fd" prot="public" virt="virtual"><scope>BTwoDimensionalLayout</scope><name>~BTwoDimensionalLayout</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
