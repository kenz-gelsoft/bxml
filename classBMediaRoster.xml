<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMediaRoster" kind="class" language="C++" prot="public">
    <compoundname>BMediaRoster</compoundname>
    <basecompoundref refid="classBLooper" prot="public" virt="non-virtual">BLooper</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classBMediaRoster_1aa644691f1e9c815d606f618f51708457" prot="public" static="no" strong="no">
        <type></type>
        <name>connect_flags</name>
        <qualifiedname>BMediaRoster::connect_flags</qualifiedname>
        <enumvalue id="classBMediaRoster_1aa644691f1e9c815d606f618f51708457a9def79ed08c5abe1336b513ac17b74aa" prot="public">
          <name>B_CONNECT_MUTED</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="109" column="1" bodyfile="/boot/home/src/haiku/headers/os/media/MediaRoster.h" bodystart="109" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBMediaRoster_1a66bb3c145a926bab354c6f520149f961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BPrivate::media::BMediaRosterEx</definition>
        <argsstring></argsstring>
        <name>BPrivate::media::BMediaRosterEx</name>
        <qualifiedname>BMediaRoster::BMediaRosterEx</qualifiedname>
        <param>
          <type>BPrivate::media::BMediaRosterEx</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="366" column="14" bodyfile="/boot/home/src/haiku/headers/os/media/MediaRoster.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMediaRoster_1a6158947b76a6f2daca165bf106b86446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BPrivate::media::DefaultDeleter</definition>
        <argsstring></argsstring>
        <name>BPrivate::media::DefaultDeleter</name>
        <qualifiedname>BMediaRoster::DefaultDeleter</qualifiedname>
        <param>
          <type>BPrivate::media::DefaultDeleter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="365" column="14" bodyfile="/boot/home/src/haiku/headers/os/media/MediaRoster.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMediaRoster_1a4c16c208e6914e513eedf8ac02b265da" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMediaRoster::_reserved_media_roster_[67]</definition>
        <argsstring>[67]</argsstring>
        <name>_reserved_media_roster_</name>
        <qualifiedname>BMediaRoster::_reserved_media_roster_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="390" column="7" bodyfile="/boot/home/src/haiku/headers/os/media/MediaRoster.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classBMediaRoster_1ac156406fa4cc8136ab5fce9df4388dea" prot="private" static="yes" mutable="no">
        <type>BMediaRoster *</type>
        <definition>BMediaRoster* BMediaRoster::sDefaultInstance</definition>
        <argsstring></argsstring>
        <name>sDefaultInstance</name>
        <qualifiedname>BMediaRoster::sDefaultInstance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="392" column="19" bodyfile="/boot/home/src/haiku/headers/os/media/MediaRoster.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBMediaRoster_1acc3dcebe344242cb038919b9e22c8844" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BMediaRoster *</type>
        <definition>static BMediaRoster * BMediaRoster::CurrentRoster</definition>
        <argsstring>()</argsstring>
        <name>CurrentRoster</name>
        <qualifiedname>BMediaRoster::CurrentRoster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="47" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aae51696e2efc364c5cbb54335702f8a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BMediaRoster::IsRunning</definition>
        <argsstring>()</argsstring>
        <name>IsRunning</name>
        <qualifiedname>BMediaRoster::IsRunning</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="53" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aa563a62a08079ef0c534ad94cef236c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t BMediaRoster::MediaFlags</definition>
        <argsstring>(media_flags cap, void *buffer, size_t maxSize)</argsstring>
        <name>MediaFlags</name>
        <qualifiedname>BMediaRoster::MediaFlags</qualifiedname>
        <param>
          <type>media_flags</type>
          <declname>cap</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="339" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a39e1f5a0861eedd04f1415ba9a5a9ee1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BMediaRoster *</type>
        <definition>static BMediaRoster * BMediaRoster::Roster</definition>
        <argsstring>(status_t *_error=NULL)</argsstring>
        <name>Roster</name>
        <qualifiedname>BMediaRoster::Roster</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref> *</type>
          <declname>_error</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="43" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMediaRoster_1a60a601893a0dd0217ffe1620ca8066c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BMediaRoster::~BMediaRoster</definition>
        <argsstring>()</argsstring>
        <name>~BMediaRoster</name>
        <qualifiedname>BMediaRoster::~BMediaRoster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="351" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1adb379867ce747db17bc9c9cbdb1dc2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t BMediaRoster::AudioBufferSizeFor</definition>
        <argsstring>(int32 channelCount, uint32 sampleFormat, float frameRate, bus_type busType=B_UNKNOWN_BUS)</argsstring>
        <name>AudioBufferSizeFor</name>
        <qualifiedname>BMediaRoster::AudioBufferSizeFor</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>channelCount</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>sampleFormat</declname>
        </param>
        <param>
          <type>float</type>
          <declname>frameRate</declname>
        </param>
        <param>
          <type>bus_type</type>
          <declname>busType</declname>
          <defval>B_UNKNOWN_BUS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="332" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a3f3533505c5d8ff12a2c5e677a375a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::Connect</definition>
        <argsstring>(const media_source &amp;from, const media_destination &amp;to, media_format *_inOutFormat, media_output *_output, media_input *_input)</argsstring>
        <name>Connect</name>
        <qualifiedname>BMediaRoster::Connect</qualifiedname>
        <param>
          <type>const media_source &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const media_destination &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_inOutFormat</declname>
        </param>
        <param>
          <type>media_output *</type>
          <declname>_output</declname>
        </param>
        <param>
          <type>media_input *</type>
          <declname>_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="99" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a90cf94be2313d869eb4d0c3cc83699c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::Connect</definition>
        <argsstring>(const media_source &amp;from, const media_destination &amp;to, media_format *_inOutFormat, media_output *_output, media_input *_input, uint32 flags, void *_reserved=NULL)</argsstring>
        <name>Connect</name>
        <qualifiedname>BMediaRoster::Connect</qualifiedname>
        <param>
          <type>const media_source &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const media_destination &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_inOutFormat</declname>
        </param>
        <param>
          <type>media_output *</type>
          <declname>_output</declname>
        </param>
        <param>
          <type>media_input *</type>
          <declname>_input</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>_reserved</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="113" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1ab0195566139e28ef2fae7fe34482dd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::Disconnect</definition>
        <argsstring>(const media_output &amp;output, const media_input &amp;input)</argsstring>
        <name>Disconnect</name>
        <qualifiedname>BMediaRoster::Disconnect</qualifiedname>
        <param>
          <type>const media_output &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const media_input &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="126" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a96272be298e38c8d10a5e1146dd95870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::Disconnect</definition>
        <argsstring>(media_node_id sourceNode, const media_source &amp;source, media_node_id destinationNode, const media_destination &amp;destination)</argsstring>
        <name>Disconnect</name>
        <qualifiedname>BMediaRoster::Disconnect</qualifiedname>
        <param>
          <type>media_node_id</type>
          <declname>sourceNode</declname>
        </param>
        <param>
          <type>const media_source &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>media_node_id</type>
          <declname>destinationNode</declname>
        </param>
        <param>
          <type>const media_destination &amp;</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="120" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a313df9d8e8e39b3193c2aa9f750db79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetAllInputsFor</definition>
        <argsstring>(const media_node &amp;node, media_input *_inputsBuffer, int32 bufferCapacity, int32 *_foundCount)</argsstring>
        <name>GetAllInputsFor</name>
        <qualifiedname>BMediaRoster::GetAllInputsFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_input *</type>
          <declname>_inputsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="196" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a2b34dfe3391d91169e0d3e33ec28a059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetAllOutputsFor</definition>
        <argsstring>(const media_node &amp;node, media_output *_outputsBuffer, int32 bufferCapacity, int32 *_foundCount)</argsstring>
        <name>GetAllOutputsFor</name>
        <qualifiedname>BMediaRoster::GetAllOutputsFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_output *</type>
          <declname>_outputsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="210" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1afca309e5c60e6e80d1f060437daed6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetAudioInput</definition>
        <argsstring>(media_node *_node)</argsstring>
        <name>GetAudioInput</name>
        <qualifiedname>BMediaRoster::GetAudioInput</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="57" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a96cca5ba431cde858ea5d8abf35e1ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetAudioMixer</definition>
        <argsstring>(media_node *_node)</argsstring>
        <name>GetAudioMixer</name>
        <qualifiedname>BMediaRoster::GetAudioMixer</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="59" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a9539253c481a8f55b5621412c4f124b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetAudioOutput</definition>
        <argsstring>(media_node *_node)</argsstring>
        <name>GetAudioOutput</name>
        <qualifiedname>BMediaRoster::GetAudioOutput</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="60" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a53f702e8343e53bb3237039c175f474f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetAudioOutput</definition>
        <argsstring>(media_node *_node, int32 *_inputId, BString *_inputName)</argsstring>
        <name>GetAudioOutput</name>
        <qualifiedname>BMediaRoster::GetAudioOutput</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_inputId</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>_inputName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="63" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aaa3fee02d41aa95bc123be6ede46e1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetConnectedInputsFor</definition>
        <argsstring>(const media_node &amp;node, media_input *_activeInputsBuffer, int32 bufferCapacity, int32 *_foundCount)</argsstring>
        <name>GetConnectedInputsFor</name>
        <qualifiedname>BMediaRoster::GetConnectedInputsFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_input *</type>
          <declname>_activeInputsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="192" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a7b2b2cfb8d8aa5dfbf4440807cc3f19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetConnectedOutputsFor</definition>
        <argsstring>(const media_node &amp;node, media_output *_activeOutputsBuffer, int32 bufferCapacity, int32 *_foundCount)</argsstring>
        <name>GetConnectedOutputsFor</name>
        <qualifiedname>BMediaRoster::GetConnectedOutputsFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_output *</type>
          <declname>_activeOutputsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="206" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a413551a433345aa47d8f76ab3cec4f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetDormantFlavorInfoFor</definition>
        <argsstring>(const dormant_node_info &amp;info, dormant_flavor_info *_flavor)</argsstring>
        <name>GetDormantFlavorInfoFor</name>
        <qualifiedname>BMediaRoster::GetDormantFlavorInfoFor</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>dormant_flavor_info *</type>
          <declname>_flavor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="261" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a9b01dafe2962c17fd1a49b17660e3ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetDormantNodeFor</definition>
        <argsstring>(const media_node &amp;node, dormant_node_info *_info)</argsstring>
        <name>GetDormantNodeFor</name>
        <qualifiedname>BMediaRoster::GetDormantNodeFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>dormant_node_info *</type>
          <declname>_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="259" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a18961d40d88cfdc428beb70cb02fb905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetDormantNodeForType</definition>
        <argsstring>(const BMimeType &amp;type, uint64 requireNodeKinds, dormant_node_info *_info)</argsstring>
        <name>GetDormantNodeForType</name>
        <qualifiedname>BMediaRoster::GetDormantNodeForType</qualifiedname>
        <param>
          <type>const <ref refid="classBMimeType" kindref="compound">BMimeType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>requireNodeKinds</declname>
        </param>
        <param>
          <type>dormant_node_info *</type>
          <declname>_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="300" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a3bf8b80f11fddaf79b070d57b2fb9be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetDormantNodes</definition>
        <argsstring>(dormant_node_info *_info, int32 *_inOutCount, const media_format *_hasInput=NULL, const media_format *_hasOutput=NULL, const char *name=NULL, uint64 requireKinds=0, uint64 denyKinds=0)</argsstring>
        <name>GetDormantNodes</name>
        <qualifiedname>BMediaRoster::GetDormantNodes</qualifiedname>
        <param>
          <type>dormant_node_info *</type>
          <declname>_info</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_inOutCount</declname>
        </param>
        <param>
          <type>const media_format *</type>
          <declname>_hasInput</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const media_format *</type>
          <declname>_hasOutput</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>requireKinds</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>denyKinds</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="243" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aaaf722acd104895050afd52df1baaa29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetFileFormatsFor</definition>
        <argsstring>(const media_node &amp;fileInterface, media_file_format *_formatsBuffer, int32 *_inOutNumInfos)</argsstring>
        <name>GetFileFormatsFor</name>
        <qualifiedname>BMediaRoster::GetFileFormatsFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>fileInterface</declname>
        </param>
        <param>
          <type>media_file_format *</type>
          <declname>_formatsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_inOutNumInfos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="277" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a6b9d938c87bcb045a41c97c1ca1e7a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetFormatFor</definition>
        <argsstring>(const media_input &amp;input, media_format *_inOutFormat, uint32 flags=0)</argsstring>
        <name>GetFormatFor</name>
        <qualifiedname>BMediaRoster::GetFormatFor</qualifiedname>
        <param>
          <type>const media_input &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_inOutFormat</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="315" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a5fddef94e065bdc63a33ac9275602e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetFormatFor</definition>
        <argsstring>(const media_node &amp;node, media_format *_inOutFormat, float quality=B_MEDIA_ANY_QUALITY)</argsstring>
        <name>GetFormatFor</name>
        <qualifiedname>BMediaRoster::GetFormatFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_inOutFormat</declname>
        </param>
        <param>
          <type>float</type>
          <declname>quality</declname>
          <defval>B_MEDIA_ANY_QUALITY</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="318" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aeeb57255f54e7827d7242ff41bf3dadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetFormatFor</definition>
        <argsstring>(const media_output &amp;output, media_format *_inOutFormat, uint32 flags=0)</argsstring>
        <name>GetFormatFor</name>
        <qualifiedname>BMediaRoster::GetFormatFor</qualifiedname>
        <param>
          <type>const media_output &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_inOutFormat</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="312" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a60ad34277b53720744e6494a994cc6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetFreeInputsFor</definition>
        <argsstring>(const media_node &amp;node, media_input *_freeInputsBuffer, int32 bufferCapacity, int32 *_foundCount, media_type filterType=B_MEDIA_UNKNOWN_TYPE)</argsstring>
        <name>GetFreeInputsFor</name>
        <qualifiedname>BMediaRoster::GetFreeInputsFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_input *</type>
          <declname>_freeInputsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <param>
          <type>media_type</type>
          <declname>filterType</declname>
          <defval>B_MEDIA_UNKNOWN_TYPE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="186" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a2f780d099f90b85b04e412ff35ab4dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetFreeOutputsFor</definition>
        <argsstring>(const media_node &amp;node, media_output *_freeOutputsBuffer, int32 bufferCapacity, int32 *_foundCount, media_type filterType=B_MEDIA_UNKNOWN_TYPE)</argsstring>
        <name>GetFreeOutputsFor</name>
        <qualifiedname>BMediaRoster::GetFreeOutputsFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_output *</type>
          <declname>_freeOutputsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <param>
          <type>media_type</type>
          <declname>filterType</declname>
          <defval>B_MEDIA_UNKNOWN_TYPE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="200" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a313e0fb554743a97e7d96d6a3fbc9bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetInitialLatencyFor</definition>
        <argsstring>(const media_node &amp;producer, bigtime_t *_latency, uint32 *_flags=NULL)</argsstring>
        <name>GetInitialLatencyFor</name>
        <qualifiedname>BMediaRoster::GetInitialLatencyFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>producer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref> *</type>
          <declname>_latency</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> *</type>
          <declname>_flags</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="268" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a5f5d059d480e0aaaaa8011a98f27c0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetInstancesFor</definition>
        <argsstring>(media_addon_id addon, int32 flavor, media_node_id *_id, int32 *_inOutCount=NULL)</argsstring>
        <name>GetInstancesFor</name>
        <qualifiedname>BMediaRoster::GetInstancesFor</qualifiedname>
        <param>
          <type>media_addon_id</type>
          <declname>addon</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>flavor</declname>
        </param>
        <param>
          <type>media_node_id *</type>
          <declname>_id</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_inOutCount</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="325" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a12318db4a880c56f571795d235138710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetLatencyFor</definition>
        <argsstring>(const media_node &amp;producer, bigtime_t *_latency)</argsstring>
        <name>GetLatencyFor</name>
        <qualifiedname>BMediaRoster::GetLatencyFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>producer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref> *</type>
          <declname>_latency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="266" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1af816c51f5ac54ba4b11a785faa7457bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetLiveNodeInfo</definition>
        <argsstring>(const media_node &amp;node, live_node_info *_liveInfo)</argsstring>
        <name>GetLiveNodeInfo</name>
        <qualifiedname>BMediaRoster::GetLiveNodeInfo</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>live_node_info *</type>
          <declname>_liveInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="176" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a825c2c9b8c231b02a7ee3dd39d6f80b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetLiveNodes</definition>
        <argsstring>(live_node_info *_liveNodes, int32 *inOutTotalCount, const media_format *hasInput=NULL, const media_format *hasOutput=NULL, const char *name=NULL, uint64 nodeKinds=0)</argsstring>
        <name>GetLiveNodes</name>
        <qualifiedname>BMediaRoster::GetLiveNodes</qualifiedname>
        <param>
          <type>live_node_info *</type>
          <declname>_liveNodes</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>inOutTotalCount</declname>
        </param>
        <param>
          <type>const media_format *</type>
          <declname>hasInput</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const media_format *</type>
          <declname>hasOutput</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>nodeKinds</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="178" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a24bbe7633bb07cebfba9a4d539976f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t BMediaRoster::GetNodeAttributesFor</definition>
        <argsstring>(const media_node &amp;node, media_node_attribute *outArray, size_t inMaxCount)</argsstring>
        <name>GetNodeAttributesFor</name>
        <qualifiedname>BMediaRoster::GetNodeAttributesFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_node_attribute *</type>
          <declname>outArray</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>inMaxCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="321" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aa77a05b73c73f94c9ef6909dbcb77812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetNodeFor</definition>
        <argsstring>(media_node_id node, media_node *clone)</argsstring>
        <name>GetNodeFor</name>
        <qualifiedname>BMediaRoster::GetNodeFor</qualifiedname>
        <param>
          <type>media_node_id</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_node *</type>
          <declname>clone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="89" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a77745bc364f23e2450621693bd4e049c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetParameterWebFor</definition>
        <argsstring>(const media_node &amp;node, BParameterWeb **_web)</argsstring>
        <name>GetParameterWebFor</name>
        <qualifiedname>BMediaRoster::GetParameterWebFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>BParameterWeb **</type>
          <declname>_web</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="236" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aeca20ade3d24c1a6bf98650e4cc95704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetReadFileFormatsFor</definition>
        <argsstring>(const dormant_node_info &amp;node, media_file_format *_readFormatsBuffer, int32 bufferCapacity, int32 *_foundCount)</argsstring>
        <name>GetReadFileFormatsFor</name>
        <qualifiedname>BMediaRoster::GetReadFileFormatsFor</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_file_format *</type>
          <declname>_readFormatsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="303" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a690f3ef67d43aad8ff2c73cdaaa3fcd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetRefFor</definition>
        <argsstring>(const media_node &amp;node, entry_ref *_ref, BMimeType *mimeType=NULL)</argsstring>
        <name>GetRefFor</name>
        <qualifiedname>BMediaRoster::GetRefFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>_ref</declname>
        </param>
        <param>
          <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>mimeType</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="286" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1ac895743f7ea28dd5721e5bbe6f38e83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetStartLatencyFor</definition>
        <argsstring>(const media_node &amp;timeSource, bigtime_t *_latency)</argsstring>
        <name>GetStartLatencyFor</name>
        <qualifiedname>BMediaRoster::GetStartLatencyFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>timeSource</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref> *</type>
          <declname>_latency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="272" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1af50a3a8b2e2e79c0ceebd2ea9e8d0a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::GetSupportedSuites</definition>
        <argsstring>(BMessage *data)</argsstring>
        <name>GetSupportedSuites</name>
        <qualifiedname>BMediaRoster::GetSupportedSuites</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="349" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a2724b36e8f5358573eeffe0bf2b46758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetSystemTimeSource</definition>
        <argsstring>(media_node *clone)</argsstring>
        <name>GetSystemTimeSource</name>
        <qualifiedname>BMediaRoster::GetSystemTimeSource</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>clone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="91" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a44b524f70f534601ae5aadfc3b360268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetTimeSource</definition>
        <argsstring>(media_node *_node)</argsstring>
        <name>GetTimeSource</name>
        <qualifiedname>BMediaRoster::GetTimeSource</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="65" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a47f7f5f271d678aff647261685c6067e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetVideoInput</definition>
        <argsstring>(media_node *_node)</argsstring>
        <name>GetVideoInput</name>
        <qualifiedname>BMediaRoster::GetVideoInput</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="56" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1afded0ab45efafb58f282827ac2d5edf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetVideoOutput</definition>
        <argsstring>(media_node *_node)</argsstring>
        <name>GetVideoOutput</name>
        <qualifiedname>BMediaRoster::GetVideoOutput</qualifiedname>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="58" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aec7ce26c415f2d548c5df5fc065e16ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetWriteFileFormatsFor</definition>
        <argsstring>(const dormant_node_info &amp;node, media_file_format *_writeFormatsBuffer, int32 bufferCapacity, int32 *_foundCount)</argsstring>
        <name>GetWriteFileFormatsFor</name>
        <qualifiedname>BMediaRoster::GetWriteFileFormatsFor</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_file_format *</type>
          <declname>_writeFormatsBuffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bufferCapacity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>_foundCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="307" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a6465a644035c061f1a37dbf18459feac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::InstantiateDormantNode</definition>
        <argsstring>(const dormant_node_info &amp;info, media_node *_node)</argsstring>
        <name>InstantiateDormantNode</name>
        <qualifiedname>BMediaRoster::InstantiateDormantNode</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="256" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a1f7f3f6e6ef4f12d451d187ee684a12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::InstantiateDormantNode</definition>
        <argsstring>(const dormant_node_info &amp;info, media_node *_node, uint32 flags)</argsstring>
        <name>InstantiateDormantNode</name>
        <qualifiedname>BMediaRoster::InstantiateDormantNode</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>media_node *</type>
          <declname>_node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="250" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a6a03610a7349011ea3b5f965f5f670d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BTimeSource *</type>
        <definition>BTimeSource * BMediaRoster::MakeTimeSourceFor</definition>
        <argsstring>(const media_node &amp;for_node)</argsstring>
        <name>MakeTimeSourceFor</name>
        <qualifiedname>BMediaRoster::MakeTimeSourceFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>for_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="96" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1ae73bdfba6cb519d1e3eff744e675b197" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMediaRoster::MessageReceived</definition>
        <argsstring>(BMessage *message)</argsstring>
        <name>MessageReceived</name>
        <qualifiedname>BMediaRoster::MessageReceived</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="343" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aed3ea4f419786c4b5968b6b7e35bfc6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>media_node_id</type>
        <definition>media_node_id BMediaRoster::NodeIDFor</definition>
        <argsstring>(port_id sourceOrDestinationPort)</argsstring>
        <name>NodeIDFor</name>
        <qualifiedname>BMediaRoster::NodeIDFor</qualifiedname>
        <param>
          <type>port_id</type>
          <declname>sourceOrDestinationPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="324" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a43577dbfd447c33a3468fd3dff4ded41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::PrerollNode</definition>
        <argsstring>(const media_node &amp;node)</argsstring>
        <name>PrerollNode</name>
        <qualifiedname>BMediaRoster::PrerollNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="155" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aa678dcd8c98048a83be8e337d2508750" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BMediaRoster::QuitRequested</definition>
        <argsstring>()</argsstring>
        <name>QuitRequested</name>
        <qualifiedname>BMediaRoster::QuitRequested</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="344" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a83bd2dd0d307c2f9a7a7991f12f8a885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::RegisterNode</definition>
        <argsstring>(BMediaNode *node)</argsstring>
        <name>RegisterNode</name>
        <qualifiedname>BMediaRoster::RegisterNode</qualifiedname>
        <param>
          <type><ref refid="classBMediaNode" kindref="compound">BMediaNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="229" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aaf89a6b9abd51e42208f08240ae487fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::ReleaseNode</definition>
        <argsstring>(const media_node &amp;node)</argsstring>
        <name>ReleaseNode</name>
        <qualifiedname>BMediaRoster::ReleaseNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="93" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a637584350c4c337f37be0b2af81f3961" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>virtual BHandler * BMediaRoster::ResolveSpecifier</definition>
        <argsstring>(BMessage *message, int32 index, BMessage *specifier, int32 form, const char *property)</argsstring>
        <name>ResolveSpecifier</name>
        <qualifiedname>BMediaRoster::ResolveSpecifier</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>form</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="346" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1accd3b183297bfbe9ff0313fa231911b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::RollNode</definition>
        <argsstring>(const media_node &amp;node, bigtime_t startPerformance, bigtime_t stopPerformance, bigtime_t atMediaTime=-B_INFINITE_TIMEOUT)</argsstring>
        <name>RollNode</name>
        <qualifiedname>BMediaRoster::RollNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>startPerformance</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>stopPerformance</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atMediaTime</declname>
          <defval>-B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="157" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1af6ab409d25fb5e1e1e3756bc2c48c075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SeekNode</definition>
        <argsstring>(const media_node &amp;node, bigtime_t toMediaTime, bigtime_t atPerformanceTime=0)</argsstring>
        <name>SeekNode</name>
        <qualifiedname>BMediaRoster::SeekNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>toMediaTime</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atPerformanceTime</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="136" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a992796249f81805be23102e621343327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SeekTimeSource</definition>
        <argsstring>(const media_node &amp;node, bigtime_t toPerformanceTime, bigtime_t atRealTime)</argsstring>
        <name>SeekTimeSource</name>
        <qualifiedname>BMediaRoster::SeekTimeSource</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>toPerformanceTime</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atRealTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="146" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a9f2ef3283c98c473f23eb7cdb16f2f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetAudioInput</definition>
        <argsstring>(const dormant_node_info &amp;producer)</argsstring>
        <name>SetAudioInput</name>
        <qualifiedname>BMediaRoster::SetAudioInput</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>producer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="73" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a2076843bdbb0d68ca7a3776c5d9938b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetAudioInput</definition>
        <argsstring>(const media_node &amp;producer)</argsstring>
        <name>SetAudioInput</name>
        <qualifiedname>BMediaRoster::SetAudioInput</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>producer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="72" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a852502405913623a2da7d91b3b2d310c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetAudioOutput</definition>
        <argsstring>(const dormant_node_info &amp;consumer)</argsstring>
        <name>SetAudioOutput</name>
        <qualifiedname>BMediaRoster::SetAudioOutput</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="84" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a0468e9af262c4b83a5aa3b19a73977e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetAudioOutput</definition>
        <argsstring>(const media_input &amp;inputToOutput)</argsstring>
        <name>SetAudioOutput</name>
        <qualifiedname>BMediaRoster::SetAudioOutput</qualifiedname>
        <param>
          <type>const media_input &amp;</type>
          <declname>inputToOutput</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="82" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1afc546d9ea003f28f159a9cc67fce46e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetAudioOutput</definition>
        <argsstring>(const media_node &amp;consumer)</argsstring>
        <name>SetAudioOutput</name>
        <qualifiedname>BMediaRoster::SetAudioOutput</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="80" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a77621a290aca7ca41bea37dc2d1e3605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetProducerRate</definition>
        <argsstring>(const media_node &amp;producer, int32 numer, int32 denom)</argsstring>
        <name>SetProducerRate</name>
        <qualifiedname>BMediaRoster::SetProducerRate</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>producer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>denom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="168" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a179cf562559aeff2ab52477f9ed9ae27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetProducerRunModeDelay</definition>
        <argsstring>(const media_node &amp;node, bigtime_t delay, BMediaNode::run_mode mode=BMediaNode::B_RECORDING)</argsstring>
        <name>SetProducerRunModeDelay</name>
        <qualifiedname>BMediaRoster::SetProducerRunModeDelay</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>delay</declname>
        </param>
        <param>
          <type>BMediaNode::run_mode</type>
          <declname>mode</declname>
          <defval>BMediaNode::B_RECORDING</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="163" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1ad4a78ad74e1cc92281948663d093ce30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetRefFor</definition>
        <argsstring>(const media_node &amp;fileInterface, const entry_ref &amp;file, bool createAndTruncate, bigtime_t *_length)</argsstring>
        <name>SetRefFor</name>
        <qualifiedname>BMediaRoster::SetRefFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>fileInterface</declname>
        </param>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>createAndTruncate</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref> *</type>
          <declname>_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="281" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a7e13e33219711c8a0fbbdd96f0d37ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetRunModeNode</definition>
        <argsstring>(const media_node &amp;node, BMediaNode::run_mode mode)</argsstring>
        <name>SetRunModeNode</name>
        <qualifiedname>BMediaRoster::SetRunModeNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>BMediaNode::run_mode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="153" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1ab8485d456f0a0f629b095168fee060ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetTimeSourceFor</definition>
        <argsstring>(media_node_id node, media_node_id timeSource)</argsstring>
        <name>SetTimeSourceFor</name>
        <qualifiedname>BMediaRoster::SetTimeSourceFor</qualifiedname>
        <param>
          <type>media_node_id</type>
          <declname>node</declname>
        </param>
        <param>
          <type>media_node_id</type>
          <declname>timeSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="232" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a0979462da9f5f43f90338e4f05164d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetVideoInput</definition>
        <argsstring>(const dormant_node_info &amp;producer)</argsstring>
        <name>SetVideoInput</name>
        <qualifiedname>BMediaRoster::SetVideoInput</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>producer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="69" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a555f14de40b3324694da8ad53a693730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetVideoInput</definition>
        <argsstring>(const media_node &amp;producer)</argsstring>
        <name>SetVideoInput</name>
        <qualifiedname>BMediaRoster::SetVideoInput</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>producer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a9741e57e3d7997f07c4e02c811f7286a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetVideoOutput</definition>
        <argsstring>(const dormant_node_info &amp;consumer)</argsstring>
        <name>SetVideoOutput</name>
        <qualifiedname>BMediaRoster::SetVideoOutput</qualifiedname>
        <param>
          <type>const dormant_node_info &amp;</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="77" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1ac15988a1e7f92ca42d8042c41524a13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetVideoOutput</definition>
        <argsstring>(const media_node &amp;consumer)</argsstring>
        <name>SetVideoOutput</name>
        <qualifiedname>BMediaRoster::SetVideoOutput</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="76" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a60211cd388b2d79fc2a374ecdabc2470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SniffRef</definition>
        <argsstring>(const entry_ref &amp;ref, uint64 requireNodeKinds, dormant_node_info *_node, BMimeType *_mimeType=NULL)</argsstring>
        <name>SniffRef</name>
        <qualifiedname>BMediaRoster::SniffRef</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>requireNodeKinds</declname>
        </param>
        <param>
          <type>dormant_node_info *</type>
          <declname>_node</declname>
        </param>
        <param>
          <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>_mimeType</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="294" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a61904a1c23ce9d4d5a4615f9dc770817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SniffRefFor</definition>
        <argsstring>(const media_node &amp;fileInterface, const entry_ref &amp;ref, BMimeType *_mimeType, float *_capability)</argsstring>
        <name>SniffRefFor</name>
        <qualifiedname>BMediaRoster::SniffRefFor</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>fileInterface</declname>
        </param>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>_mimeType</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_capability</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="289" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a91568efcd911aa48748b26fe95a73626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StartControlPanel</definition>
        <argsstring>(const media_node &amp;node, BMessenger *_messenger=NULL)</argsstring>
        <name>StartControlPanel</name>
        <qualifiedname>BMediaRoster::StartControlPanel</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref> *</type>
          <declname>_messenger</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="238" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aff6477063f801ece9405b9d9aee4b30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StartNode</definition>
        <argsstring>(const media_node &amp;node, bigtime_t atPerformanceTime)</argsstring>
        <name>StartNode</name>
        <qualifiedname>BMediaRoster::StartNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atPerformanceTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="130" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a6e1f0c6a449701322b9fe96bd21b45ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StartTimeSource</definition>
        <argsstring>(const media_node &amp;node, bigtime_t atRealTime)</argsstring>
        <name>StartTimeSource</name>
        <qualifiedname>BMediaRoster::StartTimeSource</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atRealTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="141" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a7f733d7fdf750540cebbac10c5368ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StartWatching</definition>
        <argsstring>(const BMessenger &amp;target)</argsstring>
        <name>StartWatching</name>
        <qualifiedname>BMediaRoster::StartWatching</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="216" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a3969a8cf7278e6c4582395b066e9a6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StartWatching</definition>
        <argsstring>(const BMessenger &amp;target, const media_node &amp;node, int32 notificationType)</argsstring>
        <name>StartWatching</name>
        <qualifiedname>BMediaRoster::StartWatching</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>notificationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="219" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aa7ee17da3f97f260e5358e2c113a879f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StartWatching</definition>
        <argsstring>(const BMessenger &amp;target, int32 notificationType)</argsstring>
        <name>StartWatching</name>
        <qualifiedname>BMediaRoster::StartWatching</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>notificationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="217" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a8bae9b88e188c432495d506bd436fd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StopNode</definition>
        <argsstring>(const media_node &amp;node, bigtime_t atPerformanceTime, bool immediate=false)</argsstring>
        <name>StopNode</name>
        <qualifiedname>BMediaRoster::StopNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atPerformanceTime</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="132" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a0a4b67800a0a2b582d6fe9356e1e4c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StopTimeSource</definition>
        <argsstring>(const media_node &amp;node, bigtime_t atRealTime, bool immediate=false)</argsstring>
        <name>StopTimeSource</name>
        <qualifiedname>BMediaRoster::StopTimeSource</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atRealTime</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="143" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a3d3bb0fc26522f64f4cf83d3709d018e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StopWatching</definition>
        <argsstring>(const BMessenger &amp;target)</argsstring>
        <name>StopWatching</name>
        <qualifiedname>BMediaRoster::StopWatching</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="222" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a3cc5febf2cabf0a2ffd8036e86401979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StopWatching</definition>
        <argsstring>(const BMessenger &amp;target, const media_node &amp;node, int32 notificationType)</argsstring>
        <name>StopWatching</name>
        <qualifiedname>BMediaRoster::StopWatching</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>notificationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="225" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a92d97be5cfdb2b969953024fec6bc668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::StopWatching</definition>
        <argsstring>(const BMessenger &amp;target, int32 notificationType)</argsstring>
        <name>StopWatching</name>
        <qualifiedname>BMediaRoster::StopWatching</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>notificationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="223" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aeebcc8c6d3550caa942bb31b7998e876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SyncToNode</definition>
        <argsstring>(const media_node &amp;node, bigtime_t atTime, bigtime_t timeout=B_INFINITE_TIMEOUT)</argsstring>
        <name>SyncToNode</name>
        <qualifiedname>BMediaRoster::SyncToNode</qualifiedname>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>atTime</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="150" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1aece42065cce4644e55e5d49a0dbdc39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::UnregisterNode</definition>
        <argsstring>(BMediaNode *node)</argsstring>
        <name>UnregisterNode</name>
        <qualifiedname>BMediaRoster::UnregisterNode</qualifiedname>
        <param>
          <type><ref refid="classBMediaNode" kindref="compound">BMediaNode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="230" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMediaRoster_1a17e0ee2fdbcb6d3bfde8d3b4f632a4d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMediaRoster::BMediaRoster</definition>
        <argsstring>()</argsstring>
        <name>BMediaRoster</name>
        <qualifiedname>BMediaRoster::BMediaRoster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a3b3af8f3af2474cfec579ca42fe93af3" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_0</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_0</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_0</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="356" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a54ac87a4abd84f08173a550b378a3877" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_1</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_1</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_1</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="357" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a6103eddc23e5c0cc5a4329e06cd52e7b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_2</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_2</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_2</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="358" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a4f0f4d00267d5fc77336b793e0326781" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_3</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_3</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_3</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="359" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a36ba3e7e38a3044be3638aa5615eeab0" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_4</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_4</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_4</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="360" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a5d1206b5b86838532c7bb73506c38763" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_5</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_5</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_5</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="361" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a8f7be4ca44a10a2f940e876a5614b828" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_6</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_6</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_6</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="362" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a7191ce93791c62242fc6fdce37d3f082" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaRoster::_Reserved_MediaRoster_7</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_MediaRoster_7</name>
        <qualifiedname>BMediaRoster::_Reserved_MediaRoster_7</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="363" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1acb34465dea1dccbecc4b8803e56740bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetDefaultInfo</definition>
        <argsstring>(media_node_id forDefault, BMessage &amp;_config)</argsstring>
        <name>GetDefaultInfo</name>
        <qualifiedname>BMediaRoster::GetDefaultInfo</qualifiedname>
        <param>
          <type>media_node_id</type>
          <declname>forDefault</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="383" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1af24be33f5239f0aa2670a0fb7a50b2d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::GetRealtimeFlags</definition>
        <argsstring>(uint32 *_enabledFlags)</argsstring>
        <name>GetRealtimeFlags</name>
        <qualifiedname>BMediaRoster::GetRealtimeFlags</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> *</type>
          <declname>_enabledFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="379" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1af015d06b59c6ddaf37536a5ffeb66620" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetOutputBuffersFor</definition>
        <argsstring>(const media_source &amp;output, BBufferGroup *group, bool willReclaim=false)</argsstring>
        <name>SetOutputBuffersFor</name>
        <qualifiedname>BMediaRoster::SetOutputBuffersFor</qualifiedname>
        <param>
          <type>const media_source &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>BBufferGroup *</type>
          <declname>group</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>willReclaim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="374" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1ac28dcd8b384ed5fc789f7b03560cd777" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetRealtimeFlags</definition>
        <argsstring>(uint32 enabledFlags)</argsstring>
        <name>SetRealtimeFlags</name>
        <qualifiedname>BMediaRoster::SetRealtimeFlags</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>enabledFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="378" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaRoster_1a237878767dea678b0ea2f707843f64a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaRoster::SetRunningDefault</definition>
        <argsstring>(media_node_id forDefault, const media_node &amp;node)</argsstring>
        <name>SetRunningDefault</name>
        <qualifiedname>BMediaRoster::SetRunningDefault</qualifiedname>
        <param>
          <type>media_node_id</type>
          <declname>forDefault</declname>
        </param>
        <param>
          <type>const media_node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="385" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classBMediaRoster_1a9a2ee6afa98bc7082c3a5b81d7dd2812" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BMediaRoster::ParseCommand</definition>
        <argsstring>(BMessage &amp;reply)</argsstring>
        <name>ParseCommand</name>
        <qualifiedname>BMediaRoster::ParseCommand</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>reply</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="381" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="3">
        <label>BHandler</label>
        <link refid="classBHandler"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BLooper</label>
        <link refid="classBLooper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BMediaRoster</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="3">
        <label>BHandler</label>
        <link refid="classBHandler"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BLooper</label>
        <link refid="classBLooper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BMediaRoster</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/media/MediaRoster.h" line="39" column="1" bodyfile="/boot/home/src/haiku/headers/os/media/MediaRoster.h" bodystart="39" bodyend="393"/>
    <listofallmembers>
      <member refid="classBMediaRoster_1a4c16c208e6914e513eedf8ac02b265da" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>_reserved_media_roster_</name></member>
      <member refid="classBMediaRoster_1a3b3af8f3af2474cfec579ca42fe93af3" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_0</name></member>
      <member refid="classBMediaRoster_1a54ac87a4abd84f08173a550b378a3877" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_1</name></member>
      <member refid="classBMediaRoster_1a6103eddc23e5c0cc5a4329e06cd52e7b" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_2</name></member>
      <member refid="classBMediaRoster_1a4f0f4d00267d5fc77336b793e0326781" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_3</name></member>
      <member refid="classBMediaRoster_1a36ba3e7e38a3044be3638aa5615eeab0" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_4</name></member>
      <member refid="classBMediaRoster_1a5d1206b5b86838532c7bb73506c38763" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_5</name></member>
      <member refid="classBMediaRoster_1a8f7be4ca44a10a2f940e876a5614b828" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_6</name></member>
      <member refid="classBMediaRoster_1a7191ce93791c62242fc6fdce37d3f082" prot="private" virt="virtual"><scope>BMediaRoster</scope><name>_Reserved_MediaRoster_7</name></member>
      <member refid="classBLooper_1a25adc41bdfd741e9c82d2b469a5086b0" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>AddCommonFilter</name></member>
      <member refid="classBHandler_1a862bea548363faac6f883b348cbed838" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>AddFilter</name></member>
      <member refid="classBLooper_1a484be74814014e3c48c1a16f44e34074" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>AddHandler</name></member>
      <member refid="classBArchivable_1a4075315c407443a3b0dbb3d7551b53c9" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>AllArchived</name></member>
      <member refid="classBArchivable_1a2b1d74c147ea18e4b4bfacd42f11e0d2" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>AllUnarchived</name></member>
      <member refid="classBLooper_1a791ef8664f674b6683d551762888f1c2" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>Archive</name></member>
      <member refid="classBMediaRoster_1adb379867ce747db17bc9c9cbdb1dc2d0" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>AudioBufferSizeFor</name></member>
      <member refid="classBMediaRoster_1aa644691f1e9c815d606f618f51708457a9def79ed08c5abe1336b513ac17b74aa" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>B_CONNECT_MUTED</name></member>
      <member refid="classBArchivable_1aed4f0566f9659b03912a859077c27c89" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>BArchivable</name></member>
      <member refid="classBArchivable_1a66e6b947f092d32f287913a8c253290f" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>BArchivable</name></member>
      <member refid="classBHandler_1a2142e21fe781b24f914ec2086e5f05b7" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>BHandler</name></member>
      <member refid="classBHandler_1add8fa081a7bb8633581e78777b215d0b" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>BHandler</name></member>
      <member refid="classBLooper_1a33fa84a6ed383e5a897d11380d72ce38" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>BLooper</name></member>
      <member refid="classBLooper_1aad314758fd652fb48d61bcccab8b6ae3" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>BLooper</name></member>
      <member refid="classBMediaRoster_1a17e0ee2fdbcb6d3bfde8d3b4f632a4d2" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>BMediaRoster</name></member>
      <member refid="classBLooper_1ad64f1a98c1cce8087e7d492860461a62" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>CommonFilterList</name></member>
      <member refid="classBMediaRoster_1a3f3533505c5d8ff12a2c5e677a375a40" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Connect</name></member>
      <member refid="classBMediaRoster_1a90cf94be2313d869eb4d0c3cc83699c5" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Connect</name></member>
      <member refid="classBMediaRoster_1aa644691f1e9c815d606f618f51708457" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>connect_flags</name></member>
      <member refid="classBLooper_1a6179629238d0be92d7a89503be24d4e3" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>CountHandlers</name></member>
      <member refid="classBLooper_1a64e7b89294df1f7b614d1267f870ecd9" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>CountLockRequests</name></member>
      <member refid="classBLooper_1a4eec703acd9bd7fe9a455af0f81e08f9" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>CountLocks</name></member>
      <member refid="classBLooper_1a6d244af065c4a12ea795bbbc7bb20e07" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>CurrentMessage</name></member>
      <member refid="classBMediaRoster_1acc3dcebe344242cb038919b9e22c8844" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>CurrentRoster</name></member>
      <member refid="classBLooper_1a7c8f05bcc354bc1d53026417417120e3" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>DetachCurrentMessage</name></member>
      <member refid="classBMediaRoster_1a96272be298e38c8d10a5e1146dd95870" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Disconnect</name></member>
      <member refid="classBMediaRoster_1ab0195566139e28ef2fae7fe34482dd9b" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Disconnect</name></member>
      <member refid="classBLooper_1a3a2d3773466de19a6c117f3a04861b11" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>DispatchExternalMessage</name></member>
      <member refid="classBLooper_1add21ca8765c67b0dbf95b8f0361afa73" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>DispatchMessage</name></member>
      <member refid="classBHandler_1a909662a049856f6863a934cf18161554" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>FilterList</name></member>
      <member refid="classBMediaRoster_1a313df9d8e8e39b3193c2aa9f750db79a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetAllInputsFor</name></member>
      <member refid="classBMediaRoster_1a2b34dfe3391d91169e0d3e33ec28a059" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetAllOutputsFor</name></member>
      <member refid="classBMediaRoster_1afca309e5c60e6e80d1f060437daed6bc" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetAudioInput</name></member>
      <member refid="classBMediaRoster_1a96cca5ba431cde858ea5d8abf35e1ba2" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetAudioMixer</name></member>
      <member refid="classBMediaRoster_1a9539253c481a8f55b5621412c4f124b3" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetAudioOutput</name></member>
      <member refid="classBMediaRoster_1a53f702e8343e53bb3237039c175f474f" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetAudioOutput</name></member>
      <member refid="classBMediaRoster_1aaa3fee02d41aa95bc123be6ede46e1d9" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetConnectedInputsFor</name></member>
      <member refid="classBMediaRoster_1a7b2b2cfb8d8aa5dfbf4440807cc3f19d" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetConnectedOutputsFor</name></member>
      <member refid="classBMediaRoster_1acb34465dea1dccbecc4b8803e56740bd" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>GetDefaultInfo</name></member>
      <member refid="classBMediaRoster_1a413551a433345aa47d8f76ab3cec4f8c" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetDormantFlavorInfoFor</name></member>
      <member refid="classBMediaRoster_1a9b01dafe2962c17fd1a49b17660e3ce1" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetDormantNodeFor</name></member>
      <member refid="classBMediaRoster_1a18961d40d88cfdc428beb70cb02fb905" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetDormantNodeForType</name></member>
      <member refid="classBMediaRoster_1a3bf8b80f11fddaf79b070d57b2fb9be6" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetDormantNodes</name></member>
      <member refid="classBMediaRoster_1aaaf722acd104895050afd52df1baaa29" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetFileFormatsFor</name></member>
      <member refid="classBMediaRoster_1aeeb57255f54e7827d7242ff41bf3dadc" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetFormatFor</name></member>
      <member refid="classBMediaRoster_1a6b9d938c87bcb045a41c97c1ca1e7a92" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetFormatFor</name></member>
      <member refid="classBMediaRoster_1a5fddef94e065bdc63a33ac9275602e2a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetFormatFor</name></member>
      <member refid="classBMediaRoster_1a60ad34277b53720744e6494a994cc6ad" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetFreeInputsFor</name></member>
      <member refid="classBMediaRoster_1a2f780d099f90b85b04e412ff35ab4dd9" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetFreeOutputsFor</name></member>
      <member refid="classBMediaRoster_1a313e0fb554743a97e7d96d6a3fbc9bd4" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetInitialLatencyFor</name></member>
      <member refid="classBMediaRoster_1a5f5d059d480e0aaaaa8011a98f27c0d8" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetInstancesFor</name></member>
      <member refid="classBMediaRoster_1a12318db4a880c56f571795d235138710" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetLatencyFor</name></member>
      <member refid="classBMediaRoster_1af816c51f5ac54ba4b11a785faa7457bb" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetLiveNodeInfo</name></member>
      <member refid="classBMediaRoster_1a825c2c9b8c231b02a7ee3dd39d6f80b9" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetLiveNodes</name></member>
      <member refid="classBMediaRoster_1a24bbe7633bb07cebfba9a4d539976f2b" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetNodeAttributesFor</name></member>
      <member refid="classBMediaRoster_1aa77a05b73c73f94c9ef6909dbcb77812" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetNodeFor</name></member>
      <member refid="classBMediaRoster_1a77745bc364f23e2450621693bd4e049c" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetParameterWebFor</name></member>
      <member refid="classBMediaRoster_1aeca20ade3d24c1a6bf98650e4cc95704" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetReadFileFormatsFor</name></member>
      <member refid="classBMediaRoster_1af24be33f5239f0aa2670a0fb7a50b2d6" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>GetRealtimeFlags</name></member>
      <member refid="classBMediaRoster_1a690f3ef67d43aad8ff2c73cdaaa3fcd2" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetRefFor</name></member>
      <member refid="classBMediaRoster_1ac895743f7ea28dd5721e5bbe6f38e83b" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetStartLatencyFor</name></member>
      <member refid="classBMediaRoster_1af50a3a8b2e2e79c0ceebd2ea9e8d0a77" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>GetSupportedSuites</name></member>
      <member refid="classBMediaRoster_1a2724b36e8f5358573eeffe0bf2b46758" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetSystemTimeSource</name></member>
      <member refid="classBMediaRoster_1a44b524f70f534601ae5aadfc3b360268" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetTimeSource</name></member>
      <member refid="classBMediaRoster_1a47f7f5f271d678aff647261685c6067e" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetVideoInput</name></member>
      <member refid="classBMediaRoster_1afded0ab45efafb58f282827ac2d5edf7" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetVideoOutput</name></member>
      <member refid="classBMediaRoster_1aec7ce26c415f2d548c5df5fc065e16ef" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>GetWriteFileFormatsFor</name></member>
      <member refid="classBLooper_1a6976132123edacf4b3a2831eadf5f4bf" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>HandlerAt</name></member>
      <member refid="classBLooper_1a3061534f6d2f3186efca4cddd19f378f" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>IndexOf</name></member>
      <member refid="classBLooper_1aee61314ab77c54a64f8122440189b73a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Instantiate</name></member>
      <member refid="classBMediaRoster_1a1f7f3f6e6ef4f12d451d187ee684a12c" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>InstantiateDormantNode</name></member>
      <member refid="classBMediaRoster_1a6465a644035c061f1a37dbf18459feac" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>InstantiateDormantNode</name></member>
      <member refid="classBLooper_1a525d6677c2fc76a84c2d48853dad142a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>IsLocked</name></member>
      <member refid="classBLooper_1a27fd22b9eeaeadbeff1e973ed5242a64" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>IsMessageWaiting</name></member>
      <member refid="classBMediaRoster_1aae51696e2efc364c5cbb54335702f8a3" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>IsRunning</name></member>
      <member refid="classBHandler_1a581b84f0f067afa88768ce6a0c07f59f" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>IsWatched</name></member>
      <member refid="classBLooper_1a757a3e406ea3b7bb9a1ad16d04689b1d" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Lock</name></member>
      <member refid="classBLooper_1a1d5d9dbc9d890ed1329b69fbfe9254b3" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>LockingThread</name></member>
      <member refid="classBHandler_1a9d64bf66b4914918e24390d117e83477" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>LockLooper</name></member>
      <member refid="classBHandler_1afa0099ff6defcb6d64e3ee1c2fb47afe" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>LockLooperWithTimeout</name></member>
      <member refid="classBLooper_1a734cdb06bfe92efdea24528c9b43bfc1" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>LockWithTimeout</name></member>
      <member refid="classBLooper_1a5cb1d2eb7640fdcbc1085ad19583691d" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Loop</name></member>
      <member refid="classBHandler_1ac8e949959b12e602e3b0c4f023c60e6c" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Looper</name></member>
      <member refid="classBLooper_1acf16bb9628e7dbbace3920ebeff6dc34" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>LooperForThread</name></member>
      <member refid="classBMediaRoster_1a6a03610a7349011ea3b5f965f5f670d5" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>MakeTimeSourceFor</name></member>
      <member refid="classBMediaRoster_1aa563a62a08079ef0c534ad94cef236c8" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>MediaFlags</name></member>
      <member refid="classBLooper_1a1be73aad8e8fed41659b98633525e5b3" prot="protected" virt="non-virtual"><scope>BMediaRoster</scope><name>MessageFromPort</name></member>
      <member refid="classBLooper_1ad0643973ceda5cca540c4684a9f670ac" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>MessageQueue</name></member>
      <member refid="classBMediaRoster_1ae73bdfba6cb519d1e3eff744e675b197" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>MessageReceived</name></member>
      <member refid="classBHandler_1a40b246ac272e09b2f641d1290be21200" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Name</name></member>
      <member refid="classBHandler_1a92855d8f88f6072e7225bde292feaa38" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>NextHandler</name></member>
      <member refid="classBMediaRoster_1aed3ea4f419786c4b5968b6b7e35bfc6a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>NodeIDFor</name></member>
      <member refid="classBMediaRoster_1a9a2ee6afa98bc7082c3a5b81d7dd2812" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>ParseCommand</name></member>
      <member refid="classBLooper_1adfc642544ce22888d412e6a4be25fa72" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>Perform</name></member>
      <member refid="classBLooper_1a0de6737bfbf8a8b4913adc8c74bb544e" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1ae79a7818ce950d8edcd238f7948df020" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1a2dc16ecf211eb7e32eaa4b08863e856d" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1ac75eed80e72b236650f19b4015de6e99" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1af1a4af6872abc40a887bfcabd55aff98" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>PreferredHandler</name></member>
      <member refid="classBMediaRoster_1a43577dbfd447c33a3468fd3dff4ded41" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>PrerollNode</name></member>
      <member refid="classBLooper_1a10d5a4873f14fd247890a6dfc9b8b949" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>Quit</name></member>
      <member refid="classBMediaRoster_1aa678dcd8c98048a83be8e337d2508750" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>QuitRequested</name></member>
      <member refid="classBMediaRoster_1a83bd2dd0d307c2f9a7a7991f12f8a885" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>RegisterNode</name></member>
      <member refid="classBMediaRoster_1aaf89a6b9abd51e42208f08240ae487fd" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>ReleaseNode</name></member>
      <member refid="classBLooper_1ad2233fa143e9deff912bff39eebac4a2" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>RemoveCommonFilter</name></member>
      <member refid="classBHandler_1a2b608135b27f283802648e7c6f8cdc83" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>RemoveFilter</name></member>
      <member refid="classBLooper_1a5af57140bf018388a2e64343f46ac330" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>RemoveHandler</name></member>
      <member refid="classBMediaRoster_1a637584350c4c337f37be0b2af81f3961" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>ResolveSpecifier</name></member>
      <member refid="classBMediaRoster_1accd3b183297bfbe9ff0313fa231911b5" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>RollNode</name></member>
      <member refid="classBMediaRoster_1a39e1f5a0861eedd04f1415ba9a5a9ee1" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Roster</name></member>
      <member refid="classBLooper_1a88bb85410e0c4124bdc6f16168df4811" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>Run</name></member>
      <member refid="classBMediaRoster_1ac156406fa4cc8136ab5fce9df4388dea" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>sDefaultInstance</name></member>
      <member refid="classBMediaRoster_1af6ab409d25fb5e1e1e3756bc2c48c075" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SeekNode</name></member>
      <member refid="classBMediaRoster_1a992796249f81805be23102e621343327" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SeekTimeSource</name></member>
      <member refid="classBLooper_1aa96df67561b0ce1428ae45148c21e01f" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Sem</name></member>
      <member refid="classBHandler_1a71bf72dc17a64bcd42656722271a9e0c" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>SendNotices</name></member>
      <member refid="classBMediaRoster_1a2076843bdbb0d68ca7a3776c5d9938b6" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetAudioInput</name></member>
      <member refid="classBMediaRoster_1a9f2ef3283c98c473f23eb7cdb16f2f39" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetAudioInput</name></member>
      <member refid="classBMediaRoster_1afc546d9ea003f28f159a9cc67fce46e5" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetAudioOutput</name></member>
      <member refid="classBMediaRoster_1a0468e9af262c4b83a5aa3b19a73977e4" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetAudioOutput</name></member>
      <member refid="classBMediaRoster_1a852502405913623a2da7d91b3b2d310c" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetAudioOutput</name></member>
      <member refid="classBLooper_1a9b39e686873763cc6491c91f77b177b7" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>SetCommonFilterList</name></member>
      <member refid="classBHandler_1a503344dc801858e1f5f419be3919e9cf" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>SetFilterList</name></member>
      <member refid="classBHandler_1abf861126df4b6e71b9261a99da4ad0eb" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetName</name></member>
      <member refid="classBHandler_1a02f78779c8141987d6030e73c22e734a" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>SetNextHandler</name></member>
      <member refid="classBMediaRoster_1af015d06b59c6ddaf37536a5ffeb66620" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>SetOutputBuffersFor</name></member>
      <member refid="classBLooper_1a07c6e5c65354b48465fde2b0b44e22c6" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetPreferredHandler</name></member>
      <member refid="classBMediaRoster_1a77621a290aca7ca41bea37dc2d1e3605" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetProducerRate</name></member>
      <member refid="classBMediaRoster_1a179cf562559aeff2ab52477f9ed9ae27" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetProducerRunModeDelay</name></member>
      <member refid="classBMediaRoster_1ac28dcd8b384ed5fc789f7b03560cd777" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>SetRealtimeFlags</name></member>
      <member refid="classBMediaRoster_1ad4a78ad74e1cc92281948663d093ce30" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetRefFor</name></member>
      <member refid="classBMediaRoster_1a7e13e33219711c8a0fbbdd96f0d37ae6" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetRunModeNode</name></member>
      <member refid="classBMediaRoster_1a237878767dea678b0ea2f707843f64a7" prot="private" virt="non-virtual"><scope>BMediaRoster</scope><name>SetRunningDefault</name></member>
      <member refid="classBMediaRoster_1ab8485d456f0a0f629b095168fee060ba" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetTimeSourceFor</name></member>
      <member refid="classBMediaRoster_1a555f14de40b3324694da8ad53a693730" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetVideoInput</name></member>
      <member refid="classBMediaRoster_1a0979462da9f5f43f90338e4f05164d2f" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetVideoInput</name></member>
      <member refid="classBMediaRoster_1ac15988a1e7f92ca42d8042c41524a13c" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetVideoOutput</name></member>
      <member refid="classBMediaRoster_1a9741e57e3d7997f07c4e02c811f7286a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SetVideoOutput</name></member>
      <member refid="classBMediaRoster_1a60211cd388b2d79fc2a374ecdabc2470" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SniffRef</name></member>
      <member refid="classBMediaRoster_1a61904a1c23ce9d4d5a4615f9dc770817" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SniffRefFor</name></member>
      <member refid="classBMediaRoster_1a91568efcd911aa48748b26fe95a73626" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartControlPanel</name></member>
      <member refid="classBMediaRoster_1aff6477063f801ece9405b9d9aee4b30b" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartNode</name></member>
      <member refid="classBMediaRoster_1a6e1f0c6a449701322b9fe96bd21b45ac" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartTimeSource</name></member>
      <member refid="classBMediaRoster_1a7f733d7fdf750540cebbac10c5368ae4" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartWatching</name></member>
      <member refid="classBMediaRoster_1aa7ee17da3f97f260e5358e2c113a879f" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartWatching</name></member>
      <member refid="classBMediaRoster_1a3969a8cf7278e6c4582395b066e9a6d7" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartWatching</name></member>
      <member refid="classBHandler_1af7d600e33a0586af7444d9abc8500504" prot="public" virt="non-virtual" ambiguityscope="BLooper::"><scope>BMediaRoster</scope><name>StartWatching</name></member>
      <member refid="classBHandler_1a20713ff6ee9df49a014f391374eaf689" prot="public" virt="non-virtual" ambiguityscope="BLooper::"><scope>BMediaRoster</scope><name>StartWatching</name></member>
      <member refid="classBHandler_1a58d7c8d30e47fbb7590f10dea1f21166" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartWatchingAll</name></member>
      <member refid="classBHandler_1a31927c51d89e0e3b3bf609a786ee6c3b" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StartWatchingAll</name></member>
      <member refid="classBMediaRoster_1a8bae9b88e188c432495d506bd436fd4a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StopNode</name></member>
      <member refid="classBMediaRoster_1a0a4b67800a0a2b582d6fe9356e1e4c11" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StopTimeSource</name></member>
      <member refid="classBMediaRoster_1a3d3bb0fc26522f64f4cf83d3709d018e" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StopWatching</name></member>
      <member refid="classBMediaRoster_1a92d97be5cfdb2b969953024fec6bc668" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StopWatching</name></member>
      <member refid="classBMediaRoster_1a3cc5febf2cabf0a2ffd8036e86401979" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StopWatching</name></member>
      <member refid="classBHandler_1a9d1f0d55b3dc7337058aba769b4e4f93" prot="public" virt="non-virtual" ambiguityscope="BLooper::"><scope>BMediaRoster</scope><name>StopWatching</name></member>
      <member refid="classBHandler_1ad3544be491270f856a0af8d36ce02d78" prot="public" virt="non-virtual" ambiguityscope="BLooper::"><scope>BMediaRoster</scope><name>StopWatching</name></member>
      <member refid="classBHandler_1a199c167e0dcee95aa65d09435804b3d9" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StopWatchingAll</name></member>
      <member refid="classBHandler_1a8b9a424ce63f5932666094b6eadf10cf" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>StopWatchingAll</name></member>
      <member refid="classBMediaRoster_1aeebcc8c6d3550caa942bb31b7998e876" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>SyncToNode</name></member>
      <member refid="classBLooper_1afeb7a4900f26e7746d6c8bdb5cf684f3" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Team</name></member>
      <member refid="classBLooper_1a257d396d04d128edf7a0c9669ead36c0" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Thread</name></member>
      <member refid="classBLooper_1ac84ea15405640082b9fda58f6672467c" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>Unlock</name></member>
      <member refid="classBHandler_1ab131af7eb7aa2b9eea3a11ac1bfd4c03" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>UnlockLooper</name></member>
      <member refid="classBMediaRoster_1aece42065cce4644e55e5d49a0dbdc39a" prot="public" virt="non-virtual"><scope>BMediaRoster</scope><name>UnregisterNode</name></member>
      <member refid="classBArchivable_1af1a37be4b953423787b0d0be0b345ff3" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>~BArchivable</name></member>
      <member refid="classBHandler_1a928254034959d19ef588b7898a6f8194" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>~BHandler</name></member>
      <member refid="classBLooper_1ab2fa21c0315644144f55523adbdc0457" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>~BLooper</name></member>
      <member refid="classBMediaRoster_1a60a601893a0dd0217ffe1620ca8066c7" prot="public" virt="virtual"><scope>BMediaRoster</scope><name>~BMediaRoster</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
