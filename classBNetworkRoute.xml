<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBNetworkRoute" kind="class" language="C++" prot="public">
    <compoundname>BNetworkRoute</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBNetworkRoute_1a5e27af404664126197c5d30939e34d31" prot="private" static="no" mutable="no">
        <type>route_entry</type>
        <definition>route_entry BNetworkRoute::fRouteEntry</definition>
        <argsstring></argsstring>
        <name>fRouteEntry</name>
        <qualifiedname>BNetworkRoute::fRouteEntry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="72" column="12" bodyfile="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBNetworkRoute_1a8a2c3577527d90e638571ef2f8ad397f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkRoute::BNetworkRoute</definition>
        <argsstring>()</argsstring>
        <name>BNetworkRoute</name>
        <qualifiedname>BNetworkRoute::BNetworkRoute</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1ae8ac421de4f6f76a0eb9881bc482194b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkRoute::~BNetworkRoute</definition>
        <argsstring>()</argsstring>
        <name>~BNetworkRoute</name>
        <qualifiedname>BNetworkRoute::~BNetworkRoute</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1aa3b3273c70a8dc1cee1199377d40e13e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BNetworkRoute::AddressFamily</definition>
        <argsstring>() const</argsstring>
        <name>AddressFamily</name>
        <qualifiedname>BNetworkRoute::AddressFamily</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="47" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a4afac38d940880fe89fd7e18a1c02aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::Adopt</definition>
        <argsstring>(BNetworkRoute &amp;other)</argsstring>
        <name>Adopt</name>
        <qualifiedname>BNetworkRoute::Adopt</qualifiedname>
        <param>
          <type>BNetworkRoute &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="21" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a5de16a467e50d653abdd5e4188359328" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const sockaddr *</type>
        <definition>const sockaddr * BNetworkRoute::Destination</definition>
        <argsstring>() const</argsstring>
        <name>Destination</name>
        <qualifiedname>BNetworkRoute::Destination</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="25" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a4752a0c562b71db1f97958d711ddebfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BNetworkRoute::Flags</definition>
        <argsstring>() const</argsstring>
        <name>Flags</name>
        <qualifiedname>BNetworkRoute::Flags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="41" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a8cdba30c96a5308f57c0a83ea56b9d6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const sockaddr *</type>
        <definition>const sockaddr * BNetworkRoute::Gateway</definition>
        <argsstring>() const</argsstring>
        <name>Gateway</name>
        <qualifiedname>BNetworkRoute::Gateway</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="33" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1af0bd1123d16bd70dc301496de992a6ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const sockaddr *</type>
        <definition>const sockaddr * BNetworkRoute::Mask</definition>
        <argsstring>() const</argsstring>
        <name>Mask</name>
        <qualifiedname>BNetworkRoute::Mask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="29" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a71e6676334a0ac81d121f4db35d955f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BNetworkRoute::MTU</definition>
        <argsstring>() const</argsstring>
        <name>MTU</name>
        <qualifiedname>BNetworkRoute::MTU</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="44" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a7c6ab519083d566ea3bf95f0495c92da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const route_entry &amp;</type>
        <definition>const route_entry &amp; BNetworkRoute::RouteEntry</definition>
        <argsstring>() const</argsstring>
        <name>RouteEntry</name>
        <qualifiedname>BNetworkRoute::RouteEntry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="23" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1ae5bda255a99a927537cc9e6d55d1b323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkRoute::SetDestination</definition>
        <argsstring>(const sockaddr &amp;destination)</argsstring>
        <name>SetDestination</name>
        <qualifiedname>BNetworkRoute::SetDestination</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="26" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a25bc3f13c9c62e74ddc7cc08503baf19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::SetFlags</definition>
        <argsstring>(uint32 flags)</argsstring>
        <name>SetFlags</name>
        <qualifiedname>BNetworkRoute::SetFlags</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="42" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1ab91386fe496161da8218c4c4df628fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkRoute::SetGateway</definition>
        <argsstring>(const sockaddr &amp;gateway)</argsstring>
        <name>SetGateway</name>
        <qualifiedname>BNetworkRoute::SetGateway</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>gateway</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="34" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1ae8bdbf271077c5cef90b108fe8f9a5f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkRoute::SetMask</definition>
        <argsstring>(const sockaddr &amp;mask)</argsstring>
        <name>SetMask</name>
        <qualifiedname>BNetworkRoute::SetMask</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="30" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a66f9913555f04cbb466f66d86418a760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::SetMTU</definition>
        <argsstring>(uint32 mtu)</argsstring>
        <name>SetMTU</name>
        <qualifiedname>BNetworkRoute::SetMTU</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mtu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="45" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1aedabfdeafb5c9891dcd008d49fa7493c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkRoute::SetSource</definition>
        <argsstring>(const sockaddr &amp;source)</argsstring>
        <name>SetSource</name>
        <qualifiedname>BNetworkRoute::SetSource</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a245b7e361a94e27173cd0d862de8fd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkRoute::SetTo</definition>
        <argsstring>(const BNetworkRoute &amp;other)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkRoute::SetTo</qualifiedname>
        <param>
          <type>const BNetworkRoute &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="18" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a2ca7c1d490f93a53ec5c79f175c24f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkRoute::SetTo</definition>
        <argsstring>(const route_entry &amp;routeEntry)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkRoute::SetTo</qualifiedname>
        <param>
          <type>const route_entry &amp;</type>
          <declname>routeEntry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="19" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a44e1c70de3e0ca8b85013b252bc61222" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const sockaddr *</type>
        <definition>const sockaddr * BNetworkRoute::Source</definition>
        <argsstring>() const</argsstring>
        <name>Source</name>
        <qualifiedname>BNetworkRoute::Source</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="37" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a829a78cf4853880fbed9aa9e1bbfe05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::UnsetDestination</definition>
        <argsstring>()</argsstring>
        <name>UnsetDestination</name>
        <qualifiedname>BNetworkRoute::UnsetDestination</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="27" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a4096e0d935b16a0dcca5be1c25d737c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::UnsetGateway</definition>
        <argsstring>()</argsstring>
        <name>UnsetGateway</name>
        <qualifiedname>BNetworkRoute::UnsetGateway</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="35" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a0cd1094fe957fdb0bb9faa306419f28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::UnsetMask</definition>
        <argsstring>()</argsstring>
        <name>UnsetMask</name>
        <qualifiedname>BNetworkRoute::UnsetMask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="31" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a702862c9ea0c98ca1beafa2eb2209829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::UnsetSource</definition>
        <argsstring>()</argsstring>
        <name>UnsetSource</name>
        <qualifiedname>BNetworkRoute::UnsetSource</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="39" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBNetworkRoute_1a104e1e6725204628fc73e087e1cef997" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BNetworkRoute::GetDefaultGateway</definition>
        <argsstring>(int family, const char *interfaceName, sockaddr &amp;gateway)</argsstring>
        <name>GetDefaultGateway</name>
        <qualifiedname>BNetworkRoute::GetDefaultGateway</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>interfaceName</declname>
        </param>
        <param>
          <type>sockaddr &amp;</type>
          <declname>gateway</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="52" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a3ed6c7d0ceb740668f550244ed04bd14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BNetworkRoute::GetDefaultRoute</definition>
        <argsstring>(int family, const char *interfaceName, BNetworkRoute &amp;route)</argsstring>
        <name>GetDefaultRoute</name>
        <qualifiedname>BNetworkRoute::GetDefaultRoute</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>interfaceName</declname>
        </param>
        <param>
          <type>BNetworkRoute &amp;</type>
          <declname>route</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="49" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a32645c7581c857595e021e424506d87c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BNetworkRoute::GetRoutes</definition>
        <argsstring>(int family, BObjectList&lt; BNetworkRoute &gt; &amp;routes)</argsstring>
        <name>GetRoutes</name>
        <qualifiedname>BNetworkRoute::GetRoutes</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="classBObjectList" kindref="compound">BObjectList</ref>&lt; BNetworkRoute &gt; &amp;</type>
          <declname>routes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="56" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1ae7e2102696115a6901520d95c3f511f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BNetworkRoute::GetRoutes</definition>
        <argsstring>(int family, const char *interfaceName, BObjectList&lt; BNetworkRoute &gt; &amp;routes)</argsstring>
        <name>GetRoutes</name>
        <qualifiedname>BNetworkRoute::GetRoutes</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>interfaceName</declname>
        </param>
        <param>
          <type><ref refid="classBObjectList" kindref="compound">BObjectList</ref>&lt; BNetworkRoute &gt; &amp;</type>
          <declname>routes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="58" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a50849de09c12dd2f9e0a64e4175619ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BNetworkRoute::GetRoutes</definition>
        <argsstring>(int family, const char *interfaceName, uint32 filterFlags, BObjectList&lt; BNetworkRoute &gt; &amp;routes)</argsstring>
        <name>GetRoutes</name>
        <qualifiedname>BNetworkRoute::GetRoutes</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>interfaceName</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>filterFlags</declname>
        </param>
        <param>
          <type><ref refid="classBObjectList" kindref="compound">BObjectList</ref>&lt; BNetworkRoute &gt; &amp;</type>
          <declname>routes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="60" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBNetworkRoute_1a0ca82a85586eda3a785a22d6705476aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkRoute::BNetworkRoute</definition>
        <argsstring>(const BNetworkRoute &amp;other)</argsstring>
        <name>BNetworkRoute</name>
        <qualifiedname>BNetworkRoute::BNetworkRoute</qualifiedname>
        <param>
          <type>const BNetworkRoute &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a5a1e5e23e649059ce5fd30e14a98729a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkRoute::_AllocateAndSetAddress</definition>
        <argsstring>(const sockaddr &amp;from, sockaddr *&amp;to)</argsstring>
        <name>_AllocateAndSetAddress</name>
        <qualifiedname>BNetworkRoute::_AllocateAndSetAddress</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>sockaddr *&amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkRoute_1a40b76743c102cdcf37a690009867fdfc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkRoute::_FreeAndUnsetAddress</definition>
        <argsstring>(sockaddr *&amp;address)</argsstring>
        <name>_FreeAndUnsetAddress</name>
        <qualifiedname>BNetworkRoute::_FreeAndUnsetAddress</qualifiedname>
        <param>
          <type>sockaddr *&amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="70" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" line="13" column="1" bodyfile="/boot/home/src/haiku/headers/os/net/NetworkRoute.h" bodystart="13" bodyend="73"/>
    <listofallmembers>
      <member refid="classBNetworkRoute_1a5a1e5e23e649059ce5fd30e14a98729a" prot="private" virt="non-virtual"><scope>BNetworkRoute</scope><name>_AllocateAndSetAddress</name></member>
      <member refid="classBNetworkRoute_1a40b76743c102cdcf37a690009867fdfc" prot="private" virt="non-virtual"><scope>BNetworkRoute</scope><name>_FreeAndUnsetAddress</name></member>
      <member refid="classBNetworkRoute_1aa3b3273c70a8dc1cee1199377d40e13e" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>AddressFamily</name></member>
      <member refid="classBNetworkRoute_1a4afac38d940880fe89fd7e18a1c02aa9" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>Adopt</name></member>
      <member refid="classBNetworkRoute_1a8a2c3577527d90e638571ef2f8ad397f" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>BNetworkRoute</name></member>
      <member refid="classBNetworkRoute_1a0ca82a85586eda3a785a22d6705476aa" prot="private" virt="non-virtual"><scope>BNetworkRoute</scope><name>BNetworkRoute</name></member>
      <member refid="classBNetworkRoute_1a5de16a467e50d653abdd5e4188359328" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>Destination</name></member>
      <member refid="classBNetworkRoute_1a4752a0c562b71db1f97958d711ddebfb" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>Flags</name></member>
      <member refid="classBNetworkRoute_1a5e27af404664126197c5d30939e34d31" prot="private" virt="non-virtual"><scope>BNetworkRoute</scope><name>fRouteEntry</name></member>
      <member refid="classBNetworkRoute_1a8cdba30c96a5308f57c0a83ea56b9d6d" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>Gateway</name></member>
      <member refid="classBNetworkRoute_1a104e1e6725204628fc73e087e1cef997" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>GetDefaultGateway</name></member>
      <member refid="classBNetworkRoute_1a3ed6c7d0ceb740668f550244ed04bd14" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>GetDefaultRoute</name></member>
      <member refid="classBNetworkRoute_1a32645c7581c857595e021e424506d87c" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>GetRoutes</name></member>
      <member refid="classBNetworkRoute_1ae7e2102696115a6901520d95c3f511f0" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>GetRoutes</name></member>
      <member refid="classBNetworkRoute_1a50849de09c12dd2f9e0a64e4175619ee" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>GetRoutes</name></member>
      <member refid="classBNetworkRoute_1af0bd1123d16bd70dc301496de992a6ce" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>Mask</name></member>
      <member refid="classBNetworkRoute_1a71e6676334a0ac81d121f4db35d955f1" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>MTU</name></member>
      <member refid="classBNetworkRoute_1a7c6ab519083d566ea3bf95f0495c92da" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>RouteEntry</name></member>
      <member refid="classBNetworkRoute_1ae5bda255a99a927537cc9e6d55d1b323" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetDestination</name></member>
      <member refid="classBNetworkRoute_1a25bc3f13c9c62e74ddc7cc08503baf19" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetFlags</name></member>
      <member refid="classBNetworkRoute_1ab91386fe496161da8218c4c4df628fed" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetGateway</name></member>
      <member refid="classBNetworkRoute_1ae8bdbf271077c5cef90b108fe8f9a5f5" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetMask</name></member>
      <member refid="classBNetworkRoute_1a66f9913555f04cbb466f66d86418a760" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetMTU</name></member>
      <member refid="classBNetworkRoute_1aedabfdeafb5c9891dcd008d49fa7493c" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetSource</name></member>
      <member refid="classBNetworkRoute_1a245b7e361a94e27173cd0d862de8fd0a" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetTo</name></member>
      <member refid="classBNetworkRoute_1a2ca7c1d490f93a53ec5c79f175c24f3d" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>SetTo</name></member>
      <member refid="classBNetworkRoute_1a44e1c70de3e0ca8b85013b252bc61222" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>Source</name></member>
      <member refid="classBNetworkRoute_1a829a78cf4853880fbed9aa9e1bbfe05a" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>UnsetDestination</name></member>
      <member refid="classBNetworkRoute_1a4096e0d935b16a0dcca5be1c25d737c8" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>UnsetGateway</name></member>
      <member refid="classBNetworkRoute_1a0cd1094fe957fdb0bb9faa306419f28e" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>UnsetMask</name></member>
      <member refid="classBNetworkRoute_1a702862c9ea0c98ca1beafa2eb2209829" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>UnsetSource</name></member>
      <member refid="classBNetworkRoute_1ae8ac421de4f6f76a0eb9881bc482194b" prot="public" virt="non-virtual"><scope>BNetworkRoute</scope><name>~BNetworkRoute</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
