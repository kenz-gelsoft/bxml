<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMidiEndpoint" kind="class" language="C++" prot="public">
    <compoundname>BMidiEndpoint</compoundname>
    <derivedcompoundref refid="classBMidiConsumer" prot="public" virt="non-virtual">BMidiConsumer</derivedcompoundref>
    <derivedcompoundref refid="classBMidiProducer" prot="public" virt="non-virtual">BMidiProducer</derivedcompoundref>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBMidiEndpoint_1a398cf5b1ce05a99475dd0a29e230e2b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiConsumer</definition>
        <argsstring></argsstring>
        <name>BMidiConsumer</name>
        <qualifiedname>BMidiEndpoint::BMidiConsumer</qualifiedname>
        <param>
          <type><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="43" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiEndpoint_1a3beaf49e9cd5e53e1061d9184b6bbe32" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiLocalConsumer</definition>
        <argsstring></argsstring>
        <name>BMidiLocalConsumer</name>
        <qualifiedname>BMidiEndpoint::BMidiLocalConsumer</qualifiedname>
        <param>
          <type><ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="44" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiEndpoint_1af26e8954f5c14a4c48bfcd3766d9abd8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiLocalProducer</definition>
        <argsstring></argsstring>
        <name>BMidiLocalProducer</name>
        <qualifiedname>BMidiEndpoint::BMidiLocalProducer</qualifiedname>
        <param>
          <type><ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="45" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiEndpoint_1a7856d0e4613229160506e41c7affe4bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiProducer</definition>
        <argsstring></argsstring>
        <name>BMidiProducer</name>
        <qualifiedname>BMidiEndpoint::BMidiProducer</qualifiedname>
        <param>
          <type><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="46" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiEndpoint_1a0dd92f24708e1530ff6437e668a2cbb9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiRoster</definition>
        <argsstring></argsstring>
        <name>BMidiRoster</name>
        <qualifiedname>BMidiEndpoint::BMidiRoster</qualifiedname>
        <param>
          <type><ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="47" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiEndpoint_1a5510ba3d18d9044213eea55d0051eb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BPrivate::BMidiRosterLooper</definition>
        <argsstring></argsstring>
        <name>BPrivate::BMidiRosterLooper</name>
        <qualifiedname>BMidiEndpoint::BMidiRosterLooper</qualifiedname>
        <param>
          <type>BPrivate::BMidiRosterLooper</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="48" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMidiEndpoint_1a02f4d25be3f1d32e28b6c370e84bff99" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMidiEndpoint::_reserved[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMidiEndpoint::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="78" column="8" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1a793694cb10a27c8431df02eaec709c60" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMidiEndpoint::fId</definition>
        <argsstring></argsstring>
        <name>fId</name>
        <qualifiedname>BMidiEndpoint::fId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="69" column="7" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1aff2657598755e047c7ef260e5305b5fc" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BMidiEndpoint::fIsAlive</definition>
        <argsstring></argsstring>
        <name>fIsAlive</name>
        <qualifiedname>BMidiEndpoint::fIsAlive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="76" column="6" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1ac48110e916b46242382f8a2c265da253" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BMidiEndpoint::fIsConsumer</definition>
        <argsstring></argsstring>
        <name>fIsConsumer</name>
        <qualifiedname>BMidiEndpoint::fIsConsumer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="74" column="6" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1a4fc03e24471bf056c0a6d30024af2e83" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BMidiEndpoint::fIsLocal</definition>
        <argsstring></argsstring>
        <name>fIsLocal</name>
        <qualifiedname>BMidiEndpoint::fIsLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="73" column="6" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1ae5d57bdfd5fd88c6505b6124cfffd071" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BMidiEndpoint::fIsRegistered</definition>
        <argsstring></argsstring>
        <name>fIsRegistered</name>
        <qualifiedname>BMidiEndpoint::fIsRegistered</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="75" column="6" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1ab55a714870433d2a987cdcffd46fc274" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BMidiEndpoint::fName</definition>
        <argsstring></argsstring>
        <name>fName</name>
        <qualifiedname>BMidiEndpoint::fName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="70" column="9" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1a7033872b5a17d28b98ade4ad7473c2db" prot="private" static="no" mutable="no">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>BMessage* BMidiEndpoint::fProperties</definition>
        <argsstring></argsstring>
        <name>fProperties</name>
        <qualifiedname>BMidiEndpoint::fProperties</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="72" column="10" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiEndpoint_1a7d975362246ce585a8d64ea0d2763433" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMidiEndpoint::fRefCount</definition>
        <argsstring></argsstring>
        <name>fRefCount</name>
        <qualifiedname>BMidiEndpoint::fRefCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="71" column="7" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMidiEndpoint_1a504efce89310e4473c4a9ae77da7a641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::Acquire</definition>
        <argsstring>()</argsstring>
        <name>Acquire</name>
        <qualifiedname>BMidiEndpoint::Acquire</qualifiedname>
        <briefdescription>
<para>Increments the endpoint&apos;s reference count. </para>
        </briefdescription>
        <detaileddescription>
<para>Each <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> has a reference count associated with it, so that <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> can do proper bookkeeping. <ref refid="classBMidiEndpoint_1a504efce89310e4473c4a9ae77da7a641" kindref="member">Acquire()</ref> increments this reference count, and <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref> decrements it. Once the count reaches zero, the endpoint is deleted.</para>
<para>When you are done with the endpoint, whether local or remote, you should always <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref> it!</para>
<para>Upon construction, local endpoints start with a reference count of 1. Any objects you obtain from <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> using the NextXXX() or FindXXX() functions have their reference counts incremented in the process. If you forget to call <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref>, the objects won&apos;t be properly cleaned up and you&apos;ll make a fool out of yourself.</para>
<para>After you <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref> an object, you are advised not to use it any further. If you do, your app will probably crash. That also happens if you <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref> an object too many times.</para>
<para>Typically, you don&apos;t need to call <ref refid="classBMidiEndpoint_1a504efce89310e4473c4a9ae77da7a641" kindref="member">Acquire()</ref>, unless you have two disparate parts of your application working with the same endpoint, and you don&apos;t want to have to keep track of who needs to <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref> the endpoint. Now you simply have both of them release it.</para>
<para><simplesect kind="return"><para>Always returns B_OK</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="33" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a5c6c8dc7f451e7c908df05319f24a64f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::GetProperties</definition>
        <argsstring>(BMessage *properties) const</argsstring>
        <name>GetProperties</name>
        <qualifiedname>BMidiEndpoint::GetProperties</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>properties</declname>
          <defname>props</defname>
        </param>
        <briefdescription>
<para>Reads the properties of the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Usage example:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBMessage" kindref="compound">BMessage</ref><sp/>props;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endpoint-&gt;GetProperties(&amp;props)<sp/>==<sp/>B_OK)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...examine<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>message...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that <ref refid="classBMidiEndpoint_1a5c6c8dc7f451e7c908df05319f24a64f" kindref="member">GetProperties()</ref> overwrites the contents of your <ref refid="classBMessage" kindref="compound">BMessage</ref>.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiEndpoint_1a58cf2c701ba336b640067db743ba9746" kindref="member">SetProperties()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="36" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a3f5b840617bf84cddbca779c470cef17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMidiEndpoint::ID</definition>
        <argsstring>() const</argsstring>
        <name>ID</name>
        <qualifiedname>BMidiEndpoint::ID</qualifiedname>
        <briefdescription>
<para>Returns the ID of the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>An ID uniquely identifies an endpoint in the system. The ID is a signed 32-bit number that is assigned by the Midi Server when the endpoint is created. (So even if a local endpoint is not published, it still has a unique ID.) Valid IDs range from 1 to 0x7FFFFFFF, the largest value an int32 can have. 0 and negative values are <bold>not</bold> valid IDs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="23" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1ae20fe83d79bd0d08cb818d3dda0fdc23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::IsConsumer</definition>
        <argsstring>() const</argsstring>
        <name>IsConsumer</name>
        <qualifiedname>BMidiEndpoint::IsConsumer</qualifiedname>
        <briefdescription>
<para>Determines whether this endpoint is a <ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If it is, you can use a dynamic_cast to convert this object into a consumer:</para>
<para><programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endp-&gt;IsConsumer())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref>*<sp/>cons<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(endp);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>....</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="26" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a3edca82a4aa8bfa2aad3874cc9192b4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::IsLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsLocal</name>
        <qualifiedname>BMidiEndpoint::IsLocal</qualifiedname>
        <briefdescription>
<para>Determines whether this endpoint represents a local object. </para>
        </briefdescription>
        <detaileddescription>
<para>An endpoint is &quot;local&quot; when it is created by this application; in other words, a <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref> or <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="28" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a20623d6d71190a701e9bccc23e646e6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::IsPersistent</definition>
        <argsstring>() const</argsstring>
        <name>IsPersistent</name>
        <qualifiedname>BMidiEndpoint::IsPersistent</qualifiedname>
        <briefdescription>
<para>Not used. </para>
        </briefdescription>
        <detaileddescription>
<para>The purpose of this function is unclear, and as a result it doesn&apos;t do anything in the Haiku Midi Kit implementation.</para>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> always. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="29" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a2555a377a070eaea225ca40b9e5bb696" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::IsProducer</definition>
        <argsstring>() const</argsstring>
        <name>IsProducer</name>
        <qualifiedname>BMidiEndpoint::IsProducer</qualifiedname>
        <briefdescription>
<para>Determines whether this endpoint is a <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If it is, you can use a dynamic_cast to convert this object into a producer:</para>
<para><programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endp-&gt;IsProducer())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>*<sp/>prod<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(endp);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>....</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="25" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a11fc9a34aee618e137d9affcd67a7b36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::IsRemote</definition>
        <argsstring>() const</argsstring>
        <name>IsRemote</name>
        <qualifiedname>BMidiEndpoint::IsRemote</qualifiedname>
        <briefdescription>
<para>Determines whether this endpoint is a proxy for a remote object. </para>
        </briefdescription>
        <detaileddescription>
<para>An endpoint is &quot;remote&quot; when it is created by another application. Obviously, the remote object is <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref>&apos;ed as well, otherwise you would not be able to see it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="27" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a0c9f93e72f5302f6f0c631e5a4f0ddb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <qualifiedname>BMidiEndpoint::IsValid</qualifiedname>
        <briefdescription>
<para>Determines whether the endpoint still exists. </para>
        </briefdescription>
        <detaileddescription>
<para>Suppose you obtained a proxy object for a remote endpoint by querying the <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>. What if the application that published this endpoint quits, or less drastically, <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref>&apos;s that endpoint? Even though you still have a <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> proxy object, the real endpoint no longer exists. You can use <ref refid="classBMidiEndpoint_1a0c9f93e72f5302f6f0c631e5a4f0ddb2" kindref="member">IsValid()</ref> to check for this.</para>
<para>Don&apos;t worry, operations on invalid objects, such as <ref refid="classBMidiEndpoint_1a5c6c8dc7f451e7c908df05319f24a64f" kindref="member">GetProperties()</ref>, will return an error code (typically B_ERROR), but not cause a crash. Local objects are always are considered to be valid, even if you did not <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref> them. (The only time a local endpoint is not valid is when there was a problem constructing it.)</para>
<para>If the application that created the remote endpoint crashes, then there is no guarantee that the Midi Server immediately recognizes this. In that case, <ref refid="classBMidiEndpoint_1a0c9f93e72f5302f6f0c631e5a4f0ddb2" kindref="member">IsValid()</ref> may still return true. Eventually, the stale endpoint will be removed from the roster, though. From then on, <ref refid="classBMidiEndpoint_1a0c9f93e72f5302f6f0c631e5a4f0ddb2" kindref="member">IsValid()</ref> correctly returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="30" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a685e4d64cfbf56e30c7a3c5849fc72d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BMidiEndpoint::Name</definition>
        <argsstring>() const</argsstring>
        <name>Name</name>
        <qualifiedname>BMidiEndpoint::Name</qualifiedname>
        <briefdescription>
<para>Returns the name of the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>The function never returns NULL. If you created a local endpoint by passing a <computeroutput>NULL</computeroutput> name into its constructor (or passing no name, which is the same thing), then <ref refid="classBMidiEndpoint_1a685e4d64cfbf56e30c7a3c5849fc72d8" kindref="member">Name()</ref> will return an empty string, not <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiEndpoint_1afa167950f7b60558712224798f7e50aa" kindref="member">SetName()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="20" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::Register</definition>
        <argsstring>()</argsstring>
        <name>Register</name>
        <qualifiedname>BMidiEndpoint::Register</qualifiedname>
        <briefdescription>
<para>Publishes the endpoint on the roster. </para>
        </briefdescription>
        <detaileddescription>
<para>MIDI objects created by an application are invisible to other applications until they are published. To publish an object use the <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref> method. The corresponding <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref> method will cause an object to once again become invisible to remote applications.</para>
<para><ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> also has <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref> and <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref> methods. You may also use those methods to publish or hide your endpoints; both do the same thing.</para>
<para>Although it is considered bad style, calling <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref> on local endpoints that are already registered won&apos;t mess things up. The Midi Server will simply ignore your request. Likewise for <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref>&apos;ing more than once. Attempts to <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref> or <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref> remote endpoints will fail, of course.</para>
<para>If you are <ref refid="classBMidiRoster_1afe537ff3a6fc157e07436e7f62163622" kindref="member">watching </ref>, you will <bold>not</bold> receive notifications for any local endpoints you register or unregister. Of course, other applications <emphasis>will</emphasis> be notified about your endpoints.</para>
<para>Existing connections will not be broken when an object is unregistered, but future remote connections will be denied. When objects are destroyed, they automatically become unregistered.</para>
<para><simplesect kind="return"><para>B_OK on success, or an error code (typically <computeroutput>B_ERROR</computeroutput>) if something went wrong.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="38" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::Release</definition>
        <argsstring>()</argsstring>
        <name>Release</name>
        <qualifiedname>BMidiEndpoint::Release</qualifiedname>
        <briefdescription>
<para>Decrements the endpoint&apos;s reference count. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Always returns B_OK</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMidiEndpoint_1a504efce89310e4473c4a9ae77da7a641" kindref="member">Acquire()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="32" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1afa167950f7b60558712224798f7e50aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiEndpoint::SetName</definition>
        <argsstring>(const char *name)</argsstring>
        <name>SetName</name>
        <qualifiedname>BMidiEndpoint::SetName</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Changes the name of the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Names don&apos;t have to be unique, but it is recommended that you give any endpoints you publish meaningful and unique names, so users can easily recognize what each endpoint does. There is no limit to the size of endpoint names.</para>
<para>Even though you can call this function on both remote and local objects, you are only allowed to change the names of local endpoints; <ref refid="classBMidiEndpoint_1afa167950f7b60558712224798f7e50aa" kindref="member">SetName()</ref> calls on remote endpoints are ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The new name. If you pass <computeroutput>NULL</computeroutput> the name won&apos;t be changed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMidiEndpoint_1a685e4d64cfbf56e30c7a3c5849fc72d8" kindref="member">Name()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="21" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a58cf2c701ba336b640067db743ba9746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::SetProperties</definition>
        <argsstring>(const BMessage *properties)</argsstring>
        <name>SetProperties</name>
        <qualifiedname>BMidiEndpoint::SetProperties</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>properties</declname>
          <defname>props</defname>
        </param>
        <briefdescription>
<para>Changes the properties of the endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>Endpoints can have properties, which is any kind of information that might be useful to associate with a MIDI object. The properties are stored in a <ref refid="classBMessage" kindref="compound">BMessage</ref>.</para>
<para>Usage example:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBMessage" kindref="compound">BMessage</ref><sp/>props;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endpoint-&gt;GetProperties(&amp;props)<sp/>==<sp/>B_OK)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...add<sp/>data<sp/>to<sp/>the<sp/>message...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endpoint-&gt;SetProperties(&amp;props);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>You are only allowed to call <ref refid="classBMidiEndpoint_1a58cf2c701ba336b640067db743ba9746" kindref="member">SetProperties()</ref> on a local object.</para>
<para>Properties should follow a protocol, so different applications will know how to read each other&apos;s properties. The current protocol is very limited <ndash/> it only allows you to associate icons with your endpoints. Be planned to publish a more complete protocol that included additional information, such as vendor/model names, copyright/version info, category, etc., but they never got around to it.</para>
<para><table rows="3" cols="2"><row>
<entry thead="no"><para>property</para>
</entry><entry thead="no"><para>Vector icon (raw data) </para>
</entry></row>
<row>
<entry thead="no"><para>field name</para>
</entry><entry thead="no"><para>&quot;icon&quot; </para>
</entry></row>
<row>
<entry thead="no"><para>field type</para>
</entry><entry thead="no"><para>&apos;VICN&apos; </para>
</entry></row>
</table>
</para>
<para>This vector icon is available under Haiku only, and comes as raw data, not a <ref refid="classBBitmap" kindref="compound">BBitmap</ref>. Before being able to display it, you first must render the vector icon in the size of your choice.</para>
<para><table rows="3" cols="2"><row>
<entry thead="no"><para>property</para>
</entry><entry thead="no"><para>Large (32x32) icon </para>
</entry></row>
<row>
<entry thead="no"><para>field name</para>
</entry><entry thead="no"><para>&quot;be:large_icon&quot; </para>
</entry></row>
<row>
<entry thead="no"><para>field type</para>
</entry><entry thead="no"><para>&apos;ICON&apos; </para>
</entry></row>
</table>
</para>
<para><table rows="3" cols="2"><row>
<entry thead="no"><para>property</para>
</entry><entry thead="no"><para>Small (16x16) icon </para>
</entry></row>
<row>
<entry thead="no"><para>field name</para>
</entry><entry thead="no"><para>&quot;be:mini_icon&quot; </para>
</entry></row>
<row>
<entry thead="no"><para>field type</para>
</entry><entry thead="no"><para>&apos;MICN&apos; </para>
</entry></row>
</table>
</para>
<para>The MidiUtil package (downloadable from the OpenBeOS website) contains a number of convenient functions to associate icons with endpoints, so you don&apos;t have to write that code all over again.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiEndpoint_1a5c6c8dc7f451e7c908df05319f24a64f" kindref="member">GetProperties()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="35" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::Unregister</definition>
        <argsstring>()</argsstring>
        <name>Unregister</name>
        <qualifiedname>BMidiEndpoint::Unregister</qualifiedname>
        <briefdescription>
<para>Hides the endpoint from the roster/. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="39" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMidiEndpoint_1afae9ba29fb61aad6bc8cc9c506a8f487" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMidiEndpoint::BMidiEndpoint</definition>
        <argsstring>(const char *name)</argsstring>
        <name>BMidiEndpoint</name>
        <qualifiedname>BMidiEndpoint::BMidiEndpoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1ab1360adb8418e35698dbb098b726d1b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BMidiEndpoint::~BMidiEndpoint</definition>
        <argsstring>()</argsstring>
        <name>~BMidiEndpoint</name>
        <qualifiedname>BMidiEndpoint::~BMidiEndpoint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="51" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1aa7ee010bc80ffbd9ec1b74bf236a0194" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved1</definition>
        <argsstring>()</argsstring>
        <name>_Reserved1</name>
        <qualifiedname>BMidiEndpoint::_Reserved1</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1aa24c739bb4019ae852f54faf6688df64">_Reserved1</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1ae5170e25d8d3316f63a8a61f7b37a21c">_Reserved1</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1a92465eea2f8dd2920d555e90e70b29cc">_Reserved1</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1a70adc8a5de463db9e1496eebd1524eda">_Reserved1</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="53" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1ac30fc1d038589d7267980d7531476db4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved2</definition>
        <argsstring>()</argsstring>
        <name>_Reserved2</name>
        <qualifiedname>BMidiEndpoint::_Reserved2</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1af7f6fb3e83b2047bc01299c33f0656ae">_Reserved2</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1a7634548966ea0e8a98717e34ca68fc24">_Reserved2</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1a46838f96c04eebbf948d588566b4a1e4">_Reserved2</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1ae54ce4d038f81f30294969815ffa2550">_Reserved2</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="54" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a93dc698558775869cbbf2682ddd9b2a5" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved3</definition>
        <argsstring>()</argsstring>
        <name>_Reserved3</name>
        <qualifiedname>BMidiEndpoint::_Reserved3</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1a21a3bc846696c6290b436dd0693718cc">_Reserved3</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1a7320d022e7609a6bf7a9be39c8e54e17">_Reserved3</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1a636bb02c521268a018ff1904942db5d3">_Reserved3</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1a9a81bd54f795ac63d833dc6d0ee94ac8">_Reserved3</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="55" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1adae31d1e0b9c1b6df9f6e274307c2e50" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved4</definition>
        <argsstring>()</argsstring>
        <name>_Reserved4</name>
        <qualifiedname>BMidiEndpoint::_Reserved4</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1a03c50834d2adf800cbd46fdae136a5cf">_Reserved4</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1a9349ae52b8e31f2db04c853641fbe433">_Reserved4</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1a1159874834cabea34e2a559bc4e1fb8a">_Reserved4</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1a787eee0e697999ca9438be0bc6a1bc48">_Reserved4</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="56" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a8dead721fe5798fac17a822e496b3c48" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved5</definition>
        <argsstring>()</argsstring>
        <name>_Reserved5</name>
        <qualifiedname>BMidiEndpoint::_Reserved5</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1a38a7c777fc8912593326340783539f1e">_Reserved5</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1a122deadd602ebfa3ff511d9bfcb58bad">_Reserved5</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1a6f990ef6dc52b7fd9f7b2726d9cab958">_Reserved5</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1a320605201325a7bacc51900fd1bf002e">_Reserved5</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="57" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a5c3870904cc517f7e2ebaff7f3b4bd50" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved6</definition>
        <argsstring>()</argsstring>
        <name>_Reserved6</name>
        <qualifiedname>BMidiEndpoint::_Reserved6</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1a0272e6ebc30e78146bd875f3495ce34f">_Reserved6</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1a26d2239a54cdda9da7530e4933195f83">_Reserved6</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1ac626cd1dffd8107674b47ed22b2d9886">_Reserved6</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1a0bfa853acc61bebe540500d82ea3d235">_Reserved6</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="58" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a716439edef5c9b2dba50c42be8c539ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved7</definition>
        <argsstring>()</argsstring>
        <name>_Reserved7</name>
        <qualifiedname>BMidiEndpoint::_Reserved7</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1ad8f8456da1208b12b1f997648caa126b">_Reserved7</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1a29a660762ec97691b309e8a211e36aba">_Reserved7</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1a18340767e54d71a63ae59749013997e5">_Reserved7</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1a5e34216517cc385e1006f3ecb5f0e4bb">_Reserved7</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="59" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1aeb5f1d360e3c2f9fbc8a5658903d0f5c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiEndpoint::_Reserved8</definition>
        <argsstring>()</argsstring>
        <name>_Reserved8</name>
        <qualifiedname>BMidiEndpoint::_Reserved8</qualifiedname>
        <reimplementedby refid="classBMidiConsumer_1ace806feb1b49021f4388252ba2f5ab30">_Reserved8</reimplementedby>
        <reimplementedby refid="classBMidiLocalConsumer_1a2168f99235fe194047605da86d1c7a09">_Reserved8</reimplementedby>
        <reimplementedby refid="classBMidiProducer_1af897284baa6bddadd6ff6a82cf28a32f">_Reserved8</reimplementedby>
        <reimplementedby refid="classBMidiLocalProducer_1ab03801ddef582da8eff6c1cb95917560">_Reserved8</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="60" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1ab4f3acb0c05379ee179eab1d32061efd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::IsRegistered</definition>
        <argsstring>() const</argsstring>
        <name>IsRegistered</name>
        <qualifiedname>BMidiEndpoint::IsRegistered</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="65" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a3b16f913c756342cf66dddba1d73ff74" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMidiEndpoint::LockLooper</definition>
        <argsstring>() const</argsstring>
        <name>LockLooper</name>
        <qualifiedname>BMidiEndpoint::LockLooper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="66" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1af955e56bc2255ca671be3145833d26b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::SendChangeRequest</definition>
        <argsstring>(BMessage *)</argsstring>
        <name>SendChangeRequest</name>
        <qualifiedname>BMidiEndpoint::SendChangeRequest</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a5de1db8f8050f683c61226804882ff2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiEndpoint::SendRegisterRequest</definition>
        <argsstring>(bool)</argsstring>
        <name>SendRegisterRequest</name>
        <qualifiedname>BMidiEndpoint::SendRegisterRequest</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="62" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiEndpoint_1a5e2353ef97f2b1256827834d93e03ceb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiEndpoint::UnlockLooper</definition>
        <argsstring>() const</argsstring>
        <name>UnlockLooper</name>
        <qualifiedname>BMidiEndpoint::UnlockLooper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="67" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all MIDI endpoints. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> is the abstract base class that represents either a producer or consumer endpoint. It may be used to obtain the state, name, properties, or system-wide ID of the object. <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> also provides the ability to change the name and properties of endpoints that were created locally.</para>
<para>Remember, you cannot call the destructor of <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> and its subclasses directly. Endpoint objects are destructed automatically when their reference count drops to zero. If necessary, the destructor of a local endpoint first breaks off any connections and <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref>&apos;s the endpoint before it is deleted. However, for good style and bonus points you should really <ref refid="classBMidiProducer_1a7f68b65fd703766a0fccb5d9535ea6ed" kindref="member">Disconnect() </ref> and <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister()</ref> the object yourself and not rely on the destructor to do this. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BMidiConsumer</label>
        <link refid="classBMidiConsumer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BMidiEndpoint</label>
        <link refid="classBMidiEndpoint"/>
      </node>
      <node id="3">
        <label>BMidiLocalConsumer</label>
        <link refid="classBMidiLocalConsumer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BMidiLocalProducer</label>
        <link refid="classBMidiLocalProducer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BMidiProducer</label>
        <link refid="classBMidiProducer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" line="16" column="1" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiEndpoint.h" bodystart="17" bodyend="79"/>
    <listofallmembers>
      <member refid="classBMidiEndpoint_1a02f4d25be3f1d32e28b6c370e84bff99" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>_reserved</name></member>
      <member refid="classBMidiEndpoint_1aa7ee010bc80ffbd9ec1b74bf236a0194" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved1</name></member>
      <member refid="classBMidiEndpoint_1ac30fc1d038589d7267980d7531476db4" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved2</name></member>
      <member refid="classBMidiEndpoint_1a93dc698558775869cbbf2682ddd9b2a5" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved3</name></member>
      <member refid="classBMidiEndpoint_1adae31d1e0b9c1b6df9f6e274307c2e50" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved4</name></member>
      <member refid="classBMidiEndpoint_1a8dead721fe5798fac17a822e496b3c48" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved5</name></member>
      <member refid="classBMidiEndpoint_1a5c3870904cc517f7e2ebaff7f3b4bd50" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved6</name></member>
      <member refid="classBMidiEndpoint_1a716439edef5c9b2dba50c42be8c539ec" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved7</name></member>
      <member refid="classBMidiEndpoint_1aeb5f1d360e3c2f9fbc8a5658903d0f5c" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>_Reserved8</name></member>
      <member refid="classBMidiEndpoint_1a504efce89310e4473c4a9ae77da7a641" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>Acquire</name></member>
      <member refid="classBMidiEndpoint_1afae9ba29fb61aad6bc8cc9c506a8f487" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>BMidiEndpoint</name></member>
      <member refid="classBMidiEndpoint_1a793694cb10a27c8431df02eaec709c60" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fId</name></member>
      <member refid="classBMidiEndpoint_1aff2657598755e047c7ef260e5305b5fc" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fIsAlive</name></member>
      <member refid="classBMidiEndpoint_1ac48110e916b46242382f8a2c265da253" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fIsConsumer</name></member>
      <member refid="classBMidiEndpoint_1a4fc03e24471bf056c0a6d30024af2e83" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fIsLocal</name></member>
      <member refid="classBMidiEndpoint_1ae5d57bdfd5fd88c6505b6124cfffd071" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fIsRegistered</name></member>
      <member refid="classBMidiEndpoint_1ab55a714870433d2a987cdcffd46fc274" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fName</name></member>
      <member refid="classBMidiEndpoint_1a7033872b5a17d28b98ade4ad7473c2db" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fProperties</name></member>
      <member refid="classBMidiEndpoint_1a7d975362246ce585a8d64ea0d2763433" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>fRefCount</name></member>
      <member refid="classBMidiEndpoint_1a5c6c8dc7f451e7c908df05319f24a64f" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>GetProperties</name></member>
      <member refid="classBMidiEndpoint_1a3f5b840617bf84cddbca779c470cef17" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>ID</name></member>
      <member refid="classBMidiEndpoint_1ae20fe83d79bd0d08cb818d3dda0fdc23" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>IsConsumer</name></member>
      <member refid="classBMidiEndpoint_1a3edca82a4aa8bfa2aad3874cc9192b4d" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>IsLocal</name></member>
      <member refid="classBMidiEndpoint_1a20623d6d71190a701e9bccc23e646e6a" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>IsPersistent</name></member>
      <member refid="classBMidiEndpoint_1a2555a377a070eaea225ca40b9e5bb696" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>IsProducer</name></member>
      <member refid="classBMidiEndpoint_1ab4f3acb0c05379ee179eab1d32061efd" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>IsRegistered</name></member>
      <member refid="classBMidiEndpoint_1a11fc9a34aee618e137d9affcd67a7b36" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>IsRemote</name></member>
      <member refid="classBMidiEndpoint_1a0c9f93e72f5302f6f0c631e5a4f0ddb2" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>IsValid</name></member>
      <member refid="classBMidiEndpoint_1a3b16f913c756342cf66dddba1d73ff74" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>LockLooper</name></member>
      <member refid="classBMidiEndpoint_1a685e4d64cfbf56e30c7a3c5849fc72d8" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>Name</name></member>
      <member refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>Register</name></member>
      <member refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>Release</name></member>
      <member refid="classBMidiEndpoint_1af955e56bc2255ca671be3145833d26b2" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>SendChangeRequest</name></member>
      <member refid="classBMidiEndpoint_1a5de1db8f8050f683c61226804882ff2d" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>SendRegisterRequest</name></member>
      <member refid="classBMidiEndpoint_1afa167950f7b60558712224798f7e50aa" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>SetName</name></member>
      <member refid="classBMidiEndpoint_1a58cf2c701ba336b640067db743ba9746" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>SetProperties</name></member>
      <member refid="classBMidiEndpoint_1a5e2353ef97f2b1256827834d93e03ceb" prot="private" virt="non-virtual"><scope>BMidiEndpoint</scope><name>UnlockLooper</name></member>
      <member refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" prot="public" virt="non-virtual"><scope>BMidiEndpoint</scope><name>Unregister</name></member>
      <member refid="classBMidiEndpoint_1ab1360adb8418e35698dbb098b726d1b4" prot="private" virt="virtual"><scope>BMidiEndpoint</scope><name>~BMidiEndpoint</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
