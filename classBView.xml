<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBView" kind="class" language="C++" prot="public">
    <compoundname>BView</compoundname>
    <basecompoundref refid="classBHandler" prot="public" virt="non-virtual">BHandler</basecompoundref>
    <derivedcompoundref refid="classBBox" prot="public" virt="non-virtual">BBox</derivedcompoundref>
    <derivedcompoundref refid="classBCardView" prot="public" virt="non-virtual">BCardView</derivedcompoundref>
    <derivedcompoundref refid="classBControl" prot="public" virt="non-virtual">BControl</derivedcompoundref>
    <derivedcompoundref refid="classBDragger" prot="public" virt="non-virtual">BDragger</derivedcompoundref>
    <derivedcompoundref refid="classBGridView" prot="public" virt="non-virtual">BGridView</derivedcompoundref>
    <derivedcompoundref refid="classBGroupView" prot="public" virt="non-virtual">BGroupView</derivedcompoundref>
    <derivedcompoundref refid="classBListView" prot="public" virt="non-virtual">BListView</derivedcompoundref>
    <derivedcompoundref refid="classBMenu" prot="public" virt="non-virtual">BMenu</derivedcompoundref>
    <derivedcompoundref refid="classBMenuField" prot="public" virt="non-virtual">BMenuField</derivedcompoundref>
    <derivedcompoundref refid="classBScrollBar" prot="public" virt="non-virtual">BScrollBar</derivedcompoundref>
    <derivedcompoundref refid="classBScrollView" prot="public" virt="non-virtual">BScrollView</derivedcompoundref>
    <derivedcompoundref refid="classBSeparatorView" prot="public" virt="non-virtual">BSeparatorView</derivedcompoundref>
    <derivedcompoundref refid="classBSplitView" prot="public" virt="non-virtual">BSplitView</derivedcompoundref>
    <derivedcompoundref refid="classBStatusBar" prot="public" virt="non-virtual">BStatusBar</derivedcompoundref>
    <derivedcompoundref refid="classBStringView" prot="public" virt="non-virtual">BStringView</derivedcompoundref>
    <derivedcompoundref refid="classBTabView" prot="public" virt="non-virtual">BTabView</derivedcompoundref>
    <derivedcompoundref refid="classBTextView" prot="public" virt="non-virtual">BTextView</derivedcompoundref>
      <sectiondef kind="user-defined">
      <header>Archiving</header>
      <memberdef kind="function" id="classBView_1ab6de1b48cbc3ef15a0d02113036f002d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::Archive</definition>
        <argsstring>(BMessage *archive, bool deep=true) const</argsstring>
        <name>Archive</name>
        <qualifiedname>BView::Archive</qualifiedname>
        <reimplements refid="classBHandler_1ac2711ccff5e7f711244c88a5642c83db">Archive</reimplements>
        <reimplementedby refid="classBBox_1abd1a762e132a6196076617cee1eb81ac">Archive</reimplementedby>
        <reimplementedby refid="classBMenu_1a71bed24f541bdfb690863118ce3f716b">Archive</reimplementedby>
        <reimplementedby refid="classBMenuBar_1af4ae9bcc3c1cbe560e745c9868fb9c5f">Archive</reimplementedby>
        <reimplementedby refid="classBMenuField_1ada677e4339d5a5eca5c945c4165b6a3e">Archive</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1af590f60f193f47989f63c34dda0e6916">Archive</reimplementedby>
        <reimplementedby refid="classBPictureButton_1ab476f82e9d75a3b4a9b54ca35d1ad036">Archive</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1af81e6dc2ddcc3063eb33a1a5cf3b9088">Archive</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a2d8cea93fe440bbed02685c135b0f802">Archive</reimplementedby>
        <reimplementedby refid="classBScrollView_1a7858c5f97152c910831db817b80f5f95">Archive</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a05e0e95a3cee49d1fa7f1a48e26ae20b">Archive</reimplementedby>
        <reimplementedby refid="classBStringView_1adbafb44b6614c69a645d3e2de818c5f5">Archive</reimplementedby>
        <reimplementedby refid="classBTextControl_1af68449ec551e8a089a441fd270954b99">Archive</reimplementedby>
        <reimplementedby refid="classBTextView_1a0f3fb624378a2d13617773713efedd98">Archive</reimplementedby>
        <reimplementedby refid="classBButton_1adce5e4839a58c3bb85965398a490d720">Archive</reimplementedby>
        <reimplementedby refid="classBChannelControl_1aa71189c8b008cb3329c17b58f786617e">Archive</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a75511a8252ef3ffa1177f57af97b67ca">Archive</reimplementedby>
        <reimplementedby refid="classBColorControl_1a6437907efd1d39a492db1f55b5f4dc36">Archive</reimplementedby>
        <reimplementedby refid="classBControl_1a2581a447a34eef102c62d0e998155290">Archive</reimplementedby>
        <reimplementedby refid="classBDragger_1aece5cd86ccd46a23f1188697f4bffa55">Archive</reimplementedby>
        <reimplementedby refid="classBListView_1a89277e72296cc9ec516777e000f100e3">Archive</reimplementedby>
        <reimplementedby refid="classBRadioButton_1aeed1a7a2142b1ac7b1499234f884caae">Archive</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1ac216b412d86275115516b886c4f9b578">Archive</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1a41d7d43196ee70cc26986f95b5c3e262">Archive</reimplementedby>
        <reimplementedby refid="classBSplitView_1a2c4ab843dd62815ebeb7201e21d3199b">Archive</reimplementedby>
        <reimplementedby refid="classBTabView_1a3354f9343238295b7ed0a24339106cd5">Archive</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>data</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Archives the object into the <emphasis>data</emphasis> message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="classBMessage" kindref="compound">BMessage</ref> object to archive the object into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deep</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to archive child views as well.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went well or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object was archived successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Ran out of memory while archiving the object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="162" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a730a46bedfe8db2176e4c331330e7924" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *</type>
        <definition>BArchivable * BView::Instantiate</definition>
        <argsstring>(BMessage *archive)</argsstring>
        <name>Instantiate</name>
        <qualifiedname>BView::Instantiate</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>data</defname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classBView" kindref="compound">BView</ref> object from the <emphasis>data</emphasis> message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A newly created <ref refid="classBView" kindref="compound">BView</ref> object or <computeroutput>NULL</computeroutput> if the message doesn&apos;t contain an archived <ref refid="classBView" kindref="compound">BView</ref>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="161" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Hook Methods</header>
      <memberdef kind="function" id="classBView_1ab7bd04272afed8b28bf57d1de33cbe05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::AllUnarchived</definition>
        <argsstring>(const BMessage *archive)</argsstring>
        <name>AllUnarchived</name>
        <qualifiedname>BView::AllUnarchived</qualifiedname>
        <reimplements refid="classBArchivable_1a2b1d74c147ea18e4b4bfacd42f11e0d2">AllUnarchived</reimplements>
        <reimplementedby refid="classBScrollView_1adfed255a897cd481127f6b911b329c3d">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBMenuField_1ad7e9ecb63a3df86c848bf8a9e7409ee7">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBSplitView_1a5c4cc359d801e27e39f28469c24bbd76">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBTabView_1a6cc6ca514c10001b8610e5937f96b48e">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBTextControl_1abc5bfb77b1ab96dddec5c37d76657a89">AllUnarchived</reimplementedby>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>from</defname>
        </param>
        <briefdescription>
<para>Hook method called when all views have been unarchived. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="164" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a561e82ed41cbb93d3bacf371787497bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::AllArchived</definition>
        <argsstring>(BMessage *archive) const</argsstring>
        <name>AllArchived</name>
        <qualifiedname>BView::AllArchived</qualifiedname>
        <reimplements refid="classBArchivable_1a4075315c407443a3b0dbb3d7551b53c9">AllArchived</reimplements>
        <reimplementedby refid="classBMenuField_1ae8acba317c58f2767aae7956974536c9">AllArchived</reimplementedby>
        <reimplementedby refid="classBSplitView_1a8677380375e36b4bc2380a929dc69a69">AllArchived</reimplementedby>
        <reimplementedby refid="classBTextControl_1a5b73780d200fa037f99f6cec5cbf74ec">AllArchived</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>into</defname>
        </param>
        <briefdescription>
<para>Hook method called when all views have been archived. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="165" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae8117cb4634f4a4413988eea07cf75a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::AttachedToWindow</definition>
        <argsstring>()</argsstring>
        <name>AttachedToWindow</name>
        <qualifiedname>BView::AttachedToWindow</qualifiedname>
        <reimplementedby refid="classBBox_1a79f7b5e92fd6c2976f6b82d6bb0113e4">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBButton_1a8514d1d173d5a852f52354107dedce7f">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBChannelControl_1aaed17a427fd040df721062ea646ee360">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a896559c9ffdf6c29fec0071f7e74326e">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a6975f3d06240cfc32d9422163d21760c">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBColorControl_1a0a4c898ee218990de45a53a90663d12e">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBControl_1a460fa93bcdd5309d8d86f8bfcd53b584">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBDragger_1a6f1804718035a60dc652691694e004a1">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBListView_1a172497b23a2c4ab6da666363ad51d90e">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBMenu_1af38b2e6bf69d918e37bcf1e18711bb37">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a48b3c56f65222c9dc3e5faca5eb80319">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBMenuField_1a63f6e3879897c8b42a6eb49667b84b2b">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBOptionPopUp_1a5c301cf20c932c72700eea57a427e68d">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBPictureButton_1ae6b51e465aa9807d707316a00b6fe22d">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a2bb158bea8366e9afc2f10c440042585">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBRadioButton_1abacc25df48c377cd37ae3cb5eaf3917d">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a0b4d0fc3f451b05a0598a4e3f4adce9b">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBScrollView_1a8ecce6ba6ebd8825a39717796b187960">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBSplitView_1a5864715e720854c6a6947f0f730e88c5">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBStatusBar_1ad5d62923df2112d6bde6c51f85f8db8a">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBStringView_1a4205042958e6bb45dea702bc35667df9">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBTabView_1a88bc95e53bc3a3cbc7fddfb7b9ce736a">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBTextControl_1ae3adb78b19be6c737882972695c5f84f">AttachedToWindow</reimplementedby>
        <reimplementedby refid="classBTextView_1a73a892fb4d5e7e3575064f326b67867a">AttachedToWindow</reimplementedby>
        <briefdescription>
<para>Hook method called when the object is attached to a window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="167" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6d6379e0993bd525f2cac5f848718870" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::AllAttached</definition>
        <argsstring>()</argsstring>
        <name>AllAttached</name>
        <qualifiedname>BView::AllAttached</qualifiedname>
        <reimplementedby refid="classBBox_1a7d2b3254a2179ba55a133450c7f6344b">AllAttached</reimplementedby>
        <reimplementedby refid="classBButton_1a9a888bcbcdcf8a924b6010ef6e7f46a9">AllAttached</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1abfb89e632dec0539147b79e770090b23">AllAttached</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a3d555861d9a8ce0be86193cac484f1ac">AllAttached</reimplementedby>
        <reimplementedby refid="classBColorControl_1a0429d5c2f2a748e50b556e03b60c3f84">AllAttached</reimplementedby>
        <reimplementedby refid="classBControl_1a2abeec720f873da7c4bc3a2709ff8be0">AllAttached</reimplementedby>
        <reimplementedby refid="classBDragger_1ac417cb3cb2f104981fbf37533425ed39">AllAttached</reimplementedby>
        <reimplementedby refid="classBListView_1ae916566577d7d1b310d00861b26ef651">AllAttached</reimplementedby>
        <reimplementedby refid="classBMenu_1a2540cab39de9a2ed1a3e71e2c8ec52dc">AllAttached</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ac02982cd861af6eb4771f260fcf50ed8">AllAttached</reimplementedby>
        <reimplementedby refid="classBMenuField_1a55e723717b6ec14973ed513cb50a42c2">AllAttached</reimplementedby>
        <reimplementedby refid="classBOptionPopUp_1a9fb0e8fefa909b2f7a25d0b2a3ba473e">AllAttached</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a991cfdba0dd36ccebc812c10ced9f4a0">AllAttached</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a1d263b8ec7ccde013c7a462c702052dd">AllAttached</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1ae9b5eaf528d9fc3924e29ba05b0c5675">AllAttached</reimplementedby>
        <reimplementedby refid="classBRadioButton_1af941f0cf47d024337e30653bc4dcd5d2">AllAttached</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a36e2edccc25e4aa196ae7e940b4f072b">AllAttached</reimplementedby>
        <reimplementedby refid="classBScrollView_1aa36878223be666cb2f7b1a1c20cee965">AllAttached</reimplementedby>
        <reimplementedby refid="classBStatusBar_1ae76d315835000366025553b7db17c798">AllAttached</reimplementedby>
        <reimplementedby refid="classBStringView_1a01bf8802d1b9506079e4d3399ea720f9">AllAttached</reimplementedby>
        <reimplementedby refid="classBTabView_1a8243f114472f895f2491b1bf051da93d">AllAttached</reimplementedby>
        <reimplementedby refid="classBTextControl_1abae889f35648d9a08f5b997986381c06">AllAttached</reimplementedby>
        <reimplementedby refid="classBTextView_1a525a3a00911c36ee0acf05daa2ff8716">AllAttached</reimplementedby>
        <briefdescription>
<para>Similar to <ref refid="classBView_1ae8117cb4634f4a4413988eea07cf75a0" kindref="member">AttachedToWindow()</ref> but this method is triggered after all child views have already been attached to a window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="168" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8abc2ea500951a0a22cf018e958ba791" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::DetachedFromWindow</definition>
        <argsstring>()</argsstring>
        <name>DetachedFromWindow</name>
        <qualifiedname>BView::DetachedFromWindow</qualifiedname>
        <reimplementedby refid="classBBox_1a7fec55f824c589025110d7562b55ee91">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBButton_1a2324e5b37fa2c3c4e8d2c63763172d12">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBChannelControl_1a2ba05bb52a1d79b9e840c28e08531e98">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a0e62e869e80944ad32a2c0dc8b813e35">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a9d332c16b89814d6255fa7ff96827943">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBColorControl_1ae1b42162705172630cf7961d4af876f2">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBControl_1a588fea0ded4cdc4c1b4fb5d1f5565f27">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBDragger_1a8dcd78025adb8eb65fce16c5914c880d">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBListView_1a06439547091d244eec75cdb9b078d5ac">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBMenu_1a51b79eb8595e20234f2fefabf7899e21">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBMenuBar_1aaf4b5448201a1d30c969ddc20f1d492d">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBMenuField_1aeea6d476c34d48f1325956c64b4dd70d">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a7c71e9e2a55689bc05d63ef4c7a7cfde">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBPictureButton_1ac5c3a2f7ac5f4876cdc6f74b467b763a">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a9b5a2a077b54a2c9e451d0f916358420">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a0c66b7a3964716897d10713a6880bc9c">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a844007152b75523f25890ce70c123254">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBScrollView_1af455b68fa6dd09a825c0afc6aed9898e">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBStatusBar_1adedd63326aac3a6d73267ea6f1244fa1">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBStringView_1a8b690fbe586fa7136c6e795b3c55af65">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBTabView_1a6fdc45a6555af003617cfac94c3866ae">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBTextControl_1a6a6832d8df544412d84839a1011c6da0">DetachedFromWindow</reimplementedby>
        <reimplementedby refid="classBTextView_1a79356aad15f3cd52203d81cb5b163461">DetachedFromWindow</reimplementedby>
        <briefdescription>
<para>Hook method called when the object is detached from a window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="169" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a19dd2213f4b953b54524d7f523d9b406" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::AllDetached</definition>
        <argsstring>()</argsstring>
        <name>AllDetached</name>
        <qualifiedname>BView::AllDetached</qualifiedname>
        <reimplementedby refid="classBBox_1aeb7d158b1ac7aecfcd17eabeecbcc85b">AllDetached</reimplementedby>
        <reimplementedby refid="classBButton_1a4c8d87c3ceb9b867dae9adc68526cb0b">AllDetached</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a4339e7bc207a4c3887a4aef63bdff817">AllDetached</reimplementedby>
        <reimplementedby refid="classBCheckBox_1aabe966d7094a102a029eb86f53156b52">AllDetached</reimplementedby>
        <reimplementedby refid="classBColorControl_1a3053cfbbb6aeff2b1fe9852a91fe6364">AllDetached</reimplementedby>
        <reimplementedby refid="classBControl_1a991c0eecd0279cbc27c5f9a0fbc37920">AllDetached</reimplementedby>
        <reimplementedby refid="classBDragger_1a257579686db16a793c1e6fc0b8c6a100">AllDetached</reimplementedby>
        <reimplementedby refid="classBListView_1a5f97a604910fbf576aa1acde9e4b8f36">AllDetached</reimplementedby>
        <reimplementedby refid="classBMenu_1a40c41c3d2d1a8e23dfad97039615b208">AllDetached</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a0c548adc7796603d8d686a401817d0d9">AllDetached</reimplementedby>
        <reimplementedby refid="classBMenuField_1a635e98f17b0268ad3454579516852c8e">AllDetached</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a677488c290fcd8c263472840e06ea2b2">AllDetached</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a699d006ff7d23e3448ee8b23555815c4">AllDetached</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a6dda50def6c5f6fd880595d1ac0d7ce1">AllDetached</reimplementedby>
        <reimplementedby refid="classBRadioButton_1aa821c3cb4a2f47e3af2f7bde5b129427">AllDetached</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a707a012fa7d5c7f66cd54f31f0d42175">AllDetached</reimplementedby>
        <reimplementedby refid="classBScrollView_1a2597e5c03b836e4c79c05a19e5e1e338">AllDetached</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a1525e8925eaa5c372da8756b13b45e0b">AllDetached</reimplementedby>
        <reimplementedby refid="classBStringView_1afdb3c189ea4a0f8e5d5472a6cf50caa7">AllDetached</reimplementedby>
        <reimplementedby refid="classBTabView_1aaaa411a7931a91b7b840d2db3785ed04">AllDetached</reimplementedby>
        <reimplementedby refid="classBTextControl_1ad47ac17bae76e2be8786ec25ebd30b89">AllDetached</reimplementedby>
        <reimplementedby refid="classBTextView_1a2ff4cd2084da7717a7c08c7c95651614">AllDetached</reimplementedby>
        <briefdescription>
<para>Similar to <ref refid="classBView_1ae8117cb4634f4a4413988eea07cf75a0" kindref="member">AttachedToWindow()</ref> but this method is triggered after all child views have already been detached from a window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="170" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aca0a16b0e04288e1fdc0b63690ea7a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::MessageReceived</definition>
        <argsstring>(BMessage *message)</argsstring>
        <name>MessageReceived</name>
        <qualifiedname>BView::MessageReceived</qualifiedname>
        <reimplements refid="classBHandler_1aeecda5017e0081db617f23bbff71fb53">MessageReceived</reimplements>
        <reimplementedby refid="classBBox_1a30d9348112e19b908181b037edc291de">MessageReceived</reimplementedby>
        <reimplementedby refid="classBButton_1a9954aa8549ffb7cddd1a401997fd07a7">MessageReceived</reimplementedby>
        <reimplementedby refid="classBChannelControl_1a7c3c5174a2f31f0a24c3fe4258d372da">MessageReceived</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1aa60391cfc92b6c1a59ae7e92aa1f5bae">MessageReceived</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a668832dfbcab06cad06d0fb7d9a6244a">MessageReceived</reimplementedby>
        <reimplementedby refid="classBColorControl_1a9cf939fb5e7ef82a70e0792ccc0cfc1f">MessageReceived</reimplementedby>
        <reimplementedby refid="classBControl_1a19960b4d0a96144f73065a6ea1f2f8e2">MessageReceived</reimplementedby>
        <reimplementedby refid="classBDragger_1acdf8b8402a8e253ca24ab01ba63b914c">MessageReceived</reimplementedby>
        <reimplementedby refid="classBListView_1ac00efce3ca37ce6e89c3f3fb5717311c">MessageReceived</reimplementedby>
        <reimplementedby refid="classBMenu_1aca12e6b863279cc62772ac13ef286d31">MessageReceived</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a7d7c1d1674e059b56c82c81e381d4455">MessageReceived</reimplementedby>
        <reimplementedby refid="classBMenuField_1ab73739dc3316044b9269718bd0852d39">MessageReceived</reimplementedby>
        <reimplementedby refid="classBOptionControl_1a6bff9c89ab78d899edfb88d3f9e2300c">MessageReceived</reimplementedby>
        <reimplementedby refid="classBOptionPopUp_1a05b397e2521fe0b10ae3a2b05e78acae">MessageReceived</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1aad47f3bf68a98024413aa06a45b0bdad">MessageReceived</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a7b6a5dc266664f155b6191d101ce48cd">MessageReceived</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a4b5937dbd7baa9d98b5368d6de9ca23c">MessageReceived</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a2f07af2fe9eedce7ffecd2b29a4b5d6a">MessageReceived</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a8d578e9e134aeaafdc6dc542e2d214f7">MessageReceived</reimplementedby>
        <reimplementedby refid="classBScrollView_1ad06771333c1897571f984ca9e533b69d">MessageReceived</reimplementedby>
        <reimplementedby refid="classBSplitView_1ad4737f5224faa2d34c84299750ab92ec">MessageReceived</reimplementedby>
        <reimplementedby refid="classBStatusBar_1aee4044255aaae32db5a0d8bc2046840d">MessageReceived</reimplementedby>
        <reimplementedby refid="classBStringView_1a03521ef18f82081e3a54f404217c2c6c">MessageReceived</reimplementedby>
        <reimplementedby refid="classBTabView_1a5827436caab3b27791f2280d2d151624">MessageReceived</reimplementedby>
        <reimplementedby refid="classBTextControl_1afad72eca02699a6577c4bc0949e1c9ae">MessageReceived</reimplementedby>
        <reimplementedby refid="classBTextView_1a4d7d7990e57ce7286f78698f27c89e60">MessageReceived</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Handle <emphasis>message</emphasis> received by the associated looper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>message</emphasis> received by the associated looper.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBHandler_1aeecda5017e0081db617f23bbff71fb53" kindref="member">BHandler::MessageReceived()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="172" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa55014241fc2f5556415850692b52db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::Draw</definition>
        <argsstring>(BRect updateRect)</argsstring>
        <name>Draw</name>
        <qualifiedname>BView::Draw</qualifiedname>
        <reimplementedby refid="classBStringView_1a8b9e9c371957ddedaf6a22de5d1f216f">Draw</reimplementedby>
        <reimplementedby refid="classBBox_1a36f1bd498f8c0470ee7e01457795cf63">Draw</reimplementedby>
        <reimplementedby refid="classBButton_1adc0ec950461375f62cf5da3355aebf53">Draw</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a08090615a13b65d7877b2e38958fb725">Draw</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a0dfaafaf971ca13f8d882de6fc8814e4">Draw</reimplementedby>
        <reimplementedby refid="classBColorControl_1a839fb51f1aa457ef7efb8fbc8cf84553">Draw</reimplementedby>
        <reimplementedby refid="classBDragger_1aa8f8a7bfd289a37242695216db17093c">Draw</reimplementedby>
        <reimplementedby refid="classBListView_1a7c284b74a68c3f15e7266ac7bca65d24">Draw</reimplementedby>
        <reimplementedby refid="classBMenu_1a239982fa92e2f5a9c2ed0c267b7470b3">Draw</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a50f02992ee792e7f66b8f3148e75dcc8">Draw</reimplementedby>
        <reimplementedby refid="classBMenuField_1afae9ce554a41405c5d272c349e7fee57">Draw</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a1fecb18731921b32f7fe926a75e0f48c">Draw</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a34ec883efcfff5f3dc9ab3095d8050b3">Draw</reimplementedby>
        <reimplementedby refid="classBScrollBar_1adc34c89c750a72fa6d09b61262cba5e4">Draw</reimplementedby>
        <reimplementedby refid="classBScrollView_1a1026d80f4935375a237e9d567a0054d1">Draw</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1a542695a2d0bf49db1670e0de9b7108ec">Draw</reimplementedby>
        <reimplementedby refid="classBSplitView_1ae760c25461d9565a0868d48b7061af46">Draw</reimplementedby>
        <reimplementedby refid="classBStatusBar_1aee5177f0609d82b4cff6ad7aa71ce351">Draw</reimplementedby>
        <reimplementedby refid="classBTabView_1adafa3b55c2565daffe2c7df0f7c50fc7">Draw</reimplementedby>
        <reimplementedby refid="classBTextControl_1a55cee4b3b608fa7be0a9ca4bead151ef">Draw</reimplementedby>
        <reimplementedby refid="classBTextView_1ad1b1f366a371aaecdbc39e2b13f6100b">Draw</reimplementedby>
        <reimplementedby refid="classBChannelControl_1ae898048a4dab959bb37dfbbbdd0bc8f4">Draw</reimplementedby>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>updateRect</declname>
        </param>
        <briefdescription>
<para>Draws the area of the view that intersects <emphasis>updateRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Derived classes should override this method to draw their view.</para>
<para><simplesect kind="remark"><para>This is an hook method called by the Interface Kit, you don&apos;t have to call it yourself. If you need to forcefully redraw the view consider calling <ref refid="classBView_1adfced0dcb244e199f872fdbd48349a05" kindref="member">Invalidate()</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>updateRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to be drawn.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="185" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::MouseDown</definition>
        <argsstring>(BPoint where)</argsstring>
        <name>MouseDown</name>
        <qualifiedname>BView::MouseDown</qualifiedname>
        <reimplementedby refid="classBBox_1a52b8a5339fffe5749a9c18853fd8dd83">MouseDown</reimplementedby>
        <reimplementedby refid="classBStringView_1aebc567839113910f4e83363e779ffd88">MouseDown</reimplementedby>
        <reimplementedby refid="classBButton_1a479d27a48b957709b47159360c04157f">MouseDown</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a858647630d03d081d3a2817e00f2e548">MouseDown</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a641e4f5e6cf5b87302af5feb146969a0">MouseDown</reimplementedby>
        <reimplementedby refid="classBColorControl_1a45399dd2cd33d8761709ee9e378fab56">MouseDown</reimplementedby>
        <reimplementedby refid="classBControl_1aae264c07bf8006acf1fa96ceedc5f74d">MouseDown</reimplementedby>
        <reimplementedby refid="classBDragger_1acc770fc2b6e0e248804252e4d11c234e">MouseDown</reimplementedby>
        <reimplementedby refid="classBListView_1aad39bfe4a5db5d70a8adbf1c41b8edf3">MouseDown</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a0aa84693746c1cfe671c48a4dcc654c6">MouseDown</reimplementedby>
        <reimplementedby refid="classBMenuField_1a0f35ede494cc2169455c429798e575ae">MouseDown</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1ae974e26e01f4f31a2b7eb64d91f1a22b">MouseDown</reimplementedby>
        <reimplementedby refid="classBPictureButton_1aee724ca332fa7a49b2ea2fa5c680f8a4">MouseDown</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a3683f05e2d65018ec35c684b6bca1c77">MouseDown</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a0aef53a65bca065d5c23a254fbf87c82">MouseDown</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a20e8f54dd49d2bd67f0415c9233dbc24">MouseDown</reimplementedby>
        <reimplementedby refid="classBScrollView_1aa89bae025998624f2080d9f180bf4c94">MouseDown</reimplementedby>
        <reimplementedby refid="classBSplitView_1a00b41035774b35159b7f0d33da769eeb">MouseDown</reimplementedby>
        <reimplementedby refid="classBStatusBar_1af19565c2448a379a5b9a71829fb7a7d9">MouseDown</reimplementedby>
        <reimplementedby refid="classBTabView_1a0300bd5b05234996a9eab7c6afc9479e">MouseDown</reimplementedby>
        <reimplementedby refid="classBTextControl_1ab1a5a0a5efb5e08a1ec98432529f02d9">MouseDown</reimplementedby>
        <reimplementedby refid="classBTextView_1a581a2b2877b29d275771ae5010d6706d">MouseDown</reimplementedby>
        <reimplementedby refid="classBChannelControl_1a00e4315bf31cfe8b0a071cf5766427a8">MouseDown</reimplementedby>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Hook method called when a mouse button is pressed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The point on the screen where to mouse pointer is when the mouse button is pressed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="186" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acdb92b30069157b2e3c522a3ef9d6ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::MouseUp</definition>
        <argsstring>(BPoint where)</argsstring>
        <name>MouseUp</name>
        <qualifiedname>BView::MouseUp</qualifiedname>
        <reimplementedby refid="classBBox_1aa493fe0b7f8c211747f8ad78d0490a30">MouseUp</reimplementedby>
        <reimplementedby refid="classBColorControl_1a22dc58e1aebc262b91d105ae8db1b779">MouseUp</reimplementedby>
        <reimplementedby refid="classBStringView_1a53bd5b0c21fc5f55f7ebf239b3b5586c">MouseUp</reimplementedby>
        <reimplementedby refid="classBButton_1abdf9eedcccc9bbf8edce48b32361a749">MouseUp</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a0d9fccc6e4a04d86c1fbf78ae0cb6eba">MouseUp</reimplementedby>
        <reimplementedby refid="classBCheckBox_1ae24408c8af1f1e0792564b0bb4109547">MouseUp</reimplementedby>
        <reimplementedby refid="classBControl_1aeef31f13aee4d5d0b3dbb0f7e12beb39">MouseUp</reimplementedby>
        <reimplementedby refid="classBDragger_1ab80ac5b1cb42d9f95ebb221c2fbb3573">MouseUp</reimplementedby>
        <reimplementedby refid="classBListView_1a008356d002e19a7b3f2633e4298b4053">MouseUp</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a4781bbe6cd7ccff992b0c12f2c4ea4b7">MouseUp</reimplementedby>
        <reimplementedby refid="classBMenuField_1aee41e24ee5b2055a9714112d61b86b9d">MouseUp</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a65d774552d88ba39b6c4bb5bcccb048a">MouseUp</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a0770c7585a64a6c5cc1a960f2a01569b">MouseUp</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1ad3e5938c019d6cfdb070fa16a3b6142e">MouseUp</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a8cfb56dd13ec44c09cf6b2790c155fc2">MouseUp</reimplementedby>
        <reimplementedby refid="classBScrollBar_1ac726ce78354c6c85dbe7c64f6db46e1d">MouseUp</reimplementedby>
        <reimplementedby refid="classBScrollView_1a23f2e9f5ea9ccadf9d99799af63fa293">MouseUp</reimplementedby>
        <reimplementedby refid="classBSplitView_1a6ff5943b9c00dc30a2803681f0aa08c2">MouseUp</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a4c489713a857fa7e483c105da46012a7">MouseUp</reimplementedby>
        <reimplementedby refid="classBTabView_1a9f889b22d3b00132a15b82c6d322a21a">MouseUp</reimplementedby>
        <reimplementedby refid="classBTextControl_1aa9f01c01c01799296e81f3a075890db5">MouseUp</reimplementedby>
        <reimplementedby refid="classBTextView_1a72a0cd6839b541db996d751f240e59a1">MouseUp</reimplementedby>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Hook method called when a mouse button is released. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The point on the screen where to mouse pointer is when the mouse button is released.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="187" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::MouseMoved</definition>
        <argsstring>(BPoint where, uint32 code, const BMessage *dragMessage)</argsstring>
        <name>MouseMoved</name>
        <qualifiedname>BView::MouseMoved</qualifiedname>
        <reimplementedby refid="classBColorControl_1af1aa066eeb6541eaf1c3c72d72758a5d">MouseMoved</reimplementedby>
        <reimplementedby refid="classBBox_1a70dd1fd1fac643b8b95d51b199b894e5">MouseMoved</reimplementedby>
        <reimplementedby refid="classBStringView_1a58b93d2ff9ba970bec85f1d2a886d6fd">MouseMoved</reimplementedby>
        <reimplementedby refid="classBButton_1a8ba8b18062ea15ecd55d83458885adf1">MouseMoved</reimplementedby>
        <reimplementedby refid="classBCheckBox_1ac18ca09f358bcd8acf7c5c00572ddfd9">MouseMoved</reimplementedby>
        <reimplementedby refid="classBControl_1aafa3507bfcf6f058d269a6e3bd6d30be">MouseMoved</reimplementedby>
        <reimplementedby refid="classBListView_1aa83292db971a1bf0801d9669052c2b78">MouseMoved</reimplementedby>
        <reimplementedby refid="classBPictureButton_1af8e6d077c64b703b0e939458508bdd75">MouseMoved</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a013acca6d097f0b6d889b9f8e32e5064">MouseMoved</reimplementedby>
        <reimplementedby refid="classBScrollBar_1aadee76484a35dd25468d2d9a47ee84e8">MouseMoved</reimplementedby>
        <reimplementedby refid="classBScrollView_1aeaa4d0c426d9c2d536fc97ab21244442">MouseMoved</reimplementedby>
        <reimplementedby refid="classBTextView_1a95bc494682c45ba41c457029639f2d55">MouseMoved</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a54f043d454c571fdc1291946c54ff214">MouseMoved</reimplementedby>
        <reimplementedby refid="classBDragger_1ae1a96fefe6ad6ebd639d974493b9982d">MouseMoved</reimplementedby>
        <reimplementedby refid="classBMenuField_1acbd5b0849384a650560940de14b6e24b">MouseMoved</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1ac15743e549a70af3f245ba0ef1e1dfad">MouseMoved</reimplementedby>
        <reimplementedby refid="classBStatusBar_1ac81efe02e62ed0a58c1eee11d365158a">MouseMoved</reimplementedby>
        <reimplementedby refid="classBTabView_1a482f5de48a2c17f2898b39602849a820">MouseMoved</reimplementedby>
        <reimplementedby refid="classBTextControl_1ae34f333c6ccd0ce7f98fe15a31973536">MouseMoved</reimplementedby>
        <reimplementedby refid="classBSplitView_1ac8e0a72e43f68b840f3e52e125023f9d">MouseMoved</reimplementedby>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>dragMessage</declname>
        </param>
        <briefdescription>
<para>Hook method called when the mouse is moved. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The new location of the mouse in the view&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_ENTERED_VIEW</computeroutput> The cursor has just entered the view.</para>
</listitem><listitem><para><computeroutput>B_INSIDE_VIEW</computeroutput> The cursor is inside the view.</para>
</listitem><listitem><para><computeroutput>B_EXITED_VIEW</computeroutput> The cursor has left the view&apos;s bounds. This only gets sent if the scope of the mouse events that the view can receive has been expanded by <ref refid="classBView_1a5d8d6b469a8a11a577d1d138cfc31162" kindref="member">SetEventMask()</ref> or <ref refid="classBView_1ae7705783d064a8613dcc6f36a2866ab2" kindref="member">SetMouseEventMask()</ref>.</para>
</listitem><listitem><para><computeroutput>B_OUTSIDE_VIEW</computeroutput> The cursor is outside the view. This only gets sent if the scope of the mouse events that the view can receive has been expanded by <ref refid="classBView_1a5d8d6b469a8a11a577d1d138cfc31162" kindref="member">SetEventMask()</ref> or <ref refid="classBView_1ae7705783d064a8613dcc6f36a2866ab2" kindref="member">SetMouseEventMask()</ref>. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dragMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>If a drag-and-drop operation is taking place this is a pointer to a <ref refid="classBMessage" kindref="compound">BMessage</ref> that holds the drag information, otherwise the pointer is <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1a5d8d6b469a8a11a577d1d138cfc31162" kindref="member">SetEventMask()</ref>, <ref refid="classBView_1ae7705783d064a8613dcc6f36a2866ab2" kindref="member">SetMouseEventMask()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a1f4f0c3c5946df1d14e6031e5e12f40b" kindref="member">DragMessage()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="188" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5b7aeff0b2608ec63e2c01153a7717f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::WindowActivated</definition>
        <argsstring>(bool active)</argsstring>
        <name>WindowActivated</name>
        <qualifiedname>BView::WindowActivated</qualifiedname>
        <reimplementedby refid="classBBox_1a7a60147068c94405f7ba53a8eaba237b">WindowActivated</reimplementedby>
        <reimplementedby refid="classBButton_1ace1f01da01eef93adbecd91ce2d49ac1">WindowActivated</reimplementedby>
        <reimplementedby refid="classBCheckBox_1af3e0b0e3afc3d2adfb2e3cf0f9bb3b82">WindowActivated</reimplementedby>
        <reimplementedby refid="classBControl_1ab665fb93df191662a1757f78555a5b21">WindowActivated</reimplementedby>
        <reimplementedby refid="classBListView_1a85153f43edc12ca463f981b92e187a11">WindowActivated</reimplementedby>
        <reimplementedby refid="classBMenuField_1a927eea4bf97ed4834e97f18e466bd952">WindowActivated</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a2c1edfc72af90482e70328b152998001">WindowActivated</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a5f15ba4b79b38cb260b2b95e52c60a83">WindowActivated</reimplementedby>
        <reimplementedby refid="classBScrollBar_1ad44b780f97678d78d96c2b1c2eff2389">WindowActivated</reimplementedby>
        <reimplementedby refid="classBScrollView_1aa3a3e20ad81fb967bc3a0fb2aeb16117">WindowActivated</reimplementedby>
        <reimplementedby refid="classBTabView_1a2935851b89461b8d5ff01b11948dd885">WindowActivated</reimplementedby>
        <reimplementedby refid="classBTextControl_1a38f83894076d23f426e1e347f7ef933d">WindowActivated</reimplementedby>
        <reimplementedby refid="classBTextView_1ad60669080665218ce09f2773b7470f2d">WindowActivated</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1aa9d3e2bfcd8fbd5901b82960c11484bf">WindowActivated</reimplementedby>
        <reimplementedby refid="classBColorControl_1acea993086cd5dd46f36e12149017930c">WindowActivated</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a5e623033adfd89d43cca5b8030fb9ccf">WindowActivated</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a2b6dcc805b8598cd268568ea167445a3">WindowActivated</reimplementedby>
        <param>
          <type>bool</type>
          <declname>active</declname>
        </param>
        <briefdescription>
<para>Hook method called when the attached window is activated or deactivated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> when the window becomes activated, <computeroutput>false</computeroutput> when the window becomes deactivated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="190" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abea50ea665ce5fcb76b32f1302a6852d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::KeyDown</definition>
        <argsstring>(const char *bytes, int32 numBytes)</argsstring>
        <name>KeyDown</name>
        <qualifiedname>BView::KeyDown</qualifiedname>
        <reimplementedby refid="classBButton_1a1946a6658404aef5e374bf37e0d276ad">KeyDown</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1acea7a9db888f42a0a20640efd9ad0a4b">KeyDown</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a4b02a354633080c08f03bdf39e1bdec6">KeyDown</reimplementedby>
        <reimplementedby refid="classBColorControl_1a94675a83e628146d8bb9670064d59242">KeyDown</reimplementedby>
        <reimplementedby refid="classBControl_1ade80a87b7da08e9b84b188c629ec36c8">KeyDown</reimplementedby>
        <reimplementedby refid="classBListView_1aed97ff09a629d740b91c8f72dcf5893a">KeyDown</reimplementedby>
        <reimplementedby refid="classBMenu_1a6c50b44b2da8caf0280854c5a250b8c2">KeyDown</reimplementedby>
        <reimplementedby refid="classBMenuField_1a9b47c6e428138e3bfc65a1407b82f003">KeyDown</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a93a3143a1e783bf5a945bfc6b58e021f">KeyDown</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a0a7cfc055ee00a2435f25138a5bbcd40">KeyDown</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a2f39aded0be52643dd5f541f62699d34">KeyDown</reimplementedby>
        <reimplementedby refid="classBTabView_1a6eca83e00f1649fbe6b6aacd3f0f66f6">KeyDown</reimplementedby>
        <reimplementedby refid="classBTextView_1a38ae9b87206a3236527d533b1f33d951">KeyDown</reimplementedby>
        <reimplementedby refid="classBChannelControl_1a37ac118342e3d4fe79faa33b88e56813">KeyDown</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Hook method called when a keyboard key is pressed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The bytes of the key combination pressed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in <emphasis>bytes</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="191" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acbc528bb70be49993bd99aa136dbb089" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::KeyUp</definition>
        <argsstring>(const char *bytes, int32 numBytes)</argsstring>
        <name>KeyUp</name>
        <qualifiedname>BView::KeyUp</qualifiedname>
        <reimplementedby refid="classBChannelSlider_1a6a6a90c05aac31c7397b2327d4ea503e">KeyUp</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Hook method called when a keyboard key is released. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The bytes of the key combination pressed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in <emphasis>bytes</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="192" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0ae8ec3e94ee3d41cb329e3df6966566" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::Pulse</definition>
        <argsstring>()</argsstring>
        <name>Pulse</name>
        <qualifiedname>BView::Pulse</qualifiedname>
        <reimplementedby refid="classBTabView_1ac5411bc039523eb177d52f9e1b357cbd">Pulse</reimplementedby>
        <reimplementedby refid="classBTextView_1ada90a85565bd3e6bbe130901299c6da8">Pulse</reimplementedby>
        <briefdescription>
<para>Hook method called when the view receives a <computeroutput>B_PULSE</computeroutput> message. </para>
        </briefdescription>
        <detaileddescription>
<para>An action is performed each time the App Server calls the <ref refid="classBView_1a0ae8ec3e94ee3d41cb329e3df6966566" kindref="member">Pulse()</ref> method. The pulse rate is set by SetPulseRate(). You can implement <ref refid="classBView_1a0ae8ec3e94ee3d41cb329e3df6966566" kindref="member">Pulse()</ref> to do anything you want. The default version does nothing. The pulse granularity is no better than once per 100,000 microseconds.</para>
<para><simplesect kind="see"><para>SetPulseRate()</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="193" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a551c22b45301e13a3ba959eece3cec7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::FrameMoved</definition>
        <argsstring>(BPoint newPosition)</argsstring>
        <name>FrameMoved</name>
        <qualifiedname>BView::FrameMoved</qualifiedname>
        <reimplementedby refid="classBScrollBar_1a8df64f7d9446f0e16c262d85391ce3dc">FrameMoved</reimplementedby>
        <reimplementedby refid="classBBox_1a4819e27795b8eb141fda945cea2c9d60">FrameMoved</reimplementedby>
        <reimplementedby refid="classBButton_1ac37b4c9e5a10b431ac7f31127c9829b5">FrameMoved</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a05c84e5cb90d5c53800c06c7c07c7b77">FrameMoved</reimplementedby>
        <reimplementedby refid="classBColorControl_1ac9b14ded26d0ae66803e4cc369837a32">FrameMoved</reimplementedby>
        <reimplementedby refid="classBDragger_1a7c4ed6ef7d4716c1485a45496a3fecbe">FrameMoved</reimplementedby>
        <reimplementedby refid="classBListView_1aeed214d88c70fa121e1531a6c2cb9ba3">FrameMoved</reimplementedby>
        <reimplementedby refid="classBMenuBar_1aa711264d76e8f5faa0f974ca66d01ccf">FrameMoved</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1ab061fa01aa2099c3373b80861d0b34ba">FrameMoved</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a14c03727cfd9c1847a0234d0b2ac16f8">FrameMoved</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a29c0fbffd038df9bd3f79f328e074151">FrameMoved</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a3015f2ec4ab3786f83a233cb4da692c8">FrameMoved</reimplementedby>
        <reimplementedby refid="classBScrollView_1a7ee9706e9e9396eb7ecb64eadaabc1f9">FrameMoved</reimplementedby>
        <reimplementedby refid="classBStatusBar_1ac6087674bae1c74b62c4887bb4d2107d">FrameMoved</reimplementedby>
        <reimplementedby refid="classBStringView_1a8a1935f9fb051794420522c8235fec00">FrameMoved</reimplementedby>
        <reimplementedby refid="classBTabView_1af1b6043bcdb3372a0800aa3a086b8218">FrameMoved</reimplementedby>
        <reimplementedby refid="classBTextControl_1aa3744f364427ae9af55b5193187a3fc2">FrameMoved</reimplementedby>
        <reimplementedby refid="classBMenu_1ab14bf3dc8b6f082f2609094c1f964577">FrameMoved</reimplementedby>
        <reimplementedby refid="classBMenuField_1ad35f91192f1f6986007a2234f42d6638">FrameMoved</reimplementedby>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>newPosition</declname>
        </param>
        <briefdescription>
<para>Hook method called when the view is moved. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The point of the top left corner of the frame that the view has been moved to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="194" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a85d88f9c2bb6800560874b2061378fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::FrameResized</definition>
        <argsstring>(float newWidth, float newHeight)</argsstring>
        <name>FrameResized</name>
        <qualifiedname>BView::FrameResized</qualifiedname>
        <reimplementedby refid="classBButton_1a5f2aca854bb9226c6c1dd37e693d89b4">FrameResized</reimplementedby>
        <reimplementedby refid="classBChannelControl_1a8fbfdedacf261023b38c28fc117cf6b5">FrameResized</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a083ff4719c3168c853625441e618022f">FrameResized</reimplementedby>
        <reimplementedby refid="classBColorControl_1a79dbf99fcaa48fd47a6c93c34d9c693a">FrameResized</reimplementedby>
        <reimplementedby refid="classBDragger_1a791b0c635b45d78c16441b243c86cfd2">FrameResized</reimplementedby>
        <reimplementedby refid="classBListView_1af4fdd5e524c68a7aa318179c8a5acadd">FrameResized</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ad3dcc7b2c1eeada95ef6986a21754324">FrameResized</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1af22b2e83a0298300f46e33c1319ca151">FrameResized</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a5b0b8225164361af12fc689aeae751fd">FrameResized</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a68d7f27c2a0e69a6b0396af02579217e">FrameResized</reimplementedby>
        <reimplementedby refid="classBRadioButton_1acd60fc8c7ad57a3c8388567d1172f120">FrameResized</reimplementedby>
        <reimplementedby refid="classBScrollBar_1ae3bc89d135f860a79da0850ca84a77f5">FrameResized</reimplementedby>
        <reimplementedby refid="classBScrollView_1a554f85390c7e1d28f48fdabce9faa09b">FrameResized</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a1ecc0c948356b2f6d180ce33712ae556">FrameResized</reimplementedby>
        <reimplementedby refid="classBStringView_1abcb433d9a1ccab609f133cbf93eacf45">FrameResized</reimplementedby>
        <reimplementedby refid="classBTabView_1adaacf9a6c7cc8d4afb23022b60bc71fb">FrameResized</reimplementedby>
        <reimplementedby refid="classBTextControl_1a5da999355130852c6ff1cd3533e4cfcc">FrameResized</reimplementedby>
        <reimplementedby refid="classBTextView_1a77ca110829a03b040b59a784caf327fb">FrameResized</reimplementedby>
        <reimplementedby refid="classBBox_1aa97074dae93cc40fc877b2c1e0da345f">FrameResized</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a620b639a7f8051f8e47073873b2f0dd8">FrameResized</reimplementedby>
        <reimplementedby refid="classBMenu_1ad6d6eac1f12e9456b9db896aee122181">FrameResized</reimplementedby>
        <reimplementedby refid="classBMenuField_1a6c44f9eb74f2ae11ac2ac308a6e9bb5f">FrameResized</reimplementedby>
        <param>
          <type>float</type>
          <declname>newWidth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>newHeight</declname>
        </param>
        <briefdescription>
<para>Hook method called when the view is resized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width of the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height of the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="195" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a668a4ed5419c86a7f2696ca7ece28df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::TargetedByScrollView</definition>
        <argsstring>(BScrollView *scrollView)</argsstring>
        <name>TargetedByScrollView</name>
        <qualifiedname>BView::TargetedByScrollView</qualifiedname>
        <reimplementedby refid="classBListView_1a453b373c9bd616f11a1bb195fb05bfbb">TargetedByScrollView</reimplementedby>
        <param>
          <type><ref refid="classBScrollView" kindref="compound">BScrollView</ref> *</type>
          <declname>scrollView</declname>
        </param>
        <briefdescription>
<para>Hook method called when the view becomes the target of <emphasis>scrollView</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scrollView</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBScrollView" kindref="compound">BScrollView</ref> object that has targeted the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="197" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abb50623b4236926b068fc5a2264f6a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::DrawAfterChildren</definition>
        <argsstring>(BRect updateRect)</argsstring>
        <name>DrawAfterChildren</name>
        <qualifiedname>BView::DrawAfterChildren</qualifiedname>
        <reimplementedby refid="classBSplitView_1a5ebd7844fea0b1352c061b8180fb31d4">DrawAfterChildren</reimplementedby>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>updateRect</declname>
        </param>
        <briefdescription>
<para>Perform any drawing that needs to be done after child view have already been drawn. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>updateRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to drawn in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="606" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0a552cc0d8678939c619f98dcc80d254" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::LayoutInvalidated</definition>
        <argsstring>(bool descendants=false)</argsstring>
        <name>LayoutInvalidated</name>
        <qualifiedname>BView::LayoutInvalidated</qualifiedname>
        <reimplementedby refid="classBMenu_1ab5474abecef27e68bade9c58721caeed">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBMenuField_1afa552d1804b1dbb61fce69b420299c87">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBTextControl_1a1ed22bad67d0851ea6ff182f668170b3">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBTextView_1ab97f9e2be3de9c163ed7b78a9fc7b74f">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBBox_1a6d872ad7b4e4cbc856a3f8b99435980b">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBButton_1a88a1584e52ce63d14ceb4e234ca38a5b">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBCheckBox_1afe8a80323716afa23fa7273b7ea33680">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBScrollView_1acbba1a0ae23691d9e66e77a0034ab39f">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBStringView_1af715b4e73aa8b1683662081eb9458590">LayoutInvalidated</reimplementedby>
        <param>
          <type>bool</type>
          <declname>descendants</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Hook method called when the layout is invalidated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descendants</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not child views have also been invalidated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="648" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ada521f848e4c800cd02eb4fe529e7ea0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::LayoutChanged</definition>
        <argsstring>()</argsstring>
        <name>LayoutChanged</name>
        <qualifiedname>BView::LayoutChanged</qualifiedname>
        <briefdescription>
<para>Hook function that is called when the layout if this view, or one of its children, has changed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="664" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>View Hierarchy</header>
      <memberdef kind="function" id="classBView_1ab6382c582e5e1be527d3199459d05e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::AddChild</definition>
        <argsstring>(BView *child, BView *before=NULL)</argsstring>
        <name>AddChild</name>
        <qualifiedname>BView::AddChild</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>child</declname>
        </param>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>before</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Adds <emphasis>child</emphasis> to the view hierarchy immediately before <emphasis>before</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>A view may only have one parent at a time so <emphasis>child</emphasis> must not have already been added to the view hierarchy. If <emphasis>before</emphasis> is <computeroutput>NULL</computeroutput> then <emphasis>child</emphasis> is added to the end of the tree. If the view is attached to a window <emphasis>child</emphasis> and all of its descendent views also become attached to the window invoking an <ref refid="classBView_1ae8117cb4634f4a4413988eea07cf75a0" kindref="member">AttachedToWindow()</ref> method on each view.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The child view to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>The sibling view to add <emphasis>child</emphasis> before.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="174" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5d30ae4fa0119bf5286f52f83c2f351c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::AddChild</definition>
        <argsstring>(BLayoutItem *child)</argsstring>
        <name>AddChild</name>
        <qualifiedname>BView::AddChild</qualifiedname>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Add the <emphasis>child</emphasis> layout item to the view hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The child layout item to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether or not <emphasis>child</emphasis> was added to the view layout hierarchy.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="175" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5f93a23d06267da83c128bce222ceb17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::RemoveChild</definition>
        <argsstring>(BView *child)</argsstring>
        <name>RemoveChild</name>
        <qualifiedname>BView::RemoveChild</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Removes <emphasis>child</emphasis> from the view hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The child view to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether or not <emphasis>child</emphasis> was removed from the view hierarchy.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="176" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae30d094a1cb1f3357c4aa7caa4b0e29d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BView::CountChildren</definition>
        <argsstring>() const</argsstring>
        <name>CountChildren</name>
        <qualifiedname>BView::CountChildren</qualifiedname>
        <briefdescription>
<para>Returns the number of child views that this view has. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of child views.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="177" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aaf91592f50f2f44d16f23e7504f494cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BView::ChildAt</definition>
        <argsstring>(int32 index) const</argsstring>
        <name>ChildAt</name>
        <qualifiedname>BView::ChildAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a pointer to the child view found at <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the child view to return a pointer of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the child view at <emphasis>index</emphasis> or <computeroutput>NULL</computeroutput> if not found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="178" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a76e7d862fe78e4d2766573bf073b9d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BView::NextSibling</definition>
        <argsstring>() const</argsstring>
        <name>NextSibling</name>
        <qualifiedname>BView::NextSibling</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the next sibling view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the next sibling view or <emphasis>NULL</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="179" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2a46f78756eacca3f3d4c90d31c758b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BView::PreviousSibling</definition>
        <argsstring>() const</argsstring>
        <name>PreviousSibling</name>
        <qualifiedname>BView::PreviousSibling</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the previous sibling view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the previous sibling view or <emphasis>NULL</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="180" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a87e0848b1760a9f28aad4516467a03ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::RemoveSelf</definition>
        <argsstring>()</argsstring>
        <name>RemoveSelf</name>
        <qualifiedname>BView::RemoveSelf</qualifiedname>
        <briefdescription>
<para>Removes the view and all child views from the view hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether or not the view was removed from the view hierarchy.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="181" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab83ef89f1876913174c825ff7cd02c4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BView::FindView</definition>
        <argsstring>(const char *name) const</argsstring>
        <name>FindView</name>
        <qualifiedname>BView::FindView</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the view in the view hierarchy with the specified <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The view in the view hierarchy with the specified <emphasis>name</emphasis> or <computeroutput>NULL</computeroutput> if not found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="213" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a332f34d9862000dbc859fd4e308839dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BView::Parent</definition>
        <argsstring>() const</argsstring>
        <name>Parent</name>
        <qualifiedname>BView::Parent</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the view&apos;s parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the parent view or <computeroutput>NULL</computeroutput> if not attached.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="214" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Input Related</header>
      <memberdef kind="function" id="classBView_1ac1eb1eeee67ec97205a4acc6955185bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::BeginRectTracking</definition>
        <argsstring>(BRect startRect, uint32 style=B_TRACK_WHOLE_RECT)</argsstring>
        <name>BeginRectTracking</name>
        <qualifiedname>BView::BeginRectTracking</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>startRect</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>style</declname>
          <defval><ref refid="View_8h_1ae8a3b6a5d0d3244ed73924ab2421a0d0a3e6ac766db21217473ed95cda2db3d33" kindref="member">B_TRACK_WHOLE_RECT</ref></defval>
        </param>
        <briefdescription>
<para>Displays an outline rectangle on the view and initiates tracking. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is typically called from the <ref refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" kindref="member">MouseDown()</ref> while <ref refid="classBView_1a7bcc3532c03eeeb929278de8fcc1fd25" kindref="member">EndRectTracking()</ref> is typically called from the MouseUp method().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial frame in the view&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter is set to one of the following:<itemizedlist>
<listitem><para><computeroutput>B_TRACK_WHOLE_RECT</computeroutput> The position of the rect changes with the cursor while its size remains the same.</para>
</listitem><listitem><para><computeroutput>B_TRACK_RECT_CORNER</computeroutput> The left top corner is fixed while the right and bottom edges move with the cursor.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="198" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7bcc3532c03eeeb929278de8fcc1fd25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::EndRectTracking</definition>
        <argsstring>()</argsstring>
        <name>EndRectTracking</name>
        <qualifiedname>BView::EndRectTracking</qualifiedname>
        <briefdescription>
<para>Ends tracking removing the outline rectangle from the view. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classBView_1ac1eb1eeee67ec97205a4acc6955185bd" kindref="member">BeginRectTracking()</ref> is typically called from the <ref refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" kindref="member">MouseDown()</ref> while this method is typically called from the <ref refid="classBView_1acdb92b30069157b2e3c522a3ef9d6ae4" kindref="member">MouseUp()</ref> method.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="200" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a830ce9cf2ac2ffb5f73f526ee5d6e53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::GetMouse</definition>
        <argsstring>(BPoint *location, uint32 *buttons, bool checkMessageQueue=true)</argsstring>
        <name>GetMouse</name>
        <qualifiedname>BView::GetMouse</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>location</declname>
          <defname>_location</defname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> *</type>
          <declname>buttons</declname>
          <defname>_buttons</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkMessageQueue</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Fills out the cursor location and the current state of the mouse buttons. </para>
        </briefdescription>
        <detaileddescription>
<para>The cursor doesn&apos;t have to be located within the view for this method to work, however, the view must be attached to a window. Don&apos;t use this method to track the mouse in your derived view, implement <ref refid="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" kindref="member">MouseMoved()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">_location</parametername>
</parameternamelist>
<parameterdescription>
<para>Filled out with the cursor location in the view&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_buttons</parametername>
</parameternamelist>
<parameterdescription>
<para>Filled out with a mask of the following values:<itemizedlist>
<listitem><para><computeroutput>B_PRIMARY_MOUSE_BUTTON</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SECONDARY_MOUSE_BUTTON</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_TERTIARY_MOUSE_BUTTON</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkMessageQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> pull from any pending <ref refid="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" kindref="member">MouseMoved()</ref> or <ref refid="classBView_1acdb92b30069157b2e3c522a3ef9d6ae4" kindref="member">MouseUp()</ref> events in the message queue top down before filling out the current mouse cursor state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="202" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1f4f0c3c5946df1d14e6031e5e12f40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DragMessage</definition>
        <argsstring>(BMessage *message, BRect dragRect, BHandler *replyTo=NULL)</argsstring>
        <name>DragMessage</name>
        <qualifiedname>BView::DragMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>dragRect</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>replyTo</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Initiates a drag-and-drop session. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method only works if the <ref refid="classBView" kindref="compound">BView</ref> objects are attached to a window.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Contains data to be dragged and dropped on the destination view. The caller retains responsibility for this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dragRect</parametername>
</parameternamelist>
<parameterdescription>
<para>An outline rectangle used in place of a bitmap image set in the view&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTo</parametername>
</parameternamelist>
<parameterdescription>
<para>The target set to handle the message sent in reply to the dragged message. If <computeroutput>NULL</computeroutput> the reply is instead directed to the <ref refid="classBView" kindref="compound">BView</ref> object that initiated the drag-and-drop session.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="205" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a466287a3d939759cc09e4a6d1c9982cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DragMessage</definition>
        <argsstring>(BMessage *message, BBitmap *bitmap, BPoint offset, BHandler *replyTo=NULL)</argsstring>
        <name>DragMessage</name>
        <qualifiedname>BView::DragMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>bitmap</declname>
          <defname>image</defname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>replyTo</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Initiates a drag-and-drop session of an <emphasis>image</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method only works if the <ref refid="classBView" kindref="compound">BView</ref> objects are attached to a window.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Contains data to be dragged and dropped on the destination view. The caller retains responsibility for this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap image dragged by the user. The memory used by the bitmap is freed automatically when the message is dropped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to the hotspot within the image in the bitmap&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTo</parametername>
</parameternamelist>
<parameterdescription>
<para>The target set to handle the message sent in reply to the dragged message. If <computeroutput>NULL</computeroutput> the reply is instead directed to the <ref refid="classBView" kindref="compound">BView</ref> object that initiated the drag-and-drop session.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="207" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae1caa1d0bef9452db00c2adc8e3280b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DragMessage</definition>
        <argsstring>(BMessage *message, BBitmap *bitmap, drawing_mode dragMode, BPoint offset, BHandler *replyTo=NULL)</argsstring>
        <name>DragMessage</name>
        <qualifiedname>BView::DragMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>bitmap</declname>
          <defname>image</defname>
        </param>
        <param>
          <type>drawing_mode</type>
          <declname>dragMode</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>replyTo</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Initiates a drag-and-drop session of an <emphasis>image</emphasis> with drawing_mode set by <emphasis>dragMode</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method only works if the <ref refid="classBView" kindref="compound">BView</ref> objects are attached to a window.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Contains data to be dragged and dropped on the destination view. The caller retains responsibility for this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap image dragged by the user. The memory used by the bitmap is freed automatically when the message is dropped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dragMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the drawing_mode used to draw the dragged image. Set to <computeroutput>B_OP_ALPHA</computeroutput> to drag-and-drop partially transparent images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to the hotspot within the image in the bitmap&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTo</parametername>
</parameternamelist>
<parameterdescription>
<para>The target set to handle the message sent in reply to the dragged message. If <computeroutput>NULL</computeroutput> the reply is instead directed to the <ref refid="classBView" kindref="compound">BView</ref> object that initiated the drag-and-drop session.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="209" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5d8d6b469a8a11a577d1d138cfc31162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::SetEventMask</definition>
        <argsstring>(uint32 mask, uint32 options=0)</argsstring>
        <name>SetEventMask</name>
        <qualifiedname>BView::SetEventMask</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets whether or not the view can accept mouse and keyboard events when not in focus. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>mask</emphasis> includes <computeroutput>B_POINTER_EVENTS</computeroutput> then the view will receive mouse events even when the mouse isn&apos;t over the view and if it includes <computeroutput>B_KEYBOARD_EVENTS</computeroutput> the view will receive keyboard events even if it isn&apos;t in focus.</para>
<para>The <emphasis>options</emphasis> mask options are as follows:<itemizedlist>
<listitem><para><computeroutput>B_NO_POINTER_HISTORY</computeroutput> Tells App Server to only send the most recent <ref refid="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" kindref="member">MouseMoved()</ref> event to the view sacrificing some granularity.</para>
</listitem><listitem><para><computeroutput>B_FULL_POINTER_HISTORY</computeroutput> Tells App Server to send all <ref refid="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" kindref="member">MouseMoved()</ref> events to the view.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>mask</emphasis> of <computeroutput>B_POINTER_EVENTS</computeroutput> and <computeroutput>B_KEYBOARD_EVENTS</computeroutput> to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets other event-handling options.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if everything went fine or an error code, usually <computeroutput>B_ERROR</computeroutput> if something went wrong.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a8851d500773c732ddbb1a4b31f0ad664" kindref="member">EventMask()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="560" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8851d500773c732ddbb1a4b31f0ad664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::EventMask</definition>
        <argsstring>()</argsstring>
        <name>EventMask</name>
        <qualifiedname>BView::EventMask</qualifiedname>
        <briefdescription>
<para>Returns the current event mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current event mask as a uint32.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a5d8d6b469a8a11a577d1d138cfc31162" kindref="member">SetEventMask()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="561" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae7705783d064a8613dcc6f36a2866ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::SetMouseEventMask</definition>
        <argsstring>(uint32 mask, uint32 options=0)</argsstring>
        <name>SetMouseEventMask</name>
        <qualifiedname>BView::SetMouseEventMask</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets whether or not the view can accept mouse and keyboard events when not in focus from within <ref refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" kindref="member">MouseDown()</ref> until the following <ref refid="classBView_1acdb92b30069157b2e3c522a3ef9d6ae4" kindref="member">MouseUp()</ref> event. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis>options</emphasis> mask options are as follows:<itemizedlist>
<listitem><para><computeroutput>B_NO_POINTER_HISTORY</computeroutput> Tells App Server to send only the most recent <ref refid="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" kindref="member">MouseMoved()</ref> event to the view sacrificing mouse movement granularity.</para>
</listitem><listitem><para><computeroutput>B_FULL_POINTER_HISTORY</computeroutput> Tells App Server to send all <ref refid="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" kindref="member">MouseMoved()</ref> events to the view.</para>
</listitem><listitem><para><computeroutput>B_SUSPEND_VIEW_FOCUS</computeroutput> Events normally sent to the focus view are suppressed. While the mouse is held down, the keyboard is ignored. The view receiving the <ref refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" kindref="member">MouseDown()</ref> messages doesn&apos;t have to be the focus view to suppress focused messages.</para>
</listitem><listitem><para><computeroutput>B_LOCK_WINDOW_FOCUS</computeroutput> Prevents the attached window from losing its focused state while the mouse is held down, even if the mouse leaves the bounds of the window.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>mask</emphasis> of <computeroutput>B_POINTER_EVENTS</computeroutput> and <computeroutput>B_KEYBOARD_EVENTS</computeroutput> to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets other event-handling options.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if everything went fine or an error code, usually <computeroutput>B_ERROR</computeroutput> if something went wrong.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="562" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae20e2a3c46fc30a2a292c832eead7387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ScrollBy</definition>
        <argsstring>(float dh, float dv)</argsstring>
        <name>ScrollBy</name>
        <qualifiedname>BView::ScrollBy</qualifiedname>
        <param>
          <type>float</type>
          <declname>dh</declname>
          <defname>deltaX</defname>
        </param>
        <param>
          <type>float</type>
          <declname>dv</declname>
          <defname>deltaY</defname>
        </param>
        <briefdescription>
<para>Scroll the view by <emphasis>deltaX</emphasis> horizontally and <emphasis>deltaY</emphasis> vertically. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deltaX</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to scroll horizontally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaY</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to scroll vertically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="575" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a33ed2a9eeff474a756b548996a82b964" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ScrollTo</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>ScrollTo</name>
        <qualifiedname>BView::ScrollTo</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Scroll the view to the point specified by coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate to scroll the view to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate to scroll the view to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="576" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="800" bodyend="803"/>
        <references refid="classBView_1a33ed2a9eeff474a756b548996a82b964" compoundref="View_8h" startline="800" endline="803">ScrollTo</references>
        <referencedby refid="classBView_1a33ed2a9eeff474a756b548996a82b964" compoundref="View_8h" startline="800" endline="803">ScrollTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2b76ddc60289ce92e1fb706332edbafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::ScrollTo</definition>
        <argsstring>(BPoint where)</argsstring>
        <name>ScrollTo</name>
        <qualifiedname>BView::ScrollTo</qualifiedname>
        <reimplementedby refid="classBListView_1a13605eb8e35d09d2795281e541aa5784">ScrollTo</reimplementedby>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Scroll the view to the point specified by <emphasis>where</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The location to scroll the view to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="577" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a266a368d81c6e1668b2b9b22b5016853" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::MakeFocus</definition>
        <argsstring>(bool focus=true)</argsstring>
        <name>MakeFocus</name>
        <qualifiedname>BView::MakeFocus</qualifiedname>
        <reimplementedby refid="classBButton_1abc826951b0a87f2ce4cf6cc10eb792d6">MakeFocus</reimplementedby>
        <reimplementedby refid="classBControl_1aaeeae39969b598868ad0e8d3298efb00">MakeFocus</reimplementedby>
        <reimplementedby refid="classBDragger_1af9ed413edb8156285e2d24d39a3c4fac">MakeFocus</reimplementedby>
        <reimplementedby refid="classBMenu_1a1465ef5881a0b85729118534d8ee3a15">MakeFocus</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1acf402ab948510cbe880b2e24c72f39f9">MakeFocus</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a70245c6a6207a737c74a6092cc2374a6">MakeFocus</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a1f2f84e388730e3f018e0e16d682bf37">MakeFocus</reimplementedby>
        <reimplementedby refid="classBScrollBar_1aa0a296f1afc18513b90a7c098871a39d">MakeFocus</reimplementedby>
        <reimplementedby refid="classBScrollView_1ae54f2e6e7844ddd7cf9c1b0531ae2ec2">MakeFocus</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a615c000a88cd8b09070b5ff39d0477ec">MakeFocus</reimplementedby>
        <reimplementedby refid="classBStringView_1a5c53710add5a3e16dfa3df6da1a39396">MakeFocus</reimplementedby>
        <reimplementedby refid="classBTextControl_1abf98183ccf195db2a411dc5a1f67ee33">MakeFocus</reimplementedby>
        <reimplementedby refid="classBTextView_1ac0bc816f13b04fd2ec2668c618ab8ca8">MakeFocus</reimplementedby>
        <reimplementedby refid="classBMenuField_1a14d9a763b0d621a78d0aa8abdabe1f7b">MakeFocus</reimplementedby>
        <reimplementedby refid="classBBox_1a2c7f7fe098d0b65c9ba74da19da268ab">MakeFocus</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a0b638537dadfd72221c21dbb6fd48a46">MakeFocus</reimplementedby>
        <reimplementedby refid="classBColorControl_1a82b299852c7650b09af6662581cedaae">MakeFocus</reimplementedby>
        <reimplementedby refid="classBTabView_1a0bba5d8ebb1263111769df12ab9b4c2a">MakeFocus</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1affd38edbaca04a9db31ef3e749b119e7">MakeFocus</reimplementedby>
        <reimplementedby refid="classBListView_1a35117bf3eb7d1f64b777d5371558c626">MakeFocus</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a170fbfdd3be7b9bdc750777f31c216c0">MakeFocus</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a134b3710cbd69229b093803ddb11ba27">MakeFocus</reimplementedby>
        <param>
          <type>bool</type>
          <declname>focus</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Makes the view the current focus view of the window or gives up being the window&apos;s focus view. </para>
        </briefdescription>
        <detaileddescription>
<para>The focus view handles selections and KeyDown events when the the attached window is active. There can be only one focus view at a time per window.</para>
<para>When called with <emphasis>focus</emphasis> set to <computeroutput>true</computeroutput> this method first calls <ref refid="classBView_1a266a368d81c6e1668b2b9b22b5016853" kindref="member">MakeFocus()</ref> on the previously focused view with <emphasis>focus</emphasis> set to <computeroutput>false</computeroutput>.</para>
<para>The focus doesn&apos;t automatically change when <ref refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" kindref="member">MouseDown()</ref> is called so calling <ref refid="classBView_1a266a368d81c6e1668b2b9b22b5016853" kindref="member">MakeFocus()</ref> is the only way to make a view the focus view of a window. Classes derived from <ref refid="classBView" kindref="compound">BView</ref> that can display the current selection, or that can accept pasted data should call <ref refid="classBView_1a266a368d81c6e1668b2b9b22b5016853" kindref="member">MakeFocus()</ref> in their <ref refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" kindref="member">MouseDown()</ref> method to update the focus view of the window on click.</para>
<para>If the view isn&apos;t attached to a window this method has no effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>focus</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>true</emphasis> to set focus, <emphasis>false</emphasis> to remove it.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="578" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0878bc7981ba814190b822349599a120" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBScrollBar" kindref="compound">BScrollBar</ref> *</type>
        <definition>BScrollBar * BView::ScrollBar</definition>
        <argsstring>(orientation direction) const</argsstring>
        <name>ScrollBar</name>
        <qualifiedname>BView::ScrollBar</qualifiedname>
        <param>
          <type><ref refid="InterfaceDefs_8h_1ac5fc6e200c34376449ba20a234061eb4" kindref="member">orientation</ref></type>
          <declname>direction</declname>
          <defname>posture</defname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classBScrollBar" kindref="compound">BScrollBar</ref> object that has the <ref refid="classBView" kindref="compound">BView</ref> set as its target. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>posture</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <computeroutput>B_VERTICAL</computeroutput> to get the vertical scroll bar or <computeroutput>B_HORIZONTAL</computeroutput> to get the horizontal scroll bar.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the Scrollbar object requested or <computeroutput>NULL</computeroutput> if none found.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBScrollBar_1ade9625dc766b03f674b02116286d8bd8" kindref="member">BScrollBar::SetTarget()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="592" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a54991372110199183fed775598ae1912" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>void BView::ScrollWithMouseWheelDelta</definition>
        <argsstring>(BScrollBar *, float)</argsstring>
        <name>ScrollWithMouseWheelDelta</name>
        <qualifiedname>BView::ScrollWithMouseWheelDelta</qualifiedname>
        <param>
          <type><ref refid="classBScrollBar" kindref="compound">BScrollBar</ref> *</type>
          <defname>scrollBar</defname>
        </param>
        <param>
          <type>float</type>
          <defname>delta</defname>
        </param>
        <briefdescription>
<para>Handle the scroll wheel changing over scrollbars. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Extract the scrollbar change based on the mouse wheel <emphasis>delta</emphasis> into a protected method of <ref refid="classBView" kindref="compound">BView</ref>.</para>
</listitem><listitem><para>The method is called from the <ref refid="classBView_1aca0a16b0e04288e1fdc0b63690ea7a6d" kindref="member">MessageReceived()</ref> method of <ref refid="classBScrollBar" kindref="compound">BScrollBar</ref>.</para>
</listitem></itemizedlist>
</para>
<para>With this change it is now a bit easier to scroll horizontally around the system by putting the mouse cursor over a horizontal scrollbar and using the wheel.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="666" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Coordinate Conversions</header>
      <memberdef kind="function" id="classBView_1aefefb1242613b869feb6b8e0cc119518" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertToScreen</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BView::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>point</emphasis> to the screen&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="217" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af90cdeb62cc60adf64eb9a669c37c153" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::ConvertToScreen</definition>
        <argsstring>(BPoint point) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BView::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>point</emphasis> converted to the screen&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBPoint" kindref="compound">BPoint</ref> object in the screen&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="218" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4b794ccd899dc6a0cafd886169122df5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertFromScreen</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BView::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>point</emphasis> from the screen&apos;s coordinate system to the view&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="219" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a75f1d68cf77bccc03930eb8e273f2967" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::ConvertFromScreen</definition>
        <argsstring>(BPoint point) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BView::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>point</emphasis> converted from the screen&apos;s coordinate system to the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBPoint" kindref="compound">BPoint</ref> object in the view&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="220" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad99f5af006f28c485f02484752a2ac5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertToScreen</definition>
        <argsstring>(BRect *rect) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BView::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>rect</emphasis> to the screen&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="221" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae60c56c306d0cf3f504d710fac8b9bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BView::ConvertToScreen</definition>
        <argsstring>(BRect rect) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BView::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>rect</emphasis> converted to the screen&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBRect" kindref="compound">BRect</ref> object in the screen&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="222" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a3fbc496f437925cb02ccf9e817406e4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertFromScreen</definition>
        <argsstring>(BRect *rect) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BView::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>rect</emphasis> from the screen&apos;s coordinate system to the view&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="223" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a44c3b5174e4ccfa4c123e0d5d54e9408" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BView::ConvertFromScreen</definition>
        <argsstring>(BRect rect) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BView::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>rect</emphasis> converted from the screen&apos;s coordinate system to the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBRect" kindref="compound">BRect</ref> object in the view&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="224" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab20700567eabd5f8135be179b4232e2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertToParent</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>ConvertToParent</name>
        <qualifiedname>BView::ConvertToParent</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>point</emphasis> to the parent&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="225" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a91e6a7edab78547be47cb8dc84cfdecf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::ConvertToParent</definition>
        <argsstring>(BPoint point) const</argsstring>
        <name>ConvertToParent</name>
        <qualifiedname>BView::ConvertToParent</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>point</emphasis> converted to the parent&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBPoint" kindref="compound">BPoint</ref> object in the parent&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="226" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a43c16140dd4491a6a6f7bad11bbea1f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertFromParent</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>ConvertFromParent</name>
        <qualifiedname>BView::ConvertFromParent</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>point</emphasis> from the parent&apos;s coordinate system to the view&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="227" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa3201bdf5c489fbab7d67afe3453466d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::ConvertFromParent</definition>
        <argsstring>(BPoint point) const</argsstring>
        <name>ConvertFromParent</name>
        <qualifiedname>BView::ConvertFromParent</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>point</emphasis> converted from the parent&apos;s coordinate system to the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBPoint" kindref="compound">BPoint</ref> object in the view&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="228" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac7bd2e0e7aac40d1be9a47999b5701a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertToParent</definition>
        <argsstring>(BRect *rect) const</argsstring>
        <name>ConvertToParent</name>
        <qualifiedname>BView::ConvertToParent</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>rect</emphasis> to the parent&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="229" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae3b385e4d1b9f70bc848bf2fd0b7753c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BView::ConvertToParent</definition>
        <argsstring>(BRect rect) const</argsstring>
        <name>ConvertToParent</name>
        <qualifiedname>BView::ConvertToParent</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>rect</emphasis> converted to the parent&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBRect" kindref="compound">BRect</ref> object in the parent&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="230" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab2aeeb14409a18f950173e7cb22e147c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ConvertFromParent</definition>
        <argsstring>(BRect *rect) const</argsstring>
        <name>ConvertFromParent</name>
        <qualifiedname>BView::ConvertFromParent</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>rect</emphasis> from the parent&apos;s coordinate system to the view&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="231" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a45b405f10c29442aea8b70161410565f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BView::ConvertFromParent</definition>
        <argsstring>(BRect rect) const</argsstring>
        <name>ConvertFromParent</name>
        <qualifiedname>BView::ConvertFromParent</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>rect</emphasis> converted from the parent&apos;s coordinate system to the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBRect" kindref="compound">BRect</ref> object in the view&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="232" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4740f9a1e1163073b042102a421a2e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetFlags</definition>
        <argsstring>(uint32 flags)</argsstring>
        <name>SetFlags</name>
        <qualifiedname>BView::SetFlags</qualifiedname>
        <reimplementedby refid="classBTabView_1a15a7a76d27f6faff9faedd740b10f485">SetFlags</reimplementedby>
        <reimplementedby refid="classBTextControl_1af5c66bb6443a999c9cfa3a4be1cad091">SetFlags</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Sets the view flags to the <emphasis>flags</emphasis> mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The view flags to set as a uint32 mask.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1a561b10abf94dd65a26b02253af667508" kindref="member">Flags()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="565" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a561b10abf94dd65a26b02253af667508" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::Flags</definition>
        <argsstring>() const</argsstring>
        <name>Flags</name>
        <qualifiedname>BView::Flags</qualifiedname>
        <briefdescription>
<para>Return the view flags set in the constructor or by <ref refid="classBView_1a4740f9a1e1163073b042102a421a2e33" kindref="member">SetFlags()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The view flags as a uint32 mask.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a4740f9a1e1163073b042102a421a2e33" kindref="member">SetFlags()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="566" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Graphics State</header>
      <memberdef kind="function" id="classBView_1acf50a063c9621f35a84b1d0245b12d69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::GetClippingRegion</definition>
        <argsstring>(BRegion *region) const</argsstring>
        <name>GetClippingRegion</name>
        <qualifiedname>BView::GetClippingRegion</qualifiedname>
        <param>
          <type><ref refid="classBRegion" kindref="compound">BRegion</ref> *</type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Fill out <emphasis>region</emphasis> with the view&apos;s clipping region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">region</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBRegion" kindref="compound">BRegion</ref> object to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Get the current clipping region, which is an intersection of the view visible region on screen (which depends on the view bounds, any child view hiding parts of it, and overlapping windows) and the constrained clipping regions set by calls to <ref refid="classBView_1a656b8d82a6a7c7c6ab33c3dd08aad6ec" kindref="member">ConstrainClippingRegion()</ref> in the current stack of drawing states.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="235" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a656b8d82a6a7c7c6ab33c3dd08aad6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::ConstrainClippingRegion</definition>
        <argsstring>(BRegion *region)</argsstring>
        <name>ConstrainClippingRegion</name>
        <qualifiedname>BView::ConstrainClippingRegion</qualifiedname>
        <param>
          <type><ref refid="classBRegion" kindref="compound">BRegion</ref> *</type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Set the clipping region the <emphasis>region</emphasis> restricting the area that the view can draw in. </para>
        </briefdescription>
        <detaileddescription>
<para>The Application Server keeps track of the clipping region for each view attached to a window so that the view can&apos;t draw outside of it, consequently this method works only for views that are attached to a window.</para>
<para>The default clipping region contains the visible area of the view. By passing a region to this method the clipping area is further restricted. Passing in <computeroutput>NULL</computeroutput> resets the clipping region back to the default.</para>
<para>Calls to <ref refid="classBView_1a656b8d82a6a7c7c6ab33c3dd08aad6ec" kindref="member">ConstrainClippingRegion()</ref> are not cumulative, each time this method is called it replaces the old clipping region. However, clipping regions from previous states are intersected to compute the effective clipping.</para>
<para>Region-based clipping is not affected by the view transform. If you need to constrain drawing to a transformed region, use <ref refid="classBView_1a9c92c9e8e306d00dbfef81f2b0282339" kindref="member">ClipToPicture()</ref> and <ref refid="classBView_1a4810086c415d90bffa25ab2963716936" kindref="member">FillRegion()</ref> instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para>The region to set the clipping region to or <computeroutput>NULL</computeroutput> to reset to default.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="236" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9c92c9e8e306d00dbfef81f2b0282339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClipToPicture</definition>
        <argsstring>(BPicture *picture, BPoint where=B_ORIGIN, bool sync=true)</argsstring>
        <name>ClipToPicture</name>
        <qualifiedname>BView::ClipToPicture</qualifiedname>
        <param>
          <type><ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>picture</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
          <defval><ref refid="Point_8h_1a9d03b82df6546886ad17a85805497030" kindref="member">B_ORIGIN</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Intersects the current clipping region of the view with the pixels of <emphasis>picture</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classBPicture" kindref="compound">BPicture</ref> instances are resolution independent, <emphasis>picture</emphasis> is effectively drawn at the view&apos;s resolution and the bitmap produced is used to modify the clipping region.</para>
<para>The pixels that are at least partially opaque are the ones drawn by <emphasis>picture</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to intersect with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the view&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>false</computeroutput>, this method will execute asynchronously.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="237" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a18d61bcae2a7ca8a1a0977ac23d15171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClipToInversePicture</definition>
        <argsstring>(BPicture *picture, BPoint where=B_ORIGIN, bool sync=true)</argsstring>
        <name>ClipToInversePicture</name>
        <qualifiedname>BView::ClipToInversePicture</qualifiedname>
        <param>
          <type><ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>picture</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
          <defval><ref refid="Point_8h_1a9d03b82df6546886ad17a85805497030" kindref="member">B_ORIGIN</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Intersects the current clipping region of the view with the pixels outside of <emphasis>picture</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to intersect with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the view&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>false</computeroutput>, this method will execute asynchronously.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1a9c92c9e8e306d00dbfef81f2b0282339" kindref="member">ClipToPicture()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="239" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a22ff147a2f0a0bd65de494c9a039acee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClipToRect</definition>
        <argsstring>(BRect rect)</argsstring>
        <name>ClipToRect</name>
        <qualifiedname>BView::ClipToRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Intersects the current clipping region of the view with the pixels of <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBRect" kindref="compound">BRect</ref> that describes the rectangle to intersect with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="242" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad1762d160500ec3ce90c7bd73944d8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClipToInverseRect</definition>
        <argsstring>(BRect rect)</argsstring>
        <name>ClipToInverseRect</name>
        <qualifiedname>BView::ClipToInverseRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Intersects the current clipping region of the view with the pixels outside of <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBRect" kindref="compound">BRect</ref> that describes the rectangle to intersect with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1a22ff147a2f0a0bd65de494c9a039acee" kindref="member">ClipToRect()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="243" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac0884c62949361a7eb6a4834f46b902c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClipToShape</definition>
        <argsstring>(BShape *shape)</argsstring>
        <name>ClipToShape</name>
        <qualifiedname>BView::ClipToShape</qualifiedname>
        <param>
          <type><ref refid="classBShape" kindref="compound">BShape</ref> *</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Intersects the current clipping region of the view with the pixels of <emphasis>shape</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBShape" kindref="compound">BShape</ref> that describes the area to intersect with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="244" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a17dcb4f2e92994cde9a9ece9caa619c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClipToInverseShape</definition>
        <argsstring>(BShape *shape)</argsstring>
        <name>ClipToInverseShape</name>
        <qualifiedname>BView::ClipToInverseShape</qualifiedname>
        <param>
          <type><ref refid="classBShape" kindref="compound">BShape</ref> *</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Intersects the current clipping region of the view with the pixels outside of <emphasis>shape</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBShape" kindref="compound">BShape</ref> that describes the area to intersect with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1ac0884c62949361a7eb6a4834f46b902c" kindref="member">ClipToShape()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="245" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0c392ed0e36213e1007322a9cbca71c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetDrawingMode</definition>
        <argsstring>(drawing_mode mode)</argsstring>
        <name>SetDrawingMode</name>
        <qualifiedname>BView::SetDrawingMode</qualifiedname>
        <param>
          <type>drawing_mode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Sets the drawing mode of the view. </para>
        </briefdescription>
        <detaileddescription>
<para>The default drawing mode is <computeroutput>B_OP_COPY</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to one of the following:<itemizedlist>
<listitem><para><computeroutput>B_OP_COPY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_OVER</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_ERASE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_INVERT</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_SELECT</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_ALPHA</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_MIN</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_MAX</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_ADD</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_SUBTRACT</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OP_BLEND</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="247" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae7953a2e451fb6e5a439df9e9dc8451a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>drawing_mode</type>
        <definition>drawing_mode BView::DrawingMode</definition>
        <argsstring>() const</argsstring>
        <name>DrawingMode</name>
        <qualifiedname>BView::DrawingMode</qualifiedname>
        <briefdescription>
<para>Return the current drawing_mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current drawing_mode.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="248" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad01fc0fd68e4683af9b9386bf33abf63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetBlendingMode</definition>
        <argsstring>(source_alpha srcAlpha, alpha_function alphaFunc)</argsstring>
        <name>SetBlendingMode</name>
        <qualifiedname>BView::SetBlendingMode</qualifiedname>
        <param>
          <type><ref refid="GraphicsDefs_8h_1a7276beadc69dc620be49d7cceddca45f" kindref="member">source_alpha</ref></type>
          <declname>srcAlpha</declname>
        </param>
        <param>
          <type><ref refid="GraphicsDefs_8h_1a725ef28746b10b9e040fb090d4d51124" kindref="member">alpha_function</ref></type>
          <declname>alphaFunc</declname>
        </param>
        <briefdescription>
<para>Set the blending mode which controls how transparency is used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to one of the following:<itemizedlist>
<listitem><para><computeroutput>B_CONSTANT_ALPHA</computeroutput> Use the high color&apos;s alpha channel.</para>
</listitem><listitem><para><computeroutput>B_PIXEL_ALPHA</computeroutput> Use the alpha value of each pixel when drawing a bitmap. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alphaFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to one of the following:<itemizedlist>
<listitem><para><computeroutput>B_ALPHA_OVERLAY</computeroutput> Used for drawing a image with transparency over an opaque background.</para>
</listitem><listitem><para><computeroutput>B_ALPHA_COMPOSITE_*</computeroutput> Used to composite two or more transparent images together offscreen to produce a new image drawn using <computeroutput>B_ALPHA_OVERLAY</computeroutput> mode. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Modes other than <computeroutput>B_ALPHA_OVERLAY</computeroutput> and <computeroutput>B_ALPHA_COMPOSITE</computeroutput> work only with <computeroutput>B_PIXEL_ALPHA</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="250" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad50d5ba2249fdf3dd8640b3573c2a2e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::GetBlendingMode</definition>
        <argsstring>(source_alpha *srcAlpha, alpha_function *alphaFunc) const</argsstring>
        <name>GetBlendingMode</name>
        <qualifiedname>BView::GetBlendingMode</qualifiedname>
        <param>
          <type><ref refid="GraphicsDefs_8h_1a7276beadc69dc620be49d7cceddca45f" kindref="member">source_alpha</ref> *</type>
          <declname>srcAlpha</declname>
        </param>
        <param>
          <type><ref refid="GraphicsDefs_8h_1a725ef28746b10b9e040fb090d4d51124" kindref="member">alpha_function</ref> *</type>
          <declname>alphaFunc</declname>
        </param>
        <briefdescription>
<para>Fill out <emphasis>srcAlpha</emphasis> and <emphasis>alphaFunc</emphasis> with the alpha mode and alpha function of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">srcAlpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha mode to fill out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">alphaFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>The alpha function to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="252" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a80ea4cb97d2e6e2c3088e610a9e157e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetPenSize</definition>
        <argsstring>(float size)</argsstring>
        <name>SetPenSize</name>
        <qualifiedname>BView::SetPenSize</qualifiedname>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the pen size to <emphasis>size</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The pen size to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="255" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a69d8657d26b49773fa2de914f263b204" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BView::PenSize</definition>
        <argsstring>() const</argsstring>
        <name>PenSize</name>
        <qualifiedname>BView::PenSize</qualifiedname>
        <briefdescription>
<para>Return the current pen size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current pen size as a float.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a80ea4cb97d2e6e2c3088e610a9e157e6" kindref="member">SetPenSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="256" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a606e0e7e03516dccb53bf073827460a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::HasDefaultColors</definition>
        <argsstring>() const</argsstring>
        <name>HasDefaultColors</name>
        <qualifiedname>BView::HasDefaultColors</qualifiedname>
        <briefdescription>
<para>Tests if the view has any colors set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Boolean value, true if colors are not set.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="261" column="5"/>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1a2542130d43283c471cee9f13523b9ee0" compoundref="LayoutBuilder_8h" startline="804" endline="813">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::Grid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1ace860b547d56684445905033b112945e" compoundref="LayoutBuilder_8h" startline="465" endline="475">BLayoutBuilder::Group&lt; ParentBuilder &gt;::Group</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa9aacc95606b650e6a8d776b51cb902b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::HasSystemColors</definition>
        <argsstring>() const</argsstring>
        <name>HasSystemColors</name>
        <qualifiedname>BView::HasSystemColors</qualifiedname>
        <briefdescription>
<para>Tests if the view is using system &quot;panel&quot; colors. B_PANEL_BACKGROUND_COLOR for <ref refid="classBView_1aec6c89446eb4f5ded151adced9126df8" kindref="member">ViewUIColor()</ref> B_PANEL_BACKGROUND_COLOR for <ref refid="classBView_1ae32ca6d8f106d44b5b51df82a7eb64c5" kindref="member">LowUIColor()</ref> B_PANEL_TEXT_COLOR for <ref refid="classBView_1aa86f548fba2e82d022066198be6d5af6" kindref="member">HighUIColor()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Boolean value, true if colors are as described.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="262" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac780f029d415ee0a915792b4e756fa77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::AdoptParentColors</definition>
        <argsstring>()</argsstring>
        <name>AdoptParentColors</name>
        <qualifiedname>BView::AdoptParentColors</qualifiedname>
        <briefdescription>
<para>Attempts to use the colors of any parent view. Will adopt view, low, and high colors. Should be called in <ref refid="classBView_1ae8117cb4634f4a4413988eea07cf75a0" kindref="member">AttachedToWindow()</ref> or <ref refid="classBView_1a6d6379e0993bd525f2cac5f848718870" kindref="member">AllAttached()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="263" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0e429a82fe06e9ab390b06d993ee31be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::AdoptSystemColors</definition>
        <argsstring>()</argsstring>
        <name>AdoptSystemColors</name>
        <qualifiedname>BView::AdoptSystemColors</qualifiedname>
        <briefdescription>
<para>Instructs view to use standard system &quot;panel&quot; colors. B_PANEL_BACKGROUND_COLOR for <ref refid="classBView_1aec6c89446eb4f5ded151adced9126df8" kindref="member">ViewUIColor()</ref> B_PANEL_BACKGROUND_COLOR for <ref refid="classBView_1ae32ca6d8f106d44b5b51df82a7eb64c5" kindref="member">LowUIColor()</ref> B_PANEL_TEXT_COLOR for <ref refid="classBView_1aa86f548fba2e82d022066198be6d5af6" kindref="member">HighUIColor()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="264" column="5"/>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1ad7bd68789548063830f46a0bb279e17a" compoundref="LayoutBuilder_8h" startline="793" endline="800">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::Grid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1adebaf628afb53fdd86d6b153d60cf0ea" compoundref="LayoutBuilder_8h" startline="454" endline="461">BLayoutBuilder::Group&lt; ParentBuilder &gt;::Group</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab68ad7103708884f9e6fd84e8a579746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::AdoptViewColors</definition>
        <argsstring>(BView *view)</argsstring>
        <name>AdoptViewColors</name>
        <qualifiedname>BView::AdoptViewColors</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>view</declname>
        </param>
        <briefdescription>
<para>Attempts to use the colors of a given view. Will adopt view, low, and high colors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="265" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae8dde0e0330b394db016f3e609e7fb6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetViewColor</definition>
        <argsstring>(rgb_color color)</argsstring>
        <name>SetViewColor</name>
        <qualifiedname>BView::SetViewColor</qualifiedname>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the view color of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="267" column="12"/>
        <referencedby refid="classBLayoutBuilder_1_1Cards_1a08329883aebee0490f3faf96d86f1108" compoundref="LayoutBuilder_8h" startline="1433" endline="1440">BLayoutBuilder::Cards&lt; ParentBuilder &gt;::Cards</referencedby>
        <referencedby refid="classBView_1a7dace2963c85b5ce55b7d8e96946625c" compoundref="View_8h" startline="807" endline="815">SetViewColor</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7dace2963c85b5ce55b7d8e96946625c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetViewColor</definition>
        <argsstring>(uchar red, uchar green, uchar blue, uchar alpha=255)</argsstring>
        <name>SetViewColor</name>
        <qualifiedname>BView::SetViewColor</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alpha</declname>
          <defval>255</defval>
        </param>
        <briefdescription>
<para>Set the view color of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>red</emphasis> component of the view color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>green</emphasis> component of the view color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>blue</emphasis> component of the view color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>alpha</emphasis> component of the view color.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="268" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="807" bodyend="815"/>
        <references refid="structrgb__color_1a089265e492dbf6743a6eaaa23fa94699" compoundref="GraphicsDefs_8h" startline="46">rgb_color::alpha</references>
        <references refid="structrgb__color_1adbc9af28f1ec74ac8e7cc8f7fc1e6ce3" compoundref="GraphicsDefs_8h" startline="45">rgb_color::blue</references>
        <references refid="structrgb__color_1ac0259068653969121d72739ad8509979" compoundref="GraphicsDefs_8h" startline="44">rgb_color::green</references>
        <references refid="structrgb__color_1ad8f118f509b77a245d9e38829336f0ec" compoundref="GraphicsDefs_8h" startline="43">rgb_color::red</references>
        <references refid="classBView_1ae8dde0e0330b394db016f3e609e7fb6a">SetViewColor</references>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8b2b1d9e08ce0c1763dd6a077ed02fdd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
        <definition>rgb_color BView::ViewColor</definition>
        <argsstring>() const</argsstring>
        <name>ViewColor</name>
        <qualifiedname>BView::ViewColor</qualifiedname>
        <briefdescription>
<para>Return the current view color. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current view color as an <ref refid="structrgb__color" kindref="compound">rgb_color</ref> struct.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1ae8dde0e0330b394db016f3e609e7fb6a" kindref="member">SetViewColor(rgb_color)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a7dace2963c85b5ce55b7d8e96946625c" kindref="member">SetViewColor(uchar, uchar, uchar, uchar)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="270" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a34f020c4bb1008cef972cf1eec7dba0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetViewUIColor</definition>
        <argsstring>(color_which which, float tint=B_NO_TINT)</argsstring>
        <name>SetViewUIColor</name>
        <qualifiedname>BView::SetViewUIColor</qualifiedname>
        <param>
          <type>color_which</type>
          <declname>which</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tint</declname>
          <defval>B_NO_TINT</defval>
        </param>
        <briefdescription>
<para>Set the view color of the view to a system constant. The color will update live with user changes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The color_which constant to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional tint value to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="272" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aec6c89446eb4f5ded151adced9126df8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>color_which</type>
        <definition>color_which BView::ViewUIColor</definition>
        <argsstring>(float *tint=NULL) const</argsstring>
        <name>ViewUIColor</name>
        <qualifiedname>BView::ViewUIColor</qualifiedname>
        <param>
          <type>float *</type>
          <declname>tint</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Return the current view color constant being used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional float pointer in which to store the tint value used to modify the system color constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current view color constant.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a34f020c4bb1008cef972cf1eec7dba0f" kindref="member">SetViewUIColor(color_which, float)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="274" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab5482f91a642d545bc3fcefe199f95e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetHighColor</definition>
        <argsstring>(rgb_color color)</argsstring>
        <name>SetHighColor</name>
        <qualifiedname>BView::SetHighColor</qualifiedname>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the high color of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="296" column="12"/>
        <referencedby refid="classBView_1aff9e1ab5e88f33027e72b39874868e9b" compoundref="View_8h" startline="819" endline="827">SetHighColor</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBView_1aff9e1ab5e88f33027e72b39874868e9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetHighColor</definition>
        <argsstring>(uchar red, uchar green, uchar blue, uchar alpha=255)</argsstring>
        <name>SetHighColor</name>
        <qualifiedname>BView::SetHighColor</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alpha</declname>
          <defval>255</defval>
        </param>
        <briefdescription>
<para>Set the high color of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>red</emphasis> component of the high color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>green</emphasis> component of the high color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>blue</emphasis> component of the high color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>alpha</emphasis> component of the high color.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="297" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="819" bodyend="827"/>
        <references refid="structrgb__color_1a089265e492dbf6743a6eaaa23fa94699" compoundref="GraphicsDefs_8h" startline="46">rgb_color::alpha</references>
        <references refid="structrgb__color_1adbc9af28f1ec74ac8e7cc8f7fc1e6ce3" compoundref="GraphicsDefs_8h" startline="45">rgb_color::blue</references>
        <references refid="structrgb__color_1ac0259068653969121d72739ad8509979" compoundref="GraphicsDefs_8h" startline="44">rgb_color::green</references>
        <references refid="structrgb__color_1ad8f118f509b77a245d9e38829336f0ec" compoundref="GraphicsDefs_8h" startline="43">rgb_color::red</references>
        <references refid="classBView_1ab5482f91a642d545bc3fcefe199f95e9">SetHighColor</references>
      </memberdef>
      <memberdef kind="function" id="classBView_1abda3583967fba9f6ed9524058d00a6e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
        <definition>rgb_color BView::HighColor</definition>
        <argsstring>() const</argsstring>
        <name>HighColor</name>
        <qualifiedname>BView::HighColor</qualifiedname>
        <briefdescription>
<para>Return the current high color. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current high color as an <ref refid="structrgb__color" kindref="compound">rgb_color</ref> struct.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1ab5482f91a642d545bc3fcefe199f95e9" kindref="member">SetHighColor(rgb_color)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1aff9e1ab5e88f33027e72b39874868e9b" kindref="member">SetHighColor(uchar, uchar, uchar, uchar)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="299" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a54eefc28bf7a4bc30612cf83aff2963b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetHighUIColor</definition>
        <argsstring>(color_which which, float tint=B_NO_TINT)</argsstring>
        <name>SetHighUIColor</name>
        <qualifiedname>BView::SetHighUIColor</qualifiedname>
        <param>
          <type>color_which</type>
          <declname>which</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tint</declname>
          <defval>B_NO_TINT</defval>
        </param>
        <briefdescription>
<para>Set the high color of the view to a system constant. The color will update live with user changes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The color_which constant to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional tint value to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="301" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa86f548fba2e82d022066198be6d5af6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>color_which</type>
        <definition>color_which BView::HighUIColor</definition>
        <argsstring>(float *tint=NULL) const</argsstring>
        <name>HighUIColor</name>
        <qualifiedname>BView::HighUIColor</qualifiedname>
        <param>
          <type>float *</type>
          <declname>tint</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Return the current high color constant being used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional float pointer in which to store the tint value used to modify the system color constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current high color constant.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a54eefc28bf7a4bc30612cf83aff2963b" kindref="member">SetHighUIColor(color_which, float)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="303" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af0426243110fb150ad7ef0705209a12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetLowColor</definition>
        <argsstring>(rgb_color color)</argsstring>
        <name>SetLowColor</name>
        <qualifiedname>BView::SetLowColor</qualifiedname>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the low color of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="305" column="12"/>
        <referencedby refid="classBView_1a929fb1ca47a00220c355ae55a0ea6077" compoundref="View_8h" startline="831" endline="839">SetLowColor</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBView_1a929fb1ca47a00220c355ae55a0ea6077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetLowColor</definition>
        <argsstring>(uchar red, uchar green, uchar blue, uchar alpha=255)</argsstring>
        <name>SetLowColor</name>
        <qualifiedname>BView::SetLowColor</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>red</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>green</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>blue</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alpha</declname>
          <defval>255</defval>
        </param>
        <briefdescription>
<para>Set the low color of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>red</emphasis> component of the low color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>green</emphasis> component of the low color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>blue</emphasis> component of the low color. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>alpha</emphasis> component of the low color.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="306" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="831" bodyend="839"/>
        <references refid="structrgb__color_1a089265e492dbf6743a6eaaa23fa94699" compoundref="GraphicsDefs_8h" startline="46">rgb_color::alpha</references>
        <references refid="structrgb__color_1adbc9af28f1ec74ac8e7cc8f7fc1e6ce3" compoundref="GraphicsDefs_8h" startline="45">rgb_color::blue</references>
        <references refid="structrgb__color_1ac0259068653969121d72739ad8509979" compoundref="GraphicsDefs_8h" startline="44">rgb_color::green</references>
        <references refid="structrgb__color_1ad8f118f509b77a245d9e38829336f0ec" compoundref="GraphicsDefs_8h" startline="43">rgb_color::red</references>
        <references refid="classBView_1af0426243110fb150ad7ef0705209a12c">SetLowColor</references>
      </memberdef>
      <memberdef kind="function" id="classBView_1a423c54f22ab95745b28b583af999e554" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
        <definition>rgb_color BView::LowColor</definition>
        <argsstring>() const</argsstring>
        <name>LowColor</name>
        <qualifiedname>BView::LowColor</qualifiedname>
        <briefdescription>
<para>Return the current low color. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current low color as an <ref refid="structrgb__color" kindref="compound">rgb_color</ref> struct.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1af0426243110fb150ad7ef0705209a12c" kindref="member">SetLowColor(rgb_color)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a929fb1ca47a00220c355ae55a0ea6077" kindref="member">SetLowColor(uchar, uchar, uchar, uchar)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="308" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a879ab88d4e64345069f1041d3a7b652f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetLowUIColor</definition>
        <argsstring>(color_which which, float tint=B_NO_TINT)</argsstring>
        <name>SetLowUIColor</name>
        <qualifiedname>BView::SetLowUIColor</qualifiedname>
        <param>
          <type>color_which</type>
          <declname>which</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tint</declname>
          <defval>B_NO_TINT</defval>
        </param>
        <briefdescription>
<para>Set the low color of the view to a system constant. The color will update live with user changes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The color_which constant to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional tint value to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="310" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae32ca6d8f106d44b5b51df82a7eb64c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>color_which</type>
        <definition>color_which BView::LowUIColor</definition>
        <argsstring>(float *tint=NULL) const</argsstring>
        <name>LowUIColor</name>
        <qualifiedname>BView::LowUIColor</qualifiedname>
        <param>
          <type>float *</type>
          <declname>tint</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Return the current low color constant being used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tint</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional float pointer in which to store the tint value used to modify the system color constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current low color constant.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a879ab88d4e64345069f1041d3a7b652f" kindref="member">SetLowUIColor(color_which, float)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="312" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae97bfe6c0c93fce98bc7bbd93761dbfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetLineMode</definition>
        <argsstring>(cap_mode lineCap, join_mode lineJoin, float miterLimit=B_DEFAULT_MITER_LIMIT)</argsstring>
        <name>SetLineMode</name>
        <qualifiedname>BView::SetLineMode</qualifiedname>
        <param>
          <type><ref refid="InterfaceDefs_8h_1ae078d93af8896eefbd9cc2a4d4109b75" kindref="member">cap_mode</ref></type>
          <declname>lineCap</declname>
        </param>
        <param>
          <type><ref refid="InterfaceDefs_8h_1a34d46f21246dbbcad93eb276d5623987" kindref="member">join_mode</ref></type>
          <declname>lineJoin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>miterLimit</declname>
          <defval><ref refid="InterfaceDefs_8h_1ac3a4d84b6b7a7102eb0bb808507ed75f" kindref="member">B_DEFAULT_MITER_LIMIT</ref></defval>
        </param>
        <briefdescription>
<para>Set line mode to use PostScript-style line cap and join modes. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>lineCap</emphasis> determines the shape of the endpoints of stroked paths while <emphasis>lineJoin</emphasis> determines the shape of the corners where two lines meet.</para>
<para>The default miter limit is 10.0 which gives an angle of 11.478341°.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lineCap</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_ROUND_CAP</computeroutput> A semicircle with diameter of line width is drawn at the endpoint.</para>
</listitem><listitem><para><computeroutput>B_BUTT_CAP</computeroutput> A straight edge is drawn without extending beyond the endpoint.</para>
</listitem><listitem><para><computeroutput>B_SQUARE_CAP</computeroutput> A straight edge is drawn extending past the endpoint by half the line width. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lineJoin</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_ROUND_JOIN</computeroutput> Same as <computeroutput>B_ROUND_CAP</computeroutput> but for a join.</para>
</listitem><listitem><para><computeroutput>B_MITER_JOIN</computeroutput> The lines are extended until they meet. If angle that they meet at is greater than the 2*arcsin(1/<emphasis>miterLimit</emphasis>) than a bevel join is used instead.</para>
</listitem><listitem><para><computeroutput>B_BEVEL_JOIN</computeroutput> The area between the caps is filled with a triangle.</para>
</listitem><listitem><para><computeroutput>B_BUTT_JOIN</computeroutput> Same as <computeroutput>B_BUTT_CAP</computeroutput> but for a join.</para>
</listitem><listitem><para><computeroutput>B_SQUARE_JOIN</computeroutput> Same as <computeroutput>B_SQUARE_CAP</computeroutput> but for a join. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>miterLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the cut off angle before a miter join becomes a bevel join calculated by 2*arcsin(1/<emphasis>miterLimit</emphasis>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="314" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0aa47adb29d91b4cc6c4924b7f436012" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="InterfaceDefs_8h_1a34d46f21246dbbcad93eb276d5623987" kindref="member">join_mode</ref></type>
        <definition>join_mode BView::LineJoinMode</definition>
        <argsstring>() const</argsstring>
        <name>LineJoinMode</name>
        <qualifiedname>BView::LineJoinMode</qualifiedname>
        <briefdescription>
<para>Returns the current line join mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current line join mode set to the view.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="317" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a551f5961188e4f26ef310eb5eea7c926" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="InterfaceDefs_8h_1ae078d93af8896eefbd9cc2a4d4109b75" kindref="member">cap_mode</ref></type>
        <definition>cap_mode BView::LineCapMode</definition>
        <argsstring>() const</argsstring>
        <name>LineCapMode</name>
        <qualifiedname>BView::LineCapMode</qualifiedname>
        <briefdescription>
<para>Returns the current line cap mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current line cap mode set to the view.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="318" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab1cd7cf77a4fa01755d186a05163cfbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BView::LineMiterLimit</definition>
        <argsstring>() const</argsstring>
        <name>LineMiterLimit</name>
        <qualifiedname>BView::LineMiterLimit</qualifiedname>
        <briefdescription>
<para>Returns the miter limit used for <computeroutput>B_MITER_JOIN</computeroutput> join mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current miter limit set to the view.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="319" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2019def93337069c0b7d416e103522e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetFillRule</definition>
        <argsstring>(int32 rule)</argsstring>
        <name>SetFillRule</name>
        <qualifiedname>BView::SetFillRule</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Sets the fill rule for the view. </para>
        </briefdescription>
        <detaileddescription>
<para>A fill rule is a rule that describes an algorithm that is used to find out what the inside of a shape is. The concept comes from the SVG format.</para>
<para>See <ulink url="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule">the Mozilla documentation on the fill property of SVG</ulink> for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>There are two algorithms: the <computeroutput>B_NONZERO</computeroutput> and the <computeroutput>B_EVEN_ODD</computeroutput> algorithm.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="321" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a3a2fd2d7313a9bb7dff359a4f4362a5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BView::FillRule</definition>
        <argsstring>() const</argsstring>
        <name>FillRule</name>
        <qualifiedname>BView::FillRule</qualifiedname>
        <briefdescription>
<para>Return the current fill mode. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classBView_1a2019def93337069c0b7d416e103522e9" kindref="member">BView::SetFillRule()</ref> for more information.</para>
<para><simplesect kind="return"><para>Returns <computeroutput>0</computeroutput> if no fill rule is applied, <computeroutput>B_EVEN_ODD</computeroutput> when the even-odd algorithm is applied, and <computeroutput>B_NONZERO</computeroutput> if the nonzero algorithm is applied.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="322" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a769e5fa6486adf12e7a3511ed372a06c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetOrigin</definition>
        <argsstring>(BPoint where)</argsstring>
        <name>SetOrigin</name>
        <qualifiedname>BView::SetOrigin</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Sets the origin in the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to set the origin to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1aefbf71a7a403900e960ffa3943dc9901" kindref="member">Origin()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="324" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7cf4e3ac5b0759b9c38d7b36517f2337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetOrigin</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>SetOrigin</name>
        <qualifiedname>BView::SetOrigin</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Sets the origin in the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate to set the origin to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate to set the origin to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1aefbf71a7a403900e960ffa3943dc9901" kindref="member">Origin()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="325" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aefbf71a7a403900e960ffa3943dc9901" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::Origin</definition>
        <argsstring>() const</argsstring>
        <name>Origin</name>
        <qualifiedname>BView::Origin</qualifiedname>
        <briefdescription>
<para>Returns the origin point in the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The local origin point in the view&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a769e5fa6486adf12e7a3511ed372a06c" kindref="member">SetOrigin()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="326" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1afbd9b8f35226ba89980c450f7626fc85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetTransform</definition>
        <argsstring>(BAffineTransform transform)</argsstring>
        <name>SetTransform</name>
        <qualifiedname>BView::SetTransform</qualifiedname>
        <param>
          <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
<para>Sets a <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> to transform the coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>See <ref refid="classBView_1ab16cc72cf8ae3b40abcf1f714e7e9b74" kindref="member">Transform()</ref> to get the current transformations, and <ref refid="classBView_1a8ae6d4e1cdfeeee33b753d56bee6ae7f" kindref="member">TranslateBy()</ref>, <ref refid="classBView_1ac83f9fdfb882f849e3ac79bfb06a0fd6" kindref="member">ScaleBy()</ref> and <ref refid="classBView_1a02ab6b6196b140b20ae516a55680e30b" kindref="member">RotateBy()</ref> for additional transformation options.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="331" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab16cc72cf8ae3b40abcf1f714e7e9b74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BView::Transform</definition>
        <argsstring>() const</argsstring>
        <name>Transform</name>
        <qualifiedname>BView::Transform</qualifiedname>
        <briefdescription>
<para>Returns the current <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> that is applied to the coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBView_1afbd9b8f35226ba89980c450f7626fc85" kindref="member">SetTransform()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="332" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8ae6d4e1cdfeeee33b753d56bee6ae7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::TranslateBy</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>TranslateBy</name>
        <qualifiedname>BView::TranslateBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Translate the current view by coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>The translation of <emphasis>x</emphasis> and <emphasis>y</emphasis> are applied to the current transformation, not instead of, so it is an additive action.</para>
<para><simplesect kind="see"><para>See <ref refid="classBView_1ab16cc72cf8ae3b40abcf1f714e7e9b74" kindref="member">Transform()</ref> to get the current transformations, <ref refid="classBView_1afbd9b8f35226ba89980c450f7626fc85" kindref="member">SetTransform()</ref>, <ref refid="classBView_1ac83f9fdfb882f849e3ac79bfb06a0fd6" kindref="member">ScaleBy()</ref> and <ref refid="classBView_1a02ab6b6196b140b20ae516a55680e30b" kindref="member">RotateBy()</ref> for additional transformation options.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="333" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac83f9fdfb882f849e3ac79bfb06a0fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ScaleBy</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>ScaleBy</name>
        <qualifiedname>BView::ScaleBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Scale the current view by factors <emphasis>x</emphasis> and <emphasis>y</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The scaling with factors <emphasis>x</emphasis> and <emphasis>y</emphasis> are applied to the current transformation, not instead of, so it is an additive action.</para>
<para><simplesect kind="see"><para>See <ref refid="classBView_1ab16cc72cf8ae3b40abcf1f714e7e9b74" kindref="member">Transform()</ref> to get the current transformations, <ref refid="classBView_1afbd9b8f35226ba89980c450f7626fc85" kindref="member">SetTransform()</ref>, <ref refid="classBView_1a8ae6d4e1cdfeeee33b753d56bee6ae7f" kindref="member">TranslateBy()</ref> and <ref refid="classBView_1a02ab6b6196b140b20ae516a55680e30b" kindref="member">RotateBy()</ref> for additional transformation options.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="334" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a02ab6b6196b140b20ae516a55680e30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::RotateBy</definition>
        <argsstring>(double angleRadians)</argsstring>
        <name>RotateBy</name>
        <qualifiedname>BView::RotateBy</qualifiedname>
        <param>
          <type>double</type>
          <declname>angleRadians</declname>
        </param>
        <briefdescription>
<para>Rotate the current view by <emphasis>angleRadians</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The rotation is applied to the current transformation, not instead of, so it is an additive action.</para>
<para><simplesect kind="see"><para>See <ref refid="classBView_1ab16cc72cf8ae3b40abcf1f714e7e9b74" kindref="member">Transform()</ref> to get the current transformations, <ref refid="classBView_1afbd9b8f35226ba89980c450f7626fc85" kindref="member">SetTransform()</ref>, <ref refid="classBView_1ac83f9fdfb882f849e3ac79bfb06a0fd6" kindref="member">ScaleBy()</ref> and <ref refid="classBView_1a8ae6d4e1cdfeeee33b753d56bee6ae7f" kindref="member">TranslateBy()</ref> for additional transformation options.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="335" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a98597d70ae48b2576683f25078135534" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref></type>
        <definition>BAffineTransform BView::TransformTo</definition>
        <argsstring>(coordinate_space basis) const</argsstring>
        <name>TransformTo</name>
        <qualifiedname>BView::TransformTo</qualifiedname>
        <param>
          <type><ref refid="View_8h_1a19d26e68e7942a7957a7be71ed787931" kindref="member">coordinate_space</ref></type>
          <declname>basis</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBAffineTransform" kindref="compound">BAffineTransform</ref> to convert from the current drawing space to <emphasis>basis</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>B_PREVIOUS_STATE_COORDINATES</computeroutput> is equivalent to <computeroutput>B_CURRENT_STATE_COORDINATES</computeroutput> when there is no parent state.</para>
<para><computeroutput>B_PARENT_VIEW_DRAW_COORDINATES</computeroutput> and <computeroutput>B_PARENT_VIEW_COORDINATES</computeroutput> are equivalent to <computeroutput>B_WINDOW_COORDINATES</computeroutput> when used on a root view.</para>
<para><computeroutput>B_WINDOW_COORDINATES</computeroutput> works as <computeroutput>B_SCREEN_COORDINATES</computeroutput> for unattached views.</para>
<para><simplesect kind="see"><para><ref refid="classBView_1ab16cc72cf8ae3b40abcf1f714e7e9b74" kindref="member">Transform()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__interface_1coordinatespaces" kindref="member">Coordinate spaces</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="337" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1dcb914cd0c6ef8d1291aa8492968d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::PushState</definition>
        <argsstring>()</argsstring>
        <name>PushState</name>
        <qualifiedname>BView::PushState</qualifiedname>
        <briefdescription>
<para>Saves the drawing state to the stack. </para>
        </briefdescription>
        <detaileddescription>
<para>The drawing state contains the following elements:<itemizedlist>
<listitem><para>local and global origins</para>
</listitem><listitem><para>local and global scales</para>
</listitem><listitem><para>local and global clipping regions</para>
</listitem><listitem><para>the current drawing mode</para>
</listitem><listitem><para>pen size and location</para>
</listitem><listitem><para>the font context</para>
</listitem><listitem><para>foreground and background color</para>
</listitem><listitem><para>line cap and join modes</para>
</listitem><listitem><para>miter limit</para>
</listitem><listitem><para>stipple pattern</para>
</listitem></itemizedlist>
</para>
<para>A new state context is created after <ref refid="classBView_1a1dcb914cd0c6ef8d1291aa8492968d40" kindref="member">PushState()</ref> is called with a local scale at 0, a local origin at (0, 0), and no clipping region.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="339" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abc0d202fe13366b80703afbdb3832951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::PopState</definition>
        <argsstring>()</argsstring>
        <name>PopState</name>
        <qualifiedname>BView::PopState</qualifiedname>
        <briefdescription>
<para>Restores the drawing state from the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="340" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acb61254a2121f569f6223a95cd835abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::MovePenTo</definition>
        <argsstring>(BPoint pt)</argsstring>
        <name>MovePenTo</name>
        <qualifiedname>BView::MovePenTo</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>pt</declname>
          <defname>point</defname>
        </param>
        <briefdescription>
<para>Move the pen to <emphasis>point</emphasis> in the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to move the pen to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="342" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae32d7951a4ce9cff6b81899f5208a25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::MovePenTo</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>MovePenTo</name>
        <qualifiedname>BView::MovePenTo</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Move the pen to the point specified by <emphasis>x</emphasis> and <emphasis>y</emphasis> in the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal coordinate to move the pen to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical coordinate to move the pen to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="343" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a979f8f0090284919b6e7c6c04d91cbde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::MovePenBy</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>MovePenBy</name>
        <qualifiedname>BView::MovePenBy</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Move the pen by <emphasis>x</emphasis> pixels horizontally and <emphasis>y</emphasis> pixels vertically. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to move the pen horizontally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to move the pen vertically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="344" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2774e13c2b12c6a5fee333e95b76b07d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::PenLocation</definition>
        <argsstring>() const</argsstring>
        <name>PenLocation</name>
        <qualifiedname>BView::PenLocation</qualifiedname>
        <briefdescription>
<para>Return the current pen location as a <ref refid="classBPoint" kindref="compound">BPoint</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current pen location in the view&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1acb61254a2121f569f6223a95cd835abd" kindref="member">MovePenTo(BPoint)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1ae32d7951a4ce9cff6b81899f5208a25f" kindref="member">MovePenTo(float, float)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a979f8f0090284919b6e7c6c04d91cbde" kindref="member">MovePenBy(float, float)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="345" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9247127c151153542a3e6bc1f3904433" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetFont</definition>
        <argsstring>(const BFont *font, uint32 mask=B_FONT_ALL)</argsstring>
        <name>SetFont</name>
        <qualifiedname>BView::SetFont</qualifiedname>
        <reimplementedby refid="classBChannelControl_1ac410bc781b8679e529663607a4134951">SetFont</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1af208806038eee0044da24f6b8ebe1d5c">SetFont</reimplementedby>
        <reimplementedby refid="classBListView_1a7b0bd589bd4b1fb410b6e007fe107c62">SetFont</reimplementedby>
        <reimplementedby refid="classBStringView_1a57563eb3072229d1739fd91a10b991d7">SetFont</reimplementedby>
        <param>
          <type>const <ref refid="classBFont" kindref="compound">BFont</ref> *</type>
          <declname>font</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mask</declname>
          <defval><ref refid="View_8h_1af715e26dfffd1f8de1c18449e2770cffa2cc16d47078da54b17b7ed4fe2d64798" kindref="member">B_FONT_ALL</ref></defval>
        </param>
        <briefdescription>
<para>Set the font of the view. </para>
        </briefdescription>
        <detaileddescription>
<para>By passing <computeroutput>B_FONT_ALL</computeroutput> to the <emphasis>mask</emphasis> parameter as is the default all font properties from <emphasis>font</emphasis> are set on the view.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a const <ref refid="classBFont" kindref="compound">BFont</ref> object to set on the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A mask to determine what font properties to set, either pass in <computeroutput>B_FONT_ALL</computeroutput> to set all font properties or create a mask containing one or more of the following values to set:<itemizedlist>
<listitem><para><computeroutput>B_FONT_FAMILY_AND_STYLE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FONT_SPACING</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FONT_SIZE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FONT_ENCODING</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FONT_SHEAR</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FONT_FACE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FONT_ROTATION</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FONT_FLAGS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBFont" kindref="compound">BFont</ref> for more details.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="517" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af244d01f85e6d9ae7f5fcca4637dc78c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::GetFont</definition>
        <argsstring>(BFont *font) const</argsstring>
        <name>GetFont</name>
        <qualifiedname>BView::GetFont</qualifiedname>
        <param>
          <type><ref refid="classBFont" kindref="compound">BFont</ref> *</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Fill out <emphasis>font</emphasis> with the font set to the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">font</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBFont" kindref="compound">BFont</ref> object to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="520" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac2e293fbdd999e4857b44b6e4d4c3820" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::TruncateString</definition>
        <argsstring>(BString *in_out, uint32 mode, float width) const</argsstring>
        <name>TruncateString</name>
        <qualifiedname>BView::TruncateString</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>in_out</declname>
          <defname>string</defname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Truncate <emphasis>string</emphasis> with truncation mode <emphasis>mode</emphasis> so that it is no wider than <emphasis>width</emphasis> set in the view&apos;s font. </para>
        </briefdescription>
        <detaileddescription>
<para>When the string is truncated the missing characters are replaced by a horizontal ellipses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to truncate in place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The truncation mode to use, one of the following:<itemizedlist>
<listitem><para><computeroutput>B_TRUNCATE_BEGINNING</computeroutput> Truncate from the beginning of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_MIDDLE</computeroutput> Truncate from the middle of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_END</computeroutput> Truncate from the end of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_SMART</computeroutput> Truncate from anywhere based on the string content. Not currently implemented. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width to truncate the string to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="521" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1adef480de8a8bcd2fff3129660501616e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BView::StringWidth</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>StringWidth</name>
        <qualifiedname>BView::StringWidth</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Return the width of <emphasis>string</emphasis> set in the font of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to get the width of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The width of the string in the view&apos;s font as a float.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="523" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aef3638cf597407e6a9f31bc75cd42097" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BView::StringWidth</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>StringWidth</name>
        <qualifiedname>BView::StringWidth</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Return the width of <emphasis>string</emphasis> set in the font of the view up to <emphasis>length</emphasis> characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>string</emphasis> to get the width of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of characters in <emphasis>string</emphasis> to consider.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The width of the string in the view&apos;s font as a float.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="524" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aaae0dc93bc61d7f221465fbe0aecd30a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::GetStringWidths</definition>
        <argsstring>(char *stringArray[], int32 lengthArray[], int32 numStrings, float widthArray[]) const</argsstring>
        <name>GetStringWidths</name>
        <qualifiedname>BView::GetStringWidths</qualifiedname>
        <param>
          <type>char *</type>
          <declname>stringArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>lengthArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type>float</type>
          <declname>widthArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Fill out widths of the strings in <emphasis>stringArray</emphasis> set in the font of the view into <emphasis>widthArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of strings to get the lengths of. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lengthArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters of the strings in <emphasis>stringArray</emphasis> to consider. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of strings in <emphasis>stringArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>widthArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to store the widths of the strings in <emphasis>stringArray</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="526" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a443e4d9ff182f85a6b1c8478ef22ffe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetFontSize</definition>
        <argsstring>(float size)</argsstring>
        <name>SetFontSize</name>
        <qualifiedname>BView::SetFontSize</qualifiedname>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the size of the view&apos;s font to <emphasis>size</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The font size to set to the view in points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="529" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a424161ccf6f52a354fdd67ed1376d196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ForceFontAliasing</definition>
        <argsstring>(bool enable)</argsstring>
        <name>ForceFontAliasing</name>
        <qualifiedname>BView::ForceFontAliasing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Turn anti-aliasing on and off when printing. </para>
        </briefdescription>
        <detaileddescription>
<para>Typically want to turn font anti-aliasing off when printing by passing <computeroutput>true</computeroutput> to this method and then turn it on again by passing in <computeroutput>false</computeroutput>.</para>
<para>This method does not affect characters drawn to the screen.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> turn off anti-aliasing, if <computeroutput>false</computeroutput> turn on anti-aliasing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="530" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5bf95d66754634c647b2ddf7d39b4dfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::GetFontHeight</definition>
        <argsstring>(font_height *height) const</argsstring>
        <name>GetFontHeight</name>
        <qualifiedname>BView::GetFontHeight</qualifiedname>
        <param>
          <type><ref refid="structfont__height" kindref="compound">font_height</ref> *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Fill out the <ref refid="structfont__height" kindref="compound">font_height</ref> struct with the view font. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structfont__height" kindref="compound">font_height</ref> struct to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="531" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a077136ea06f0a6b39aa0b8b24311cce8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetScale</definition>
        <argsstring>(float scale) const</argsstring>
        <name>SetScale</name>
        <qualifiedname>BView::SetScale</qualifiedname>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Sets the scale of the coordinate system the view uses for drawing. </para>
        </briefdescription>
        <detaileddescription>
<para>The default scale is 1.0. A <emphasis>scale</emphasis> value lower than 1.0 reduces the size of the drawing coordinate system, a <emphasis>scale</emphasis> value greater than 1.0 magnifies the coordinate system; for example, a <emphasis>scale</emphasis> value of 0.5 cuts the drawing drawing area in half moving the drawing closer to the origin while a <emphasis>scale</emphasis> value of 2.0 doubles the drawing area and moving it away from the origin.</para>
<para>Updating the <emphasis>scale</emphasis> of view won&apos;t update previously drawn elements.</para>
<para><ref refid="classBView_1a077136ea06f0a6b39aa0b8b24311cce8" kindref="member">SetScale()</ref> calls are not commutative unless you call them across different drawing states as the following:</para>
<para><programlisting><codeline><highlight class="normal">view-&gt;SetScale(2);</highlight></codeline>
<codeline><highlight class="normal">view-&gt;SetScale(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>view&apos;s<sp/>scale<sp/>is<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">view2-&gt;SetScale(2);</highlight></codeline>
<codeline><highlight class="normal">view2-&gt;PushState();</highlight></codeline>
<codeline><highlight class="normal">view2-&gt;SetScale(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>view2&apos;s<sp/>scale<sp/>is<sp/>4</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scale factor to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="600" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a50e12d6b8080b3bc6bc617d31d1ab200" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BView::Scale</definition>
        <argsstring>() const</argsstring>
        <name>Scale</name>
        <qualifiedname>BView::Scale</qualifiedname>
        <briefdescription>
<para>Return the current drawing scale. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current drawing scale.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="601" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Drawing Related</header>
      <description><para>The view must be attached to the window for these methods to work unless otherwise stated. Notes on specific methods are provided below:</para>
<para><ref refid="classBView_1a6171150993fbf7c73966c7c302a95573" kindref="member">DrawBitmap()</ref> <ref refid="classBView_1a8848d931fd0354860a0e71934e66cb03" kindref="member">DrawTiledBitmap()</ref></para>
<para><ref refid="classBView_1a6171150993fbf7c73966c7c302a95573" kindref="member">DrawBitmap()</ref> scales the image to fit if the image has different size than the destination rectangle.</para>
<para><ref refid="classBView_1a8848d931fd0354860a0e71934e66cb03" kindref="member">DrawTiledBitmap()</ref> fills the destination rectangle with copies of the source image, without changing its size.</para>
<para>The asynchronous versions pass the image to Application Server and return immediately.</para>
<para>This can be more efficient in some cases for example to draw several bitmaps at once and then call <ref refid="classBView_1a27e217abb3fefa45b6e4ceb7a54cb362" kindref="member">Sync()</ref> to tell Application Server to wait for them all to finish drawing rather than waiting for each one to draw.</para>
<para><ref refid="classBView_1ae4b252943befd9f0b62e30517b3ecec2" kindref="member">DrawPicture()</ref></para>
<para>The asynchronous versions pass the picture to Application Server and return immediately.</para>
<para>This can be more efficient in some cases for example to draw several pictures at once and then call <ref refid="classBView_1a27e217abb3fefa45b6e4ceb7a54cb362" kindref="member">Sync()</ref> to tell Application Server to wait for them all to finish drawing rather than waiting for each one to draw.</para>
<para><ref refid="classBView_1ae4b252943befd9f0b62e30517b3ecec2" kindref="member">DrawPicture()</ref> doesn&apos;t alter the graphics state of the view nor do changes to the graphics state of the view alter the <ref refid="classBPicture" kindref="compound">BPicture</ref> object. What the picture will look like depends on the graphics parameters that were in effect when the picture was recorded.</para>
<para><ref refid="classBView_1a5c261dbbb4e8157799e85d6ad1530920" kindref="member">DrawString()</ref></para>
<para>The <emphasis>string</emphasis> is drawn in the view&apos;s current font and is modified by the other parameters of the font such as its direction (left-to-right or right-to-left), rotation, spacing, shear, etc. The <emphasis>string</emphasis> is always drawn left to right even if its text direction is set to right-to-left mode.</para>
<para>Drawing a string is fastest in <computeroutput>B_OP_COPY</computeroutput> mode and anti-aliasing can produce undesirable effects when a string is draw in other modes, especially if the string is drawn in the same location repeatedly.</para>
<para><ref refid="classBView_1a5c261dbbb4e8157799e85d6ad1530920" kindref="member">DrawString()</ref> doesn&apos;t erase before drawing. </para>
</description>
      <memberdef kind="function" id="classBView_1ac247ddc58f1cb719d60e354a77c51c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetViewBitmap</definition>
        <argsstring>(const BBitmap *bitmap, BRect srcRect, BRect dstRect, uint32 followFlags=B_FOLLOW_LEFT_TOP, uint32 options=B_TILE_BITMAP)</argsstring>
        <name>SetViewBitmap</name>
        <qualifiedname>BView::SetViewBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>srcRect</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>dstRect</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>followFlags</declname>
          <defval><ref refid="View_8h_1a8a6df90f52ddaede7f1aaf43339638e5" kindref="member">B_FOLLOW_LEFT_TOP</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
          <defval>B_TILE_BITMAP</defval>
        </param>
        <briefdescription>
<para>Sets the background <emphasis>bitmap</emphasis> of the view. </para>
        </briefdescription>
        <detaileddescription>
<para>All drawing to the view occurs over <emphasis>bitmap</emphasis>. Any visible regions not covered by <emphasis>bitmap</emphasis> are filled with the current background color.</para>
<para>Once <emphasis>bitmap</emphasis> has been passed in and this method returns the caller may safely delete the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The background bitmap to set to the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcRect</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the area of <emphasis>bitmap</emphasis> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstRect</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the area of the view to set <emphasis>bitmap</emphasis> to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>followFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the as the view is resized. See the <ref refid="classBView" kindref="compound">BView</ref> constructor for more details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies additional view options. The only option currently available is <computeroutput>B_TILE_BITMAP</computeroutput> which tiles the bitmap across the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="276" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a046a9c1656823db5401e530cf8121734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetViewBitmap</definition>
        <argsstring>(const BBitmap *bitmap, uint32 followFlags=B_FOLLOW_LEFT_TOP, uint32 options=B_TILE_BITMAP)</argsstring>
        <name>SetViewBitmap</name>
        <qualifiedname>BView::SetViewBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>followFlags</declname>
          <defval><ref refid="View_8h_1a8a6df90f52ddaede7f1aaf43339638e5" kindref="member">B_FOLLOW_LEFT_TOP</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
          <defval>B_TILE_BITMAP</defval>
        </param>
        <briefdescription>
<para>Sets the background <emphasis>bitmap</emphasis> of the view. </para>
        </briefdescription>
        <detaileddescription>
<para>All drawing to the view occurs over <emphasis>bitmap</emphasis>. Any visible regions not covered by <emphasis>bitmap</emphasis> are filled with the current background color.</para>
<para>Once <emphasis>bitmap</emphasis> has been passed in and this method returns the caller may safely delete the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The background bitmap to set to the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>followFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the as the view is resized. See the <ref refid="classBView" kindref="compound">BView</ref> constructor for more details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies additional view options. The only option currently available is <computeroutput>B_TILE_BITMAP</computeroutput> which tiles the bitmap across the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="280" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae7582b9a2b0b446a1de16c681f23baf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClearViewBitmap</definition>
        <argsstring>()</argsstring>
        <name>ClearViewBitmap</name>
        <qualifiedname>BView::ClearViewBitmap</qualifiedname>
        <briefdescription>
<para>Clears the background bitmap of the view if it has one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="283" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a576100502a8c6dfb46ff36b08cbe9405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::SetViewOverlay</definition>
        <argsstring>(const BBitmap *overlay, BRect srcRect, BRect dstRect, rgb_color *colorKey, uint32 followFlags=B_FOLLOW_LEFT_TOP, uint32 options=0)</argsstring>
        <name>SetViewOverlay</name>
        <qualifiedname>BView::SetViewOverlay</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>overlay</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>srcRect</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>dstRect</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref> *</type>
          <declname>colorKey</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>followFlags</declname>
          <defval><ref refid="View_8h_1a8a6df90f52ddaede7f1aaf43339638e5" kindref="member">B_FOLLOW_LEFT_TOP</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the <emphasis>overlay</emphasis> bitmap of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>colorKey</emphasis> specifies which color pixels in <emphasis>overlay</emphasis> are treated as transparent allowing the pixels of the view to show through.</para>
<para>Once <emphasis>overlay</emphasis> has been passed in and this method returns the caller may safely delete the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overlay</parametername>
</parameternamelist>
<parameterdescription>
<para>The overlay bitmap to set to the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcRect</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the area of <emphasis>overlay</emphasis> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstRect</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the area of the view to set <emphasis>overlay</emphasis> to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colorKey</parametername>
</parameternamelist>
<parameterdescription>
<para>The color in <emphasis>overlay</emphasis> to treat as transparent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>followFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the as the view is resized. See the <ref refid="classBView" kindref="compound">BView</ref> constructor for more details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies additional view options. The only option currently available is <computeroutput>B_TILE_BITMAP</computeroutput> which tiles the bitmap across the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="285" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9770c1bb97d7ffd797f7c40ca1339f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::SetViewOverlay</definition>
        <argsstring>(const BBitmap *overlay, rgb_color *colorKey, uint32 followFlags=B_FOLLOW_LEFT_TOP, uint32 options=0)</argsstring>
        <name>SetViewOverlay</name>
        <qualifiedname>BView::SetViewOverlay</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>overlay</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref> *</type>
          <declname>colorKey</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>followFlags</declname>
          <defval><ref refid="View_8h_1a8a6df90f52ddaede7f1aaf43339638e5" kindref="member">B_FOLLOW_LEFT_TOP</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the <emphasis>overlay</emphasis> bitmap of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>colorKey</emphasis> specifies which color pixels in <emphasis>overlay</emphasis> are treated as transparent allowing the pixels of the view to show through.</para>
<para>Once <emphasis>overlay</emphasis> has been passed in and this method returns the caller may safely delete the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>overlay</parametername>
</parameternamelist>
<parameterdescription>
<para>The overlay bitmap to set to the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colorKey</parametername>
</parameternamelist>
<parameterdescription>
<para>The color in <emphasis>overlay</emphasis> to treat as transparent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>followFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the as the view is resized. See the <ref refid="classBView" kindref="compound">BView</ref> constructor for more details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies additional view options. The only option currently available is <computeroutput>B_TILE_BITMAP</computeroutput> which tiles the bitmap across the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="290" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0ae48f37c3f56b422841638971488cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ClearViewOverlay</definition>
        <argsstring>()</argsstring>
        <name>ClearViewOverlay</name>
        <qualifiedname>BView::ClearViewOverlay</qualifiedname>
        <briefdescription>
<para>Clears the overlay bitmap of the view if it has one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="294" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a909ee03901fac4ae5504f7faf5e41a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeLine</definition>
        <argsstring>(BPoint toPoint, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeLine</name>
        <qualifiedname>BView::StrokeLine</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>toPoint</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke a line from the current pen location to the point <emphasis>toPoint</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>toPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The end point of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="346" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab713fc42e330d0a091a9774edfb9626f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeLine</definition>
        <argsstring>(BPoint start, BPoint end, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeLine</name>
        <qualifiedname>BView::StrokeLine</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke a line from point <emphasis>start</emphasis> to point <emphasis>end</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The start point of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The end point of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="348" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab3f2e9f54d2b93952b27e182ac552983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::BeginLineArray</definition>
        <argsstring>(int32 count)</argsstring>
        <name>BeginLineArray</name>
        <qualifiedname>BView::BeginLineArray</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Begin a line array of up to <emphasis>count</emphasis> lines. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a more efficient way of drawing a large number of lines than calling <ref refid="classBView_1a909ee03901fac4ae5504f7faf5e41a7c" kindref="member">StrokeLine()</ref> repeatedly. First call <ref refid="classBView_1ab3f2e9f54d2b93952b27e182ac552983" kindref="member">BeginLineArray()</ref> to begin drawing lines, then call <ref refid="classBView_1a88440336a66ee9b1a4b1661e9ba9e59c" kindref="member">AddLine()</ref> for each line you wish to draw, and finally call <ref refid="classBView_1a24ba922f9698936bc27f48b3c51349a1" kindref="member">EndLineArray()</ref> to finish the line array and draw the lines.</para>
<para>These methods don&apos;t move the current pen location or change the high or low colors of the view. <emphasis>count</emphasis> should be close to the number of lines you wish to draw and should be below 256 to draw efficiently.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of lines in the line array to draw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1a909ee03901fac4ae5504f7faf5e41a7c" kindref="member">StrokeLine()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="350" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a88440336a66ee9b1a4b1661e9ba9e59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::AddLine</definition>
        <argsstring>(BPoint start, BPoint end, rgb_color color)</argsstring>
        <name>AddLine</name>
        <qualifiedname>BView::AddLine</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Add a line to the line array drawn from <emphasis>start</emphasis> to <emphasis>end</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>start</emphasis> point of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>end</emphasis> point of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>color</emphasis> to draw the line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="351" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a24ba922f9698936bc27f48b3c51349a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::EndLineArray</definition>
        <argsstring>()</argsstring>
        <name>EndLineArray</name>
        <qualifiedname>BView::EndLineArray</qualifiedname>
        <briefdescription>
<para>End the line array drawing the lines. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="353" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae871d03592c1bba5d6be3d5d982ea747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokePolygon</definition>
        <argsstring>(const BPolygon *polygon, bool closed=true, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokePolygon</name>
        <qualifiedname>BView::StrokePolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPolygon" kindref="compound">BPolygon</ref> *</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>closed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke a polygon shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>The polygon shape to stroke. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the last line of the polygon should intersect with the initial point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="355" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1638c58553467f3ebe5ee2b3683d4905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokePolygon</definition>
        <argsstring>(const BPoint *pointArray, int32 numPoints, bool closed=true, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokePolygon</name>
        <qualifiedname>BView::StrokePolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pointArray</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>closed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke a polygon shape made up of points specified by <emphasis>pointArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of points that specify the vertices of the polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the last line of the polygon should intersect with the initial point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="358" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1482fddababe3dd1377f86a038f7119b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokePolygon</definition>
        <argsstring>(const BPoint *pointArray, int32 numPoints, BRect bounds, bool closed=true, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokePolygon</name>
        <qualifiedname>BView::StrokePolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pointArray</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>closed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke a polygon shape made up of points specified by <emphasis>pointArray</emphasis> inscribed by <emphasis>bounds</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of points that specify the vertices of the polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The smallest rectangle that encloses the points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the last line of the polygon should intersect with the initial point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="361" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae72733cae8a1fc2da8feb47c0c2149fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillPolygon</definition>
        <argsstring>(const BPolygon *polygon, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillPolygon</name>
        <qualifiedname>BView::FillPolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPolygon" kindref="compound">BPolygon</ref> *</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill a polygon shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>The polygon shape to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="365" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1adc7d96f2d60a819f03685eb11b6945e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillPolygon</definition>
        <argsstring>(const BPoint *pointArray, int32 numPoints, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillPolygon</name>
        <qualifiedname>BView::FillPolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pointArray</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill a polygon shape made up of points specified by <emphasis>pointArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of points that specify the vertices of the polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="367" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1bdc02a311b2a051ad7fbdbf1789e958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillPolygon</definition>
        <argsstring>(const BPoint *pointArray, int32 numPoints, BRect bounds, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillPolygon</name>
        <qualifiedname>BView::FillPolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pointArray</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bounds</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill a polygon shape made up of points specified by <emphasis>pointArray</emphasis> inscribed by <emphasis>bounds</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of points that specify the vertices of the polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The smallest rectangle that encloses the points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="370" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a96cdb60a8c87e4958380a3077a2197a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillPolygon</definition>
        <argsstring>(const BPolygon *polygon, const BGradient &amp;gradient)</argsstring>
        <name>FillPolygon</name>
        <qualifiedname>BView::FillPolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPolygon" kindref="compound">BPolygon</ref> *</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill a polygon shape with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>The polygon shape to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the polygon with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="373" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a22a5ce1f024e622b6eade6a9176ff1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillPolygon</definition>
        <argsstring>(const BPoint *pointArray, int32 numPoints, const BGradient &amp;gradient)</argsstring>
        <name>FillPolygon</name>
        <qualifiedname>BView::FillPolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pointArray</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill a polygon shape made up of points specified by <emphasis>pointArray</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of points that specify the vertices of the polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the polygon with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="375" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a57b0870cd6a0109c347d80c34ca2f34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillPolygon</definition>
        <argsstring>(const BPoint *pointArray, int32 numPoints, BRect bounds, const BGradient &amp;gradient)</argsstring>
        <name>FillPolygon</name>
        <qualifiedname>BView::FillPolygon</qualifiedname>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pointArray</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill a polygon shape made up of points specified by <emphasis>pointArray</emphasis> inscribed by <emphasis>bounds</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointArray</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of points that specify the vertices of the polygon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The smallest rectangle that encloses the points in <emphasis>pointArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the polygon with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="377" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8221cce8942e590c2fea954f57933e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeTriangle</definition>
        <argsstring>(BPoint point1, BPoint point2, BPoint point3, BRect bounds, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeTriangle</name>
        <qualifiedname>BView::StrokeTriangle</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bounds</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the triangle specified by points <emphasis>point1</emphasis>, <emphasis>point2</emphasis>, and <emphasis>point3</emphasis> and enclosed by <emphasis>bounds</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area that encloses the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="381" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae59fc9e9cfaba5e2d6e79a90723a3330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeTriangle</definition>
        <argsstring>(BPoint point1, BPoint point2, BPoint point3, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeTriangle</name>
        <qualifiedname>BView::StrokeTriangle</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the triangle specified by points <emphasis>point1</emphasis>, <emphasis>point2</emphasis>, and <emphasis>point3</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="384" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a46ec16609a402d03baa322a04d8c50e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillTriangle</definition>
        <argsstring>(BPoint point1, BPoint point2, BPoint point3, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillTriangle</name>
        <qualifiedname>BView::FillTriangle</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill the triangle specified by points <emphasis>point1</emphasis>, <emphasis>point2</emphasis>, and <emphasis>point3</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="387" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af512b76752705cba87f89c8dac313005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillTriangle</definition>
        <argsstring>(BPoint point1, BPoint point2, BPoint point3, BRect bounds, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillTriangle</name>
        <qualifiedname>BView::FillTriangle</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bounds</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill the triangle specified by points <emphasis>point1</emphasis>, <emphasis>point2</emphasis>, and <emphasis>point3</emphasis> and enclosed by <emphasis>bounds</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area that encloses the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="390" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5dd1c64839c11a79e80581e37656cc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillTriangle</definition>
        <argsstring>(BPoint point1, BPoint point2, BPoint point3, const BGradient &amp;gradient)</argsstring>
        <name>FillTriangle</name>
        <qualifiedname>BView::FillTriangle</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill the triangle specified by points <emphasis>point1</emphasis>, <emphasis>point2</emphasis>, and <emphasis>point3</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the triangle with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="393" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0878dea14a61d58c951bd8e11c0a2ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillTriangle</definition>
        <argsstring>(BPoint point1, BPoint point2, BPoint point3, BRect bounds, const BGradient &amp;gradient)</argsstring>
        <name>FillTriangle</name>
        <qualifiedname>BView::FillTriangle</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point1</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point2</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point3</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill the triangle specified by points <emphasis>point1</emphasis>, <emphasis>point2</emphasis>, and <emphasis>point3</emphasis> and enclosed by <emphasis>bounds</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area that encloses the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the triangle with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="395" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad3893af66d3891855f9db7072bfb4de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeRect</definition>
        <argsstring>(BRect rect, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeRect</name>
        <qualifiedname>BView::StrokeRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the rectangle specified by <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to stroke. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="399" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4d074663998c7ba922a9d981d0cfe086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillRect</definition>
        <argsstring>(BRect rect, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillRect</name>
        <qualifiedname>BView::FillRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill the rectangle specified by <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="401" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aae6a3ff6683bb15ac8c647c946475e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillRect</definition>
        <argsstring>(BRect rect, const BGradient &amp;gradient)</argsstring>
        <name>FillRect</name>
        <qualifiedname>BView::FillRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill the rectangle specified by <emphasis>rect</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the rectangle with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="403" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4810086c415d90bffa25ab2963716936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillRegion</definition>
        <argsstring>(BRegion *rectegion, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillRegion</name>
        <qualifiedname>BView::FillRegion</qualifiedname>
        <param>
          <type><ref refid="classBRegion" kindref="compound">BRegion</ref> *</type>
          <declname>rectegion</declname>
          <defname>region</defname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill <emphasis>region</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>region</emphasis> to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="404" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a56828d13947717462b661e1645305509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillRegion</definition>
        <argsstring>(BRegion *rectegion, const BGradient &amp;gradient)</argsstring>
        <name>FillRegion</name>
        <qualifiedname>BView::FillRegion</qualifiedname>
        <param>
          <type><ref refid="classBRegion" kindref="compound">BRegion</ref> *</type>
          <declname>rectegion</declname>
          <defname>region</defname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill <emphasis>region</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>region</emphasis> to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the <emphasis>region</emphasis> with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="406" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af7e5ebc41cd5a471dcdcfa1f3db801a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::InvertRect</definition>
        <argsstring>(BRect rect)</argsstring>
        <name>InvertRect</name>
        <qualifiedname>BView::InvertRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Inverts the colors within <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is often used to draw a highlighted selection in a view.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area in the view to invert the colors of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="408" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acf743b2ba22b82c8bc38eb514513df55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeRoundRect</definition>
        <argsstring>(BRect rect, float xRadius, float yRadius, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeRoundRect</name>
        <qualifiedname>BView::StrokeRoundRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the rounded rectangle with horizontal radius <emphasis>xRadius</emphasis> and vertical radius <emphasis>yRadius</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to stroke the round rect within. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="410" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a38d7e7b15a13591c20020599886402b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillRoundRect</definition>
        <argsstring>(BRect rect, float xRadius, float yRadius, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillRoundRect</name>
        <qualifiedname>BView::FillRoundRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill the rounded rectangle with horizontal radius <emphasis>xRadius</emphasis> and vertical radius <emphasis>yRadius</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to fill the round rect within. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="413" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a73956d28b356b2eee83ebc19bd6e398b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillRoundRect</definition>
        <argsstring>(BRect rect, float xRadius, float yRadius, const BGradient &amp;gradient)</argsstring>
        <name>FillRoundRect</name>
        <qualifiedname>BView::FillRoundRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill the rounded rectangle with horizontal radius <emphasis>xRadius</emphasis> and vertical radius <emphasis>yRadius</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area to fill the round rect within. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the round rect with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="416" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a042703445263f1d9a9213757fcf27414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeEllipse</definition>
        <argsstring>(BPoint center, float xRadius, float yRadius, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeEllipse</name>
        <qualifiedname>BView::StrokeEllipse</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the outline of an ellipse starting at <emphasis>center</emphasis> with a horizontal radius of <emphasis>xRadius</emphasis> and a vertical radius of <emphasis>yRadius</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="419" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae7727ca808873634363e5306fdbcc09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeEllipse</definition>
        <argsstring>(BRect rect, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeEllipse</name>
        <qualifiedname>BView::StrokeEllipse</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the outline of an ellipse inscribed within <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area within which to inscribe the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="422" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a06942f0dd4c13175bcfff6a88eae7cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillEllipse</definition>
        <argsstring>(BPoint center, float xRadius, float yRadius, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillEllipse</name>
        <qualifiedname>BView::FillEllipse</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill an ellipse starting at <emphasis>center</emphasis> with a horizontal radius of <emphasis>xRadius</emphasis> and a vertical radius of <emphasis>yRadius</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="424" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a98a73cbccb42edfc61b93f9aa6f4a13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillEllipse</definition>
        <argsstring>(BRect rect, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillEllipse</name>
        <qualifiedname>BView::FillEllipse</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill an ellipse inscribed within <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area within which to inscribe the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="427" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2738cf2f3d39f560d0cff90543f45afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillEllipse</definition>
        <argsstring>(BPoint center, float xRadius, float yRadius, const BGradient &amp;gradient)</argsstring>
        <name>FillEllipse</name>
        <qualifiedname>BView::FillEllipse</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill an ellipse with the specified <emphasis>gradient</emphasis> pattern starting at <emphasis>center</emphasis> with a horizontal radius of <emphasis>xRadius</emphasis> and a vertical radius of <emphasis>yRadius</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the ellipse with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="429" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a86de91f260577187eaf22ba0fdf32fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillEllipse</definition>
        <argsstring>(BRect rect, const BGradient &amp;gradient)</argsstring>
        <name>FillEllipse</name>
        <qualifiedname>BView::FillEllipse</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill an ellipse with the specified <emphasis>gradient</emphasis> pattern inscribed within <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area within which to inscribe the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the ellipse with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="431" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a57222cd40096dfe23e1df86a01277041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeArc</definition>
        <argsstring>(BPoint center, float xRadius, float yRadius, float startAngle, float arcAngle, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeArc</name>
        <qualifiedname>BView::StrokeArc</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>startAngle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>arcAngle</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the outline of an arc starting at <emphasis>center</emphasis> with a horizontal radius of <emphasis>xRadius</emphasis> and a vertical radius of <emphasis>yRadius</emphasis> starting at <emphasis>startAngle</emphasis> and drawing <emphasis>arcAngle</emphasis> degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to begin drawing at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of degrees of the arc to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="434" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9c958b9399925a8a0ea333afd337ebfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeArc</definition>
        <argsstring>(BRect rect, float startAngle, float arcAngle, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeArc</name>
        <qualifiedname>BView::StrokeArc</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>float</type>
          <declname>startAngle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>arcAngle</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke the outline of an arc inscribed within <emphasis>rect</emphasis> starting at <emphasis>startAngle</emphasis> and drawing <emphasis>arcAngle</emphasis> degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area within which to inscribe the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to begin drawing at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of degrees of the arc to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="438" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af0e5d362474d39199116045aa9621aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillArc</definition>
        <argsstring>(BPoint center, float xRadius, float yRadius, float startAngle, float arcAngle, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillArc</name>
        <qualifiedname>BView::FillArc</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>startAngle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>arcAngle</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill an arc starting at <emphasis>center</emphasis> with a horizontal radius of <emphasis>xRadius</emphasis> and a vertical radius of <emphasis>yRadius</emphasis> starting at <emphasis>startAngle</emphasis> and drawing <emphasis>arcAngle</emphasis> degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to begin drawing at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of degrees of the arc to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="441" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac216c652253a21f0f28a7caef07deb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillArc</definition>
        <argsstring>(BRect rect, float startAngle, float arcAngle, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillArc</name>
        <qualifiedname>BView::FillArc</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>float</type>
          <declname>startAngle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>arcAngle</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill an arc inscribed within <emphasis>rect</emphasis> starting at startAngle and drawing <emphasis>arcAngle</emphasis> degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area within which to inscribe the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to begin drawing at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of degrees of the arc to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="445" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a49017edefe45ca5c74954e1227e673bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillArc</definition>
        <argsstring>(BPoint center, float xRadius, float yRadius, float startAngle, float arcAngle, const BGradient &amp;gradient)</argsstring>
        <name>FillArc</name>
        <qualifiedname>BView::FillArc</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yRadius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>startAngle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>arcAngle</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill an arc with the specified <emphasis>gradient</emphasis> pattern starting at <emphasis>center</emphasis> with a horizontal radius of <emphasis>xRadius</emphasis> and a vertical radius of <emphasis>yRadius</emphasis> starting at <emphasis>startAngle</emphasis> and drawing <emphasis>arcAngle</emphasis> degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to begin drawing at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of degrees of the arc to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the arc with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="448" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4304fe45708f72d0ba20b579870c24ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillArc</definition>
        <argsstring>(BRect rect, float startAngle, float arcAngle, const BGradient &amp;gradient)</argsstring>
        <name>FillArc</name>
        <qualifiedname>BView::FillArc</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>float</type>
          <declname>startAngle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>arcAngle</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill an arc with the specified <emphasis>gradient</emphasis> pattern inscribed within <emphasis>rect</emphasis> starting at startAngle and drawing <emphasis>arcAngle</emphasis> degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area within which to inscribe the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to begin drawing at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arcAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of degrees of the arc to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the arc with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="451" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a64ea2ad06018b0b3b156113d201c7ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeBezier</definition>
        <argsstring>(BPoint *controlPoints, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeBezier</name>
        <qualifiedname>BView::StrokeBezier</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>controlPoints</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke a bezier curve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controlPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of points that form the bezier curve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="454" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a531ad43e129d810ee64208123b550193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillBezier</definition>
        <argsstring>(BPoint *controlPoints, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillBezier</name>
        <qualifiedname>BView::FillBezier</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>controlPoints</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill a bezier curve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controlPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of points that form the bezier curve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="456" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7cf8a5eaa5451b2c7df0d6fa392012bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillBezier</definition>
        <argsstring>(BPoint *controlPoints, const BGradient &amp;gradient)</argsstring>
        <name>FillBezier</name>
        <qualifiedname>BView::FillBezier</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>controlPoints</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill a bezier curve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controlPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of points that form the bezier curve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the bezier curve with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="458" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a507e9b732e880ac8e6379e19e74d5757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::StrokeShape</definition>
        <argsstring>(BShape *shape, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>StrokeShape</name>
        <qualifiedname>BView::StrokeShape</qualifiedname>
        <param>
          <type><ref refid="classBShape" kindref="compound">BShape</ref> *</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Stroke <emphasis>shape</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>shape</emphasis> to stroke. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="461" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a91b9ce4b8b8ee13ff5f1071e1fb0d829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillShape</definition>
        <argsstring>(BShape *shape, ::pattern pattern=B_SOLID_HIGH)</argsstring>
        <name>FillShape</name>
        <qualifiedname>BView::FillShape</qualifiedname>
        <param>
          <type><ref refid="classBShape" kindref="compound">BShape</ref> *</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
          <defval><ref refid="GraphicsDefs_8h_1a309ac69db6e0728673c26d247208f103" kindref="member">B_SOLID_HIGH</ref></defval>
        </param>
        <briefdescription>
<para>Fill <emphasis>shape</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>shape</emphasis> to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the following:<itemizedlist>
<listitem><para><computeroutput>B_SOLID_HIGH</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_SOLID_LOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MIXED_COLORS</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="463" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9a82da733397e97b985875be941f77a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::FillShape</definition>
        <argsstring>(BShape *shape, const BGradient &amp;gradient)</argsstring>
        <name>FillShape</name>
        <qualifiedname>BView::FillShape</qualifiedname>
        <param>
          <type><ref refid="classBShape" kindref="compound">BShape</ref> *</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const BGradient &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Fill <emphasis>shape</emphasis> with the specified <emphasis>gradient</emphasis> pattern. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>shape</emphasis> to fill. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>The gradient pattern to fill the <emphasis>shape</emphasis> with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="465" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8ace5c5cc811c4ad16acf281ffd1a48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::CopyBits</definition>
        <argsstring>(BRect src, BRect dst)</argsstring>
        <name>CopyBits</name>
        <qualifiedname>BView::CopyBits</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Copy the bits from the <emphasis>src</emphasis> rectangle to the <emphasis>dst</emphasis> rectangle in the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para>If the rectangles are of different sizes than <emphasis>src</emphasis> is scaled to fit. <emphasis>src</emphasis> is clipped if a part of <emphasis>dst</emphasis> lies outside of the visible region of the view. Only the visible portions of <emphasis>src</emphasis> are copied.</para>
<para>The view must be attached to a window for this method to work.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source rectangle to copy bits from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination rectangle to copy bits to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="468" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae66727344d35f05c56b6163ad70e360c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmapAsync</definition>
        <argsstring>(const BBitmap *aBitmap, BRect bitmapRect, BRect viewRect, uint32 options)</argsstring>
        <name>DrawBitmapAsync</name>
        <qualifiedname>BView::DrawBitmapAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bitmapRect</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis> asynchronously. <emphasis>bitmap</emphasis> portion is scaled to fit <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmapRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The portion of the bitmap to draw in the bitmap&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <emphasis>bitmap_drawing_options</emphasis> flags</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="470" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0ef432afa41aefcb3fdd537e2d290001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmapAsync</definition>
        <argsstring>(const BBitmap *aBitmap, BRect bitmapRect, BRect viewRect)</argsstring>
        <name>DrawBitmapAsync</name>
        <qualifiedname>BView::DrawBitmapAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bitmapRect</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis> asynchronously. <emphasis>bitmap</emphasis> portion is scaled to fit <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmapRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The portion of the bitmap to draw in the bitmap&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="473" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa3275b791787a66f3638611cd6a5ae09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmapAsync</definition>
        <argsstring>(const BBitmap *aBitmap, BRect viewRect)</argsstring>
        <name>DrawBitmapAsync</name>
        <qualifiedname>BView::DrawBitmapAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis> asynchronously. <emphasis>bitmap</emphasis> is scaled to fit <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="475" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6931c5fe803eb5fa9e66438d347c4b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmapAsync</definition>
        <argsstring>(const BBitmap *aBitmap, BPoint where)</argsstring>
        <name>DrawBitmapAsync</name>
        <qualifiedname>BView::DrawBitmapAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view offset by <emphasis>where</emphasis> asynchronously. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The location to draw the bitmap in the view&apos;s coordinate system.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="477" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab50fba0500357abebb9f3ef3832f2e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmapAsync</definition>
        <argsstring>(const BBitmap *aBitmap)</argsstring>
        <name>DrawBitmapAsync</name>
        <qualifiedname>BView::DrawBitmapAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view asynchronously. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="479" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6171150993fbf7c73966c7c302a95573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmap</definition>
        <argsstring>(const BBitmap *aBitmap, BRect bitmapRect, BRect viewRect, uint32 options)</argsstring>
        <name>DrawBitmap</name>
        <qualifiedname>BView::DrawBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bitmapRect</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis>. <emphasis>bitmap</emphasis> portion is scaled to fit <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmapRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The portion of the bitmap to draw in the bitmap&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>??</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="481" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a63db7245fd9b9fefd461d7596c15f9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmap</definition>
        <argsstring>(const BBitmap *aBitmap, BRect bitmapRect, BRect viewRect)</argsstring>
        <name>DrawBitmap</name>
        <qualifiedname>BView::DrawBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>bitmapRect</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis>. <emphasis>bitmap</emphasis> portion is scaled to fit <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmapRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The portion of the bitmap to draw in the bitmap&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="484" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abce81666128d183d59b5cf2ed75c7f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmap</definition>
        <argsstring>(const BBitmap *aBitmap, BRect viewRect)</argsstring>
        <name>DrawBitmap</name>
        <qualifiedname>BView::DrawBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis>. <emphasis>bitmap</emphasis> is scaled to fit <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="486" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1c8b6e3e9218388a68ae43dd408a187c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmap</definition>
        <argsstring>(const BBitmap *aBitmap, BPoint where)</argsstring>
        <name>DrawBitmap</name>
        <qualifiedname>BView::DrawBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view offset by <emphasis>where</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The location to draw the bitmap in the view&apos;s coordinate system.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="488" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a769c3e3dee7d86ed50308f7a3f46ef91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawBitmap</definition>
        <argsstring>(const BBitmap *aBitmap)</argsstring>
        <name>DrawBitmap</name>
        <qualifiedname>BView::DrawBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="490" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad281a4e40f212e3cb56c23fa6e574a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawTiledBitmapAsync</definition>
        <argsstring>(const BBitmap *aBitmap, BRect viewRect, BPoint phase=B_ORIGIN)</argsstring>
        <name>DrawTiledBitmapAsync</name>
        <qualifiedname>BView::DrawTiledBitmapAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>phase</declname>
          <defval><ref refid="Point_8h_1a9d03b82df6546886ad17a85805497030" kindref="member">B_ORIGIN</ref></defval>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis> asynchronously. If <emphasis>bitmap</emphasis> is smaller, it is cloned to fill remaining space in <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase</parametername>
</parameternamelist>
<parameterdescription>
<para>Source bitmap offset used as starting point for drawing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="492" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8848d931fd0354860a0e71934e66cb03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawTiledBitmap</definition>
        <argsstring>(const BBitmap *aBitmap, BRect viewRect, BPoint phase=B_ORIGIN)</argsstring>
        <name>DrawTiledBitmap</name>
        <qualifiedname>BView::DrawTiledBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>aBitmap</declname>
          <defname>bitmap</defname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>viewRect</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>phase</declname>
          <defval><ref refid="Point_8h_1a9d03b82df6546886ad17a85805497030" kindref="member">B_ORIGIN</ref></defval>
        </param>
        <briefdescription>
<para>Draws <emphasis>bitmap</emphasis> on the view within <emphasis>viewRect</emphasis>. If <emphasis>bitmap</emphasis> is smaller, it is cloned to fill remaining space in <emphasis>viewRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap to draw onto the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The area in the view&apos;s coordinate system to draw the bitmap in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase</parametername>
</parameternamelist>
<parameterdescription>
<para>Source bitmap offset used as starting point for drawing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="495" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a02ba5c68f21d4345ec3ee683496ce851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawChar</definition>
        <argsstring>(char aChar)</argsstring>
        <name>DrawChar</name>
        <qualifiedname>BView::DrawChar</qualifiedname>
        <param>
          <type>char</type>
          <declname>aChar</declname>
          <defname>c</defname>
        </param>
        <briefdescription>
<para>Draws character <emphasis>c</emphasis> onto to the view at the current pen position. </para>
        </briefdescription>
        <detaileddescription>
<para>The character is drawn in the view&apos;s current font.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to draw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="498" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2ed7c3628692426116fc0bb450c0f0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawChar</definition>
        <argsstring>(char aChar, BPoint location)</argsstring>
        <name>DrawChar</name>
        <qualifiedname>BView::DrawChar</qualifiedname>
        <param>
          <type>char</type>
          <declname>aChar</declname>
          <defname>c</defname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Draws character <emphasis>c</emphasis> at the specified <emphasis>location</emphasis> in the view. </para>
        </briefdescription>
        <detaileddescription>
<para>The character is drawn in the view&apos;s current font.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>The location in the view to draw the character.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="499" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5c261dbbb4e8157799e85d6ad1530920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawString</definition>
        <argsstring>(const char *string, escapement_delta *delta=NULL)</argsstring>
        <name>DrawString</name>
        <qualifiedname>BView::DrawString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Draw <emphasis>string</emphasis> onto the view at the current pen position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Adds additional width to each character according to the following fields:<itemizedlist>
<listitem><para>nonspace(float) The amount of width to add to characters with visible glyphs.</para>
</listitem><listitem><para>space(float) The amount of width to add to characters with escapements but don&apos;t have visible glyphs.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="500" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a83d77965bd9cda6212189d92b97d8198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawString</definition>
        <argsstring>(const char *string, BPoint location, escapement_delta *delta=NULL)</argsstring>
        <name>DrawString</name>
        <qualifiedname>BView::DrawString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>location</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Draw <emphasis>string</emphasis> onto the view at the specified <emphasis>location</emphasis> in the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>The location in the view to draw the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Adds additional width to each character according to the following fields:<itemizedlist>
<listitem><para>nonspace(float) The amount of width to add to characters with visible glyphs.</para>
</listitem><listitem><para>space(float) The amount of width to add to characters with escapements but don&apos;t have visible glyphs.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="502" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad3830d09ed0300a1144d47ac78cd2dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawString</definition>
        <argsstring>(const char *string, int32 length, escapement_delta *delta=NULL)</argsstring>
        <name>DrawString</name>
        <qualifiedname>BView::DrawString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Draw <emphasis>string</emphasis> up to <emphasis>length</emphasis> characters onto the view at the current pen position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of characters in <emphasis>string</emphasis> to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Adds additional width to each character according to the following fields:<itemizedlist>
<listitem><para>nonspace(float) The amount of width to add to characters with visible glyphs.</para>
</listitem><listitem><para>space(float) The amount of width to add to characters with escapements but don&apos;t have visible glyphs.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="505" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4e1f1c59352a1373ccace7255a0ccf23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawString</definition>
        <argsstring>(const char *string, int32 length, BPoint location, escapement_delta *delta=0L)</argsstring>
        <name>DrawString</name>
        <qualifiedname>BView::DrawString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>location</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
          <defval>0L</defval>
        </param>
        <briefdescription>
<para>Draw <emphasis>string</emphasis> up to <emphasis>length</emphasis> characters onto the view at the specified <emphasis>location</emphasis> in the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of characters in <emphasis>string</emphasis> to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>The location in the view to draw the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Adds additional width to each character according to the following fields:<itemizedlist>
<listitem><para>nonspace(float) The amount of width to add to characters with visible glyphs.</para>
</listitem><listitem><para>space(float) The amount of width to add to characters with escapements but don&apos;t have visible glyphs.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="507" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5dacf5d193a0c492f296bc1e402e6370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawString</definition>
        <argsstring>(const char *string, const BPoint *locations, int32 locationCount)</argsstring>
        <name>DrawString</name>
        <qualifiedname>BView::DrawString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>locations</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>locationCount</declname>
        </param>
        <briefdescription>
<para>Draw <emphasis>string</emphasis> <emphasis>locationCount</emphasis> times at the specified <emphasis>locations</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of <ref refid="classBPoint" kindref="compound">BPoint</ref> objects to draw the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locationCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in <emphasis>locations</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="510" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a135868eb5cd1b35ee1c2d03517b9a33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawString</definition>
        <argsstring>(const char *string, int32 length, const BPoint *locations, int32 locationCount)</argsstring>
        <name>DrawString</name>
        <qualifiedname>BView::DrawString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>locations</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>locationCount</declname>
        </param>
        <briefdescription>
<para>Draw <emphasis>string</emphasis> up to <emphasis>length</emphasis> characters <emphasis>locationCount</emphasis> times at the specified <emphasis>locations</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of characters in <emphasis>string</emphasis> to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of <ref refid="classBPoint" kindref="compound">BPoint</ref> objects to draw the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locationCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in <emphasis>locations</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="513" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8c767d948dc9435c006cabdcab1cd08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::Invalidate</definition>
        <argsstring>(BRect invalRect)</argsstring>
        <name>Invalidate</name>
        <qualifiedname>BView::Invalidate</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>invalRect</declname>
        </param>
        <briefdescription>
<para>Sends a message to App Server to redraw the portion of the view specified by <emphasis>invalRect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invalRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area of the view to redraw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="533" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac70b682819c0f9b008c428e02015b19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::Invalidate</definition>
        <argsstring>(const BRegion *invalRegion)</argsstring>
        <name>Invalidate</name>
        <qualifiedname>BView::Invalidate</qualifiedname>
        <param>
          <type>const <ref refid="classBRegion" kindref="compound">BRegion</ref> *</type>
          <declname>invalRegion</declname>
          <defname>region</defname>
        </param>
        <briefdescription>
<para>Sends a message to App Server to redraw the portion of the view specified by <emphasis>region</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>region</parametername>
</parameternamelist>
<parameterdescription>
<para>The region of the view to redraw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="534" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1adfced0dcb244e199f872fdbd48349a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::Invalidate</definition>
        <argsstring>()</argsstring>
        <name>Invalidate</name>
        <qualifiedname>BView::Invalidate</qualifiedname>
        <briefdescription>
<para>Sends a message to App Server to redraw the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="535" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae2a9da1ca04489dd60ef8aefa86331ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DelayedInvalidate</definition>
        <argsstring>(bigtime_t delay)</argsstring>
        <name>DelayedInvalidate</name>
        <qualifiedname>BView::DelayedInvalidate</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Sends a message to App Server to redraw the entire view after a certain, minimum, delay. Repeated calls to this method may be merged, but the view is guaranteed to be redrawn after the delay given in the first call of this method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The time, in microseconds, to wait until redrawing the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="536" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6389a46cf1842eb0d412b44958955e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DelayedInvalidate</definition>
        <argsstring>(bigtime_t delay, BRect invalRect)</argsstring>
        <name>DelayedInvalidate</name>
        <qualifiedname>BView::DelayedInvalidate</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>delay</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>invalRect</declname>
        </param>
        <briefdescription>
<para>Sends a message to App Server to redraw the portion of the view specified by <emphasis>invalRect</emphasis> after a certain, minimum, delay. Repeated calls to this method may be merged, but the invalidated rect is guaranteed to be redrawn after the minimum delay given by the first call of this method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>The time, in microseconds, to wait until redrawing the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangular area of the view to redraw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="537" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8ba0fe3a3dbeec1b7fd8c9655070ef64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetDiskMode</definition>
        <argsstring>(char *filename, long offset)</argsstring>
        <name>SetDiskMode</name>
        <qualifiedname>BView::SetDiskMode</qualifiedname>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Unimplemented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="540" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a14155192773aad22ebe47a9975afac5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::BeginPicture</definition>
        <argsstring>(BPicture *a_picture)</argsstring>
        <name>BeginPicture</name>
        <qualifiedname>BView::BeginPicture</qualifiedname>
        <param>
          <type><ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>a_picture</declname>
          <defname>picture</defname>
        </param>
        <briefdescription>
<para>Begins sending drawing instructions to <emphasis>picture</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis><ref refid="classBPicture" kindref="compound">BPicture</ref></emphasis> object is cleared and any successive drawing instructions sent to the view are redirected to <emphasis>picture</emphasis> until <ref refid="classBView_1ae01506892a9b2d39f6df13726be9d0af" kindref="member">EndPicture()</ref> is called. To append drawing instructions to a <ref refid="classBPicture" kindref="compound">BPicture</ref> object without clearing it first call <ref refid="classBView_1a2d73d2f2b0b35390929cf54fbfa5ecff" kindref="member">AppendToPicture()</ref> instead.</para>
<para>The view doesn&apos;t display anything to the screen while it&apos;s recording to <emphasis>picture</emphasis>. Use the <ref refid="classBView_1ae4b252943befd9f0b62e30517b3ecec2" kindref="member">DrawPicture()</ref> method to render the <emphasis>picture</emphasis>.</para>
<para>Only drawing instructions performed directly on the view, not its child views are send to the <ref refid="classBPicture" kindref="compound">BPicture</ref> object and <ref refid="classBPicture" kindref="compound">BPicture</ref> captures only primitive graphics operations. The view must be attached to a window for the drawing instruction to be recorded. Drawing instructions are recorded even if the view is hidden or resides outside the clipping region or the window is off-screen.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to record drawing instructions to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="542" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2d73d2f2b0b35390929cf54fbfa5ecff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::AppendToPicture</definition>
        <argsstring>(BPicture *a_picture)</argsstring>
        <name>AppendToPicture</name>
        <qualifiedname>BView::AppendToPicture</qualifiedname>
        <param>
          <type><ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>a_picture</declname>
          <defname>picture</defname>
        </param>
        <briefdescription>
<para>Appends drawing instructions to <emphasis>picture</emphasis> without clearing it first. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to record drawing instructions to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="543" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae01506892a9b2d39f6df13726be9d0af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
        <definition>BPicture * BView::EndPicture</definition>
        <argsstring>()</argsstring>
        <name>EndPicture</name>
        <qualifiedname>BView::EndPicture</qualifiedname>
        <briefdescription>
<para>Ends the drawing instruction recording session and returns the <ref refid="classBPicture" kindref="compound">BPicture</ref> object passed to <ref refid="classBView_1a14155192773aad22ebe47a9975afac5f" kindref="member">BeginPicture()</ref> or <ref refid="classBView_1a2d73d2f2b0b35390929cf54fbfa5ecff" kindref="member">AppendToPicture()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object passed to <ref refid="classBView_1a14155192773aad22ebe47a9975afac5f" kindref="member">BeginPicture()</ref> or <ref refid="classBView_1a2d73d2f2b0b35390929cf54fbfa5ecff" kindref="member">AppendToPicture()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="544" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae4b252943befd9f0b62e30517b3ecec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawPicture</definition>
        <argsstring>(const BPicture *a_picture)</argsstring>
        <name>DrawPicture</name>
        <qualifiedname>BView::DrawPicture</qualifiedname>
        <param>
          <type>const <ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>a_picture</declname>
          <defname>picture</defname>
        </param>
        <briefdescription>
<para>Draws the <emphasis>picture</emphasis> at the view&apos;s current pen position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to draw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="546" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2fdf36421cccce9136cdd9966a971955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawPicture</definition>
        <argsstring>(const BPicture *a_picture, BPoint where)</argsstring>
        <name>DrawPicture</name>
        <qualifiedname>BView::DrawPicture</qualifiedname>
        <param>
          <type>const <ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>a_picture</declname>
          <defname>picture</defname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Draws the <emphasis>picture</emphasis> at the location in the view specified by <emphasis>where</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The point on the view to draw <emphasis>picture</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="547" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9f5781a2b37113c55950c93b621984a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawPicture</definition>
        <argsstring>(const char *filename, long offset, BPoint where)</argsstring>
        <name>DrawPicture</name>
        <qualifiedname>BView::DrawPicture</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Draws the <emphasis>picture</emphasis> from the file specified by <emphasis>filename</emphasis> offset by <emphasis>offset</emphasis> bytes at the location in the view specified by <emphasis>where</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename of the file containing the picture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The point on the view to draw the picture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to offset in the file to find the picture.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="549" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a65498927c21d6681a0e77c4e3d29efba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawPictureAsync</definition>
        <argsstring>(const BPicture *a_picture)</argsstring>
        <name>DrawPictureAsync</name>
        <qualifiedname>BView::DrawPictureAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>a_picture</declname>
          <defname>picture</defname>
        </param>
        <briefdescription>
<para>Draws the <emphasis>picture</emphasis> at the view&apos;s current pen position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to draw.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="551" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a05881f8b07989e1e9db0bd41f8181341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawPictureAsync</definition>
        <argsstring>(const BPicture *a_picture, BPoint where)</argsstring>
        <name>DrawPictureAsync</name>
        <qualifiedname>BView::DrawPictureAsync</qualifiedname>
        <param>
          <type>const <ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>a_picture</declname>
          <defname>picture</defname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Draws the <emphasis>picture</emphasis> at the location in the view specified by <emphasis>where</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPicture" kindref="compound">BPicture</ref> object to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The point on the view to draw <emphasis>picture</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="552" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7f2fde4e7719bded5af33805b8242b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DrawPictureAsync</definition>
        <argsstring>(const char *filename, long offset, BPoint where)</argsstring>
        <name>DrawPictureAsync</name>
        <qualifiedname>BView::DrawPictureAsync</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Draws the <emphasis>picture</emphasis> from the file specified by <emphasis>filename</emphasis> offset by <emphasis>offset</emphasis> bytes at the location in the view specified by <emphasis>where</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename of the file containing the picture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The point on the view to draw the picture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to offset in the file to find the picture.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="554" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abe65757b7c83c8db390bf0c87457a343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::BeginLayer</definition>
        <argsstring>(uint8 opacity)</argsstring>
        <name>BeginLayer</name>
        <qualifiedname>BView::BeginLayer</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>opacity</declname>
        </param>
        <briefdescription>
<para>Begins a drawing layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature of <ref refid="classBView" kindref="compound">BView</ref> allows you to create a separate layer, draw on it, and blend it in with the rest of the view with a given <emphasis>opacity</emphasis>. Internally, the method creates a new drawing buffer, that you can draw on using the methods of <ref refid="classBView" kindref="compound">BView</ref>. After finishing your layer, you call <ref refid="classBView_1a9f54d4478a12823f116168a45af30898" kindref="member">EndLayer()</ref> to apply the <emphasis>opacity</emphasis> to the layer, and blend it in with the existing drawing.</para>
<para>You can nest layers, meaning you can call this method while drawing a layer, to create a sublayer. The layers are mixed and blended in order.</para>
<para>This work was done to support drawing for WebKit.</para>
<para><simplesect kind="see"><para><ref refid="classBView_1a9f54d4478a12823f116168a45af30898" kindref="member">EndLayer()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="557" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9f54d4478a12823f116168a45af30898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::EndLayer</definition>
        <argsstring>()</argsstring>
        <name>EndLayer</name>
        <qualifiedname>BView::EndLayer</qualifiedname>
        <briefdescription>
<para>Finish a layer and blend it in with the view. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the counterpart to <ref refid="classBView_1abe65757b7c83c8db390bf0c87457a343" kindref="member">BeginLayer()</ref>. You can nest multiple layer. If this method is called and the current layer is nested in another layer, the current layer is applied to the layer above. If this is the only layer, it will directly blend in to the main view.</para>
<para><simplesect kind="see"><para><ref refid="classBView_1abe65757b7c83c8db390bf0c87457a343" kindref="member">BeginLayer()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R` </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="558" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>View Frame Alteration</header>
      <description><para>As a view&apos;s frame rectangle must be aligned to pixel values all parameters are rounded to the nearest integer. If the view isn&apos;t attached these methods alter the frame rectangle without triggering <ref refid="classBView_1a551c22b45301e13a3ba959eece3cec7f" kindref="member">FrameMoved()</ref>, <ref refid="classBView_1a85d88f9c2bb6800560874b2061378fa0" kindref="member">FrameResized()</ref> or <ref refid="classBView_1adfced0dcb244e199f872fdbd48349a05" kindref="member">Invalidate()</ref>. </para>
</description>
      <memberdef kind="function" id="classBView_1a6e122baca4494f6ce739a507054fa81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::MoveBy</definition>
        <argsstring>(float dh, float dv)</argsstring>
        <name>MoveBy</name>
        <qualifiedname>BView::MoveBy</qualifiedname>
        <param>
          <type>float</type>
          <declname>dh</declname>
          <defname>deltaX</defname>
        </param>
        <param>
          <type>float</type>
          <declname>dv</declname>
          <defname>deltaY</defname>
        </param>
        <briefdescription>
<para>Moves the view <emphasis>deltaX</emphasis> pixels horizontally and <emphasis>deltaY</emphasis> pixels vertically in the parent view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deltaX</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to move the view horizontally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaY</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to move the view vertically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="569" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acce9c93118a3db24078f16bdabc6fbec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::MoveTo</definition>
        <argsstring>(BPoint where)</argsstring>
        <name>MoveTo</name>
        <qualifiedname>BView::MoveTo</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>Move the view to the location specified by <emphasis>where</emphasis> in the parent view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The location to move the view to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="570" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1c9b2df47ba1b9f3a1ce3286995fb8bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::MoveTo</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>MoveTo</name>
        <qualifiedname>BView::MoveTo</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Move the view to the coordinates specified by <emphasis>x</emphasis> in the horizontal dimension and <emphasis>y</emphasis> in the vertical dimension in the parent view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal coordinate to move the view to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical coordinate to move the view to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="571" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ace23acc948bbc9b9272da8dc7f01d3ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ResizeBy</definition>
        <argsstring>(float dh, float dv)</argsstring>
        <name>ResizeBy</name>
        <qualifiedname>BView::ResizeBy</qualifiedname>
        <param>
          <type>float</type>
          <declname>dh</declname>
          <defname>deltaWidth</defname>
        </param>
        <param>
          <type>float</type>
          <declname>dv</declname>
          <defname>deltaHeight</defname>
        </param>
        <briefdescription>
<para>Resize the view by <emphasis>deltaWidth</emphasis> horizontally and <emphasis>deltaHeight</emphasis> vertically without moving the top left corner of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deltaWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to resize the view by horizontally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to resize the view by vertically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="572" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a742bccd6034ef9ade65b0e596fba55f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ResizeTo</definition>
        <argsstring>(float width, float height)</argsstring>
        <name>ResizeTo</name>
        <qualifiedname>BView::ResizeTo</qualifiedname>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Resize the view to the specified <emphasis>width</emphasis> and <emphasis>height</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width to resize the view to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height to resize the view to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="573" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6134097569f75679616257a361086d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ResizeTo</definition>
        <argsstring>(BSize size)</argsstring>
        <name>ResizeTo</name>
        <qualifiedname>BView::ResizeTo</qualifiedname>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resize the view to the dimension specified by <emphasis>size</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>size</emphasis> to resize the view to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="574" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Layouting</header>
      <description><para><simplesect kind="note"><para>These methods were not available in BeOS R5. </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classBView_1acfb0cffde35b853dab6bc5d1bb03265f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BView::MinSize</definition>
        <argsstring>()</argsstring>
        <name>MinSize</name>
        <qualifiedname>BView::MinSize</qualifiedname>
        <reimplementedby refid="classBBox_1a2bb8047e0854627edc2a0bf55579593b">MinSize</reimplementedby>
        <reimplementedby refid="classBButton_1a44d82f5e5ec77df79ab955d48eb2f6cd">MinSize</reimplementedby>
        <reimplementedby refid="classBCheckBox_1ab707cfe81f2f0ada73095f381de1fbae">MinSize</reimplementedby>
        <reimplementedby refid="classBListView_1acd2a6419c6ccad9f8ea52e1c728b1b9b">MinSize</reimplementedby>
        <reimplementedby refid="classBMenu_1a659643414ede82d0233e62ce9da4c01e">MinSize</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ae0781646adecf0bd08123868c40ee218">MinSize</reimplementedby>
        <reimplementedby refid="classBMenuField_1a0587347fb25e87748d7c5207a344e3c5">MinSize</reimplementedby>
        <reimplementedby refid="classBScrollBar_1aa647bf7a279bccf66a3ed3dcd1a619dd">MinSize</reimplementedby>
        <reimplementedby refid="classBScrollView_1aaa698d664d8a04deacdf1e3364bcbd71">MinSize</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1ad97ce589194d2dcd66f81aa0bb1e22dd">MinSize</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a05c3ae557bd438f61f9ac1d4c890237f">MinSize</reimplementedby>
        <reimplementedby refid="classBStringView_1aa228a2e46e9c9404f9706e352d08d33b">MinSize</reimplementedby>
        <reimplementedby refid="classBTabView_1a9833a3bdc0cca3508a099e7054943fe1">MinSize</reimplementedby>
        <reimplementedby refid="classBTextControl_1aa356d1fd68346c51002ae1f582b70ffd">MinSize</reimplementedby>
        <reimplementedby refid="classBTextView_1a3a03f5bff63cba54276025e3788520d9">MinSize</reimplementedby>
        <briefdescription>
<para>Return the minimum size of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="return"><para>The minimum size of the view as a <ref refid="classBSize" kindref="compound">BSize</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBAbstractLayout_1a3f692cb3306ce726e3cc6d2771824cd5" kindref="member">BAbstractLayout::MinSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="610" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad1f1843a380e850948cf7e4ed2d5f1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BView::MaxSize</definition>
        <argsstring>()</argsstring>
        <name>MaxSize</name>
        <qualifiedname>BView::MaxSize</qualifiedname>
        <reimplementedby refid="classBBox_1a38328d48b00d81833726e192403d130d">MaxSize</reimplementedby>
        <reimplementedby refid="classBButton_1adeda5a0a1e19c006c422690d7bcdbd8f">MaxSize</reimplementedby>
        <reimplementedby refid="classBCheckBox_1ad80098e5c252495f592180b20f233795">MaxSize</reimplementedby>
        <reimplementedby refid="classBListView_1a54878f820deb4ccc692f49bd6e8ce5c0">MaxSize</reimplementedby>
        <reimplementedby refid="classBMenu_1a5f94df489ae102d0e377df3b63d9864a">MaxSize</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ad0dc5e934924d2511d82718d31da2740">MaxSize</reimplementedby>
        <reimplementedby refid="classBMenuField_1a2d7e95c1f408178fdc44973b34ac00c3">MaxSize</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a839d35bb528c77cf7da2c764911c572c">MaxSize</reimplementedby>
        <reimplementedby refid="classBScrollBar_1abba5a7c71ab0802984e2d566861ebcac">MaxSize</reimplementedby>
        <reimplementedby refid="classBScrollView_1a3d8a3a2d5fcd00fd0f666d89a377c463">MaxSize</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1ada179e44bcb71680c5ce2c146b317e13">MaxSize</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a328bde08f9576175c07b80726989b07e">MaxSize</reimplementedby>
        <reimplementedby refid="classBStringView_1aefa705718677d0d50b07975bb012ae64">MaxSize</reimplementedby>
        <reimplementedby refid="classBTabView_1ac7ab32a3a7ab1326820f11dea6ce834d">MaxSize</reimplementedby>
        <reimplementedby refid="classBTextControl_1a5bf08635cd24d52f3775f93a1526c072">MaxSize</reimplementedby>
        <reimplementedby refid="classBTextView_1af8e32e9318d9368137940d2511d3dff2">MaxSize</reimplementedby>
        <briefdescription>
<para>Return the maximum size of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="return"><para>The maximum size of the view as a <ref refid="classBSize" kindref="compound">BSize</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBAbstractLayout_1ad1ea5d04a5c8028f8295efde7106a66c" kindref="member">BAbstractLayout::MaxSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="611" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7f51d63e71b60a2721d04436ffbcfe36" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BView::PreferredSize</definition>
        <argsstring>()</argsstring>
        <name>PreferredSize</name>
        <qualifiedname>BView::PreferredSize</qualifiedname>
        <reimplementedby refid="classBBox_1a6c675d6acd48626e736ef4a16171ff1d">PreferredSize</reimplementedby>
        <reimplementedby refid="classBButton_1abe79a7ea1bff9983c64108da1c065599">PreferredSize</reimplementedby>
        <reimplementedby refid="classBCheckBox_1ac51f2d73b650b34eb0f39c5bb3822953">PreferredSize</reimplementedby>
        <reimplementedby refid="classBListView_1aa353bb8e9a5d229141134df2fa3eddaf">PreferredSize</reimplementedby>
        <reimplementedby refid="classBMenu_1a03aad94d2eb22836823045530e58c052">PreferredSize</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ae3e3832dbc024a802a18c4253f01b05a">PreferredSize</reimplementedby>
        <reimplementedby refid="classBMenuField_1a2930a668aaf18292c83211e4ef8386e4">PreferredSize</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a6b402fb319ad6d0ebf457d0940e6d7bf">PreferredSize</reimplementedby>
        <reimplementedby refid="classBScrollView_1a09eddb487494a14a9b35dc7753d88b96">PreferredSize</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1a549abf3d5fd609ad5dd5291c269407cd">PreferredSize</reimplementedby>
        <reimplementedby refid="classBStatusBar_1afea297b1b756ac28e8f8cf273a699b30">PreferredSize</reimplementedby>
        <reimplementedby refid="classBStringView_1abe9e0597018b1ad8312a921a46db9f69">PreferredSize</reimplementedby>
        <reimplementedby refid="classBTabView_1a0a9aebb15a78aab7ffd6a9286a6e9dca">PreferredSize</reimplementedby>
        <reimplementedby refid="classBTextControl_1a36fbf916956c923dbb6f393a5503de30">PreferredSize</reimplementedby>
        <reimplementedby refid="classBTextView_1ad46589273b8c8acb8737efde58407d3d">PreferredSize</reimplementedby>
        <briefdescription>
<para>Return the preferred size of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="return"><para>The preferred size of the view as a <ref refid="classBSize" kindref="compound">BSize</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBAbstractLayout_1af5f21d9900c85ca053dba3938bef3fd3" kindref="member">BAbstractLayout::PreferredSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="612" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2f74b3e7c602045d8c927f923f45eefa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
        <definition>BAlignment BView::LayoutAlignment</definition>
        <argsstring>()</argsstring>
        <name>LayoutAlignment</name>
        <qualifiedname>BView::LayoutAlignment</qualifiedname>
        <reimplementedby refid="classBBox_1a336367ab4358ddeed9f95db4fee229f0">LayoutAlignment</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a3b62d62f6255934ede8f2bc1667d68b1">LayoutAlignment</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a9778545b92c25d2a71d5e814ff9d9a86">LayoutAlignment</reimplementedby>
        <reimplementedby refid="classBStringView_1a710f4021da87b0631b5ff608053eaa23">LayoutAlignment</reimplementedby>
        <reimplementedby refid="classBTextControl_1a75c2cebeaff174fb233eba0fac012aa2">LayoutAlignment</reimplementedby>
        <briefdescription>
<para>Return the current BAlignemnt of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="613" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abfcb5c761f9b06da3b4a6788aad5d0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetExplicitMinSize</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SetExplicitMinSize</name>
        <qualifiedname>BView::SetExplicitMinSize</qualifiedname>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set this view&apos;s min size, to be used by <ref refid="classBView_1acfb0cffde35b853dab6bc5d1bb03265f" kindref="member">MinSize()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBAbstractLayout_1af63e5777fabfb9be1f29286bf6931fe6" kindref="member">BAbstractLayout::SetExplicitMinSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="615" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acd759dd7505050f9cbd8213c71991b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetExplicitMaxSize</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SetExplicitMaxSize</name>
        <qualifiedname>BView::SetExplicitMaxSize</qualifiedname>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set this view&apos;s max size, to be used by <ref refid="classBView_1ad1f1843a380e850948cf7e4ed2d5f1ba" kindref="member">MaxSize()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBAbstractLayout_1aeb41b2e1e0b6414d0de4eeb4e5fb93e4" kindref="member">BAbstractLayout::SetExplicitMaxSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="616" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a98b7d450210099ed59b7cd34f2575e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetExplicitPreferredSize</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SetExplicitPreferredSize</name>
        <qualifiedname>BView::SetExplicitPreferredSize</qualifiedname>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set this view&apos;s preferred size, to be used by <ref refid="classBView_1a7f51d63e71b60a2721d04436ffbcfe36" kindref="member">PreferredSize()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBAbstractLayout_1a577b9839ac8e726bbecc7f3e40bb01a3" kindref="member">BAbstractLayout::SetExplicitPreferredSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="617" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aeef8a27a5577db87251412ce44421494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetExplicitSize</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SetExplicitSize</name>
        <qualifiedname>BView::SetExplicitSize</qualifiedname>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set this view&apos;s size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
This is a convenience function that calls both <ref refid="classBView_1abfcb5c761f9b06da3b4a6788aad5d0ee" kindref="member">SetExplicitMinSize()</ref> and <ref refid="classBView_1acd759dd7505050f9cbd8213c71991b8b" kindref="member">SetExplicitMaxSize()</ref> with the <emphasis>size</emphasis> parameter.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="618" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6906e47d4fdd6923dd51edb60a83ccea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetExplicitAlignment</definition>
        <argsstring>(BAlignment alignment)</argsstring>
        <name>SetExplicitAlignment</name>
        <qualifiedname>BView::SetExplicitAlignment</qualifiedname>
        <param>
          <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Set this view&apos;s alignment, to be used by Alignment(). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBAbstractLayout_1a3e7f4071b63452d77210f852cb92604d" kindref="member">BAbstractLayout::SetExplicitAlignment()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="619" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1b24db754473008766cdd0fd9c4ee3b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BView::ExplicitMinSize</definition>
        <argsstring>() const</argsstring>
        <name>ExplicitMinSize</name>
        <qualifiedname>BView::ExplicitMinSize</qualifiedname>
        <briefdescription>
<para>Returns the explicit minimum size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
This returns the value that was set by <ref refid="classBView_1abfcb5c761f9b06da3b4a6788aad5d0ee" kindref="member">SetExplicitMinSize()</ref>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="621" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4e63cc8ca1f604ccb20f5891adade70f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BView::ExplicitMaxSize</definition>
        <argsstring>() const</argsstring>
        <name>ExplicitMaxSize</name>
        <qualifiedname>BView::ExplicitMaxSize</qualifiedname>
        <briefdescription>
<para>Returns the explicit maximum size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
This returns the value that was set by <ref refid="classBView_1acd759dd7505050f9cbd8213c71991b8b" kindref="member">SetExplicitMaxSize()</ref>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="622" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a218cd0d238104a6ff31c1d72ae2d9e6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BView::ExplicitPreferredSize</definition>
        <argsstring>() const</argsstring>
        <name>ExplicitPreferredSize</name>
        <qualifiedname>BView::ExplicitPreferredSize</qualifiedname>
        <briefdescription>
<para>Returns the explicit preferred size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
This returns the value that was set by <ref refid="classBView_1a98b7d450210099ed59b7cd34f2575e20" kindref="member">SetExplicitPreferredSize()</ref>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="623" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1f078f5c987061c5cf3059f7091bcb1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
        <definition>BSize BView::ExplicitAlignment</definition>
        <argsstring>() const</argsstring>
        <name>ExplicitAlignment</name>
        <qualifiedname>BView::ExplicitAlignment</qualifiedname>
        <briefdescription>
<para>Returns the explicit alignment size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
This returns the value that was set by <ref refid="classBView_1a6906e47d4fdd6923dd51edb60a83ccea" kindref="member">SetExplicitAlignment()</ref>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="624" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abd411461b7e23ad17e7294f8f5e1cbeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BView::HasHeightForWidth</definition>
        <argsstring>()</argsstring>
        <name>HasHeightForWidth</name>
        <qualifiedname>BView::HasHeightForWidth</qualifiedname>
        <reimplementedby refid="classBTextView_1a099a44a6619914db20a02a6ccf611b70">HasHeightForWidth</reimplementedby>
        <briefdescription>
<para>Returns whether the layout of the view can calculate a height for a given width. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
Use <ref refid="classBView_1ad34bee968b1ec98a0bf89343340b6b07" kindref="member">GetHeightForWidth()</ref> to actually get the preferred size.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the height values can be calculated, <computeroutput>false</computeroutput> if they cannot.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="626" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad34bee968b1ec98a0bf89343340b6b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::GetHeightForWidth</definition>
        <argsstring>(float width, float *min, float *max, float *preferred)</argsstring>
        <name>GetHeightForWidth</name>
        <qualifiedname>BView::GetHeightForWidth</qualifiedname>
        <reimplementedby refid="classBTextView_1aec7881d97bdc508b01a6caa80f51d963">GetHeightForWidth</reimplementedby>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>preferred</declname>
        </param>
        <briefdescription>
<para>Returns the min, max and preferred height for a given width. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width you want the height to be calculated for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum height that the layout will request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height that the layout will request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">preferred</parametername>
</parameternamelist>
<parameterdescription>
<para>The preferred height for this <emphasis>width</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="627" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4a711316094e43076a3f5478d937accf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::InvalidateLayout</definition>
        <argsstring>(bool descendants=false)</argsstring>
        <name>InvalidateLayout</name>
        <qualifiedname>BView::InvalidateLayout</qualifiedname>
        <param>
          <type>bool</type>
          <declname>descendants</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Invalidate layout. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descendants</parametername>
</parameternamelist>
<parameterdescription>
<para>Also invalidate its children views.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="630" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acac1ebbba8c76e543e1b06e84dffab02" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetLayout</definition>
        <argsstring>(BLayout *layout)</argsstring>
        <name>SetLayout</name>
        <qualifiedname>BView::SetLayout</qualifiedname>
        <reimplementedby refid="classBCardView_1a1865908cb88618262b8b830f4d87f137">SetLayout</reimplementedby>
        <reimplementedby refid="classBColorControl_1a9af6daf0d381071e52cc2876871da6d4">SetLayout</reimplementedby>
        <reimplementedby refid="classBGridView_1a336f566b4745de0f3331dd8fdc90e9fd">SetLayout</reimplementedby>
        <reimplementedby refid="classBGroupView_1a6cfb414319ec6bf1134b908253ed5122">SetLayout</reimplementedby>
        <reimplementedby refid="classBSplitView_1aaee57e8169084b071c518adfbac4d97a">SetLayout</reimplementedby>
        <param>
          <type><ref refid="classBLayout" kindref="compound">BLayout</ref> *</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
<para>Sets the <emphasis>layout</emphasis> of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>layout</emphasis> to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="631" column="12"/>
        <referencedby refid="classBLayoutBuilder_1_1Cards_1ab6c081cb9ee9b90230621b2972d003a8" compoundref="LayoutBuilder_8h" startline="1444" endline="1450">BLayoutBuilder::Cards&lt; ParentBuilder &gt;::Cards</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1a2542130d43283c471cee9f13523b9ee0" compoundref="LayoutBuilder_8h" startline="804" endline="813">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::Grid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1ace860b547d56684445905033b112945e" compoundref="LayoutBuilder_8h" startline="465" endline="475">BLayoutBuilder::Group&lt; ParentBuilder &gt;::Group</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBView_1aec2975b51966c397aa52b9e3eebd2c85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBLayout" kindref="compound">BLayout</ref> *</type>
        <definition>BLayout * BView::GetLayout</definition>
        <argsstring>() const</argsstring>
        <name>GetLayout</name>
        <qualifiedname>BView::GetLayout</qualifiedname>
        <briefdescription>
<para>Get the layout of the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="return"><para>The layout of the view.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="632" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad43cc5c22f83d95632d3d81eff73f425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::EnableLayoutInvalidation</definition>
        <argsstring>()</argsstring>
        <name>EnableLayoutInvalidation</name>
        <qualifiedname>BView::EnableLayoutInvalidation</qualifiedname>
        <briefdescription>
<para>Enable layout invalidation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="634" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa165cbaac7d6915feaae6048c4378c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::DisableLayoutInvalidation</definition>
        <argsstring>()</argsstring>
        <name>DisableLayoutInvalidation</name>
        <qualifiedname>BView::DisableLayoutInvalidation</qualifiedname>
        <briefdescription>
<para>Disable layout invalidation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="635" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4e86b719129a12afbda7c10371eeca47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::IsLayoutInvalidationDisabled</definition>
        <argsstring>()</argsstring>
        <name>IsLayoutInvalidationDisabled</name>
        <qualifiedname>BView::IsLayoutInvalidationDisabled</qualifiedname>
        <briefdescription>
<para>Returns whether or not layout invalidation is disabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> of layout invalidation is disabled, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="636" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a00a5d5d6edee7d488d77df03945b3e94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::IsLayoutValid</definition>
        <argsstring>() const</argsstring>
        <name>IsLayoutValid</name>
        <qualifiedname>BView::IsLayoutValid</qualifiedname>
        <briefdescription>
<para>Returns whether or not the layout is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="return"><para>Returns <computeroutput>true</computeroutput> if the layout is valid, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="637" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a127933a3820f0bfe0497b5e7ddfa191f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ResetLayoutInvalidation</definition>
        <argsstring>()</argsstring>
        <name>ResetLayoutInvalidation</name>
        <qualifiedname>BView::ResetLayoutInvalidation</qualifiedname>
        <briefdescription>
<para>Service call for <ref refid="classBView" kindref="compound">BView</ref> derived classes re-enabling <ref refid="classBView_1a4a711316094e43076a3f5478d937accf" kindref="member">InvalidateLayout()</ref> notifications. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classBLayout" kindref="compound">BLayout</ref> and <ref refid="classBView" kindref="compound">BView</ref> will avoid calling InvalidateLayout on views that have already been invalidated, but if the view caches internal layout information which it updates in methods other than <ref refid="classBView_1a9d766a06d0885200c6ababba4c87808b" kindref="member">DoLayout()</ref>, it has to invoke this method, when it has done so, since otherwise the information might become obsolete without the layout noticing.</para>
<para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="638" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae066513c0a788a9544744d409f28cada" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>BLayoutContext *</type>
        <definition>BLayoutContext * BView::LayoutContext</definition>
        <argsstring>() const</argsstring>
        <name>LayoutContext</name>
        <qualifiedname>BView::LayoutContext</qualifiedname>
        <briefdescription>
<para>Returns the BLayoutContext for this View. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="640" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a854b6ca54eeca610db9eab8b58d68a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::Layout</definition>
        <argsstring>(bool force)</argsstring>
        <name>Layout</name>
        <qualifiedname>BView::Layout</qualifiedname>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Layout the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> layout even if valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="642" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2cf4e698a4322ecfb946e440e0f7ac62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::Relayout</definition>
        <argsstring>()</argsstring>
        <name>Relayout</name>
        <qualifiedname>BView::Relayout</qualifiedname>
        <briefdescription>
<para>Relayout the view. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="643" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9d766a06d0885200c6ababba4c87808b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::DoLayout</definition>
        <argsstring>()</argsstring>
        <name>DoLayout</name>
        <qualifiedname>BView::DoLayout</qualifiedname>
        <reimplementedby refid="classBBox_1a3379df36cfad5a63b74aea2ab1dfb298">DoLayout</reimplementedby>
        <reimplementedby refid="classBMenu_1a981691c987e0f0a82a8f056284280032">DoLayout</reimplementedby>
        <reimplementedby refid="classBMenuField_1ace976f3319627ec56e46c77f3b3c48de">DoLayout</reimplementedby>
        <reimplementedby refid="classBScrollView_1afecb9e8df5e62393e1694de56598a590">DoLayout</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1a61cb9c3f7237acf305b6cf2453d91d77">DoLayout</reimplementedby>
        <reimplementedby refid="classBTextControl_1ad2f9995715ea117902b9255a08d6f4a2">DoLayout</reimplementedby>
        <reimplementedby refid="classBTextView_1a5126538fd4fc16a0deec2c256c62ce51">DoLayout</reimplementedby>
        <briefdescription>
<para>Layout view within the layout context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>This is only meaningful if the view is part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="649" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Tool Tips</header>
      <description><para><simplesect kind="note"><para>These methods were not available in BeOS R5. </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classBView_1a75fb825a3ef69c1c6fbf3535ee2260ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetToolTip</definition>
        <argsstring>(const char *text)</argsstring>
        <name>SetToolTip</name>
        <qualifiedname>BView::SetToolTip</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Set the tool tip of the view to <emphasis>text</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>text</emphasis> to set the view to or <computeroutput>NULL</computeroutput> or blank to unset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="654" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa377bad64048a2d3cd1c2b272ae3079b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetToolTip</definition>
        <argsstring>(BToolTip *tip)</argsstring>
        <name>SetToolTip</name>
        <qualifiedname>BView::SetToolTip</qualifiedname>
        <param>
          <type>BToolTip *</type>
          <declname>tip</declname>
        </param>
        <briefdescription>
<para>Set the tool tip of the view to the <emphasis>tip</emphasis> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tip</parametername>
</parameternamelist>
<parameterdescription>
<para>The tool tip object to set the view to or <computeroutput>NULL</computeroutput> to unset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="655" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a127ceec2101b12c0fbe1e0e66a7b9dc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>BToolTip *</type>
        <definition>BToolTip * BView::ToolTip</definition>
        <argsstring>() const</argsstring>
        <name>ToolTip</name>
        <qualifiedname>BView::ToolTip</qualifiedname>
        <briefdescription>
<para>Return the tool tip set to the view or <computeroutput>NULL</computeroutput> if not set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The BToolTip object set to the view.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="656" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a61d28f55d6fdc55b59c38c44b9788205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::ShowToolTip</definition>
        <argsstring>(BToolTip *tip=NULL)</argsstring>
        <name>ShowToolTip</name>
        <qualifiedname>BView::ShowToolTip</qualifiedname>
        <param>
          <type>BToolTip *</type>
          <declname>tip</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Show the tool tip at the current mouse position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tip</parametername>
</parameternamelist>
<parameterdescription>
<para>The BToolTip object to show.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="658" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af75bbc1131ad6a90e299c6cbcf623fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::HideToolTip</definition>
        <argsstring>()</argsstring>
        <name>HideToolTip</name>
        <qualifiedname>BView::HideToolTip</qualifiedname>
        <briefdescription>
<para>Hide the view&apos;s tool tip. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="659" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1afb826fe9b8964e4d843cae190170badf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BView::GetToolTipAt</definition>
        <argsstring>(BPoint point, BToolTip **_tip)</argsstring>
        <name>GetToolTipAt</name>
        <qualifiedname>BView::GetToolTipAt</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type>BToolTip **</type>
          <declname>_tip</declname>
        </param>
        <briefdescription>
<para>Point <emphasis>_tip</emphasis> with the view&apos;s tool tip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Currently unused. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_tip</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer to a BToolTip object to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="662" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBView_1aa1c71c19d9bd04555fada3927509cfc1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BBitmap</definition>
        <argsstring></argsstring>
        <name>BBitmap</name>
        <qualifiedname>BView::BBitmap</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="687" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBView_1a1801225d338a9b048842617561e70b5d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BLayout</definition>
        <argsstring></argsstring>
        <name>BLayout</name>
        <qualifiedname>BView::BLayout</qualifiedname>
        <param>
          <type><ref refid="classBLayout" kindref="compound">BLayout</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="688" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBView_1aefa3a9babff720db378fa181a222a56c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BPrintJob</definition>
        <argsstring></argsstring>
        <name>BPrintJob</name>
        <qualifiedname>BView::BPrintJob</qualifiedname>
        <param>
          <type>BPrintJob</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="689" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBView_1a9d46b1c89e84d7153b2ef24f194a169a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BScrollBar</definition>
        <argsstring></argsstring>
        <name>BScrollBar</name>
        <qualifiedname>BView::BScrollBar</qualifiedname>
        <param>
          <type><ref refid="classBScrollBar" kindref="compound">BScrollBar</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="690" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBView_1ae81988285cca12b7a9e52b210c5f0ae9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BShelf</definition>
        <argsstring></argsstring>
        <name>BShelf</name>
        <qualifiedname>BView::BShelf</qualifiedname>
        <param>
          <type>BShelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="691" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBView_1abc677b6f9fe2457e67d0010e20347e9e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BTabView</definition>
        <argsstring></argsstring>
        <name>BTabView</name>
        <qualifiedname>BView::BTabView</qualifiedname>
        <param>
          <type><ref refid="classBTabView" kindref="compound">BTabView</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="692" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBView_1af159fae9bef1f9a91dcaa0b93fd5658d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BWindow</definition>
        <argsstring></argsstring>
        <name>BWindow</name>
        <qualifiedname>BView::BWindow</qualifiedname>
        <param>
          <type><ref refid="classBWindow" kindref="compound">BWindow</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="693" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBView_1ac96b60d37bd806132da680e187dc2288" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Private</definition>
        <argsstring></argsstring>
        <name>Private</name>
        <qualifiedname>BView::Private</qualifiedname>
        <param>
          <type>Private</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="686" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="686" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBView_1add7ce6107b781a8b56a0a32572aeb567" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::_reserved[6]</definition>
        <argsstring>[6]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BView::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="792" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1aa1719ee15a4e67e15e912b44f7784a59" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BView::_unused_bool1</definition>
        <argsstring></argsstring>
        <name>_unused_bool1</name>
        <qualifiedname>BView::_unused_bool1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="780" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a95f297696ef58c38b45d682b39c29ca0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BView::_unused_bool2</definition>
        <argsstring></argsstring>
        <name>_unused_bool2</name>
        <qualifiedname>BView::_unused_bool2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="781" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a9ab029c52eae7cc6fc497da3932a41c4" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BView::_unused_int1</definition>
        <argsstring></argsstring>
        <name>_unused_int1</name>
        <qualifiedname>BView::_unused_int1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="760" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a50359c000b4625cb2e068c625ecfdf28" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BView::fAttached</definition>
        <argsstring></argsstring>
        <name>fAttached</name>
        <qualifiedname>BView::fAttached</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="779" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a11c3710a8dd2cf1703ff3c9ae92a827d" prot="private" static="no" mutable="no">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BView::fBounds</definition>
        <argsstring></argsstring>
        <name>fBounds</name>
        <qualifiedname>BView::fBounds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="783" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a5861c6072d2ce06e4996439cc1637a3c" prot="private" static="no" mutable="no">
        <type>_array_data_ *</type>
        <definition>_array_data_* BView::fCommArray</definition>
        <argsstring></argsstring>
        <name>fCommArray</name>
        <qualifiedname>BView::fCommArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="774" column="13" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="774" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a8b841009a3298d8bc34f7398ade5557f" prot="private" static="no" mutable="no">
        <type><ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
        <definition>BPicture* BView::fCurrentPicture</definition>
        <argsstring></argsstring>
        <name>fCurrentPicture</name>
        <qualifiedname>BView::fCurrentPicture</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="773" column="9" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1ad6ba409c1ab62d4b32101c971f38d187" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::fEventMask</definition>
        <argsstring></argsstring>
        <name>fEventMask</name>
        <qualifiedname>BView::fEventMask</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="785" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1af445e4d614c29871795010143d5f82ca" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::fEventOptions</definition>
        <argsstring></argsstring>
        <name>fEventOptions</name>
        <qualifiedname>BView::fEventOptions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="786" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a198a4a51536ddfdff903dc367fdd7048" prot="private" static="no" mutable="no">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView* BView::fFirstChild</definition>
        <argsstring></argsstring>
        <name>fFirstChild</name>
        <qualifiedname>BView::fFirstChild</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="768" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1aa5bcf0e8ae277259a7518fbac1ef04b2" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::fFlags</definition>
        <argsstring></argsstring>
        <name>fFlags</name>
        <qualifiedname>BView::fFlags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="762" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a8d25ada49295a8411908882dc4871486" prot="private" static="no" mutable="no">
        <type><ref refid="classBScrollBar" kindref="compound">BScrollBar</ref> *</type>
        <definition>BScrollBar* BView::fHorScroller</definition>
        <argsstring></argsstring>
        <name>fHorScroller</name>
        <qualifiedname>BView::fHorScroller</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="777" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1acea55b25fbc0e7607cbaa010c93391e6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BView::fIsPrinting</definition>
        <argsstring></argsstring>
        <name>fIsPrinting</name>
        <qualifiedname>BView::fIsPrinting</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="778" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a52fae1edac19e35b2cd770a846dee14e" prot="private" static="no" mutable="no">
        <type>LayoutData *</type>
        <definition>LayoutData* BView::fLayoutData</definition>
        <argsstring></argsstring>
        <name>fLayoutData</name>
        <qualifiedname>BView::fLayoutData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="789" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a5992883c0de2d54e2e863060836e5475" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::fMouseEventOptions</definition>
        <argsstring></argsstring>
        <name>fMouseEventOptions</name>
        <qualifiedname>BView::fMouseEventOptions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="787" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1ae4c230e283adb9d52e7f8d289a6c1ebf" prot="private" static="no" mutable="no">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView* BView::fNextSibling</definition>
        <argsstring></argsstring>
        <name>fNextSibling</name>
        <qualifiedname>BView::fNextSibling</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="766" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a5e6616ec1212946e3d6795654aed81be" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BView::fNoISInteraction</definition>
        <argsstring></argsstring>
        <name>fNoISInteraction</name>
        <qualifiedname>BView::fNoISInteraction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="772" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1aac7ca7df259b0fcd300eec6a49895802" prot="private" static="no" mutable="no">
        <type><ref refid="classBWindow" kindref="compound">BWindow</ref> *</type>
        <definition>BWindow* BView::fOwner</definition>
        <argsstring></argsstring>
        <name>fOwner</name>
        <qualifiedname>BView::fOwner</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="764" column="8" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1ab899a2577bee2e620db4baa62c9205ef" prot="private" static="no" mutable="no">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView* BView::fParent</definition>
        <argsstring></argsstring>
        <name>fParent</name>
        <qualifiedname>BView::fParent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="765" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1aaa21020f3aa88806f25abcfdba51709a" prot="private" static="no" mutable="no">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::fParentOffset</definition>
        <argsstring></argsstring>
        <name>fParentOffset</name>
        <qualifiedname>BView::fParentOffset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="763" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a269004a2eb80a56536c3303a4b3113d1" prot="private" static="no" mutable="no">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView* BView::fPreviousSibling</definition>
        <argsstring></argsstring>
        <name>fPreviousSibling</name>
        <qualifiedname>BView::fPreviousSibling</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="767" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a98a9bf91f6c21de6fac277a107375499" prot="private" static="no" mutable="no">
        <type>BShelf *</type>
        <definition>BShelf* BView::fShelf</definition>
        <argsstring></argsstring>
        <name>fShelf</name>
        <qualifiedname>BView::fShelf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="784" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1aa0a05643805388ba6151579408e82c5a" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
        <definition>int16 BView::fShowLevel</definition>
        <argsstring></argsstring>
        <name>fShowLevel</name>
        <qualifiedname>BView::fShowLevel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="770" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a939224a682468053766ec7e6c7297266" prot="private" static="no" mutable="no">
        <type>::BPrivate::ViewState *</type>
        <definition>::BPrivate::ViewState* BView::fState</definition>
        <argsstring></argsstring>
        <name>fState</name>
        <qualifiedname>BView::fState</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="782" column="23" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a3674dacdf203c396894fe54a685ee506" prot="private" static="no" mutable="no">
        <type>BToolTip *</type>
        <definition>BToolTip* BView::fToolTip</definition>
        <argsstring></argsstring>
        <name>fToolTip</name>
        <qualifiedname>BView::fToolTip</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="790" column="9" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1a988eabfcfd41ced54af875678c727b31" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BView::fTopLevelView</definition>
        <argsstring></argsstring>
        <name>fTopLevelView</name>
        <qualifiedname>BView::fTopLevelView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="771" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="771" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBView_1af5e900d48bf149cb68c064b28307be1a" prot="private" static="no" mutable="no">
        <type><ref refid="classBScrollBar" kindref="compound">BScrollBar</ref> *</type>
        <definition>BScrollBar* BView::fVerScroller</definition>
        <argsstring></argsstring>
        <name>fVerScroller</name>
        <qualifiedname>BView::fVerScroller</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="776" column="11" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="776" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBView_1ae982fac35c278cc64990c506efe3965e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BView::BView</definition>
        <argsstring>(BMessage *archive)</argsstring>
        <name>BView</name>
        <qualifiedname>BView::BView</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
<para>Archive constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>archive</parametername>
</parameternamelist>
<parameterdescription>
<para>The message data to construct the view from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ae3a1b2a66dc19690e766623be65c37e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BView::BView</definition>
        <argsstring>(BRect frame, const char *name, uint32 resizingMode, uint32 flags)</argsstring>
        <name>BView</name>
        <qualifiedname>BView::BView</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>resizingMode</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Standard constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>A newly constructed <ref refid="classBView" kindref="compound">BView</ref> object has no parent, you must assign it one by passing it into the <ref refid="classBView_1ab6382c582e5e1be527d3199459d05e8f" kindref="member">AddChild()</ref> method of another view or window. Once the view or a parent view has been attached to a window the view becomes part of that window&apos;s view hierarchy.</para>
<para>When the <ref refid="classBView" kindref="compound">BView</ref> object is added as a child the <emphasis>frame</emphasis> values are interpreted in the parent&apos;s coordinate system. The frame rectangle should be specified in integral values to align on pixel boundaries, decimal values will be rounded.</para>
<para>The resizing mode flags and view flags can be set after the view has been constructed by calling the <ref refid="classBView_1a38d29ea581880c3978d7e50dcc851696" kindref="member">SetResizingMode()</ref> and <ref refid="classBView_1a4740f9a1e1163073b042102a421a2e33" kindref="member">SetFlags()</ref> methods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>frame</emphasis> rectangle of the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the view, can be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resizingMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the view&apos;s behavior when its parent is resized. <linebreak/>
<linebreak/>
 It combines one of the following horizontal resizing constants: <itemizedlist>
<listitem><para><computeroutput>B_FOLLOW_TOP</computeroutput> The margin between the top of the view and the top of its parent remains constant. </para>
</listitem>
<listitem><para><computeroutput>B_FOLLOW_BOTTOM</computeroutput> The margin between the bottom of the view and the bottom of its parent remains constant. </para>
</listitem>
<listitem><para><computeroutput>B_FOLLOW_TOP_BOTTOM</computeroutput> The margin between the top and bottom sides of the view and the top and bottom sides of the parent both remain constant. </para>
</listitem>
<listitem><para><computeroutput>B_FOLLOW_V_CENTER</computeroutput> Maintains a constant relationship to the vertical center of the parent view.</para>
</listitem>
</itemizedlist>
with one of the following vertical resizing constants: <itemizedlist>
<listitem><para><computeroutput>B_FOLLOW_LEFT</computeroutput> The margin between the left side of the view and the left side of its parent remains constant. </para>
</listitem>
<listitem><para><computeroutput>B_FOLLOW_RIGHT</computeroutput> The margin between the right side of the view and the right side of the parent remains constant. </para>
</listitem>
<listitem><para><computeroutput>B_FOLLOW_LEFT_RIGHT</computeroutput> The margin between the left and right sides of the view and the left and right sides of its parent both remain constant. </para>
</listitem>
<listitem><para><computeroutput>B_FOLLOW_H_CENTER</computeroutput> The view maintains a constant relationship to the horizontal center of the parent view.</para>
</listitem>
</itemizedlist>
or use one of the following combined horizontal/vertical constants: <itemizedlist>
<listitem><para><computeroutput>B_FOLLOW_NONE</computeroutput> Equivalent to <computeroutput>B_FOLLOW_LEFT</computeroutput> | <computeroutput>B_FOLLOW_TOP</computeroutput>. </para>
</listitem>
<listitem><para><computeroutput>B_FOLLOW_ALL_SIDES</computeroutput> Equivalent to <computeroutput>B_FOLLOW_LEFT_RIGHT</computeroutput> | <computeroutput>B_FOLLOW_TOP_BOTTOM</computeroutput>. </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The view flags, a mask of one or more of the following:<itemizedlist>
<listitem><para><computeroutput>B_FULL_UPDATE_ON_RESIZE</computeroutput> Redraw the entire view on resize.</para>
</listitem><listitem><para><computeroutput>B_WILL_DRAW</computeroutput> Indicates that the view will do its own drawing.</para>
</listitem><listitem><para><computeroutput>B_PULSE_NEEDED</computeroutput> The view accepts <ref refid="classBView_1a0ae8ec3e94ee3d41cb329e3df6966566" kindref="member">Pulse()</ref> messages.</para>
</listitem><listitem><para><computeroutput>B_NAVIGABLE_JUMP</computeroutput> Default for keyboard navigation.</para>
</listitem><listitem><para><computeroutput>B_FRAME_EVENTS</computeroutput> Responds to move and resize events.</para>
</listitem><listitem><para><computeroutput>B_NAVIGABLE</computeroutput> Able to receive keyboard navigation focus.</para>
</listitem><listitem><para><computeroutput>B_SUBPIXEL_PRECISE</computeroutput> Draws with sub-pixel precision.</para>
</listitem><listitem><para><computeroutput>B_DRAW_ON_CHILDREN</computeroutput> Responds to <ref refid="classBView_1abb50623b4236926b068fc5a2264f6a48" kindref="member">DrawAfterChildren()</ref>.</para>
</listitem><listitem><para><computeroutput>B_INPUT_METHOD_AWARE</computeroutput> Allows access input method add-ons.</para>
</listitem><listitem><para><computeroutput>B_SUPPORTS_LAYOUT</computeroutput> Supports the layout APIs, i.e. it doesn&apos;t use a frame rectangle.</para>
</listitem><listitem><para><computeroutput>B_INVALIDATE_AFTER_LAYOUT</computeroutput> Is redraw after added to a layout.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab148f59c41c9a22ced87bf7a0221ed62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BView::BView</definition>
        <argsstring>(const char *name, uint32 flags, BLayout *layout=NULL)</argsstring>
        <name>BView</name>
        <qualifiedname>BView::BView</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="classBLayout" kindref="compound">BLayout</ref> *</type>
          <declname>layout</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Layout constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>To be used as part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>. You may use the Layout Methods found below to set the size and alignment constraints of the view.</para>
<para><computeroutput>B_SUPPORTS_LAYOUT</computeroutput> is automatically set to the view. The view flags can be set after the view has been constructed by calling the <ref refid="classBView_1a4740f9a1e1163073b042102a421a2e33" kindref="member">SetFlags()</ref> methods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the view, can be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The view flags, a mask of one or more of the following:<itemizedlist>
<listitem><para><computeroutput>B_FULL_UPDATE_ON_RESIZE</computeroutput> Redraw the entire view on resize.</para>
</listitem><listitem><para><computeroutput>B_WILL_DRAW</computeroutput> Indicates that the view will do its own drawing.</para>
</listitem><listitem><para><computeroutput>B_PULSE_NEEDED</computeroutput> The view accepts <ref refid="classBView_1a0ae8ec3e94ee3d41cb329e3df6966566" kindref="member">Pulse()</ref> messages.</para>
</listitem><listitem><para><computeroutput>B_NAVIGABLE_JUMP</computeroutput> Default for keyboard navigation.</para>
</listitem><listitem><para><computeroutput>B_FRAME_EVENTS</computeroutput> Responds to move and resize events.</para>
</listitem><listitem><para><computeroutput>B_NAVIGABLE</computeroutput> Able to receive keyboard navigation focus.</para>
</listitem><listitem><para><computeroutput>B_SUBPIXEL_PRECISE</computeroutput> Draws with sub-pixel precision.</para>
</listitem><listitem><para><computeroutput>B_DRAW_ON_CHILDREN</computeroutput> Responds to <ref refid="classBView_1abb50623b4236926b068fc5a2264f6a48" kindref="member">DrawAfterChildren()</ref>.</para>
</listitem><listitem><para><computeroutput>B_INPUT_METHOD_AWARE</computeroutput> Allows access input method add-ons.</para>
</listitem><listitem><para><computeroutput>B_SUPPORTS_LAYOUT</computeroutput> Supports the layout APIs, i.e. it doesn&apos;t use a frame rectangle.</para>
</listitem><listitem><para><computeroutput>B_INVALIDATE_AFTER_LAYOUT</computeroutput> Is redraw after added to a layout. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>A <emphasis>layout</emphasis> to set the view to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7df0d7eaeb97a3c8a800f9e321f23f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BView::~BView</definition>
        <argsstring>()</argsstring>
        <name>~BView</name>
        <qualifiedname>BView::~BView</qualifiedname>
        <briefdescription>
<para>Destructor method. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes the view and all children freeing any memory used.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="158" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acbb8ea442346e91428689163db9d633e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BView::Bounds</definition>
        <argsstring>() const</argsstring>
        <name>Bounds</name>
        <qualifiedname>BView::Bounds</qualifiedname>
        <briefdescription>
<para>Returns the view&apos;s frame rectangle in the view&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The view&apos;s bounding rectangle in the view&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="215" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a15465930f84d2d01f7818bd79bc91c3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::Flush</definition>
        <argsstring>() const</argsstring>
        <name>Flush</name>
        <qualifiedname>BView::Flush</qualifiedname>
        <briefdescription>
<para>Flushes the attached window&apos;s connection to App Server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the view isn&apos;t attached to a window, <ref refid="classBView_1a15465930f84d2d01f7818bd79bc91c3e" kindref="member">Flush()</ref> does nothing.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="586" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a487b04a3aaffdd1a1afb730dca36a7e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BView::Frame</definition>
        <argsstring>() const</argsstring>
        <name>Frame</name>
        <qualifiedname>BView::Frame</qualifiedname>
        <briefdescription>
<para>Returns the view&apos;s frame rectangle in the parent&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The view&apos;s frame rectangle in the parent&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="216" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a089c3ff794c454388a9388c7b6568478" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::GetPreferredSize</definition>
        <argsstring>(float *_width, float *_height)</argsstring>
        <name>GetPreferredSize</name>
        <qualifiedname>BView::GetPreferredSize</qualifiedname>
        <reimplementedby refid="classBBox_1abc3935933ba86ddfe9dacddce7fcf4b8">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBButton_1adba3ed10370f960a0a408413569adf30">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1a0f2838b9bd42bd8454658dbdd78b179b">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBCheckBox_1aff828221de6947696a0b60d73241315c">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBColorControl_1a20210c9c80b0bfd88a0e6d5d89da0a64">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBControl_1a22455c705a4ed0fd09908b36a8dda3ae">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBDragger_1acab77f447ccf51dedf686ea9e2c56fe1">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBListView_1af763f7195c72abd00143441bef002b25">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBMenu_1af60a7b8ec6f92749fd46ce2e9179dc17">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ab4dd370f1363d89c1fb2918877595b02">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBOptionPopUp_1ae2fcf40dcd30ba8560ee3f737485fcc5">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1aa1b8b9ab01b3eb04a6e0fc1cd50833e4">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a2f2dddfafa62ccea5770aab99893dae9">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a68b1cc4ed9432b21e755bfe7b142efd3">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a2129a420a7dfc70b6d9a97b1458764f6">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBScrollBar_1ab5249d91d4f028b5a84a8074b0af2d0f">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBScrollView_1adc5802fb92fa7f72d4a50cb2314f9e8d">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBStatusBar_1ae80597269df1aa5dfd4d07dba2c389fe">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBStringView_1af068a3cc57ce813e92fecd498d106803">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBTabView_1a331553465a07b7de9cef71e54d6b3ed0">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBTextControl_1a9ebbd271bca4c72ba2a5db8dc1876082">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBTextView_1a5b31f120d4476b83beb08f3333cfc85d">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBMenuField_1a08fad29da3ccfb574bd4cf6fdc56b20b">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1af37a5222e47e1ab5429b8672926a6bd8">GetPreferredSize</reimplementedby>
        <reimplementedby refid="classBChannelControl_1aacccdb670d6553e5204c8ae317f6029a">GetPreferredSize</reimplementedby>
        <param>
          <type>float *</type>
          <declname>_width</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_height</declname>
        </param>
        <briefdescription>
<para>Fill out the preferred width and height of the view into the <emphasis>_width</emphasis> and <emphasis>_height</emphasis> parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Derived classes should override this method to set the preferred size of object.</para>
<para><simplesect kind="remark"><para>Either the <emphasis>_width</emphasis> or <emphasis>_height</emphasis> parameter may be set to <computeroutput>NULL</computeroutput> if you only want to get the other one.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a float to store the width of the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a float to store the height of the view.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="589" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a772462d751d457f63ee0fc56d8ba02d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::GetSupportedSuites</definition>
        <argsstring>(BMessage *data)</argsstring>
        <name>GetSupportedSuites</name>
        <qualifiedname>BView::GetSupportedSuites</qualifiedname>
        <reimplements refid="classBHandler_1acf34435dada239f411e8e034e0ea36b5">GetSupportedSuites</reimplements>
        <reimplementedby refid="classBChannelControl_1abfb5744f9faf08ed02d22a33ae9e9ab8">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBChannelSlider_1affd29de4f880e122c72d4d3b25b7ed9d">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBColorControl_1a5f10efed53781673b0f5a3f40b7d527d">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBDragger_1a9d014b5632dfd7c4dbb43f45ea2175ef">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBListView_1acc1fa37e73b342b27d16e13aa3d3024a">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBMenu_1a2aa0277374bacf3b7644f738bc064637">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ad635f7e68997f901cbd4b15491b5f2a3">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBMenuField_1ad765cb012c296a6f676e070c80c929e3">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a293dd0ed9a59c56ddd2738981c6c48b6">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a08e86268e927d332501bee63892fb2bd">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1aab6d894d982b8841569be6d5766b88e2">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBStatusBar_1afd6b9bb4d38d8c418d3f0aa65a84aea3">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBStringView_1ab294fcbe6b75394cb2cd4d6db1a908c4">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBTextControl_1a9281b5fa852c3fe841bc7f102a96078a">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBTextView_1a9cb6a32b918a5c90489b6fb7e27fcb6a">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBBox_1ab1ff66b8efec609137264522016f09c6">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBButton_1af912fac07ee02f90a12a4011e5a493cb">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a6075229f070c3723a0fc102e7984e8f2">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBControl_1a3b545ffe2ee04f62eaa567582225adba">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a513f368c4eb7c7d1aa81da79bee492ea">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBScrollBar_1a543695199844d6b485ab0cb43c65a950">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBScrollView_1ae23327464d7c7db975defe845c4cfdf9">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBTabView_1aed45f36a1cdcc1bb23fc964714cbe20d">GetSupportedSuites</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reports the suites of messages and specifiers that derived classes understand.  </para>
<para><simplesect kind="since"><para>BeOS R3   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="597" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a7688dc04178a2955950154ee3670d029" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::Hide</definition>
        <argsstring>()</argsstring>
        <name>Hide</name>
        <qualifiedname>BView::Hide</qualifiedname>
        <reimplementedby refid="classBMenu_1acebb809699f7efa7d72346f2ba0b869f">Hide</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a7dfa53005734435d3b805161e3495e99">Hide</reimplementedby>
        <briefdescription>
<para>Hides the view without removing it from the view hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls to <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> and <ref refid="classBView_1a06e0584057d6c7a7c7e048b6272b7016" kindref="member">Show()</ref> are cumulative. A visible view becomes hidden once the number of <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> calls exceeds the number of <ref refid="classBView_1a06e0584057d6c7a7c7e048b6272b7016" kindref="member">Show()</ref> calls.</para>
<para><simplesect kind="see"><para><ref refid="classBView_1a06e0584057d6c7a7c7e048b6272b7016" kindref="member">Show()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" kindref="member">BWindow::Hide()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a33a65050c2315b19b4c5af16c48e3cdb" kindref="member">IsHidden()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="582" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a165719de682845f80735042a499692ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::IsFocus</definition>
        <argsstring>() const</argsstring>
        <name>IsFocus</name>
        <qualifiedname>BView::IsFocus</qualifiedname>
        <briefdescription>
<para>Returns whether or not the view is the window&apos;s current focus view. </para>
        </briefdescription>
        <detaileddescription>
<para>The focus view changes as the user moves from one view to another either by pushing the tab key or by clicking a new view with the mouse. The change can be made programmatically via the <ref refid="classBView_1a266a368d81c6e1668b2b9b22b5016853" kindref="member">MakeFocus()</ref> method.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the view is the current focus view, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a266a368d81c6e1668b2b9b22b5016853" kindref="member">MakeFocus()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBWindow_1a31d98b696b4e2a98ae83c841e342fe1b" kindref="member">BWindow::CurrentFocus()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="579" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a33a65050c2315b19b4c5af16c48e3cdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::IsHidden</definition>
        <argsstring>() const</argsstring>
        <name>IsHidden</name>
        <qualifiedname>BView::IsHidden</qualifiedname>
        <briefdescription>
<para>Returns whether or not the view is hidden. </para>
        </briefdescription>
        <detaileddescription>
<para>A view can be hidden either by calling <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> on the view, calling <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> on a parent view or calling <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> on the window that the view is attached to. When a <ref refid="classBWindow" kindref="compound">BWindow</ref> or <ref refid="classBView" kindref="compound">BView</ref> is hidden, all its descendants are also hidden.</para>
<para>This method only returns whether the view or an ancestor view has had the <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> method called on it, it doesn&apos;t consider if the view is obscured by another view or is off-screen. A <ref refid="classBView" kindref="compound">BView</ref> is not hidden by default.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the view was hidden via the <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> method, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="583" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a95cfa8ee585230ea8fb224e88eddc503" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::IsHidden</definition>
        <argsstring>(const BView *looking_from) const</argsstring>
        <name>IsHidden</name>
        <qualifiedname>BView::IsHidden</qualifiedname>
        <param>
          <type>const <ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>looking_from</declname>
          <defname>lookingFrom</defname>
        </param>
        <briefdescription>
<para>Returns whether or not the view is hidden from the perspective of <emphasis>lookingFrom</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>A view is considered hidden if it, any of its parent views, or the window it&apos;s attached to has had the <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> method called on it. This method allows you to determine the hidden status of a view from a different point on the view hierarchy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lookingFrom</parametername>
</parameternamelist>
<parameterdescription>
<para>The view used as a base when determining the hidden status of the <ref refid="classBView" kindref="compound">BView</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the view was hidden via the <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> method, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="584" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8e3f1722e40fdf01c5131e49199ec3ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::IsPrinting</definition>
        <argsstring>() const</argsstring>
        <name>IsPrinting</name>
        <qualifiedname>BView::IsPrinting</qualifiedname>
        <briefdescription>
<para>Returns whether or not the view is drawing to a printer. </para>
        </briefdescription>
        <detaileddescription>
<para>This method should only be called from the <ref refid="classBView_1aa55014241fc2f5556415850692b52db2" kindref="member">Draw()</ref> or <ref refid="classBView_1abb50623b4236926b068fc5a2264f6a48" kindref="member">DrawAfterChildren()</ref> methods. If called from any other method this method returns <computeroutput>false</computeroutput>.</para>
<para>The view may choose different fonts, images, or colors when drawing to a printer vs. when drawing to the screen.</para>
<para><simplesect kind="return"><para>Returns <computeroutput>true</computeroutput> if drawing to a printer, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="599" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a5d252dfe28eee049be2192d1a01ed6e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BView::LeftTop</definition>
        <argsstring>() const</argsstring>
        <name>LeftTop</name>
        <qualifiedname>BView::LeftTop</qualifiedname>
        <briefdescription>
<para>Returns the left top corner point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The left top corner of the view as a <ref refid="classBPoint" kindref="compound">BPoint</ref> object.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="233" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a512a6c8dca1a62b14cdcb1c22070129b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::Perform</definition>
        <argsstring>(perform_code code, void *data)</argsstring>
        <name>Perform</name>
        <qualifiedname>BView::Perform</qualifiedname>
        <reimplements refid="classBHandler_1a4e6ebc7ebcb72855a1f0fee7bde99766">Perform</reimplements>
        <reimplementedby refid="classBPopUpMenu_1a8f92a8866c4ffd63cdfcf07957f5ba22">Perform</reimplementedby>
        <reimplementedby refid="classBListView_1aa0afeb194104738a01c7e60195fe50d0">Perform</reimplementedby>
        <reimplementedby refid="classBCheckBox_1abcac265789890adbf485f42d34d8c8e3">Perform</reimplementedby>
        <reimplementedby refid="classBDragger_1ad47a007f4126b9847a315263aa64ad93">Perform</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a4b8a4e16ace175bc3bad9d6ef6b42daf">Perform</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1acb2775731d5da2cf52995e4d0b75c1d6">Perform</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a57e7eef2e379994c13b8c93eeb5cf3c5">Perform</reimplementedby>
        <reimplementedby refid="classBSeparatorView_1af56310d344ae63781e6b299d56c34e99">Perform</reimplementedby>
        <reimplementedby refid="classBStringView_1a57a75da20cef1ba402df82def803b1d4">Perform</reimplementedby>
        <reimplementedby refid="classBTextView_1a6519856e1dbf6e021911529b8a0a15c6">Perform</reimplementedby>
        <reimplementedby refid="classBBox_1adcd9b77028e7c820ce29a8a9db950adb">Perform</reimplementedby>
        <reimplementedby refid="classBButton_1aee74330d076b7b8487fe21443118b03d">Perform</reimplementedby>
        <reimplementedby refid="classBCardView_1aa784b33c5b2c62791cf86fa38d1704ba">Perform</reimplementedby>
        <reimplementedby refid="classBColorControl_1a8ec5063623c0c27052af71be1a4eafca">Perform</reimplementedby>
        <reimplementedby refid="classBControl_1a0b32524cd2abfb7ea37b9988b180c733">Perform</reimplementedby>
        <reimplementedby refid="classBGridView_1a1409f66c0dfe65882e3bfa3b0fe000dc">Perform</reimplementedby>
        <reimplementedby refid="classBGroupView_1ad8e96a8f8d76e75b5bb6815866529112">Perform</reimplementedby>
        <reimplementedby refid="classBMenu_1a6dedb98c6ba5ffbc44893ff43785c93c">Perform</reimplementedby>
        <reimplementedby refid="classBMenuField_1a78923e5f07ff7c288980a72f6a953001">Perform</reimplementedby>
        <reimplementedby refid="classBScrollBar_1adfb4e4e74d00970fd154c652e467b66e">Perform</reimplementedby>
        <reimplementedby refid="classBScrollView_1a1bd8a27f2883ca0e6b5b9dde0e9e638a">Perform</reimplementedby>
        <reimplementedby refid="classBSplitView_1a9aaf09f717a61303d5aca6e92d96b103">Perform</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a4b9eb3ec267be64d9293af3b920c48de">Perform</reimplementedby>
        <reimplementedby refid="classBTabView_1a708fd8766fddb7b0cd72566c57c2977a">Perform</reimplementedby>
        <reimplementedby refid="classBTextControl_1af07cb4cc28a119fd6080d416632f6395">Perform</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a44c726ed88d3a132e9d3055ebf98f3e6">Perform</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1ad2237b0064c91c237159edc020989bab" kindref="member">perform_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
          <defname>_data</defname>
        </param>
        <briefdescription>
<para>Perform some action. (Internal Method) </para>
        </briefdescription>
        <detaileddescription>
<para>This method is available to allow classes to be extended while maintaining binary compatibility.</para>
<para>The following perform codes are recognized:<itemizedlist>
<listitem><para><computeroutput>PERFORM_CODE_MIN_SIZE:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_MAX_SIZE:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_PREFERRED_SIZE:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_LAYOUT_ALIGNMENT:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_HAS_HEIGHT_FOR_WIDTH:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_GET_HEIGHT_FOR_WIDTH:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_SET_LAYOUT:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_INVALIDATE_LAYOUT:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_DO_LAYOUT:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_GET_TOOL_TIP_AT:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_ALL_UNARCHIVED:</computeroutput> </para>
</listitem><listitem><para><computeroutput>PERFORM_CODE_ALL_ARCHIVED:</computeroutput> </para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The perform code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store some data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="604" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abe8c63c85555e800e063388e7cf3e1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::ResizeToPreferred</definition>
        <argsstring>()</argsstring>
        <name>ResizeToPreferred</name>
        <qualifiedname>BView::ResizeToPreferred</qualifiedname>
        <reimplementedby refid="classBBox_1ad3c5e6892dcda099198f1e12f3696f60">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBButton_1a6468013205fd98f26440cd63911b9b34">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBChannelControl_1a6df6fe17dedbf19a1d4e868ad24410f6">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a0dedbdd99597789621ef09bb4e8f4b2b">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBColorControl_1a4c2ba5009024549e36b6d06b68ece03c">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBControl_1ad25f5ce6f17b5fe6fd6347021e9222e4">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBDragger_1ab9a21c6a7b2f4d818082dad1a258cd0d">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBListView_1aec8ab9ba29dffb6b14bfbc9530c88fbf">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBMenu_1a90a8228da7623e8e991a2fc7dc0e8898">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBMenuBar_1a7e846a6abc075a0db6305e86cbed1760">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBMenuField_1a33f83798e1f30279bba074a078a595d3">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBOptionPopUp_1aa2c5587ec3c4202409b19a32b425ea08">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a053c8871392cc82965ad42bb0302399c">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBPictureButton_1ac16a945ef32c4ae9fc066fd066da1242">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1a9983fca5936e0ebcf728ac5af7cc1004">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBRadioButton_1ab7975b6bd97b13278719aab270ca40de">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBScrollBar_1adb49da3971427af671953b4b751ab97a">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBScrollView_1a391fff7c7d3bec75c877a7f4626afc4c">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a202fddf87baa8bbda2638d19a36180b4">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBStringView_1ad6d63a369f1e27649fb7f72c519a0fd1">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBTabView_1ae71c385d5a612edaaac3aa2d43ecd959">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBTextControl_1a5072df60c0f2c20d5b1ff4a2dbecbe7b">ResizeToPreferred</reimplementedby>
        <reimplementedby refid="classBTextView_1ae288597c33c40f5f42abfe3ed41fce86">ResizeToPreferred</reimplementedby>
        <briefdescription>
<para>Resizes the view to its preferred size keeping the position of the left top corner constant. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is not recommended to use this method for views that are part of a <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="590" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a1e93df523fc9edc807274ac6cfd2dc8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BView::ResizingMode</definition>
        <argsstring>() const</argsstring>
        <name>ResizingMode</name>
        <qualifiedname>BView::ResizingMode</qualifiedname>
        <briefdescription>
<para>Returns the resizing mode flags mask set in the constructor or by <ref refid="classBView_1a38d29ea581880c3978d7e50dcc851696" kindref="member">SetResizingMode()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current resizing mode flags as a uint32 mask.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a38d29ea581880c3978d7e50dcc851696" kindref="member">SetResizingMode()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="568" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4c0c6d3b21ae92056e5e40fe4d3ec175" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>BHandler * BView::ResolveSpecifier</definition>
        <argsstring>(BMessage *message, int32 index, BMessage *specifier, int32 form, const char *property)</argsstring>
        <name>ResolveSpecifier</name>
        <qualifiedname>BView::ResolveSpecifier</qualifiedname>
        <reimplements refid="classBHandler_1a76439ffaf84e65232698d2a4a3317d22">ResolveSpecifier</reimplements>
        <reimplementedby refid="classBChannelSlider_1ab95b5eebb6adcc7502c856789f08b6d2">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBDragger_1ad21b28192fb7b7005129b5f517209e99">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBMenu_1adfd2e1d211f34a8ac748abb989adac48">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ab8e2eb06afc52455be926b3cde21f935">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBMenuField_1a8af84b2aecbc3e6b3041e3ef70b36cfd">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBPopUpMenu_1acefc54d0514f6efbe059d9a36b837fe1">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBStringView_1af7522569583e8aea625adea9fc2471fc">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBTextView_1a3e0e67bcd942c0b738043235e56fdf29">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBBox_1aa171ac58aa5857a404f9431e63ad6792">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBButton_1a16b56f270bcba826cd8a1eb043adb474">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBChannelControl_1af12f883b6e60f2ea071bb18724593350">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBCheckBox_1ae860f1cfc296c79754697d95fc289a9e">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBColorControl_1a2bc94c2bffc9dec2b1a844c21833cb93">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBControl_1a084be37bbc0c49627c42a078c4b4dac8">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBListView_1a2c6144558d144fd5b134021de4c01183">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBOutlineListView_1a835a18d28691bdc9daad7cf0598e8a5f">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBPictureButton_1a8553ac7d4f76b03d53dce14073cb50de">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBRadioButton_1a767171da7c902ec3e06d19951f8b1404">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBScrollBar_1abcf203657944c36c94a4a55e59338c8a">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBScrollView_1a6565e85e02890afd9e37f22935bf01b1">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBStatusBar_1a930eda32bb19c6fb583a95947bc4eec9">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBTabView_1a2d18bd3eeb63be72e3954b6d58cf3809">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBTextControl_1a666a6fd256b57c98f9e75b3c19a03a89">ResolveSpecifier</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>form</declname>
          <defname>what</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the proper handler for a scripting message.  </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The scripting message to determine the handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the specifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The message which contains the specifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>The &apos;what&apos; field of the specifier message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the target property.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the proper <ref refid="classBHandler" kindref="compound">BHandler</ref> for the given scripting message.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="594" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a38d29ea581880c3978d7e50dcc851696" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::SetResizingMode</definition>
        <argsstring>(uint32 mode)</argsstring>
        <name>SetResizingMode</name>
        <qualifiedname>BView::SetResizingMode</qualifiedname>
        <reimplementedby refid="classBTabView_1ac291b408315b6070e217bec7960243c7">SetResizingMode</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Sets the resizing mode of the view according to the <emphasis>mode</emphasis> mask. </para>
        </briefdescription>
        <detaileddescription>
<para>The resizing mode is first set in the <ref refid="classBView" kindref="compound">BView</ref> constructor.</para>
<para><simplesect kind="see"><para><ref refid="classBView_1a1e93df523fc9edc807274ac6cfd2dc8d" kindref="member">ResizingMode()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="567" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a39b4878773b4436e3c76aee51c4fbc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::SetViewCursor</definition>
        <argsstring>(const BCursor *cursor, bool sync=true)</argsstring>
        <name>SetViewCursor</name>
        <qualifiedname>BView::SetViewCursor</qualifiedname>
        <param>
          <type>const <ref refid="classBCursor" kindref="compound">BCursor</ref> *</type>
          <declname>cursor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Assigns <emphasis>cursor</emphasis> to the view. </para>
        </briefdescription>
        <detaileddescription>
<para>This cursor will be displayed when the mouse is positioned inside the view.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cursor</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBCursor" kindref="compound">BCursor</ref> object to assign to the view. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sync</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput> App Server is synchronized immediately forcing the change to occur. If <computeroutput>false</computeroutput>, the change will be put in the queue and will take effect when the pending requests are processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="258" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a06e0584057d6c7a7c7e048b6272b7016" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BView::Show</definition>
        <argsstring>()</argsstring>
        <name>Show</name>
        <qualifiedname>BView::Show</qualifiedname>
        <reimplementedby refid="classBMenu_1a880d9a96919d389e03106e978709bf9b">Show</reimplementedby>
        <reimplementedby refid="classBMenuBar_1ac0b9dafc30dd338e8f67b26eff7168f0">Show</reimplementedby>
        <briefdescription>
<para>Shows the view making it visible. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls to <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> and <ref refid="classBView_1a06e0584057d6c7a7c7e048b6272b7016" kindref="member">Show()</ref> are cumulative. A hidden view becomes visible again once the number of <ref refid="classBView_1a06e0584057d6c7a7c7e048b6272b7016" kindref="member">Show()</ref> calls matches the number of <ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> calls.</para>
<para><simplesect kind="see"><para><ref refid="classBView_1a7688dc04178a2955950154ee3670d029" kindref="member">Hide()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">BWindow::Show()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBView_1a33a65050c2315b19b4c5af16c48e3cdb" kindref="member">IsHidden()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="581" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a27e217abb3fefa45b6e4ceb7a54cb362" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::Sync</definition>
        <argsstring>() const</argsstring>
        <name>Sync</name>
        <qualifiedname>BView::Sync</qualifiedname>
        <briefdescription>
<para>Synchronizes the attached window&apos;s connection to App Server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the view isn&apos;t attached to a window, <ref refid="classBView_1a27e217abb3fefa45b6e4ceb7a54cb362" kindref="member">Sync()</ref> might crash the application.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="587" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a32733d357b76bc3504cae326d174f4a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBWindow" kindref="compound">BWindow</ref> *</type>
        <definition>BWindow * BView::Window</definition>
        <argsstring>() const</argsstring>
        <name>Window</name>
        <qualifiedname>BView::Window</qualifiedname>
        <briefdescription>
<para>Returns the window the view is attached to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The window the view is attached to or <computeroutput>NULL</computeroutput> if the view isn&apos;t attached to a window.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="183" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBView_1ab907f2871481cb809665310ed2e5a1f4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BView::BView</definition>
        <argsstring>(const BView &amp;)</argsstring>
        <name>BView</name>
        <qualifiedname>BView::BView</qualifiedname>
        <param>
          <type>const <ref refid="classBView" kindref="compound">BView</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9e8e72c03563011e204b3bdfae5842ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_Activate</definition>
        <argsstring>(bool state)</argsstring>
        <name>_Activate</name>
        <qualifiedname>BView::_Activate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="733" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1acd84411a0e63427666f6c3404c8c9c89" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::_AddChild</definition>
        <argsstring>(BView *child, BView *before)</argsstring>
        <name>_AddChild</name>
        <qualifiedname>BView::_AddChild</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>child</declname>
        </param>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>before</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="752" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aaa19458d94fed56442e0cf51c0f6830e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::_AddChildToList</definition>
        <argsstring>(BView *child, BView *before=NULL)</argsstring>
        <name>_AddChildToList</name>
        <qualifiedname>BView::_AddChildToList</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>child</declname>
        </param>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>before</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="748" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac7754d32ec11fe24d2517f0c7a5173a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_Attach</definition>
        <argsstring>()</argsstring>
        <name>_Attach</name>
        <qualifiedname>BView::_Attach</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="734" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a2141a6fe06514b7313a411bfa366934c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_CheckLock</definition>
        <argsstring>() const</argsstring>
        <name>_CheckLock</name>
        <qualifiedname>BView::_CheckLock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="709" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1adcef2be17d12f6d6b2aa989bc840e861" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_CheckLockAndSwitchCurrent</definition>
        <argsstring>() const</argsstring>
        <name>_CheckLockAndSwitchCurrent</name>
        <qualifiedname>BView::_CheckLockAndSwitchCurrent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="708" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a19dfb38a289b67dbfe53d9e2ae84aa43" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::_CheckOwnerLock</definition>
        <argsstring>() const</argsstring>
        <name>_CheckOwnerLock</name>
        <qualifiedname>BView::_CheckOwnerLock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="707" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa7ba30f1a374cee118137f82f6f03ddc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::_CheckOwnerLockAndSwitchCurrent</definition>
        <argsstring>() const</argsstring>
        <name>_CheckOwnerLockAndSwitchCurrent</name>
        <qualifiedname>BView::_CheckOwnerLockAndSwitchCurrent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="706" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a678551993062964b23406fb7c233f906" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ClipToPicture</definition>
        <argsstring>(BPicture *picture, BPoint where, bool invert, bool sync)</argsstring>
        <name>_ClipToPicture</name>
        <qualifiedname>BView::_ClipToPicture</qualifiedname>
        <param>
          <type><ref refid="classBPicture" kindref="compound">BPicture</ref> *</type>
          <declname>picture</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>where</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="700" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a33e69e7c529b543fa049f2c8a37b4201" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ClipToRect</definition>
        <argsstring>(BRect rect, bool inverse)</argsstring>
        <name>_ClipToRect</name>
        <qualifiedname>BView::_ClipToRect</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="703" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a12b9373da521c34bef2b9132918b85da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ClipToShape</definition>
        <argsstring>(BShape *shape, bool inverse)</argsstring>
        <name>_ClipToShape</name>
        <qualifiedname>BView::_ClipToShape</qualifiedname>
        <param>
          <type><ref refid="classBShape" kindref="compound">BShape</ref> *</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="704" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8c85eda0cd002157ec514bda83c93413" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ColorsUpdated</definition>
        <argsstring>(BMessage *message)</argsstring>
        <name>_ColorsUpdated</name>
        <qualifiedname>BView::_ColorsUpdated</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="735" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0ad82a7dc8298e1ebf1417768b3c8f99" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ConvertFromParent</definition>
        <argsstring>(BPoint *pt, bool checkLock) const</argsstring>
        <name>_ConvertFromParent</name>
        <qualifiedname>BView::_ConvertFromParent</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkLock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="730" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9754deb9d393b0ce928fcc662d855e71" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ConvertFromScreen</definition>
        <argsstring>(BPoint *pt, bool checkLock) const</argsstring>
        <name>_ConvertFromScreen</name>
        <qualifiedname>BView::_ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkLock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="725" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a68dc99bef6fa3b70de1c60bd802ebe5b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ConvertToParent</definition>
        <argsstring>(BPoint *pt, bool checkLock) const</argsstring>
        <name>_ConvertToParent</name>
        <qualifiedname>BView::_ConvertToParent</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkLock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="728" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad5596ff7caa38e7e4d4fdfdac337c6c6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ConvertToScreen</definition>
        <argsstring>(BPoint *pt, bool checkLock) const</argsstring>
        <name>_ConvertToScreen</name>
        <qualifiedname>BView::_ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkLock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="723" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8ce8d0cbd0e6bc4ff36e2727b4d2dd6b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::_CreateSelf</definition>
        <argsstring>()</argsstring>
        <name>_CreateSelf</name>
        <qualifiedname>BView::_CreateSelf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="747" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a4ff3b43a3902c99398f23f4c4ccc6697" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_Detach</definition>
        <argsstring>()</argsstring>
        <name>_Detach</name>
        <qualifiedname>BView::_Detach</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="736" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad34b52562af50aa1e4e98261d01ec532" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_Draw</definition>
        <argsstring>(BRect screenUpdateRect)</argsstring>
        <name>_Draw</name>
        <qualifiedname>BView::_Draw</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>screenUpdateRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="737" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ad6585ff0831fe7e4e87efd69d529739f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_DrawAfterChildren</definition>
        <argsstring>(BRect screenUpdateRect)</argsstring>
        <name>_DrawAfterChildren</name>
        <qualifiedname>BView::_DrawAfterChildren</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>screenUpdateRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="738" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1aa8a6cbb032b479e45df9d1426e547d2b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_FlushIfNotInTransaction</definition>
        <argsstring>()</argsstring>
        <name>_FlushIfNotInTransaction</name>
        <qualifiedname>BView::_FlushIfNotInTransaction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="745" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0f667858d2c2346e3832e395150241e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_FontsUpdated</definition>
        <argsstring>(BMessage *)</argsstring>
        <name>_FontsUpdated</name>
        <qualifiedname>BView::_FontsUpdated</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="739" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a0162cd37dd3d955a9fa71935862d5c56" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_InitData</definition>
        <argsstring>(BRect frame, const char *name, uint32 resizingMode, uint32 flags)</argsstring>
        <name>_InitData</name>
        <qualifiedname>BView::_InitData</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>resizingMode</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="695" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a71504bdf8cb5dafa4125a43a96b6835a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_InvalidateParentLayout</definition>
        <argsstring>()</argsstring>
        <name>_InvalidateParentLayout</name>
        <qualifiedname>BView::_InvalidateParentLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="671" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac34c3d8d9ebcb28d9e16e1222971b11f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_Layout</definition>
        <argsstring>(bool force, BLayoutContext *context)</argsstring>
        <name>_Layout</name>
        <qualifiedname>BView::_Layout</qualifiedname>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <param>
          <type>BLayoutContext *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="669" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9726666a03e6aee3b558ba5eec9c039a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_LayoutLeft</definition>
        <argsstring>(BLayout *deleted)</argsstring>
        <name>_LayoutLeft</name>
        <qualifiedname>BView::_LayoutLeft</qualifiedname>
        <param>
          <type><ref refid="classBLayout" kindref="compound">BLayout</ref> *</type>
          <declname>deleted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="670" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a313bd8bc25ba238ec421abcddd0ee851" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_MoveTo</definition>
        <argsstring>(int32 x, int32 y)</argsstring>
        <name>_MoveTo</name>
        <qualifiedname>BView::_MoveTo</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="718" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ab0d17478b86a349cf135dede7afd5636" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ParentResizedBy</definition>
        <argsstring>(int32 deltaWidth, int32 deltaHeight)</argsstring>
        <name>_ParentResizedBy</name>
        <qualifiedname>BView::_ParentResizedBy</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>deltaWidth</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>deltaHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="720" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8e31fd4c2045e1e6160c477812550a21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_PrintToStream</definition>
        <argsstring>()</argsstring>
        <name>_PrintToStream</name>
        <qualifiedname>BView::_PrintToStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="757" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9580c047c3faf94fca91491cec6073df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_PrintTree</definition>
        <argsstring>()</argsstring>
        <name>_PrintTree</name>
        <qualifiedname>BView::_PrintTree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="758" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abf7a73fb0b645f298cb1dd624e299223" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_Pulse</definition>
        <argsstring>()</argsstring>
        <name>_Pulse</name>
        <qualifiedname>BView::_Pulse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="740" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af4fda8a5f2aa9c3a9bdb823b5e66a1e6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::_RemoveChildFromList</definition>
        <argsstring>(BView *child)</argsstring>
        <name>_RemoveChildFromList</name>
        <qualifiedname>BView::_RemoveChildFromList</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="750" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a3db14aad2534837e556c598011229945" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_RemoveCommArray</definition>
        <argsstring>()</argsstring>
        <name>_RemoveCommArray</name>
        <qualifiedname>BView::_RemoveCommArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="713" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9747f53be6a772ba2364c41ecae3aa0d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_RemoveLayoutItemsFromLayout</definition>
        <argsstring>(bool deleteItems)</argsstring>
        <name>_RemoveLayoutItemsFromLayout</name>
        <qualifiedname>BView::_RemoveLayoutItemsFromLayout</qualifiedname>
        <param>
          <type>bool</type>
          <declname>deleteItems</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="754" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ac3b7730f3c3ab492ed7fe0456d63e09b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BView::_RemoveSelf</definition>
        <argsstring>()</argsstring>
        <name>_RemoveSelf</name>
        <qualifiedname>BView::_RemoveSelf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="753" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a8939588527a51503a4eb7d1d843fb589" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BView::_ReservedView13</definition>
        <argsstring>()</argsstring>
        <name>_ReservedView13</name>
        <qualifiedname>BView::_ReservedView13</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="675" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a3e8aeef7937edf95f40e67a74af7941e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BView::_ReservedView14</definition>
        <argsstring>()</argsstring>
        <name>_ReservedView14</name>
        <qualifiedname>BView::_ReservedView14</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="676" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a37648812ea5928017cab5f7600970f83" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BView::_ReservedView15</definition>
        <argsstring>()</argsstring>
        <name>_ReservedView15</name>
        <qualifiedname>BView::_ReservedView15</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="677" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a9628c2e22272ba77ea15b3e7cc45a435" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BView::_ReservedView16</definition>
        <argsstring>()</argsstring>
        <name>_ReservedView16</name>
        <qualifiedname>BView::_ReservedView16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="678" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ada66b6d18151b54ed86f13d5fc10f100" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_ResizeBy</definition>
        <argsstring>(int32 deltaWidth, int32 deltaHeight)</argsstring>
        <name>_ResizeBy</name>
        <qualifiedname>BView::_ResizeBy</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>deltaWidth</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>deltaHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="719" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6c0137a99c4d6a1442ff14b1281537b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_SetOwner</definition>
        <argsstring>(BWindow *newOwner)</argsstring>
        <name>_SetOwner</name>
        <qualifiedname>BView::_SetOwner</qualifiedname>
        <param>
          <type><ref refid="classBWindow" kindref="compound">BWindow</ref> *</type>
          <declname>newOwner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="712" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af76874c00704b99428bf6c158559f715" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_SetShelf</definition>
        <argsstring>(BShelf *shelf)</argsstring>
        <name>_SetShelf</name>
        <qualifiedname>BView::_SetShelf</qualifiedname>
        <param>
          <type>BShelf *</type>
          <declname>shelf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="716" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a826d7934cc6b6cb940689e98f25fa78c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BView::_SetViewBitmap</definition>
        <argsstring>(const BBitmap *bitmap, BRect srcRect, BRect dstRect, uint32 followFlags, uint32 options)</argsstring>
        <name>_SetViewBitmap</name>
        <qualifiedname>BView::_SetViewBitmap</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>srcRect</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>dstRect</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>followFlags</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="697" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abf88c59f470ffca922d88d6ad9643771" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>BShelf *</type>
        <definition>BShelf * BView::_Shelf</definition>
        <argsstring>() const</argsstring>
        <name>_Shelf</name>
        <qualifiedname>BView::_Shelf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="715" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1af17958266696822294b57aaa6f9ec090" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_SwitchServerCurrentView</definition>
        <argsstring>() const</argsstring>
        <name>_SwitchServerCurrentView</name>
        <qualifiedname>BView::_SwitchServerCurrentView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="710" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1abf939664ab1b0cd5a57adc9a6c913024" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_UpdatePattern</definition>
        <argsstring>(::pattern pattern)</argsstring>
        <name>_UpdatePattern</name>
        <qualifiedname>BView::_UpdatePattern</qualifiedname>
        <param>
          <type><ref refid="structpattern" kindref="compound">::pattern</ref></type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="743" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1a6db03b48daf0c7cb2f4166366cf8233a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BView::_UpdateStateForRemove</definition>
        <argsstring>()</argsstring>
        <name>_UpdateStateForRemove</name>
        <qualifiedname>BView::_UpdateStateForRemove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="742" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBView_1ada279227f944771b80c904340fc06fd8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> &amp;</type>
        <definition>BView &amp; BView::operator=</definition>
        <argsstring>(const BView &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BView::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBView" kindref="compound">BView</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="681" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>View base class. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classBView" kindref="compound">BView</ref> is a rectangular area within a window that responds to mouse clicks and key presses, and acts as a surface for you to draw on.</para>
<para>Most Interface Kit classes, with the notable exception of <ref refid="classBWindow" kindref="compound">BWindow</ref> inherit from <ref refid="classBView" kindref="compound">BView</ref>. Some of the time you might use a <ref refid="classBView" kindref="compound">BView</ref> object as is, but most of the time you subclass <ref refid="classBView" kindref="compound">BView</ref> to do something unique.</para>
<para>To create a subclass of <ref refid="classBView" kindref="compound">BView</ref> you generally override one or more of <ref refid="classBView" kindref="compound">BView</ref>&apos;s hook methods to respond to user events such as <ref refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" kindref="member">MouseDown()</ref> or <ref refid="classBView_1a551c22b45301e13a3ba959eece3cec7f" kindref="member">FrameMoved()</ref>. By default a <ref refid="classBView" kindref="compound">BView</ref> does nothing in its hook methods unless otherwise stated, it&apos;s up to you to define what happens. To override the look of a <ref refid="classBView" kindref="compound">BView</ref> you should override the <ref refid="classBView_1aa55014241fc2f5556415850692b52db2" kindref="member">Draw()</ref> or <ref refid="classBView_1abb50623b4236926b068fc5a2264f6a48" kindref="member">DrawAfterChildren()</ref> methods. See the section on Hook Methods below for more details.</para>
<para>When a <ref refid="classBView" kindref="compound">BView</ref> object is first created it has no parent or child views. How you add a view to the view hierarchy depends on if you want to use a standard view with a defined frame rectangle or to use the Layout APIs to position and size your view instead.</para>
<para>If you create a standard view you need to add it to a window or another view using the <ref refid="classBView_1ab6382c582e5e1be527d3199459d05e8f" kindref="member">AddChild()</ref> method, if you create a layout view you need to add your view to a layout using <ref refid="classBLayout_1a83f286f504a1a735f07304c7647ba7f9" kindref="member">BLayout::AddView()</ref> or by adding it to a layout builder.</para>
<para>Views are not very interesting until they, or one of their parents, are attached to a window as many of <ref refid="classBView" kindref="compound">BView</ref>&apos;s methods depend on a connection to the App Server to do their work. In order to prevent multiple views from altering the window simultaneously though locking is required. To perform an action while the window is locked you issue the following code:</para>
<para><programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBView_1a32733d357b76bc3504cae326d174f4a2" kindref="member">Window</ref>()-&gt;<ref refid="classBHandler_1a9d64bf66b4914918e24390d117e83477" kindref="member">LockLooper</ref>())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBView_1a32733d357b76bc3504cae326d174f4a2" kindref="member">Window</ref>()-&gt;<ref refid="classBHandler_1ab131af7eb7aa2b9eea3a11ac1bfd4c03" kindref="member">UnlockLooper</ref>()</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Whenever App Server calls a hook method it automatically locks the <ref refid="classBWindow" kindref="compound">BWindow</ref> for you.</para>
<para>Only one view attached to a window is able to receive keyboard events at a time. The view that is able to receive keyboard events such as <ref refid="classBView_1abea50ea665ce5fcb76b32f1302a6852d" kindref="member">KeyDown()</ref> is called the &quot;focus view&quot;. <ref refid="classBView_1a266a368d81c6e1668b2b9b22b5016853" kindref="member">MakeFocus()</ref> gives or removes focus from a view. Call <ref refid="classBView_1a165719de682845f80735042a499692ff" kindref="member">IsFocus()</ref> to determine whether or not the view is the window&apos;s current focus view.</para>
<para>When a view has focus an indicator should be drawn to inform the user. Typically the view is surrounded by a blue rectangle to indicate that it is the window&apos;s focus view. The color can be queried using the keyboard_navigation_color() function in <ref refid="InterfaceDefs_8h" kindref="compound">InterfaceDefs.h</ref></para>
<para>Each view has its own coordinate system with the origin point (0.0, 0.0) located at the top left corner. You can convert a <ref refid="classBPoint" kindref="compound">BPoint</ref> or <ref refid="classBRect" kindref="compound">BRect</ref> to or from the view&apos;s coordinate system to the coordinate system of its parent, or of the screen&apos;s coordinate system. See the section on Coordinate Conversion Methods for more details.</para>
<para>The Application Server clips a <ref refid="classBView" kindref="compound">BView</ref> to the region where it&apos;s permitted to draw which is never larger than the view&apos;s bound rectangle. A view can never draw outside its bounds nor can it draw outside of the bounds rectangle of any parent view.</para>
<para>You may limit the clipping region further by passing a <ref refid="classBRegion" kindref="compound">BRegion</ref> object to <ref refid="classBView_1a656b8d82a6a7c7c6ab33c3dd08aad6ec" kindref="member">ConstrainClippingRegion()</ref>. You can obtain the current clipping region by calling <ref refid="classBView_1acf50a063c9621f35a84b1d0245b12d69" kindref="member">GetClippingRegion()</ref>.</para>
<para>Each view has a <ref refid="classBView_1a8b2b1d9e08ce0c1763dd6a077ed02fdd" kindref="member">ViewColor()</ref> that fills the frame rectangle before the view does any drawing of its own. The default view color is white, you may change the view color by calling <ref refid="classBView_1ae8dde0e0330b394db016f3e609e7fb6a" kindref="member">SetViewColor()</ref> or, as of Haiku R1, <ref refid="classBView_1a34f020c4bb1008cef972cf1eec7dba0f" kindref="member">SetViewUIColor()</ref>. A commonly used view color is <computeroutput>B_PANEL_BACKGROUND_COLOR</computeroutput> which is a user-defined color used as the view color of most applications. If you set the view color to <computeroutput>B_TRANSPARENT_COLOR</computeroutput> then the Application Server won&apos;t erase the clipping region of the view before updating, this should only be used if the view erases itself by drawing on every pixel in the clipping region.</para>
<para>If you want to set the view color of a view to be the same as its parent you need to set it within the <ref refid="classBView_1ae8117cb4634f4a4413988eea07cf75a0" kindref="member">AttachedToWindow()</ref> method of the view like so:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBView_1ae8dde0e0330b394db016f3e609e7fb6a" kindref="member">SetViewColor</ref>(<ref refid="classBView_1a332f34d9862000dbc859fd4e308839dd" kindref="member">Parent</ref>()-&gt;<ref refid="classBView_1a8b2b1d9e08ce0c1763dd6a077ed02fdd" kindref="member">ViewColor</ref>());</highlight></codeline>
</programlisting></para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="4">
        <label>BBox</label>
        <link refid="classBBox"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BButton</label>
        <link refid="classBButton"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BCardView</label>
        <link refid="classBCardView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BChannelControl</label>
        <link refid="classBChannelControl"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>BChannelSlider</label>
        <link refid="classBChannelSlider"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>BCheckBox</label>
        <link refid="classBCheckBox"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>BColorControl</label>
        <link refid="classBColorControl"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BControl</label>
        <link refid="classBControl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>BDragger</label>
        <link refid="classBDragger"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>BGridView</label>
        <link refid="classBGridView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>BGroupView</label>
        <link refid="classBGroupView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BHandler</label>
        <link refid="classBHandler"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>BListView</label>
        <link refid="classBListView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>BMenu</label>
        <link refid="classBMenu"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>BMenuBar</label>
        <link refid="classBMenuBar"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>BMenuField</label>
        <link refid="classBMenuField"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>BOptionControl</label>
        <link refid="classBOptionControl"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>BOptionPopUp</label>
        <link refid="classBOptionPopUp"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>BOutlineListView</label>
        <link refid="classBOutlineListView"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>BPictureButton</label>
        <link refid="classBPictureButton"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>BPopUpMenu</label>
        <link refid="classBPopUpMenu"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>BRadioButton</label>
        <link refid="classBRadioButton"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>BScrollBar</label>
        <link refid="classBScrollBar"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>BScrollView</label>
        <link refid="classBScrollView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>BSeparatorView</label>
        <link refid="classBSeparatorView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>BSplitView</label>
        <link refid="classBSplitView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>BStatusBar</label>
        <link refid="classBStatusBar"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>BStringView</label>
        <link refid="classBStringView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>BTabView</label>
        <link refid="classBTabView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>BTextControl</label>
        <link refid="classBTextControl"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>BTextView</label>
        <link refid="classBTextView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BView</label>
        <link refid="classBView"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="2">
        <label>BHandler</label>
        <link refid="classBHandler"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BView</label>
        <link refid="classBView"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/interface/View.h" line="152" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/View.h" bodystart="152" bodyend="793"/>
    <listofallmembers>
      <member refid="classBView_1a9e8e72c03563011e204b3bdfae5842ac" prot="private" virt="non-virtual"><scope>BView</scope><name>_Activate</name></member>
      <member refid="classBView_1acd84411a0e63427666f6c3404c8c9c89" prot="private" virt="non-virtual"><scope>BView</scope><name>_AddChild</name></member>
      <member refid="classBView_1aaa19458d94fed56442e0cf51c0f6830e" prot="private" virt="non-virtual"><scope>BView</scope><name>_AddChildToList</name></member>
      <member refid="classBView_1ac7754d32ec11fe24d2517f0c7a5173a6" prot="private" virt="non-virtual"><scope>BView</scope><name>_Attach</name></member>
      <member refid="classBView_1a2141a6fe06514b7313a411bfa366934c" prot="private" virt="non-virtual"><scope>BView</scope><name>_CheckLock</name></member>
      <member refid="classBView_1adcef2be17d12f6d6b2aa989bc840e861" prot="private" virt="non-virtual"><scope>BView</scope><name>_CheckLockAndSwitchCurrent</name></member>
      <member refid="classBView_1a19dfb38a289b67dbfe53d9e2ae84aa43" prot="private" virt="non-virtual"><scope>BView</scope><name>_CheckOwnerLock</name></member>
      <member refid="classBView_1aa7ba30f1a374cee118137f82f6f03ddc" prot="private" virt="non-virtual"><scope>BView</scope><name>_CheckOwnerLockAndSwitchCurrent</name></member>
      <member refid="classBView_1a678551993062964b23406fb7c233f906" prot="private" virt="non-virtual"><scope>BView</scope><name>_ClipToPicture</name></member>
      <member refid="classBView_1a33e69e7c529b543fa049f2c8a37b4201" prot="private" virt="non-virtual"><scope>BView</scope><name>_ClipToRect</name></member>
      <member refid="classBView_1a12b9373da521c34bef2b9132918b85da" prot="private" virt="non-virtual"><scope>BView</scope><name>_ClipToShape</name></member>
      <member refid="classBView_1a8c85eda0cd002157ec514bda83c93413" prot="private" virt="non-virtual"><scope>BView</scope><name>_ColorsUpdated</name></member>
      <member refid="classBView_1a0ad82a7dc8298e1ebf1417768b3c8f99" prot="private" virt="non-virtual"><scope>BView</scope><name>_ConvertFromParent</name></member>
      <member refid="classBView_1a9754deb9d393b0ce928fcc662d855e71" prot="private" virt="non-virtual"><scope>BView</scope><name>_ConvertFromScreen</name></member>
      <member refid="classBView_1a68dc99bef6fa3b70de1c60bd802ebe5b" prot="private" virt="non-virtual"><scope>BView</scope><name>_ConvertToParent</name></member>
      <member refid="classBView_1ad5596ff7caa38e7e4d4fdfdac337c6c6" prot="private" virt="non-virtual"><scope>BView</scope><name>_ConvertToScreen</name></member>
      <member refid="classBView_1a8ce8d0cbd0e6bc4ff36e2727b4d2dd6b" prot="private" virt="non-virtual"><scope>BView</scope><name>_CreateSelf</name></member>
      <member refid="classBView_1a4ff3b43a3902c99398f23f4c4ccc6697" prot="private" virt="non-virtual"><scope>BView</scope><name>_Detach</name></member>
      <member refid="classBView_1ad34b52562af50aa1e4e98261d01ec532" prot="private" virt="non-virtual"><scope>BView</scope><name>_Draw</name></member>
      <member refid="classBView_1ad6585ff0831fe7e4e87efd69d529739f" prot="private" virt="non-virtual"><scope>BView</scope><name>_DrawAfterChildren</name></member>
      <member refid="classBView_1aa8a6cbb032b479e45df9d1426e547d2b" prot="private" virt="non-virtual"><scope>BView</scope><name>_FlushIfNotInTransaction</name></member>
      <member refid="classBView_1a0f667858d2c2346e3832e395150241e2" prot="private" virt="non-virtual"><scope>BView</scope><name>_FontsUpdated</name></member>
      <member refid="classBView_1a0162cd37dd3d955a9fa71935862d5c56" prot="private" virt="non-virtual"><scope>BView</scope><name>_InitData</name></member>
      <member refid="classBView_1a71504bdf8cb5dafa4125a43a96b6835a" prot="private" virt="non-virtual"><scope>BView</scope><name>_InvalidateParentLayout</name></member>
      <member refid="classBView_1ac34c3d8d9ebcb28d9e16e1222971b11f" prot="private" virt="non-virtual"><scope>BView</scope><name>_Layout</name></member>
      <member refid="classBView_1a9726666a03e6aee3b558ba5eec9c039a" prot="private" virt="non-virtual"><scope>BView</scope><name>_LayoutLeft</name></member>
      <member refid="classBView_1a313bd8bc25ba238ec421abcddd0ee851" prot="private" virt="non-virtual"><scope>BView</scope><name>_MoveTo</name></member>
      <member refid="classBView_1ab0d17478b86a349cf135dede7afd5636" prot="private" virt="non-virtual"><scope>BView</scope><name>_ParentResizedBy</name></member>
      <member refid="classBView_1a8e31fd4c2045e1e6160c477812550a21" prot="private" virt="non-virtual"><scope>BView</scope><name>_PrintToStream</name></member>
      <member refid="classBView_1a9580c047c3faf94fca91491cec6073df" prot="private" virt="non-virtual"><scope>BView</scope><name>_PrintTree</name></member>
      <member refid="classBView_1abf7a73fb0b645f298cb1dd624e299223" prot="private" virt="non-virtual"><scope>BView</scope><name>_Pulse</name></member>
      <member refid="classBView_1af4fda8a5f2aa9c3a9bdb823b5e66a1e6" prot="private" virt="non-virtual"><scope>BView</scope><name>_RemoveChildFromList</name></member>
      <member refid="classBView_1a3db14aad2534837e556c598011229945" prot="private" virt="non-virtual"><scope>BView</scope><name>_RemoveCommArray</name></member>
      <member refid="classBView_1a9747f53be6a772ba2364c41ecae3aa0d" prot="private" virt="non-virtual"><scope>BView</scope><name>_RemoveLayoutItemsFromLayout</name></member>
      <member refid="classBView_1ac3b7730f3c3ab492ed7fe0456d63e09b" prot="private" virt="non-virtual"><scope>BView</scope><name>_RemoveSelf</name></member>
      <member refid="classBView_1add7ce6107b781a8b56a0a32572aeb567" prot="private" virt="non-virtual"><scope>BView</scope><name>_reserved</name></member>
      <member refid="classBView_1a8939588527a51503a4eb7d1d843fb589" prot="private" virt="virtual"><scope>BView</scope><name>_ReservedView13</name></member>
      <member refid="classBView_1a3e8aeef7937edf95f40e67a74af7941e" prot="private" virt="virtual"><scope>BView</scope><name>_ReservedView14</name></member>
      <member refid="classBView_1a37648812ea5928017cab5f7600970f83" prot="private" virt="virtual"><scope>BView</scope><name>_ReservedView15</name></member>
      <member refid="classBView_1a9628c2e22272ba77ea15b3e7cc45a435" prot="private" virt="virtual"><scope>BView</scope><name>_ReservedView16</name></member>
      <member refid="classBView_1ada66b6d18151b54ed86f13d5fc10f100" prot="private" virt="non-virtual"><scope>BView</scope><name>_ResizeBy</name></member>
      <member refid="classBView_1a6c0137a99c4d6a1442ff14b1281537b6" prot="private" virt="non-virtual"><scope>BView</scope><name>_SetOwner</name></member>
      <member refid="classBView_1af76874c00704b99428bf6c158559f715" prot="private" virt="non-virtual"><scope>BView</scope><name>_SetShelf</name></member>
      <member refid="classBView_1a826d7934cc6b6cb940689e98f25fa78c" prot="private" virt="non-virtual"><scope>BView</scope><name>_SetViewBitmap</name></member>
      <member refid="classBView_1abf88c59f470ffca922d88d6ad9643771" prot="private" virt="non-virtual"><scope>BView</scope><name>_Shelf</name></member>
      <member refid="classBView_1af17958266696822294b57aaa6f9ec090" prot="private" virt="non-virtual"><scope>BView</scope><name>_SwitchServerCurrentView</name></member>
      <member refid="classBView_1aa1719ee15a4e67e15e912b44f7784a59" prot="private" virt="non-virtual"><scope>BView</scope><name>_unused_bool1</name></member>
      <member refid="classBView_1a95f297696ef58c38b45d682b39c29ca0" prot="private" virt="non-virtual"><scope>BView</scope><name>_unused_bool2</name></member>
      <member refid="classBView_1a9ab029c52eae7cc6fc497da3932a41c4" prot="private" virt="non-virtual"><scope>BView</scope><name>_unused_int1</name></member>
      <member refid="classBView_1abf939664ab1b0cd5a57adc9a6c913024" prot="private" virt="non-virtual"><scope>BView</scope><name>_UpdatePattern</name></member>
      <member refid="classBView_1a6db03b48daf0c7cb2f4166366cf8233a" prot="private" virt="non-virtual"><scope>BView</scope><name>_UpdateStateForRemove</name></member>
      <member refid="classBView_1ab6382c582e5e1be527d3199459d05e8f" prot="public" virt="non-virtual"><scope>BView</scope><name>AddChild</name></member>
      <member refid="classBView_1a5d30ae4fa0119bf5286f52f83c2f351c" prot="public" virt="non-virtual"><scope>BView</scope><name>AddChild</name></member>
      <member refid="classBHandler_1a862bea548363faac6f883b348cbed838" prot="public" virt="virtual"><scope>BView</scope><name>AddFilter</name></member>
      <member refid="classBView_1a88440336a66ee9b1a4b1661e9ba9e59c" prot="public" virt="non-virtual"><scope>BView</scope><name>AddLine</name></member>
      <member refid="classBView_1ac780f029d415ee0a915792b4e756fa77" prot="public" virt="non-virtual"><scope>BView</scope><name>AdoptParentColors</name></member>
      <member refid="classBView_1a0e429a82fe06e9ab390b06d993ee31be" prot="public" virt="non-virtual"><scope>BView</scope><name>AdoptSystemColors</name></member>
      <member refid="classBView_1ab68ad7103708884f9e6fd84e8a579746" prot="public" virt="non-virtual"><scope>BView</scope><name>AdoptViewColors</name></member>
      <member refid="classBView_1a561e82ed41cbb93d3bacf371787497bf" prot="public" virt="virtual"><scope>BView</scope><name>AllArchived</name></member>
      <member refid="classBView_1a6d6379e0993bd525f2cac5f848718870" prot="public" virt="virtual"><scope>BView</scope><name>AllAttached</name></member>
      <member refid="classBView_1a19dd2213f4b953b54524d7f523d9b406" prot="public" virt="virtual"><scope>BView</scope><name>AllDetached</name></member>
      <member refid="classBView_1ab7bd04272afed8b28bf57d1de33cbe05" prot="public" virt="virtual"><scope>BView</scope><name>AllUnarchived</name></member>
      <member refid="classBView_1a2d73d2f2b0b35390929cf54fbfa5ecff" prot="public" virt="non-virtual"><scope>BView</scope><name>AppendToPicture</name></member>
      <member refid="classBView_1ab6de1b48cbc3ef15a0d02113036f002d" prot="public" virt="virtual"><scope>BView</scope><name>Archive</name></member>
      <member refid="classBView_1ae8117cb4634f4a4413988eea07cf75a0" prot="public" virt="virtual"><scope>BView</scope><name>AttachedToWindow</name></member>
      <member refid="classBArchivable_1aed4f0566f9659b03912a859077c27c89" prot="public" virt="non-virtual"><scope>BView</scope><name>BArchivable</name></member>
      <member refid="classBArchivable_1a66e6b947f092d32f287913a8c253290f" prot="public" virt="non-virtual"><scope>BView</scope><name>BArchivable</name></member>
      <member refid="classBView_1abe65757b7c83c8db390bf0c87457a343" prot="public" virt="non-virtual"><scope>BView</scope><name>BeginLayer</name></member>
      <member refid="classBView_1ab3f2e9f54d2b93952b27e182ac552983" prot="public" virt="non-virtual"><scope>BView</scope><name>BeginLineArray</name></member>
      <member refid="classBView_1a14155192773aad22ebe47a9975afac5f" prot="public" virt="non-virtual"><scope>BView</scope><name>BeginPicture</name></member>
      <member refid="classBView_1ac1eb1eeee67ec97205a4acc6955185bd" prot="public" virt="non-virtual"><scope>BView</scope><name>BeginRectTracking</name></member>
      <member refid="classBHandler_1a2142e21fe781b24f914ec2086e5f05b7" prot="public" virt="non-virtual"><scope>BView</scope><name>BHandler</name></member>
      <member refid="classBHandler_1add8fa081a7bb8633581e78777b215d0b" prot="public" virt="non-virtual"><scope>BView</scope><name>BHandler</name></member>
      <member refid="classBView_1acbb8ea442346e91428689163db9d633e" prot="public" virt="non-virtual"><scope>BView</scope><name>Bounds</name></member>
      <member refid="classBView_1ab148f59c41c9a22ced87bf7a0221ed62" prot="public" virt="non-virtual"><scope>BView</scope><name>BView</name></member>
      <member refid="classBView_1ae3a1b2a66dc19690e766623be65c37e2" prot="public" virt="non-virtual"><scope>BView</scope><name>BView</name></member>
      <member refid="classBView_1ae982fac35c278cc64990c506efe3965e" prot="public" virt="non-virtual"><scope>BView</scope><name>BView</name></member>
      <member refid="classBView_1ab907f2871481cb809665310ed2e5a1f4" prot="private" virt="non-virtual"><scope>BView</scope><name>BView</name></member>
      <member refid="classBView_1aaf91592f50f2f44d16f23e7504f494cb" prot="public" virt="non-virtual"><scope>BView</scope><name>ChildAt</name></member>
      <member refid="classBView_1ae7582b9a2b0b446a1de16c681f23baf9" prot="public" virt="non-virtual"><scope>BView</scope><name>ClearViewBitmap</name></member>
      <member refid="classBView_1a0ae48f37c3f56b422841638971488cc0" prot="public" virt="non-virtual"><scope>BView</scope><name>ClearViewOverlay</name></member>
      <member refid="classBView_1a18d61bcae2a7ca8a1a0977ac23d15171" prot="public" virt="non-virtual"><scope>BView</scope><name>ClipToInversePicture</name></member>
      <member refid="classBView_1ad1762d160500ec3ce90c7bd73944d8a7" prot="public" virt="non-virtual"><scope>BView</scope><name>ClipToInverseRect</name></member>
      <member refid="classBView_1a17dcb4f2e92994cde9a9ece9caa619c2" prot="public" virt="non-virtual"><scope>BView</scope><name>ClipToInverseShape</name></member>
      <member refid="classBView_1a9c92c9e8e306d00dbfef81f2b0282339" prot="public" virt="non-virtual"><scope>BView</scope><name>ClipToPicture</name></member>
      <member refid="classBView_1a22ff147a2f0a0bd65de494c9a039acee" prot="public" virt="non-virtual"><scope>BView</scope><name>ClipToRect</name></member>
      <member refid="classBView_1ac0884c62949361a7eb6a4834f46b902c" prot="public" virt="non-virtual"><scope>BView</scope><name>ClipToShape</name></member>
      <member refid="classBView_1a656b8d82a6a7c7c6ab33c3dd08aad6ec" prot="public" virt="virtual"><scope>BView</scope><name>ConstrainClippingRegion</name></member>
      <member refid="classBView_1a43c16140dd4491a6a6f7bad11bbea1f9" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromParent</name></member>
      <member refid="classBView_1aa3201bdf5c489fbab7d67afe3453466d" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromParent</name></member>
      <member refid="classBView_1ab2aeeb14409a18f950173e7cb22e147c" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromParent</name></member>
      <member refid="classBView_1a45b405f10c29442aea8b70161410565f" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromParent</name></member>
      <member refid="classBView_1a4b794ccd899dc6a0cafd886169122df5" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromScreen</name></member>
      <member refid="classBView_1a75f1d68cf77bccc03930eb8e273f2967" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromScreen</name></member>
      <member refid="classBView_1a3fbc496f437925cb02ccf9e817406e4e" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromScreen</name></member>
      <member refid="classBView_1a44c3b5174e4ccfa4c123e0d5d54e9408" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertFromScreen</name></member>
      <member refid="classBView_1ab20700567eabd5f8135be179b4232e2c" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToParent</name></member>
      <member refid="classBView_1a91e6a7edab78547be47cb8dc84cfdecf" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToParent</name></member>
      <member refid="classBView_1ac7bd2e0e7aac40d1be9a47999b5701a9" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToParent</name></member>
      <member refid="classBView_1ae3b385e4d1b9f70bc848bf2fd0b7753c" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToParent</name></member>
      <member refid="classBView_1aefefb1242613b869feb6b8e0cc119518" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToScreen</name></member>
      <member refid="classBView_1af90cdeb62cc60adf64eb9a669c37c153" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToScreen</name></member>
      <member refid="classBView_1ad99f5af006f28c485f02484752a2ac5d" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToScreen</name></member>
      <member refid="classBView_1ae60c56c306d0cf3f504d710fac8b9bed" prot="public" virt="non-virtual"><scope>BView</scope><name>ConvertToScreen</name></member>
      <member refid="classBView_1a8ace5c5cc811c4ad16acf281ffd1a48d" prot="public" virt="non-virtual"><scope>BView</scope><name>CopyBits</name></member>
      <member refid="classBView_1ae30d094a1cb1f3357c4aa7caa4b0e29d" prot="public" virt="non-virtual"><scope>BView</scope><name>CountChildren</name></member>
      <member refid="classBView_1ae2a9da1ca04489dd60ef8aefa86331ed" prot="public" virt="non-virtual"><scope>BView</scope><name>DelayedInvalidate</name></member>
      <member refid="classBView_1a6389a46cf1842eb0d412b44958955e61" prot="public" virt="non-virtual"><scope>BView</scope><name>DelayedInvalidate</name></member>
      <member refid="classBView_1a8abc2ea500951a0a22cf018e958ba791" prot="public" virt="virtual"><scope>BView</scope><name>DetachedFromWindow</name></member>
      <member refid="classBView_1aa165cbaac7d6915feaae6048c4378c85" prot="public" virt="non-virtual"><scope>BView</scope><name>DisableLayoutInvalidation</name></member>
      <member refid="classBView_1a9d766a06d0885200c6ababba4c87808b" prot="protected" virt="virtual"><scope>BView</scope><name>DoLayout</name></member>
      <member refid="classBView_1a1f4f0c3c5946df1d14e6031e5e12f40b" prot="public" virt="non-virtual"><scope>BView</scope><name>DragMessage</name></member>
      <member refid="classBView_1a466287a3d939759cc09e4a6d1c9982cd" prot="public" virt="non-virtual"><scope>BView</scope><name>DragMessage</name></member>
      <member refid="classBView_1ae1caa1d0bef9452db00c2adc8e3280b4" prot="public" virt="non-virtual"><scope>BView</scope><name>DragMessage</name></member>
      <member refid="classBView_1aa55014241fc2f5556415850692b52db2" prot="public" virt="virtual"><scope>BView</scope><name>Draw</name></member>
      <member refid="classBView_1abb50623b4236926b068fc5a2264f6a48" prot="public" virt="virtual"><scope>BView</scope><name>DrawAfterChildren</name></member>
      <member refid="classBView_1a6171150993fbf7c73966c7c302a95573" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmap</name></member>
      <member refid="classBView_1a63db7245fd9b9fefd461d7596c15f9cc" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmap</name></member>
      <member refid="classBView_1abce81666128d183d59b5cf2ed75c7f07" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmap</name></member>
      <member refid="classBView_1a1c8b6e3e9218388a68ae43dd408a187c" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmap</name></member>
      <member refid="classBView_1a769c3e3dee7d86ed50308f7a3f46ef91" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmap</name></member>
      <member refid="classBView_1ae66727344d35f05c56b6163ad70e360c" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmapAsync</name></member>
      <member refid="classBView_1a0ef432afa41aefcb3fdd537e2d290001" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmapAsync</name></member>
      <member refid="classBView_1aa3275b791787a66f3638611cd6a5ae09" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmapAsync</name></member>
      <member refid="classBView_1a6931c5fe803eb5fa9e66438d347c4b6d" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmapAsync</name></member>
      <member refid="classBView_1ab50fba0500357abebb9f3ef3832f2e68" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawBitmapAsync</name></member>
      <member refid="classBView_1a02ba5c68f21d4345ec3ee683496ce851" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawChar</name></member>
      <member refid="classBView_1a2ed7c3628692426116fc0bb450c0f0c7" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawChar</name></member>
      <member refid="classBView_1ae7953a2e451fb6e5a439df9e9dc8451a" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawingMode</name></member>
      <member refid="classBView_1ae4b252943befd9f0b62e30517b3ecec2" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawPicture</name></member>
      <member refid="classBView_1a2fdf36421cccce9136cdd9966a971955" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawPicture</name></member>
      <member refid="classBView_1a9f5781a2b37113c55950c93b621984a7" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawPicture</name></member>
      <member refid="classBView_1a65498927c21d6681a0e77c4e3d29efba" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawPictureAsync</name></member>
      <member refid="classBView_1a05881f8b07989e1e9db0bd41f8181341" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawPictureAsync</name></member>
      <member refid="classBView_1a7f2fde4e7719bded5af33805b8242b06" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawPictureAsync</name></member>
      <member refid="classBView_1a5c261dbbb4e8157799e85d6ad1530920" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawString</name></member>
      <member refid="classBView_1a83d77965bd9cda6212189d92b97d8198" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawString</name></member>
      <member refid="classBView_1ad3830d09ed0300a1144d47ac78cd2dde" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawString</name></member>
      <member refid="classBView_1a4e1f1c59352a1373ccace7255a0ccf23" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawString</name></member>
      <member refid="classBView_1a5dacf5d193a0c492f296bc1e402e6370" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawString</name></member>
      <member refid="classBView_1a135868eb5cd1b35ee1c2d03517b9a33f" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawString</name></member>
      <member refid="classBView_1a8848d931fd0354860a0e71934e66cb03" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawTiledBitmap</name></member>
      <member refid="classBView_1ad281a4e40f212e3cb56c23fa6e574a84" prot="public" virt="non-virtual"><scope>BView</scope><name>DrawTiledBitmapAsync</name></member>
      <member refid="classBView_1ad43cc5c22f83d95632d3d81eff73f425" prot="public" virt="non-virtual"><scope>BView</scope><name>EnableLayoutInvalidation</name></member>
      <member refid="classBView_1a9f54d4478a12823f116168a45af30898" prot="public" virt="non-virtual"><scope>BView</scope><name>EndLayer</name></member>
      <member refid="classBView_1a24ba922f9698936bc27f48b3c51349a1" prot="public" virt="non-virtual"><scope>BView</scope><name>EndLineArray</name></member>
      <member refid="classBView_1ae01506892a9b2d39f6df13726be9d0af" prot="public" virt="non-virtual"><scope>BView</scope><name>EndPicture</name></member>
      <member refid="classBView_1a7bcc3532c03eeeb929278de8fcc1fd25" prot="public" virt="non-virtual"><scope>BView</scope><name>EndRectTracking</name></member>
      <member refid="classBView_1a8851d500773c732ddbb1a4b31f0ad664" prot="public" virt="non-virtual"><scope>BView</scope><name>EventMask</name></member>
      <member refid="classBView_1a1f078f5c987061c5cf3059f7091bcb1a" prot="public" virt="non-virtual"><scope>BView</scope><name>ExplicitAlignment</name></member>
      <member refid="classBView_1a4e63cc8ca1f604ccb20f5891adade70f" prot="public" virt="non-virtual"><scope>BView</scope><name>ExplicitMaxSize</name></member>
      <member refid="classBView_1a1b24db754473008766cdd0fd9c4ee3b7" prot="public" virt="non-virtual"><scope>BView</scope><name>ExplicitMinSize</name></member>
      <member refid="classBView_1a218cd0d238104a6ff31c1d72ae2d9e6e" prot="public" virt="non-virtual"><scope>BView</scope><name>ExplicitPreferredSize</name></member>
      <member refid="classBView_1a50359c000b4625cb2e068c625ecfdf28" prot="private" virt="non-virtual"><scope>BView</scope><name>fAttached</name></member>
      <member refid="classBView_1a11c3710a8dd2cf1703ff3c9ae92a827d" prot="private" virt="non-virtual"><scope>BView</scope><name>fBounds</name></member>
      <member refid="classBView_1a5861c6072d2ce06e4996439cc1637a3c" prot="private" virt="non-virtual"><scope>BView</scope><name>fCommArray</name></member>
      <member refid="classBView_1a8b841009a3298d8bc34f7398ade5557f" prot="private" virt="non-virtual"><scope>BView</scope><name>fCurrentPicture</name></member>
      <member refid="classBView_1ad6ba409c1ab62d4b32101c971f38d187" prot="private" virt="non-virtual"><scope>BView</scope><name>fEventMask</name></member>
      <member refid="classBView_1af445e4d614c29871795010143d5f82ca" prot="private" virt="non-virtual"><scope>BView</scope><name>fEventOptions</name></member>
      <member refid="classBView_1a198a4a51536ddfdff903dc367fdd7048" prot="private" virt="non-virtual"><scope>BView</scope><name>fFirstChild</name></member>
      <member refid="classBView_1aa5bcf0e8ae277259a7518fbac1ef04b2" prot="private" virt="non-virtual"><scope>BView</scope><name>fFlags</name></member>
      <member refid="classBView_1a8d25ada49295a8411908882dc4871486" prot="private" virt="non-virtual"><scope>BView</scope><name>fHorScroller</name></member>
      <member refid="classBView_1af0e5d362474d39199116045aa9621aa5" prot="public" virt="non-virtual"><scope>BView</scope><name>FillArc</name></member>
      <member refid="classBView_1ac216c652253a21f0f28a7caef07deb77" prot="public" virt="non-virtual"><scope>BView</scope><name>FillArc</name></member>
      <member refid="classBView_1a49017edefe45ca5c74954e1227e673bb" prot="public" virt="non-virtual"><scope>BView</scope><name>FillArc</name></member>
      <member refid="classBView_1a4304fe45708f72d0ba20b579870c24ce" prot="public" virt="non-virtual"><scope>BView</scope><name>FillArc</name></member>
      <member refid="classBView_1a531ad43e129d810ee64208123b550193" prot="public" virt="non-virtual"><scope>BView</scope><name>FillBezier</name></member>
      <member refid="classBView_1a7cf8a5eaa5451b2c7df0d6fa392012bd" prot="public" virt="non-virtual"><scope>BView</scope><name>FillBezier</name></member>
      <member refid="classBView_1a06942f0dd4c13175bcfff6a88eae7cc0" prot="public" virt="non-virtual"><scope>BView</scope><name>FillEllipse</name></member>
      <member refid="classBView_1a98a73cbccb42edfc61b93f9aa6f4a13b" prot="public" virt="non-virtual"><scope>BView</scope><name>FillEllipse</name></member>
      <member refid="classBView_1a2738cf2f3d39f560d0cff90543f45afa" prot="public" virt="non-virtual"><scope>BView</scope><name>FillEllipse</name></member>
      <member refid="classBView_1a86de91f260577187eaf22ba0fdf32fba" prot="public" virt="non-virtual"><scope>BView</scope><name>FillEllipse</name></member>
      <member refid="classBView_1ae72733cae8a1fc2da8feb47c0c2149fa" prot="public" virt="non-virtual"><scope>BView</scope><name>FillPolygon</name></member>
      <member refid="classBView_1adc7d96f2d60a819f03685eb11b6945e2" prot="public" virt="non-virtual"><scope>BView</scope><name>FillPolygon</name></member>
      <member refid="classBView_1a1bdc02a311b2a051ad7fbdbf1789e958" prot="public" virt="non-virtual"><scope>BView</scope><name>FillPolygon</name></member>
      <member refid="classBView_1a96cdb60a8c87e4958380a3077a2197a5" prot="public" virt="non-virtual"><scope>BView</scope><name>FillPolygon</name></member>
      <member refid="classBView_1a22a5ce1f024e622b6eade6a9176ff1f7" prot="public" virt="non-virtual"><scope>BView</scope><name>FillPolygon</name></member>
      <member refid="classBView_1a57b0870cd6a0109c347d80c34ca2f34a" prot="public" virt="non-virtual"><scope>BView</scope><name>FillPolygon</name></member>
      <member refid="classBView_1a4d074663998c7ba922a9d981d0cfe086" prot="public" virt="non-virtual"><scope>BView</scope><name>FillRect</name></member>
      <member refid="classBView_1aae6a3ff6683bb15ac8c647c946475e8f" prot="public" virt="non-virtual"><scope>BView</scope><name>FillRect</name></member>
      <member refid="classBView_1a4810086c415d90bffa25ab2963716936" prot="public" virt="non-virtual"><scope>BView</scope><name>FillRegion</name></member>
      <member refid="classBView_1a56828d13947717462b661e1645305509" prot="public" virt="non-virtual"><scope>BView</scope><name>FillRegion</name></member>
      <member refid="classBView_1a38d7e7b15a13591c20020599886402b5" prot="public" virt="non-virtual"><scope>BView</scope><name>FillRoundRect</name></member>
      <member refid="classBView_1a73956d28b356b2eee83ebc19bd6e398b" prot="public" virt="non-virtual"><scope>BView</scope><name>FillRoundRect</name></member>
      <member refid="classBView_1a3a2fd2d7313a9bb7dff359a4f4362a5f" prot="public" virt="non-virtual"><scope>BView</scope><name>FillRule</name></member>
      <member refid="classBView_1a91b9ce4b8b8ee13ff5f1071e1fb0d829" prot="public" virt="non-virtual"><scope>BView</scope><name>FillShape</name></member>
      <member refid="classBView_1a9a82da733397e97b985875be941f77a6" prot="public" virt="non-virtual"><scope>BView</scope><name>FillShape</name></member>
      <member refid="classBView_1a46ec16609a402d03baa322a04d8c50e2" prot="public" virt="non-virtual"><scope>BView</scope><name>FillTriangle</name></member>
      <member refid="classBView_1af512b76752705cba87f89c8dac313005" prot="public" virt="non-virtual"><scope>BView</scope><name>FillTriangle</name></member>
      <member refid="classBView_1a5dd1c64839c11a79e80581e37656cc26" prot="public" virt="non-virtual"><scope>BView</scope><name>FillTriangle</name></member>
      <member refid="classBView_1a0878dea14a61d58c951bd8e11c0a2ef6" prot="public" virt="non-virtual"><scope>BView</scope><name>FillTriangle</name></member>
      <member refid="classBHandler_1a909662a049856f6863a934cf18161554" prot="public" virt="non-virtual"><scope>BView</scope><name>FilterList</name></member>
      <member refid="classBView_1ab83ef89f1876913174c825ff7cd02c4a" prot="public" virt="non-virtual"><scope>BView</scope><name>FindView</name></member>
      <member refid="classBView_1acea55b25fbc0e7607cbaa010c93391e6" prot="private" virt="non-virtual"><scope>BView</scope><name>fIsPrinting</name></member>
      <member refid="classBView_1a561b10abf94dd65a26b02253af667508" prot="public" virt="non-virtual"><scope>BView</scope><name>Flags</name></member>
      <member refid="classBView_1a52fae1edac19e35b2cd770a846dee14e" prot="private" virt="non-virtual"><scope>BView</scope><name>fLayoutData</name></member>
      <member refid="classBView_1a15465930f84d2d01f7818bd79bc91c3e" prot="public" virt="non-virtual"><scope>BView</scope><name>Flush</name></member>
      <member refid="classBView_1a5992883c0de2d54e2e863060836e5475" prot="private" virt="non-virtual"><scope>BView</scope><name>fMouseEventOptions</name></member>
      <member refid="classBView_1ae4c230e283adb9d52e7f8d289a6c1ebf" prot="private" virt="non-virtual"><scope>BView</scope><name>fNextSibling</name></member>
      <member refid="classBView_1a5e6616ec1212946e3d6795654aed81be" prot="private" virt="non-virtual"><scope>BView</scope><name>fNoISInteraction</name></member>
      <member refid="classBView_1a424161ccf6f52a354fdd67ed1376d196" prot="public" virt="non-virtual"><scope>BView</scope><name>ForceFontAliasing</name></member>
      <member refid="classBView_1aac7ca7df259b0fcd300eec6a49895802" prot="private" virt="non-virtual"><scope>BView</scope><name>fOwner</name></member>
      <member refid="classBView_1ab899a2577bee2e620db4baa62c9205ef" prot="private" virt="non-virtual"><scope>BView</scope><name>fParent</name></member>
      <member refid="classBView_1aaa21020f3aa88806f25abcfdba51709a" prot="private" virt="non-virtual"><scope>BView</scope><name>fParentOffset</name></member>
      <member refid="classBView_1a269004a2eb80a56536c3303a4b3113d1" prot="private" virt="non-virtual"><scope>BView</scope><name>fPreviousSibling</name></member>
      <member refid="classBView_1a487b04a3aaffdd1a1afb730dca36a7e2" prot="public" virt="non-virtual"><scope>BView</scope><name>Frame</name></member>
      <member refid="classBView_1a551c22b45301e13a3ba959eece3cec7f" prot="public" virt="virtual"><scope>BView</scope><name>FrameMoved</name></member>
      <member refid="classBView_1a85d88f9c2bb6800560874b2061378fa0" prot="public" virt="virtual"><scope>BView</scope><name>FrameResized</name></member>
      <member refid="classBView_1a98a9bf91f6c21de6fac277a107375499" prot="private" virt="non-virtual"><scope>BView</scope><name>fShelf</name></member>
      <member refid="classBView_1aa0a05643805388ba6151579408e82c5a" prot="private" virt="non-virtual"><scope>BView</scope><name>fShowLevel</name></member>
      <member refid="classBView_1a939224a682468053766ec7e6c7297266" prot="private" virt="non-virtual"><scope>BView</scope><name>fState</name></member>
      <member refid="classBView_1a3674dacdf203c396894fe54a685ee506" prot="private" virt="non-virtual"><scope>BView</scope><name>fToolTip</name></member>
      <member refid="classBView_1a988eabfcfd41ced54af875678c727b31" prot="private" virt="non-virtual"><scope>BView</scope><name>fTopLevelView</name></member>
      <member refid="classBView_1af5e900d48bf149cb68c064b28307be1a" prot="private" virt="non-virtual"><scope>BView</scope><name>fVerScroller</name></member>
      <member refid="classBView_1ad50d5ba2249fdf3dd8640b3573c2a2e8" prot="public" virt="non-virtual"><scope>BView</scope><name>GetBlendingMode</name></member>
      <member refid="classBView_1acf50a063c9621f35a84b1d0245b12d69" prot="public" virt="non-virtual"><scope>BView</scope><name>GetClippingRegion</name></member>
      <member refid="classBView_1af244d01f85e6d9ae7f5fcca4637dc78c" prot="public" virt="non-virtual"><scope>BView</scope><name>GetFont</name></member>
      <member refid="classBView_1a5bf95d66754634c647b2ddf7d39b4dfb" prot="public" virt="non-virtual"><scope>BView</scope><name>GetFontHeight</name></member>
      <member refid="classBView_1ad34bee968b1ec98a0bf89343340b6b07" prot="public" virt="virtual"><scope>BView</scope><name>GetHeightForWidth</name></member>
      <member refid="classBView_1aec2975b51966c397aa52b9e3eebd2c85" prot="public" virt="non-virtual"><scope>BView</scope><name>GetLayout</name></member>
      <member refid="classBView_1a830ce9cf2ac2ffb5f73f526ee5d6e53d" prot="public" virt="non-virtual"><scope>BView</scope><name>GetMouse</name></member>
      <member refid="classBView_1a089c3ff794c454388a9388c7b6568478" prot="public" virt="virtual"><scope>BView</scope><name>GetPreferredSize</name></member>
      <member refid="classBView_1aaae0dc93bc61d7f221465fbe0aecd30a" prot="public" virt="non-virtual"><scope>BView</scope><name>GetStringWidths</name></member>
      <member refid="classBView_1a772462d751d457f63ee0fc56d8ba02d1" prot="public" virt="virtual"><scope>BView</scope><name>GetSupportedSuites</name></member>
      <member refid="classBView_1afb826fe9b8964e4d843cae190170badf" prot="protected" virt="virtual"><scope>BView</scope><name>GetToolTipAt</name></member>
      <member refid="classBView_1a606e0e7e03516dccb53bf073827460a8" prot="public" virt="non-virtual"><scope>BView</scope><name>HasDefaultColors</name></member>
      <member refid="classBView_1abd411461b7e23ad17e7294f8f5e1cbeb" prot="public" virt="virtual"><scope>BView</scope><name>HasHeightForWidth</name></member>
      <member refid="classBView_1aa9aacc95606b650e6a8d776b51cb902b" prot="public" virt="non-virtual"><scope>BView</scope><name>HasSystemColors</name></member>
      <member refid="classBView_1a7688dc04178a2955950154ee3670d029" prot="public" virt="virtual"><scope>BView</scope><name>Hide</name></member>
      <member refid="classBView_1af75bbc1131ad6a90e299c6cbcf623fa7" prot="public" virt="non-virtual"><scope>BView</scope><name>HideToolTip</name></member>
      <member refid="classBView_1abda3583967fba9f6ed9524058d00a6e9" prot="public" virt="non-virtual"><scope>BView</scope><name>HighColor</name></member>
      <member refid="classBView_1aa86f548fba2e82d022066198be6d5af6" prot="public" virt="non-virtual"><scope>BView</scope><name>HighUIColor</name></member>
      <member refid="classBView_1a730a46bedfe8db2176e4c331330e7924" prot="public" virt="non-virtual"><scope>BView</scope><name>Instantiate</name></member>
      <member refid="classBView_1a8c767d948dc9435c006cabdcab1cd08e" prot="public" virt="non-virtual"><scope>BView</scope><name>Invalidate</name></member>
      <member refid="classBView_1ac70b682819c0f9b008c428e02015b19b" prot="public" virt="non-virtual"><scope>BView</scope><name>Invalidate</name></member>
      <member refid="classBView_1adfced0dcb244e199f872fdbd48349a05" prot="public" virt="non-virtual"><scope>BView</scope><name>Invalidate</name></member>
      <member refid="classBView_1a4a711316094e43076a3f5478d937accf" prot="public" virt="non-virtual"><scope>BView</scope><name>InvalidateLayout</name></member>
      <member refid="classBView_1af7e5ebc41cd5a471dcdcfa1f3db801a5" prot="public" virt="non-virtual"><scope>BView</scope><name>InvertRect</name></member>
      <member refid="classBView_1a165719de682845f80735042a499692ff" prot="public" virt="non-virtual"><scope>BView</scope><name>IsFocus</name></member>
      <member refid="classBView_1a33a65050c2315b19b4c5af16c48e3cdb" prot="public" virt="non-virtual"><scope>BView</scope><name>IsHidden</name></member>
      <member refid="classBView_1a95cfa8ee585230ea8fb224e88eddc503" prot="public" virt="non-virtual"><scope>BView</scope><name>IsHidden</name></member>
      <member refid="classBView_1a4e86b719129a12afbda7c10371eeca47" prot="public" virt="non-virtual"><scope>BView</scope><name>IsLayoutInvalidationDisabled</name></member>
      <member refid="classBView_1a00a5d5d6edee7d488d77df03945b3e94" prot="public" virt="non-virtual"><scope>BView</scope><name>IsLayoutValid</name></member>
      <member refid="classBView_1a8e3f1722e40fdf01c5131e49199ec3ff" prot="public" virt="non-virtual"><scope>BView</scope><name>IsPrinting</name></member>
      <member refid="classBHandler_1a581b84f0f067afa88768ce6a0c07f59f" prot="public" virt="non-virtual"><scope>BView</scope><name>IsWatched</name></member>
      <member refid="classBView_1abea50ea665ce5fcb76b32f1302a6852d" prot="public" virt="virtual"><scope>BView</scope><name>KeyDown</name></member>
      <member refid="classBView_1acbc528bb70be49993bd99aa136dbb089" prot="public" virt="virtual"><scope>BView</scope><name>KeyUp</name></member>
      <member refid="classBView_1a854b6ca54eeca610db9eab8b58d68a8b" prot="public" virt="non-virtual"><scope>BView</scope><name>Layout</name></member>
      <member refid="classBView_1a2f74b3e7c602045d8c927f923f45eefa" prot="public" virt="virtual"><scope>BView</scope><name>LayoutAlignment</name></member>
      <member refid="classBView_1ada521f848e4c800cd02eb4fe529e7ea0" prot="protected" virt="virtual"><scope>BView</scope><name>LayoutChanged</name></member>
      <member refid="classBView_1ae066513c0a788a9544744d409f28cada" prot="public" virt="non-virtual"><scope>BView</scope><name>LayoutContext</name></member>
      <member refid="classBView_1a0a552cc0d8678939c619f98dcc80d254" prot="protected" virt="virtual"><scope>BView</scope><name>LayoutInvalidated</name></member>
      <member refid="classBView_1a5d252dfe28eee049be2192d1a01ed6e3" prot="public" virt="non-virtual"><scope>BView</scope><name>LeftTop</name></member>
      <member refid="classBView_1a551f5961188e4f26ef310eb5eea7c926" prot="public" virt="non-virtual"><scope>BView</scope><name>LineCapMode</name></member>
      <member refid="classBView_1a0aa47adb29d91b4cc6c4924b7f436012" prot="public" virt="non-virtual"><scope>BView</scope><name>LineJoinMode</name></member>
      <member refid="classBView_1ab1cd7cf77a4fa01755d186a05163cfbe" prot="public" virt="non-virtual"><scope>BView</scope><name>LineMiterLimit</name></member>
      <member refid="classBHandler_1a9d64bf66b4914918e24390d117e83477" prot="public" virt="non-virtual"><scope>BView</scope><name>LockLooper</name></member>
      <member refid="classBHandler_1afa0099ff6defcb6d64e3ee1c2fb47afe" prot="public" virt="non-virtual"><scope>BView</scope><name>LockLooperWithTimeout</name></member>
      <member refid="classBHandler_1ac8e949959b12e602e3b0c4f023c60e6c" prot="public" virt="non-virtual"><scope>BView</scope><name>Looper</name></member>
      <member refid="classBView_1a423c54f22ab95745b28b583af999e554" prot="public" virt="non-virtual"><scope>BView</scope><name>LowColor</name></member>
      <member refid="classBView_1ae32ca6d8f106d44b5b51df82a7eb64c5" prot="public" virt="non-virtual"><scope>BView</scope><name>LowUIColor</name></member>
      <member refid="classBView_1a266a368d81c6e1668b2b9b22b5016853" prot="public" virt="virtual"><scope>BView</scope><name>MakeFocus</name></member>
      <member refid="classBView_1ad1f1843a380e850948cf7e4ed2d5f1ba" prot="public" virt="virtual"><scope>BView</scope><name>MaxSize</name></member>
      <member refid="classBView_1aca0a16b0e04288e1fdc0b63690ea7a6d" prot="public" virt="virtual"><scope>BView</scope><name>MessageReceived</name></member>
      <member refid="classBView_1acfb0cffde35b853dab6bc5d1bb03265f" prot="public" virt="virtual"><scope>BView</scope><name>MinSize</name></member>
      <member refid="classBView_1a5f5bd975d15df94f2ebbc80eb79cc3f6" prot="public" virt="virtual"><scope>BView</scope><name>MouseDown</name></member>
      <member refid="classBView_1ac8b20516e42bab2f1eeb130e2432bde0" prot="public" virt="virtual"><scope>BView</scope><name>MouseMoved</name></member>
      <member refid="classBView_1acdb92b30069157b2e3c522a3ef9d6ae4" prot="public" virt="virtual"><scope>BView</scope><name>MouseUp</name></member>
      <member refid="classBView_1a6e122baca4494f6ce739a507054fa81f" prot="public" virt="non-virtual"><scope>BView</scope><name>MoveBy</name></member>
      <member refid="classBView_1a979f8f0090284919b6e7c6c04d91cbde" prot="public" virt="non-virtual"><scope>BView</scope><name>MovePenBy</name></member>
      <member refid="classBView_1acb61254a2121f569f6223a95cd835abd" prot="public" virt="non-virtual"><scope>BView</scope><name>MovePenTo</name></member>
      <member refid="classBView_1ae32d7951a4ce9cff6b81899f5208a25f" prot="public" virt="non-virtual"><scope>BView</scope><name>MovePenTo</name></member>
      <member refid="classBView_1acce9c93118a3db24078f16bdabc6fbec" prot="public" virt="non-virtual"><scope>BView</scope><name>MoveTo</name></member>
      <member refid="classBView_1a1c9b2df47ba1b9f3a1ce3286995fb8bd" prot="public" virt="non-virtual"><scope>BView</scope><name>MoveTo</name></member>
      <member refid="classBHandler_1a40b246ac272e09b2f641d1290be21200" prot="public" virt="non-virtual"><scope>BView</scope><name>Name</name></member>
      <member refid="classBHandler_1a92855d8f88f6072e7225bde292feaa38" prot="public" virt="non-virtual"><scope>BView</scope><name>NextHandler</name></member>
      <member refid="classBView_1a76e7d862fe78e4d2766573bf073b9d30" prot="public" virt="non-virtual"><scope>BView</scope><name>NextSibling</name></member>
      <member refid="classBView_1ada279227f944771b80c904340fc06fd8" prot="private" virt="non-virtual"><scope>BView</scope><name>operator=</name></member>
      <member refid="classBView_1aefbf71a7a403900e960ffa3943dc9901" prot="public" virt="non-virtual"><scope>BView</scope><name>Origin</name></member>
      <member refid="classBView_1a332f34d9862000dbc859fd4e308839dd" prot="public" virt="non-virtual"><scope>BView</scope><name>Parent</name></member>
      <member refid="classBView_1a2774e13c2b12c6a5fee333e95b76b07d" prot="public" virt="non-virtual"><scope>BView</scope><name>PenLocation</name></member>
      <member refid="classBView_1a69d8657d26b49773fa2de914f263b204" prot="public" virt="non-virtual"><scope>BView</scope><name>PenSize</name></member>
      <member refid="classBView_1a512a6c8dca1a62b14cdcb1c22070129b" prot="public" virt="virtual"><scope>BView</scope><name>Perform</name></member>
      <member refid="classBView_1abc0d202fe13366b80703afbdb3832951" prot="public" virt="non-virtual"><scope>BView</scope><name>PopState</name></member>
      <member refid="classBView_1a7f51d63e71b60a2721d04436ffbcfe36" prot="public" virt="virtual"><scope>BView</scope><name>PreferredSize</name></member>
      <member refid="classBView_1a2a46f78756eacca3f3d4c90d31c758b1" prot="public" virt="non-virtual"><scope>BView</scope><name>PreviousSibling</name></member>
      <member refid="classBView_1a0ae8ec3e94ee3d41cb329e3df6966566" prot="public" virt="virtual"><scope>BView</scope><name>Pulse</name></member>
      <member refid="classBView_1a1dcb914cd0c6ef8d1291aa8492968d40" prot="public" virt="non-virtual"><scope>BView</scope><name>PushState</name></member>
      <member refid="classBView_1a2cf4e698a4322ecfb946e440e0f7ac62" prot="public" virt="non-virtual"><scope>BView</scope><name>Relayout</name></member>
      <member refid="classBView_1a5f93a23d06267da83c128bce222ceb17" prot="public" virt="non-virtual"><scope>BView</scope><name>RemoveChild</name></member>
      <member refid="classBHandler_1a2b608135b27f283802648e7c6f8cdc83" prot="public" virt="virtual"><scope>BView</scope><name>RemoveFilter</name></member>
      <member refid="classBView_1a87e0848b1760a9f28aad4516467a03ed" prot="public" virt="non-virtual"><scope>BView</scope><name>RemoveSelf</name></member>
      <member refid="classBView_1a127933a3820f0bfe0497b5e7ddfa191f" prot="public" virt="non-virtual"><scope>BView</scope><name>ResetLayoutInvalidation</name></member>
      <member refid="classBView_1ace23acc948bbc9b9272da8dc7f01d3ce" prot="public" virt="non-virtual"><scope>BView</scope><name>ResizeBy</name></member>
      <member refid="classBView_1a742bccd6034ef9ade65b0e596fba55f2" prot="public" virt="non-virtual"><scope>BView</scope><name>ResizeTo</name></member>
      <member refid="classBView_1a6134097569f75679616257a361086d7a" prot="public" virt="non-virtual"><scope>BView</scope><name>ResizeTo</name></member>
      <member refid="classBView_1abe8c63c85555e800e063388e7cf3e1a7" prot="public" virt="virtual"><scope>BView</scope><name>ResizeToPreferred</name></member>
      <member refid="classBView_1a1e93df523fc9edc807274ac6cfd2dc8d" prot="public" virt="non-virtual"><scope>BView</scope><name>ResizingMode</name></member>
      <member refid="classBView_1a4c0c6d3b21ae92056e5e40fe4d3ec175" prot="public" virt="virtual"><scope>BView</scope><name>ResolveSpecifier</name></member>
      <member refid="classBView_1a02ab6b6196b140b20ae516a55680e30b" prot="public" virt="non-virtual"><scope>BView</scope><name>RotateBy</name></member>
      <member refid="classBView_1a50e12d6b8080b3bc6bc617d31d1ab200" prot="public" virt="non-virtual"><scope>BView</scope><name>Scale</name></member>
      <member refid="classBView_1ac83f9fdfb882f849e3ac79bfb06a0fd6" prot="public" virt="non-virtual"><scope>BView</scope><name>ScaleBy</name></member>
      <member refid="classBView_1a0878bc7981ba814190b822349599a120" prot="public" virt="non-virtual"><scope>BView</scope><name>ScrollBar</name></member>
      <member refid="classBView_1ae20e2a3c46fc30a2a292c832eead7387" prot="public" virt="non-virtual"><scope>BView</scope><name>ScrollBy</name></member>
      <member refid="classBView_1a33ed2a9eeff474a756b548996a82b964" prot="public" virt="non-virtual"><scope>BView</scope><name>ScrollTo</name></member>
      <member refid="classBView_1a2b76ddc60289ce92e1fb706332edbafc" prot="public" virt="virtual"><scope>BView</scope><name>ScrollTo</name></member>
      <member refid="classBView_1a54991372110199183fed775598ae1912" prot="protected" virt="non-virtual"><scope>BView</scope><name>ScrollWithMouseWheelDelta</name></member>
      <member refid="classBHandler_1a71bf72dc17a64bcd42656722271a9e0c" prot="public" virt="virtual"><scope>BView</scope><name>SendNotices</name></member>
      <member refid="classBView_1ad01fc0fd68e4683af9b9386bf33abf63" prot="public" virt="non-virtual"><scope>BView</scope><name>SetBlendingMode</name></member>
      <member refid="classBView_1a8ba0fe3a3dbeec1b7fd8c9655070ef64" prot="public" virt="non-virtual"><scope>BView</scope><name>SetDiskMode</name></member>
      <member refid="classBView_1a0c392ed0e36213e1007322a9cbca71c0" prot="public" virt="virtual"><scope>BView</scope><name>SetDrawingMode</name></member>
      <member refid="classBView_1a5d8d6b469a8a11a577d1d138cfc31162" prot="public" virt="non-virtual"><scope>BView</scope><name>SetEventMask</name></member>
      <member refid="classBView_1a6906e47d4fdd6923dd51edb60a83ccea" prot="public" virt="non-virtual"><scope>BView</scope><name>SetExplicitAlignment</name></member>
      <member refid="classBView_1acd759dd7505050f9cbd8213c71991b8b" prot="public" virt="non-virtual"><scope>BView</scope><name>SetExplicitMaxSize</name></member>
      <member refid="classBView_1abfcb5c761f9b06da3b4a6788aad5d0ee" prot="public" virt="non-virtual"><scope>BView</scope><name>SetExplicitMinSize</name></member>
      <member refid="classBView_1a98b7d450210099ed59b7cd34f2575e20" prot="public" virt="non-virtual"><scope>BView</scope><name>SetExplicitPreferredSize</name></member>
      <member refid="classBView_1aeef8a27a5577db87251412ce44421494" prot="public" virt="non-virtual"><scope>BView</scope><name>SetExplicitSize</name></member>
      <member refid="classBView_1a2019def93337069c0b7d416e103522e9" prot="public" virt="non-virtual"><scope>BView</scope><name>SetFillRule</name></member>
      <member refid="classBHandler_1a503344dc801858e1f5f419be3919e9cf" prot="public" virt="virtual"><scope>BView</scope><name>SetFilterList</name></member>
      <member refid="classBView_1a4740f9a1e1163073b042102a421a2e33" prot="public" virt="virtual"><scope>BView</scope><name>SetFlags</name></member>
      <member refid="classBView_1a9247127c151153542a3e6bc1f3904433" prot="public" virt="virtual"><scope>BView</scope><name>SetFont</name></member>
      <member refid="classBView_1a443e4d9ff182f85a6b1c8478ef22ffe8" prot="public" virt="non-virtual"><scope>BView</scope><name>SetFontSize</name></member>
      <member refid="classBView_1ab5482f91a642d545bc3fcefe199f95e9" prot="public" virt="virtual"><scope>BView</scope><name>SetHighColor</name></member>
      <member refid="classBView_1aff9e1ab5e88f33027e72b39874868e9b" prot="public" virt="non-virtual"><scope>BView</scope><name>SetHighColor</name></member>
      <member refid="classBView_1a54eefc28bf7a4bc30612cf83aff2963b" prot="public" virt="non-virtual"><scope>BView</scope><name>SetHighUIColor</name></member>
      <member refid="classBView_1acac1ebbba8c76e543e1b06e84dffab02" prot="public" virt="virtual"><scope>BView</scope><name>SetLayout</name></member>
      <member refid="classBView_1ae97bfe6c0c93fce98bc7bbd93761dbfb" prot="public" virt="non-virtual"><scope>BView</scope><name>SetLineMode</name></member>
      <member refid="classBView_1af0426243110fb150ad7ef0705209a12c" prot="public" virt="virtual"><scope>BView</scope><name>SetLowColor</name></member>
      <member refid="classBView_1a929fb1ca47a00220c355ae55a0ea6077" prot="public" virt="non-virtual"><scope>BView</scope><name>SetLowColor</name></member>
      <member refid="classBView_1a879ab88d4e64345069f1041d3a7b652f" prot="public" virt="non-virtual"><scope>BView</scope><name>SetLowUIColor</name></member>
      <member refid="classBView_1ae7705783d064a8613dcc6f36a2866ab2" prot="public" virt="non-virtual"><scope>BView</scope><name>SetMouseEventMask</name></member>
      <member refid="classBHandler_1abf861126df4b6e71b9261a99da4ad0eb" prot="public" virt="non-virtual"><scope>BView</scope><name>SetName</name></member>
      <member refid="classBHandler_1a02f78779c8141987d6030e73c22e734a" prot="public" virt="virtual"><scope>BView</scope><name>SetNextHandler</name></member>
      <member refid="classBView_1a769e5fa6486adf12e7a3511ed372a06c" prot="public" virt="non-virtual"><scope>BView</scope><name>SetOrigin</name></member>
      <member refid="classBView_1a7cf4e3ac5b0759b9c38d7b36517f2337" prot="public" virt="non-virtual"><scope>BView</scope><name>SetOrigin</name></member>
      <member refid="classBView_1a80ea4cb97d2e6e2c3088e610a9e157e6" prot="public" virt="virtual"><scope>BView</scope><name>SetPenSize</name></member>
      <member refid="classBView_1a38d29ea581880c3978d7e50dcc851696" prot="public" virt="virtual"><scope>BView</scope><name>SetResizingMode</name></member>
      <member refid="classBView_1a077136ea06f0a6b39aa0b8b24311cce8" prot="public" virt="non-virtual"><scope>BView</scope><name>SetScale</name></member>
      <member refid="classBView_1a75fb825a3ef69c1c6fbf3535ee2260ab" prot="public" virt="non-virtual"><scope>BView</scope><name>SetToolTip</name></member>
      <member refid="classBView_1aa377bad64048a2d3cd1c2b272ae3079b" prot="public" virt="non-virtual"><scope>BView</scope><name>SetToolTip</name></member>
      <member refid="classBView_1afbd9b8f35226ba89980c450f7626fc85" prot="public" virt="non-virtual"><scope>BView</scope><name>SetTransform</name></member>
      <member refid="classBView_1ac247ddc58f1cb719d60e354a77c51c1e" prot="public" virt="non-virtual"><scope>BView</scope><name>SetViewBitmap</name></member>
      <member refid="classBView_1a046a9c1656823db5401e530cf8121734" prot="public" virt="non-virtual"><scope>BView</scope><name>SetViewBitmap</name></member>
      <member refid="classBView_1ae8dde0e0330b394db016f3e609e7fb6a" prot="public" virt="virtual"><scope>BView</scope><name>SetViewColor</name></member>
      <member refid="classBView_1a7dace2963c85b5ce55b7d8e96946625c" prot="public" virt="non-virtual"><scope>BView</scope><name>SetViewColor</name></member>
      <member refid="classBView_1a39b4878773b4436e3c76aee51c4fbc09" prot="public" virt="non-virtual"><scope>BView</scope><name>SetViewCursor</name></member>
      <member refid="classBView_1a576100502a8c6dfb46ff36b08cbe9405" prot="public" virt="non-virtual"><scope>BView</scope><name>SetViewOverlay</name></member>
      <member refid="classBView_1a9770c1bb97d7ffd797f7c40ca1339f98" prot="public" virt="non-virtual"><scope>BView</scope><name>SetViewOverlay</name></member>
      <member refid="classBView_1a34f020c4bb1008cef972cf1eec7dba0f" prot="public" virt="non-virtual"><scope>BView</scope><name>SetViewUIColor</name></member>
      <member refid="classBView_1a06e0584057d6c7a7c7e048b6272b7016" prot="public" virt="virtual"><scope>BView</scope><name>Show</name></member>
      <member refid="classBView_1a61d28f55d6fdc55b59c38c44b9788205" prot="public" virt="non-virtual"><scope>BView</scope><name>ShowToolTip</name></member>
      <member refid="classBHandler_1af7d600e33a0586af7444d9abc8500504" prot="public" virt="non-virtual"><scope>BView</scope><name>StartWatching</name></member>
      <member refid="classBHandler_1a20713ff6ee9df49a014f391374eaf689" prot="public" virt="non-virtual"><scope>BView</scope><name>StartWatching</name></member>
      <member refid="classBHandler_1a58d7c8d30e47fbb7590f10dea1f21166" prot="public" virt="non-virtual"><scope>BView</scope><name>StartWatchingAll</name></member>
      <member refid="classBHandler_1a31927c51d89e0e3b3bf609a786ee6c3b" prot="public" virt="non-virtual"><scope>BView</scope><name>StartWatchingAll</name></member>
      <member refid="classBHandler_1a9d1f0d55b3dc7337058aba769b4e4f93" prot="public" virt="non-virtual"><scope>BView</scope><name>StopWatching</name></member>
      <member refid="classBHandler_1ad3544be491270f856a0af8d36ce02d78" prot="public" virt="non-virtual"><scope>BView</scope><name>StopWatching</name></member>
      <member refid="classBHandler_1a199c167e0dcee95aa65d09435804b3d9" prot="public" virt="non-virtual"><scope>BView</scope><name>StopWatchingAll</name></member>
      <member refid="classBHandler_1a8b9a424ce63f5932666094b6eadf10cf" prot="public" virt="non-virtual"><scope>BView</scope><name>StopWatchingAll</name></member>
      <member refid="classBView_1adef480de8a8bcd2fff3129660501616e" prot="public" virt="non-virtual"><scope>BView</scope><name>StringWidth</name></member>
      <member refid="classBView_1aef3638cf597407e6a9f31bc75cd42097" prot="public" virt="non-virtual"><scope>BView</scope><name>StringWidth</name></member>
      <member refid="classBView_1a57222cd40096dfe23e1df86a01277041" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeArc</name></member>
      <member refid="classBView_1a9c958b9399925a8a0ea333afd337ebfd" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeArc</name></member>
      <member refid="classBView_1a64ea2ad06018b0b3b156113d201c7ad7" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeBezier</name></member>
      <member refid="classBView_1a042703445263f1d9a9213757fcf27414" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeEllipse</name></member>
      <member refid="classBView_1ae7727ca808873634363e5306fdbcc09a" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeEllipse</name></member>
      <member refid="classBView_1a909ee03901fac4ae5504f7faf5e41a7c" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeLine</name></member>
      <member refid="classBView_1ab713fc42e330d0a091a9774edfb9626f" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeLine</name></member>
      <member refid="classBView_1ae871d03592c1bba5d6be3d5d982ea747" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokePolygon</name></member>
      <member refid="classBView_1a1638c58553467f3ebe5ee2b3683d4905" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokePolygon</name></member>
      <member refid="classBView_1a1482fddababe3dd1377f86a038f7119b" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokePolygon</name></member>
      <member refid="classBView_1ad3893af66d3891855f9db7072bfb4de7" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeRect</name></member>
      <member refid="classBView_1acf743b2ba22b82c8bc38eb514513df55" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeRoundRect</name></member>
      <member refid="classBView_1a507e9b732e880ac8e6379e19e74d5757" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeShape</name></member>
      <member refid="classBView_1a8221cce8942e590c2fea954f57933e78" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeTriangle</name></member>
      <member refid="classBView_1ae59fc9e9cfaba5e2d6e79a90723a3330" prot="public" virt="non-virtual"><scope>BView</scope><name>StrokeTriangle</name></member>
      <member refid="classBView_1a27e217abb3fefa45b6e4ceb7a54cb362" prot="public" virt="non-virtual"><scope>BView</scope><name>Sync</name></member>
      <member refid="classBView_1a668a4ed5419c86a7f2696ca7ece28df7" prot="public" virt="virtual"><scope>BView</scope><name>TargetedByScrollView</name></member>
      <member refid="classBView_1a127ceec2101b12c0fbe1e0e66a7b9dc1" prot="public" virt="non-virtual"><scope>BView</scope><name>ToolTip</name></member>
      <member refid="classBView_1ab16cc72cf8ae3b40abcf1f714e7e9b74" prot="public" virt="non-virtual"><scope>BView</scope><name>Transform</name></member>
      <member refid="classBView_1a98597d70ae48b2576683f25078135534" prot="public" virt="non-virtual"><scope>BView</scope><name>TransformTo</name></member>
      <member refid="classBView_1a8ae6d4e1cdfeeee33b753d56bee6ae7f" prot="public" virt="non-virtual"><scope>BView</scope><name>TranslateBy</name></member>
      <member refid="classBView_1ac2e293fbdd999e4857b44b6e4d4c3820" prot="public" virt="non-virtual"><scope>BView</scope><name>TruncateString</name></member>
      <member refid="classBHandler_1ab131af7eb7aa2b9eea3a11ac1bfd4c03" prot="public" virt="non-virtual"><scope>BView</scope><name>UnlockLooper</name></member>
      <member refid="classBView_1a8b2b1d9e08ce0c1763dd6a077ed02fdd" prot="public" virt="non-virtual"><scope>BView</scope><name>ViewColor</name></member>
      <member refid="classBView_1aec6c89446eb4f5ded151adced9126df8" prot="public" virt="non-virtual"><scope>BView</scope><name>ViewUIColor</name></member>
      <member refid="classBView_1a32733d357b76bc3504cae326d174f4a2" prot="public" virt="non-virtual"><scope>BView</scope><name>Window</name></member>
      <member refid="classBView_1a5b7aeff0b2608ec63e2c01153a7717f6" prot="public" virt="virtual"><scope>BView</scope><name>WindowActivated</name></member>
      <member refid="classBArchivable_1af1a37be4b953423787b0d0be0b345ff3" prot="public" virt="virtual"><scope>BView</scope><name>~BArchivable</name></member>
      <member refid="classBHandler_1a928254034959d19ef588b7898a6f8194" prot="public" virt="virtual"><scope>BView</scope><name>~BHandler</name></member>
      <member refid="classBView_1a7df0d7eaeb97a3c8a800f9e321f23f67" prot="public" virt="virtual"><scope>BView</scope><name>~BView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
