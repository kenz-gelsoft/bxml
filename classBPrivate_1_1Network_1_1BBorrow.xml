<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BBorrow" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BBorrow</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BBorrow_1a88c45b1ae280dbecee8cbcf538132a46" prot="private" static="no" mutable="no">
        <type>BorrowAdmin *</type>
        <definition>BorrowAdmin* BPrivate::Network::BBorrow&lt; T &gt;::fAdminBlock</definition>
        <argsstring></argsstring>
        <name>fAdminBlock</name>
        <qualifiedname>BPrivate::Network::BBorrow::fAdminBlock</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="198" column="13" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BBorrow_1aa42f61f90036d7a79463341db0170550" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* BPrivate::Network::BBorrow&lt; T &gt;::fPtr</definition>
        <argsstring></argsstring>
        <name>fPtr</name>
        <qualifiedname>BPrivate::Network::BBorrow::fPtr</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="197" column="3" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1ad903e9f280f48a5ddd03dc284be82c4b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BBorrow&lt; T &gt;::BBorrow</definition>
        <argsstring>() noexcept</argsstring>
        <name>BBorrow</name>
        <qualifiedname>BPrivate::Network::BBorrow::BBorrow</qualifiedname>
        <briefdescription>
<para>Create a new smart pointer with no value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="201" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a8878a4629154e7165fc076acf865e912" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BBorrow&lt; T &gt;::BBorrow</definition>
        <argsstring>(BBorrow &amp;&amp;other) noexcept</argsstring>
        <name>BBorrow</name>
        <qualifiedname>BPrivate::Network::BBorrow::BBorrow</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to move from. It will be left empty after the move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="223" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1ae4c84413e31d0ce99e13cce438636710" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>BPrivate::Network::BBorrow&lt; T &gt;::BBorrow</definition>
        <argsstring>(BExclusiveBorrow&lt; P &gt; &amp;owner)</argsstring>
        <name>BBorrow</name>
        <qualifiedname>BPrivate::Network::BBorrow::BBorrow</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BExclusiveBorrow" kindref="compound">BExclusiveBorrow</ref>&lt; P &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
<para>Construct a borrowed object from the <emphasis>owner</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>The owner to borrow from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BBorrowError" kindref="compound">BBorrowError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In case the <emphasis>owner</emphasis> already borrowed their object, or in case the <emphasis>owner</emphasis> is an empty object, as you cannot borrow something that is not there.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object for this <ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of objedt for the <ref refid="classBPrivate_1_1Network_1_1BExclusiveBorrow" kindref="compound">BExclusiveBorrow</ref> object. This allows you to have different types between the owner and the borrower, with the requirement that a pointer to type P can be cast to a pointer of type T without issue.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="208" column="10" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="208" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1ac62658de291caa8da6abc5dc4b052ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BBorrow&lt; T &gt;::BBorrow</definition>
        <argsstring>(const BBorrow &amp;)=delete</argsstring>
        <name>BBorrow</name>
        <qualifiedname>BPrivate::Network::BBorrow::BBorrow</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a62395d4a3ebae71cb8c8d7a85028ca1b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BBorrow&lt; T &gt;::BBorrow</definition>
        <argsstring>(nullptr_t) noexcept</argsstring>
        <name>BBorrow</name>
        <qualifiedname>BPrivate::Network::BBorrow::BBorrow</qualifiedname>
        <param>
          <type>nullptr_t</type>
        </param>
        <briefdescription>
<para>Special constructor that builds an empty borrow object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="204" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a77b10a579d6982a30422c5040eb16bb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BBorrow&lt; T &gt;::~BBorrow</definition>
        <argsstring>()</argsstring>
        <name>~BBorrow</name>
        <qualifiedname>BPrivate::Network::BBorrow::~BBorrow</qualifiedname>
        <briefdescription>
<para>Destructor that returns the object to the original owner. </para>
        </briefdescription>
        <detaileddescription>
<para>If the original owner no longer exists, the underlying object will be deleted.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="246" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a82878adbd2c0e40296e6481c4c314590" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BBorrow&lt; T &gt;::HasValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>HasValue</name>
        <qualifiedname>BPrivate::Network::BBorrow::HasValue</qualifiedname>
        <briefdescription>
<para>Check if the object has a value or is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="253" column="6" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a8e8cec6c2312d7e8fe2aecabb3cde875" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; BPrivate::Network::BBorrow&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <qualifiedname>BPrivate::Network::BBorrow::operator*</qualifiedname>
        <briefdescription>
<para>Dereference operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BBorrowError" kindref="compound">BBorrowError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>When the smart pointer is empty and there is no object to access.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="256" column="3" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="256" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a0f3c63dd00d7e10a94f698d343b9068d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * BPrivate::Network::BBorrow&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>BPrivate::Network::BBorrow::operator-&gt;</qualifiedname>
        <briefdescription>
<para>Dereference operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BBorrowError" kindref="compound">BBorrowError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>When the smart pointer is empty and there is no object to access.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="264" column="3" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a4d60b54217d8da6de0ff4b61219aa7a8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> &amp;</type>
        <definition>BBorrow &amp; BPrivate::Network::BBorrow&lt; T &gt;::operator=</definition>
        <argsstring>(BBorrow &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BBorrow::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to move from. It will be left empty after the move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="233" column="9" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="233" bodyend="243"/>
        <references refid="classBPrivate_1_1Network_1_1BBorrow_1af3c89452b889097865f1a48511cdd81b" compoundref="ExclusiveBorrow_8h" startline="272" endline="278">BPrivate::Network::BBorrow&lt; T &gt;::Return</references>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1a6fcc136b34be53c5b2e75698236782f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> &amp;</type>
        <definition>BBorrow &amp; BPrivate::Network::BBorrow&lt; T &gt;::operator=</definition>
        <argsstring>(const BBorrow &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BBorrow::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="220" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BBorrow_1af3c89452b889097865f1a48511cdd81b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BBorrow&lt; T &gt;::Return</definition>
        <argsstring>() noexcept</argsstring>
        <name>Return</name>
        <qualifiedname>BPrivate::Network::BBorrow::Return</qualifiedname>
        <briefdescription>
<para>Return object to the owner. </para>
        </briefdescription>
        <detaileddescription>
<para>The current object will be set to be an empty object after this call. If the object is already empty, this call will not do anything. If the owner no longer exists, the object will be disposed off.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="272" column="6" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="272" bodyend="278"/>
        <referencedby refid="classBPrivate_1_1Network_1_1BBorrow_1a4d60b54217d8da6de0ff4b61219aa7a8" compoundref="ExclusiveBorrow_8h" startline="233" endline="243">BPrivate::Network::BBorrow&lt; T &gt;::operator=</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Smart pointer that borrows an object from a <ref refid="classBPrivate_1_1Network_1_1BExclusiveBorrow" kindref="compound">BExclusiveBorrow</ref> owner. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> smart pointer is the accompanyment to the <ref refid="classBPrivate_1_1Network_1_1BExclusiveBorrow" kindref="compound">BExclusiveBorrow</ref> owner object. See the documentation on that template class on how to use the smart pointer pairs to express and enforce exclusive ownership between the owner and the borrower.</para>
<para>Like a <ref refid="classBPrivate_1_1Network_1_1BExclusiveBorrow" kindref="compound">BExclusiveBorrow</ref> object, a <ref refid="classBPrivate_1_1Network_1_1BBorrow" kindref="compound">BBorrow</ref> object can either have a borrow or be empty. When it is empty, it means the current object is not borrowing anything at that moment. Any calls to access the underlying data will fail in that case.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object that is owned by this smart pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" line="195" column="11" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ExclusiveBorrow.h" bodystart="196" bodyend="279"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1ad903e9f280f48a5ddd03dc284be82c4b" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>BBorrow</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a62395d4a3ebae71cb8c8d7a85028ca1b" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>BBorrow</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1ae4c84413e31d0ce99e13cce438636710" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>BBorrow</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1ac62658de291caa8da6abc5dc4b052ec6" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>BBorrow</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a8878a4629154e7165fc076acf865e912" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>BBorrow</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a88c45b1ae280dbecee8cbcf538132a46" prot="private" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>fAdminBlock</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1aa42f61f90036d7a79463341db0170550" prot="private" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>fPtr</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a82878adbd2c0e40296e6481c4c314590" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>HasValue</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a8e8cec6c2312d7e8fe2aecabb3cde875" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>operator*</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a0f3c63dd00d7e10a94f698d343b9068d" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>operator-&gt;</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a6fcc136b34be53c5b2e75698236782f4" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a4d60b54217d8da6de0ff4b61219aa7a8" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1af3c89452b889097865f1a48511cdd81b" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>Return</name></member>
      <member refid="classBPrivate_1_1Network_1_1BBorrow_1a77b10a579d6982a30422c5040eb16bb1" prot="public" virt="non-virtual"><scope>BPrivate::Network::BBorrow</scope><name>~BBorrow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
