<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPath" kind="class" language="C++" prot="public">
    <compoundname>BPath</compoundname>
    <basecompoundref refid="classBFlattenable" prot="public" virt="non-virtual">BFlattenable</basecompoundref>
      <sectiondef kind="user-defined">
      <header>Constructor Helpers</header>
      <memberdef kind="function" id="classBPath_1a16c60cbaab02bb25cf8f690ebad2c48b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BPath::InitCheck</qualifiedname>
        <briefdescription>
<para>Checks whether or not the object was properly initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_OK</computeroutput>, if the <ref refid="classBPath" kindref="compound">BPath</ref> object was properly initialized, an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="34" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a88b5935bf1bd2fe2c64c41baaaf6a6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::SetTo</definition>
        <argsstring>(const entry_ref *ref)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BPath::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Reinitializes the object to the filesystem entry specified by the passed in <ref refid="structentry__ref" kindref="compound">entry_ref</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structentry__ref" kindref="compound">entry_ref</ref> to reinitialize the entry from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>ref</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The pathname was longer than <computeroutput>B_PATH_NAME_LENGTH</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a17c725dfdc0f250b4ad95b567b6c1d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::SetTo</definition>
        <argsstring>(const BEntry *entry)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BPath::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Reinitializes the object to the specified filesystem entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> to reinitialize the entry from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>ref</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The pathname was longer than <computeroutput>B_PATH_NAME_LENGTH</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="37" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a206afd69b062fc5c52be5459d386f9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::SetTo</definition>
        <argsstring>(const char *path, const char *leaf=NULL, bool normalize=false)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BPath::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>leaf</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reinitializes the object to the passed in <emphasis>path</emphasis> or <emphasis>path</emphasis> and <emphasis>leaf</emphasis> combination. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>The following pseudocode is safe: <programlisting><codeline><highlight class="normal">path.SetTo(path.Path(),<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>leaf&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
</programlisting></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>path</emphasis> name to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>leaf</emphasis> name to use (may be <computeroutput>NULL</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag used to force normalization; normalization may sometimes occur even if <computeroutput>false</computeroutput>. The following items require normalization:<itemizedlist>
<listitem><para>Relative pathnames (after concatenation; e.g. &quot;boot/ltj&quot;)</para>
</listitem><listitem><para>The presence of &quot;.&quot; or &quot;..&quot; (&quot;/boot/ltj/../ltj/./gwar&quot;)</para>
</listitem><listitem><para>Redundant slashes (&quot;/boot//ltj&quot;)</para>
</listitem><listitem><para>A trailing slash (&quot;/boot/ltj/&quot;)</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>ref</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The pathname was longer than <computeroutput>B_PATH_NAME_LENGTH</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1ac03159e0d8b645a24b5bb08bb46bd11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::SetTo</definition>
        <argsstring>(const BDirectory *dir, const char *leaf=NULL, bool normalize=false)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BPath::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>leaf</declname>
          <defname>path</defname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reinitializes the object to the passed in <emphasis>dir</emphasis> and relative <emphasis>path</emphasis> combination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory that provides the base component of the pathname. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the relative <emphasis>path</emphasis> name (may be <computeroutput>NULL</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean flag used to force normalization; normalization may sometimes occur even if <computeroutput>false</computeroutput>. The following items require normalization:<itemizedlist>
<listitem><para>Relative pathnames (after concatenation; e.g. &quot;boot/ltj&quot;)</para>
</listitem><listitem><para>The presence of &quot;.&quot; or &quot;..&quot; (&quot;/boot/ltj/../ltj/./gwar&quot;)</para>
</listitem><listitem><para>Redundant slashes (&quot;/boot//ltj&quot;)</para>
</listitem><listitem><para>A trailing slash (&quot;/boot/ltj/&quot;)</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>ref</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The pathname was longer than <computeroutput>B_PATH_NAME_LENGTH</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="40" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1ac9f197dd6bfe7f02c35beb9810ca15a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPath::Unset</definition>
        <argsstring>()</argsstring>
        <name>Unset</name>
        <qualifiedname>BPath::Unset</qualifiedname>
        <briefdescription>
<para>Returns the object to an uninitialized state. </para>
        </briefdescription>
        <detaileddescription>
<para>Frees any resources it allocated and marks the object as uninitialized.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="43" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Path Manipulation</header>
      <memberdef kind="function" id="classBPath_1abe6828b73e063e9c9ee8f25082a3e670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::Append</definition>
        <argsstring>(const char *path, bool normalize=false)</argsstring>
        <name>Append</name>
        <qualifiedname>BPath::Append</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Appends the passed in relative path to the end of the current path. </para>
        </briefdescription>
        <detaileddescription>
<para>This method fails if the path is absolute or the <ref refid="classBPath" kindref="compound">BPath</ref> object is uninitialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative pathname to append to current path (may be <computeroutput>NULL</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag used to force normalization; normalization may sometimes occur even if <computeroutput>false</computeroutput>. The following items require normalization:<itemizedlist>
<listitem><para>Relative pathnames (after concatenation; e.g. &quot;boot/ltj&quot;)</para>
</listitem><listitem><para>The presence of &quot;.&quot; or &quot;..&quot; (&quot;/boot/ltj/../ltj/./gwar&quot;)</para>
</listitem><listitem><para>Redundant slashes (&quot;/boot//ltj&quot;)</para>
</listitem><listitem><para>A trailing slash (&quot;/boot/ltj/&quot;)</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>ref</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The pathname was longer than <computeroutput>B_PATH_NAME_LENGTH</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="45" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Path Information</header>
      <memberdef kind="function" id="classBPath_1aa8aba68bed27b256de14222fe6df227b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BPath::Path</definition>
        <argsstring>() const</argsstring>
        <name>Path</name>
        <qualifiedname>BPath::Path</qualifiedname>
        <briefdescription>
<para>Gets the entire path of the object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The path name of the object, or <computeroutput>NULL</computeroutput> if it is not properly initialized.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="47" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1aadae8a538bb405ea3850e32fb33b05f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BPath::Leaf</definition>
        <argsstring>() const</argsstring>
        <name>Leaf</name>
        <qualifiedname>BPath::Leaf</qualifiedname>
        <briefdescription>
<para>Gets the leaf portion of the path. </para>
        </briefdescription>
        <detaileddescription>
<para>The leaf portion of the path is defined to be the string after the last <computeroutput>&apos;/&apos;</computeroutput>. For the root path (<computeroutput>&quot;/&quot;</computeroutput>) it is an empty string (<computeroutput>&quot;&quot;</computeroutput>).</para>
<para><simplesect kind="return"><para>The leaf portion of the path or <computeroutput>NULL</computeroutput> if it is not properly initialized.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="48" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a096cdfcd70db54b3c30fe76743ac4f1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::GetParent</definition>
        <argsstring>(BPath *path) const</argsstring>
        <name>GetParent</name>
        <qualifiedname>BPath::GetParent</qualifiedname>
        <param>
          <type><ref refid="classBPath" kindref="compound">BPath</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Initializes <emphasis>path</emphasis> with the parent directory of the <ref refid="classBPath" kindref="compound">BPath</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>No normalization is performed on the path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPath" kindref="compound">BPath</ref> object to be initialized to the parent directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPath" kindref="compound">BPath</ref> object represents the root path and thus has no parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="49" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a456d6f1419fe00f376d1434d55d2432d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPath::IsAbsolute</definition>
        <argsstring>() const</argsstring>
        <name>IsAbsolute</name>
        <qualifiedname>BPath::IsAbsolute</qualifiedname>
        <briefdescription>
<para>Gets whether or not the path is absolute or relative. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method returns <computeroutput>false</computeroutput> if the object is initialized.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the path is absolute, <computeroutput>false</computeroutput> if relative or if the object is uninitialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="50" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="classBPath_1a3df539180ce332bebd6aa5b657b76254" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPath::operator==</definition>
        <argsstring>(const BPath &amp;item) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BPath::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBPath" kindref="compound">BPath</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Performs a simple (string-wise) comparison of paths for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>No normalization takes place, two uninitialized <ref refid="classBPath" kindref="compound">BPath</ref> objects are considered equal.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classBPath" kindref="compound">BPath</ref> object to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the paths are equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1ac50f789504a61cb9f90be71120d66508" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPath::operator==</definition>
        <argsstring>(const char *path) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BPath::operator==</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Performs a simple (string-wise) comparison of paths for equality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>No normalization takes place.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the path names are equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a76995b964f1751539c60703eedfa3a85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPath::operator!=</definition>
        <argsstring>(const BPath &amp;item) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BPath::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classBPath" kindref="compound">BPath</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Performs a simple (string-wise) comparison of paths for inequality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>No normalization takes place, two uninitialized <ref refid="classBPath" kindref="compound">BPath</ref> objects are considered equal.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classBPath" kindref="compound">BPath</ref> object to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the path names are <bold>not</bold> equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a02ac6810e4881f905703ce030af683fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPath::operator!=</definition>
        <argsstring>(const char *path) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BPath::operator!=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Performs a simple (string-wise) comparison of paths for inequality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>No normalization takes place.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to compare.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the path names are <bold>not</bold> equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a528ea14902d638e6a434f70177880a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPath" kindref="compound">BPath</ref> &amp;</type>
        <definition>BPath &amp; BPath::operator=</definition>
        <argsstring>(const BPath &amp;item)</argsstring>
        <name>operator=</name>
        <qualifiedname>BPath::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPath" kindref="compound">BPath</ref> &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Initializes the object as a copy of <emphasis>item</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBPath" kindref="compound">BPath</ref> object to copy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly initialized <ref refid="classBPath" kindref="compound">BPath</ref> object.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="56" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1aed09ac7562d7a7f67c25f3ef1a8a562f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPath" kindref="compound">BPath</ref> &amp;</type>
        <definition>BPath &amp; BPath::operator=</definition>
        <argsstring>(const char *path)</argsstring>
        <name>operator=</name>
        <qualifiedname>BPath::operator=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Initializes the object with the passed in <emphasis>path</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Has the same effect as <programlisting><codeline><highlight class="normal"><ref refid="classBPath_1a88b5935bf1bd2fe2c64c41baaaf6a6d7" kindref="member">SetTo</ref>(path)<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to be assign to this object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the newly initialized <ref refid="classBPath" kindref="compound">BPath</ref> object.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="57" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>BFlattenable Method Implementations</header>
      <memberdef kind="function" id="classBPath_1ac43f61c0280de191eef4adcf6a642437" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BPath::IsFixedSize</definition>
        <argsstring>() const</argsstring>
        <name>IsFixedSize</name>
        <qualifiedname>BPath::IsFixedSize</qualifiedname>
        <reimplements refid="classBFlattenable_1ac019f502749a0cc78082f5ec7c8f5b56">IsFixedSize</reimplements>
        <briefdescription>
<para>Implements <ref refid="classBFlattenable_1ac019f502749a0cc78082f5ec7c8f5b56" kindref="member">BFlattenable::IsFixedSize()</ref>. Always returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> </para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="60" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a05dc54fed4718135a3f55f476816f1cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
        <definition>type_code BPath::TypeCode</definition>
        <argsstring>() const</argsstring>
        <name>TypeCode</name>
        <qualifiedname>BPath::TypeCode</qualifiedname>
        <reimplements refid="classBFlattenable_1a819507fa1b0906f14299db15f6e990d1">TypeCode</reimplements>
        <briefdescription>
<para>Implements <ref refid="classBFlattenable_1a819507fa1b0906f14299db15f6e990d1" kindref="member">BFlattenable::TypeCode()</ref>. Always returns <computeroutput>B_REF_TYPE</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_REF_TYPE</computeroutput> </para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="61" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a5c77e3e9fb829249e9d1b6366f6d5520" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BPath::FlattenedSize</definition>
        <argsstring>() const</argsstring>
        <name>FlattenedSize</name>
        <qualifiedname>BPath::FlattenedSize</qualifiedname>
        <reimplements refid="classBFlattenable_1a9b5885d4454326ca448438960ecff466">FlattenedSize</reimplements>
        <briefdescription>
<para>Implements <ref refid="classBFlattenable_1a9b5885d4454326ca448438960ecff466" kindref="member">BFlattenable::FlattenedSize()</ref>. Gets the size of the flattened <ref refid="structentry__ref" kindref="compound">entry_ref</ref> struct that represents the path in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the flattened <ref refid="structentry__ref" kindref="compound">entry_ref</ref> struct that represents the path in bytes.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="62" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a2866faf2cacac53e9d583f9a3dbd903c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::Flatten</definition>
        <argsstring>(void *buffer, ssize_t size) const</argsstring>
        <name>Flatten</name>
        <qualifiedname>BPath::Flatten</qualifiedname>
        <reimplements refid="classBFlattenable_1ab934b64a8b218a4f9078ded191be6fbb">Flatten</reimplements>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Implements <ref refid="classBFlattenable_1ab934b64a8b218a4f9078ded191be6fbb" kindref="member">BFlattenable::Flatten()</ref>. Converts the path of the object to an <ref refid="structentry__ref" kindref="compound">entry_ref</ref> and writes it into <emphasis>buffer</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer that the data is to be stored in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of <emphasis>buffer</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>buffer</emphasis> was <computeroutput>NULL</computeroutput> or of insufficient size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="63" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1aef48a6f6cf10836b412df6b6e060c4c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BPath::AllowsTypeCode</definition>
        <argsstring>(type_code code) const</argsstring>
        <name>AllowsTypeCode</name>
        <qualifiedname>BPath::AllowsTypeCode</qualifiedname>
        <reimplements refid="classBFlattenable_1a30165696bba76fed10e37508cc4f6925">AllowsTypeCode</reimplements>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Implements <ref refid="classBFlattenable_1a30165696bba76fed10e37508cc4f6925" kindref="member">BFlattenable::AllowsTypeCode()</ref>. Checks if type code is equal to <computeroutput>B_REF_TYPE</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The type code to test.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if code is <computeroutput>B_REF_TYPE</computeroutput>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="64" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a437333127ec6d2e1037e72dd822afeca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::Unflatten</definition>
        <argsstring>(type_code code, const void *buffer, ssize_t size)</argsstring>
        <name>Unflatten</name>
        <qualifiedname>BPath::Unflatten</qualifiedname>
        <reimplements refid="classBFlattenable_1a41e7168574912690be159991d2b07a97">Unflatten</reimplements>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Implements <ref refid="classBFlattenable_1a41e7168574912690be159991d2b07a97" kindref="member">BFlattenable::Unflatten()</ref>. Initializes the object with the flattened <ref refid="structentry__ref" kindref="compound">entry_ref</ref> data from the passed in buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The type code must be set to <computeroutput>B_REF_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The type code of the flattened data, must be <computeroutput>B_REF_TYPE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer containing the flattened data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <emphasis>buffer</emphasis> in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>buffer</emphasis> was <computeroutput>NULL</computeroutput> or didn&apos;t contain an <ref refid="structentry__ref" kindref="compound">entry_ref</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="65" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPath_1a31cef04e29d47a12e3ecfe441ee9ae50" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BPath::_reserved[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BPath::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="76" column="7" bodyfile="/boot/home/src/haiku/headers/os/storage/Path.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPath_1a007b204a2a58603143a626d1b52b17e4" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::fCStatus</definition>
        <argsstring></argsstring>
        <name>fCStatus</name>
        <qualifiedname>BPath::fCStatus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="80" column="9" bodyfile="/boot/home/src/haiku/headers/os/storage/Path.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPath_1a126c6dd3c7db6980d346d4f8c8c661bc" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BPath::fName</definition>
        <argsstring></argsstring>
        <name>fName</name>
        <qualifiedname>BPath::fName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="78" column="5" bodyfile="/boot/home/src/haiku/headers/os/storage/Path.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPath_1afd5d004c1cb0622546a18f316a68c807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPath::BPath</definition>
        <argsstring>()</argsstring>
        <name>BPath</name>
        <qualifiedname>BPath::BPath</qualifiedname>
        <briefdescription>
<para>Creates an uninitialized <ref refid="classBPath" kindref="compound">BPath</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBPath_1a88b5935bf1bd2fe2c64c41baaaf6a6d7" kindref="member">SetTo()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a5ecced69773ff2c9941a4f015f627f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPath::BPath</definition>
        <argsstring>(const BDirectory *dir, const char *leaf=NULL, bool normalize=false)</argsstring>
        <name>BPath</name>
        <qualifiedname>BPath::BPath</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>leaf</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBPath" kindref="compound">BPath</ref> object and initializes it to the specified directory and filename combination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory that provides the base component of the pathname. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The (optional) leaf component of the pathname. Must be relative. The value of <emphasis>leaf</emphasis> is concatenated to the end of <emphasis>dir</emphasis> (a &quot;/&quot; will be added as a separator, if necessary). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean flag used to force normalization; normalization may sometimes occur even if <computeroutput>false</computeroutput>. The following items require normalization:<itemizedlist>
<listitem><para>Relative pathnames (after concatenation; e.g. &quot;boot/ltj&quot;)</para>
</listitem><listitem><para>The presence of &quot;.&quot; or &quot;..&quot; (&quot;/boot/ltj/../ltj/./gwar&quot;)</para>
</listitem><listitem><para>Redundant slashes (&quot;/boot//ltj&quot;)</para>
</listitem><listitem><para>A trailing slash (&quot;/boot/ltj/&quot;)</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a053ee656e6da94e7226bbf7e343db5bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPath::BPath</definition>
        <argsstring>(const BEntry *entry)</argsstring>
        <name>BPath</name>
        <qualifiedname>BPath::BPath</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBPath" kindref="compound">BPath</ref> object and initializes it to the filesystem entry specified by the passed in <ref refid="classBEntry" kindref="compound">BEntry</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classBEntry" kindref="compound">BEntry</ref> object to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a4e6b40dd0cee0996a63ba9b88b3d0b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPath::BPath</definition>
        <argsstring>(const BPath &amp;path)</argsstring>
        <name>BPath</name>
        <qualifiedname>BPath::BPath</qualifiedname>
        <param>
          <type>const <ref refid="classBPath" kindref="compound">BPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Creates a copy of the given <ref refid="classBPath" kindref="compound">BPath</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the object to be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a7d44e82248c6540b020fc2433533e572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPath::BPath</definition>
        <argsstring>(const char *dir, const char *leaf=NULL, bool normalize=false)</argsstring>
        <name>BPath</name>
        <qualifiedname>BPath::BPath</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>leaf</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBPath" kindref="compound">BPath</ref> object and initializes it to the specified path or path and filename combination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base component of the pathname. May be absolute or relative. If relative, it is based off the current working directory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The (optional) leaf component of the pathname. Must be relative. The value of <emphasis>leaf</emphasis> is concatenated to the end of <emphasis>dir</emphasis> (a &quot;/&quot; will be added as a separator, if necessary). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean flag used to force normalization; normalization may sometimes occur even if <computeroutput>false</computeroutput>. The following items require normalization:<itemizedlist>
<listitem><para>Relative pathnames (after concatenation; e.g. &quot;boot/ltj&quot;)</para>
</listitem><listitem><para>The presence of &quot;.&quot; or &quot;..&quot; (&quot;/boot/ltj/../ltj/./gwar&quot;)</para>
</listitem><listitem><para>Redundant slashes (&quot;/boot//ltj&quot;)</para>
</listitem><listitem><para>A trailing slash (&quot;/boot/ltj/&quot;)</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a1d37b9b75d5b7ff24ad40266b7b9dd9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPath::BPath</definition>
        <argsstring>(const entry_ref *ref)</argsstring>
        <name>BPath</name>
        <qualifiedname>BPath::BPath</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBPath" kindref="compound">BPath</ref> object and initializes it to the filesystem entry specified by the passed in <ref refid="structentry__ref" kindref="compound">entry_ref</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structentry__ref" kindref="compound">entry_ref</ref> to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a0ec9767088fad845ed3c71014bd4d789" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BPath::~BPath</definition>
        <argsstring>()</argsstring>
        <name>~BPath</name>
        <qualifiedname>BPath::~BPath</qualifiedname>
        <briefdescription>
<para>Destroys the <ref refid="classBPath" kindref="compound">BPath</ref> object and frees any associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="32" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBPath_1a189c15941d3514f2d5b13aadaaf1cabf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPath::_SetPath</definition>
        <argsstring>(const char *path)</argsstring>
        <name>_SetPath</name>
        <qualifiedname>BPath::_SetPath</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="73" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1ab046d2f072ae78ec7525bd1f8391db0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPath::_WarPath1</definition>
        <argsstring>()</argsstring>
        <name>_WarPath1</name>
        <qualifiedname>BPath::_WarPath1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="69" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a17bc54997b557292bd15378377b9fa32" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPath::_WarPath2</definition>
        <argsstring>()</argsstring>
        <name>_WarPath2</name>
        <qualifiedname>BPath::_WarPath2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="70" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBPath_1a167f56d8af28c6b080a842c15475cb52" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPath::_WarPath3</definition>
        <argsstring>()</argsstring>
        <name>_WarPath3</name>
        <qualifiedname>BPath::_WarPath3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="71" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classBPath_1a764b3b8cb92211bf18cb6011263a3557" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BPath::_MustNormalize</definition>
        <argsstring>(const char *path, status_t *_error)</argsstring>
        <name>_MustNormalize</name>
        <qualifiedname>BPath::_MustNormalize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref> *</type>
          <declname>_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="74" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class representing a file system path. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
      <node id="1">
        <label>BPath</label>
        <link refid="classBPath"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
      <node id="1">
        <label>BPath</label>
        <link refid="classBPath"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/storage/Path.h" line="20" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/Path.h" bodystart="20" bodyend="82"/>
    <listofallmembers>
      <member refid="classBPath_1a764b3b8cb92211bf18cb6011263a3557" prot="private" virt="non-virtual"><scope>BPath</scope><name>_MustNormalize</name></member>
      <member refid="classBPath_1a31cef04e29d47a12e3ecfe441ee9ae50" prot="private" virt="non-virtual"><scope>BPath</scope><name>_reserved</name></member>
      <member refid="classBPath_1a189c15941d3514f2d5b13aadaaf1cabf" prot="private" virt="non-virtual"><scope>BPath</scope><name>_SetPath</name></member>
      <member refid="classBPath_1ab046d2f072ae78ec7525bd1f8391db0a" prot="private" virt="virtual"><scope>BPath</scope><name>_WarPath1</name></member>
      <member refid="classBPath_1a17bc54997b557292bd15378377b9fa32" prot="private" virt="virtual"><scope>BPath</scope><name>_WarPath2</name></member>
      <member refid="classBPath_1a167f56d8af28c6b080a842c15475cb52" prot="private" virt="virtual"><scope>BPath</scope><name>_WarPath3</name></member>
      <member refid="classBPath_1aef48a6f6cf10836b412df6b6e060c4c2" prot="public" virt="virtual"><scope>BPath</scope><name>AllowsTypeCode</name></member>
      <member refid="classBPath_1abe6828b73e063e9c9ee8f25082a3e670" prot="public" virt="non-virtual"><scope>BPath</scope><name>Append</name></member>
      <member refid="classBPath_1afd5d004c1cb0622546a18f316a68c807" prot="public" virt="non-virtual"><scope>BPath</scope><name>BPath</name></member>
      <member refid="classBPath_1a4e6b40dd0cee0996a63ba9b88b3d0b00" prot="public" virt="non-virtual"><scope>BPath</scope><name>BPath</name></member>
      <member refid="classBPath_1a1d37b9b75d5b7ff24ad40266b7b9dd9f" prot="public" virt="non-virtual"><scope>BPath</scope><name>BPath</name></member>
      <member refid="classBPath_1a053ee656e6da94e7226bbf7e343db5bb" prot="public" virt="non-virtual"><scope>BPath</scope><name>BPath</name></member>
      <member refid="classBPath_1a7d44e82248c6540b020fc2433533e572" prot="public" virt="non-virtual"><scope>BPath</scope><name>BPath</name></member>
      <member refid="classBPath_1a5ecced69773ff2c9941a4f015f627f9d" prot="public" virt="non-virtual"><scope>BPath</scope><name>BPath</name></member>
      <member refid="classBPath_1a007b204a2a58603143a626d1b52b17e4" prot="private" virt="non-virtual"><scope>BPath</scope><name>fCStatus</name></member>
      <member refid="classBPath_1a2866faf2cacac53e9d583f9a3dbd903c" prot="public" virt="virtual"><scope>BPath</scope><name>Flatten</name></member>
      <member refid="classBPath_1a5c77e3e9fb829249e9d1b6366f6d5520" prot="public" virt="virtual"><scope>BPath</scope><name>FlattenedSize</name></member>
      <member refid="classBPath_1a126c6dd3c7db6980d346d4f8c8c661bc" prot="private" virt="non-virtual"><scope>BPath</scope><name>fName</name></member>
      <member refid="classBPath_1a096cdfcd70db54b3c30fe76743ac4f1b" prot="public" virt="non-virtual"><scope>BPath</scope><name>GetParent</name></member>
      <member refid="classBPath_1a16c60cbaab02bb25cf8f690ebad2c48b" prot="public" virt="non-virtual"><scope>BPath</scope><name>InitCheck</name></member>
      <member refid="classBPath_1a456d6f1419fe00f376d1434d55d2432d" prot="public" virt="non-virtual"><scope>BPath</scope><name>IsAbsolute</name></member>
      <member refid="classBPath_1ac43f61c0280de191eef4adcf6a642437" prot="public" virt="virtual"><scope>BPath</scope><name>IsFixedSize</name></member>
      <member refid="classBPath_1aadae8a538bb405ea3850e32fb33b05f9" prot="public" virt="non-virtual"><scope>BPath</scope><name>Leaf</name></member>
      <member refid="classBPath_1a76995b964f1751539c60703eedfa3a85" prot="public" virt="non-virtual"><scope>BPath</scope><name>operator!=</name></member>
      <member refid="classBPath_1a02ac6810e4881f905703ce030af683fd" prot="public" virt="non-virtual"><scope>BPath</scope><name>operator!=</name></member>
      <member refid="classBPath_1a528ea14902d638e6a434f70177880a78" prot="public" virt="non-virtual"><scope>BPath</scope><name>operator=</name></member>
      <member refid="classBPath_1aed09ac7562d7a7f67c25f3ef1a8a562f" prot="public" virt="non-virtual"><scope>BPath</scope><name>operator=</name></member>
      <member refid="classBPath_1a3df539180ce332bebd6aa5b657b76254" prot="public" virt="non-virtual"><scope>BPath</scope><name>operator==</name></member>
      <member refid="classBPath_1ac50f789504a61cb9f90be71120d66508" prot="public" virt="non-virtual"><scope>BPath</scope><name>operator==</name></member>
      <member refid="classBPath_1aa8aba68bed27b256de14222fe6df227b" prot="public" virt="non-virtual"><scope>BPath</scope><name>Path</name></member>
      <member refid="classBPath_1a88b5935bf1bd2fe2c64c41baaaf6a6d7" prot="public" virt="non-virtual"><scope>BPath</scope><name>SetTo</name></member>
      <member refid="classBPath_1a17c725dfdc0f250b4ad95b567b6c1d2a" prot="public" virt="non-virtual"><scope>BPath</scope><name>SetTo</name></member>
      <member refid="classBPath_1a206afd69b062fc5c52be5459d386f9ae" prot="public" virt="non-virtual"><scope>BPath</scope><name>SetTo</name></member>
      <member refid="classBPath_1ac03159e0d8b645a24b5bb08bb46bd11b" prot="public" virt="non-virtual"><scope>BPath</scope><name>SetTo</name></member>
      <member refid="classBPath_1a05dc54fed4718135a3f55f476816f1cb" prot="public" virt="virtual"><scope>BPath</scope><name>TypeCode</name></member>
      <member refid="classBPath_1a437333127ec6d2e1037e72dd822afeca" prot="public" virt="virtual"><scope>BPath</scope><name>Unflatten</name></member>
      <member refid="classBPath_1ac9f197dd6bfe7f02c35beb9810ca15a8" prot="public" virt="non-virtual"><scope>BPath</scope><name>Unset</name></member>
      <member refid="classBFlattenable_1a884e130a5d27acc15b1e4e4c505157ff" prot="public" virt="virtual"><scope>BPath</scope><name>~BFlattenable</name></member>
      <member refid="classBPath_1a0ec9767088fad845ed3c71014bd4d789" prot="public" virt="virtual"><scope>BPath</scope><name>~BPath</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
