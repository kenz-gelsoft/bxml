<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBDirectory" kind="class" language="C++" prot="public">
    <compoundname>BDirectory</compoundname>
    <basecompoundref refid="classBNode" prot="public" virt="non-virtual">BNode</basecompoundref>
    <basecompoundref refid="classBEntryList" prot="public" virt="non-virtual">BEntryList</basecompoundref>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBDirectory_1a8e65bb0babd6817799ec151cf24d89be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BEntry</definition>
        <argsstring></argsstring>
        <name>BEntry</name>
        <qualifiedname>BDirectory::BEntry</qualifiedname>
        <param>
          <type><ref refid="classBEntry" kindref="compound">BEntry</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="66" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/Directory.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBDirectory_1acab6e35bd4a0082245f848f4d8a0c146" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BFile</definition>
        <argsstring></argsstring>
        <name>BFile</name>
        <qualifiedname>BDirectory::BFile</qualifiedname>
        <param>
          <type><ref refid="classBFile" kindref="compound">BFile</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="67" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/Directory.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBDirectory_1aaf4e0590cc96d07575def1866c170767" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BNode</definition>
        <argsstring></argsstring>
        <name>BNode</name>
        <qualifiedname>BDirectory::BNode</qualifiedname>
        <param>
          <type><ref refid="classBNode" kindref="compound">BNode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="65" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/Directory.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBDirectory_1a3c35b591f012715d4aa1c3df72502964" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BDirectory::_reservedData[7]</definition>
        <argsstring>[7]</argsstring>
        <name>_reservedData</name>
        <qualifiedname>BDirectory::_reservedData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="84" column="8" bodyfile="/boot/home/src/haiku/headers/os/storage/Directory.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBDirectory_1ae067e8100aa82d5c2ecdb708a0db51fa" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int BDirectory::fDirFd</definition>
        <argsstring></argsstring>
        <name>fDirFd</name>
        <qualifiedname>BDirectory::fDirFd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="85" column="5" bodyfile="/boot/home/src/haiku/headers/os/storage/Directory.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBDirectory_1a785e87332e1947d603f6df2b0d05b3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BDirectory::BDirectory</definition>
        <argsstring>()</argsstring>
        <name>BDirectory</name>
        <qualifiedname>BDirectory::BDirectory</qualifiedname>
        <briefdescription>
<para>Creates an uninitialized <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ab7f15aadd54d73b15872ecd035d1c4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BDirectory::BDirectory</definition>
        <argsstring>(const BDirectory &amp;dir)</argsstring>
        <name>BDirectory</name>
        <qualifiedname>BDirectory::BDirectory</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Creates a copy of the supplied <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object to be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a47f53e8bf964d1a19fd6ae03087adf3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BDirectory::BDirectory</definition>
        <argsstring>(const BDirectory *dir, const char *path)</argsstring>
        <name>BDirectory</name>
        <qualifiedname>BDirectory::BDirectory</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBDirectory" kindref="compound">BDirectory</ref> and initializes it to the directory referred to by the supplied path name relative to the specified <ref refid="classBDirectory" kindref="compound">BDirectory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>path</emphasis> of the directory relative to <emphasis>dir</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a7f27c8eade45a907ba3b7f47a7d9cba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BDirectory::BDirectory</definition>
        <argsstring>(const BEntry *entry)</argsstring>
        <name>BDirectory</name>
        <qualifiedname>BDirectory::BDirectory</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBDirectory" kindref="compound">BDirectory</ref> and initializes it to the directory referred to by the supplied <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> that refers to the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a389e65b24033d678255af171ca4de360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BDirectory::BDirectory</definition>
        <argsstring>(const char *path)</argsstring>
        <name>BDirectory</name>
        <qualifiedname>BDirectory::BDirectory</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBDirectory" kindref="compound">BDirectory</ref> and initializes it to the directory referred to by the supplied <emphasis>path</emphasis> name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>path</emphasis> name of the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a05ff779b68659c03e5572caa41d68736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BDirectory::BDirectory</definition>
        <argsstring>(const entry_ref *ref)</argsstring>
        <name>BDirectory</name>
        <qualifiedname>BDirectory::BDirectory</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBDirectory" kindref="compound">BDirectory</ref> and initializes it to the directory referred to by the supplied <ref refid="structentry__ref" kindref="compound">entry_ref</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structentry__ref" kindref="compound">entry_ref</ref> that refers to the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a7ee32ea09a7dff856d8287186a13e247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BDirectory::BDirectory</definition>
        <argsstring>(const node_ref *nref)</argsstring>
        <name>BDirectory</name>
        <qualifiedname>BDirectory::BDirectory</qualifiedname>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> *</type>
          <declname>nref</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBDirectory" kindref="compound">BDirectory</ref> and initializes it to the directory referred to by the supplied <ref refid="structnode__ref" kindref="compound">node_ref</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnode__ref" kindref="compound">node_ref</ref> that refers to the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a6cb87cbac26348cb35179f623046544b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BDirectory::~BDirectory</definition>
        <argsstring>()</argsstring>
        <name>~BDirectory</name>
        <qualifiedname>BDirectory::~BDirectory</qualifiedname>
        <briefdescription>
<para>Destroys the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>If the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> is properly initialized, the directory&apos;s file descriptor is closed.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="29" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a7c654287b2781a44d65f4a207829b0b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BDirectory::Contains</definition>
        <argsstring>(const BEntry *entry, int32 nodeFlags=B_ANY_NODE) const</argsstring>
        <name>Contains</name>
        <qualifiedname>BDirectory::Contains</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>nodeFlags</declname>
          <defval>B_ANY_NODE</defval>
        </param>
        <briefdescription>
<para>Returns whether or not this directory or any of its subdirectories at any level contain the entry referred to by the supplied <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Only entries that match the node flavor specified by <emphasis>nodeFlags</emphasis> are considered.</para>
<para><simplesect kind="note"><para>If the paths are identical, this method returns <computeroutput>true</computeroutput> to stay consistent with BeOS 5.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classBEntry" kindref="compound">BEntry</ref> referring to the entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodeFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Any of the following:<itemizedlist>
<listitem><para><computeroutput>B_FILE_NODE:</computeroutput> The entry must be a file.</para>
</listitem><listitem><para><computeroutput>B_DIRECTORY_NODE:</computeroutput> The entry must be a directory.</para>
</listitem><listitem><para><computeroutput>B_SYMLINK_NODE:</computeroutput> The entry must be a symbolic link.</para>
</listitem><listitem><para><computeroutput>B_ANY_NODE:</computeroutput> The entry may be of any kind.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> is properly initialized and the entry of the matching kind was found, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="45" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a5377f63f3451f96dbb39ed3b3c2fa454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BDirectory::Contains</definition>
        <argsstring>(const char *path, int32 nodeFlags=B_ANY_NODE) const</argsstring>
        <name>Contains</name>
        <qualifiedname>BDirectory::Contains</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>nodeFlags</declname>
          <defval>B_ANY_NODE</defval>
        </param>
        <briefdescription>
<para>Returns whether or not this directory or any of its subdirectories at any level contain the entry referred to by the supplied path name. </para>
        </briefdescription>
        <detaileddescription>
<para>Only entries that match the node flavor specified by <emphasis>nodeFlags</emphasis> are considered.</para>
<para>If the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> is not properly initialized, the method returns <computeroutput>false</computeroutput>. A non-absolute path is considered relative to the current directory.</para>
<para><simplesect kind="note"><para>BeOS R5&apos;s implementation always returns <computeroutput>true</computeroutput> given an absolute path or an initialized directory. This implementation is not compatible with that behavior. Instead it converts the path into a <ref refid="classBEntry" kindref="compound">BEntry</ref> and passes it to the other version of <ref refid="classBDirectory_1a5377f63f3451f96dbb39ed3b3c2fa454" kindref="member">Contains()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry&apos;s <emphasis>path</emphasis> name. May be relative to this directory or may be an absolute <emphasis>path</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodeFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Any of the following:<itemizedlist>
<listitem><para><computeroutput>B_FILE_NODE:</computeroutput> The entry must be a file.</para>
</listitem><listitem><para><computeroutput>B_DIRECTORY_NODE:</computeroutput> The entry must be a directory.</para>
</listitem><listitem><para><computeroutput>B_SYMLINK_NODE:</computeroutput> The entry must be a symbolic link.</para>
</listitem><listitem><para><computeroutput>B_ANY_NODE:</computeroutput> The entry may be of any kind.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the entry exists and its kind does match <emphasis>nodeFlags</emphasis> and the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> is properly initialized and does contain the entry at any level, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="44" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a9408e42d1c0683cd97991e8d3ac0b41f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BDirectory::CountEntries</definition>
        <argsstring>()</argsstring>
        <name>CountEntries</name>
        <qualifiedname>BDirectory::CountEntries</qualifiedname>
        <reimplements refid="classBEntryList_1a290b792f7b12265c10ba589aa969b862">CountEntries</reimplements>
        <briefdescription>
<para>Returns the number of entries in this directory. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classBDirectory_1a9408e42d1c0683cd97991e8d3ac0b41f" kindref="member">CountEntries()</ref> uses the directory iterator also used by <ref refid="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" kindref="member">GetNextEntry()</ref>, <ref refid="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" kindref="member">GetNextRef()</ref> and <ref refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" kindref="member">GetNextDirents()</ref>. It does a <ref refid="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" kindref="member">Rewind()</ref>, iterates through the entries and <ref refid="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" kindref="member">Rewind()</ref>s again. The entries &quot;.&quot; and &quot;..&quot; are not counted.</para>
<para><simplesect kind="return"><para>The number of entries in the directory (not counting &quot;.&quot; and &quot;..&quot;) or a status code on error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" kindref="member">BDirectory::GetNextEntry()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" kindref="member">BDirectory::GetNextRef()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" kindref="member">BDirectory::GetNextDirents()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" kindref="member">BDirectory::Rewind()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="54" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a7965b93bf1c47e5c1dd33c071ee325ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::CreateDirectory</definition>
        <argsstring>(const char *path, BDirectory *dir)</argsstring>
        <name>CreateDirectory</name>
        <qualifiedname>BDirectory::CreateDirectory</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Creates a new directory. </para>
        </briefdescription>
        <detaileddescription>
<para>If an entry with the supplied name already exists this method returns an error status code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The new path name of the directory. May be a relative path to this directory or an absolute path. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBDirectory" kindref="compound">BDirectory</ref> to be initialized to the newly created directory. May be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>path</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> does not refer to a possible entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_EXISTS</parametername>
</parameternamelist>
<parameterdescription>
<para>An entry with that name does already exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ad14b083e3e702ba8626552567022f0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::CreateFile</definition>
        <argsstring>(const char *path, BFile *file, bool failIfExists=false)</argsstring>
        <name>CreateFile</name>
        <qualifiedname>BDirectory::CreateFile</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classBFile" kindref="compound">BFile</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>failIfExists</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a new file. </para>
        </briefdescription>
        <detaileddescription>
<para>If a file with the supplied name does already exist, the method fails, unless it is passed <computeroutput>false</computeroutput> to <emphasis>failIfExists</emphasis> <ndash/> in that case the file is truncated to zero size. The new <ref refid="classBFile" kindref="compound">BFile</ref> will operate in <computeroutput>B_READ_WRITE</computeroutput> mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The new file&apos;s path name. May be relative to this directory or an absolute path. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBFile" kindref="compound">BFile</ref> to be initialized to the newly created file. May be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failIfExists</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to fail if the file already exists.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>path</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> does not refer to a possible entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_EXISTS</parametername>
</parameternamelist>
<parameterdescription>
<para>A file with that name does already exist and <computeroutput>true</computeroutput> has been passed for <emphasis>failIfExists</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_IS_A_DIRECTORY</parametername>
</parameternamelist>
<parameterdescription>
<para>A directory with the supplied name already exists. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a515a92f02cf5bcc7ef28bb9e33719476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::CreateSymLink</definition>
        <argsstring>(const char *path, const char *linkToPath, BSymLink *link)</argsstring>
        <name>CreateSymLink</name>
        <qualifiedname>BDirectory::CreateSymLink</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>linkToPath</declname>
        </param>
        <param>
          <type><ref refid="classBSymLink" kindref="compound">BSymLink</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Creates a new symbolic link. </para>
        </briefdescription>
        <detaileddescription>
<para>This method fails if an entry with the supplied name already exists.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the new symbolic link&apos;s path name. May be relative to this directory or absolute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkToPath</parametername>
</parameternamelist>
<parameterdescription>
<para>the path the symbolic link shall point to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a <ref refid="classBSymLink" kindref="compound">BSymLink</ref> to be initialized to the newly created symbolic link. May be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>path</emphasis> or <emphasis>linkToPath</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> does not refer to a possible entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_EXISTS</parametername>
</parameternamelist>
<parameterdescription>
<para>An entry with that name does already exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="59" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ad0e086ab2841d3ebc8f99dd716974dd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::FindEntry</definition>
        <argsstring>(const char *path, BEntry *entry, bool traverse=false) const</argsstring>
        <name>FindEntry</name>
        <qualifiedname>BDirectory::FindEntry</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Finds an entry referred to by a path relative to the directory represented by this <ref refid="classBDirectory" kindref="compound">BDirectory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>path</emphasis> may represent an absolute path. If the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> is not properly initialized then the entry is relative to the current directory. If the entry couldn&apos;t be found, <emphasis>entry</emphasis> is <ref refid="classBNode_1a53045ffc7e7c8bf97487d0de2e925cc2" kindref="member">Unset()</ref>.</para>
<para><simplesect kind="note"><para>The functionality of this method differs from BEntry::SetTo(BDirectory *, const char *, bool) in that it doesn&apos;t require the entry to exist, whereas this method does.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry&apos;s <emphasis>path</emphasis> name. May be relative to this directory or an absolute path. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBEntry" kindref="compound">BEntry</ref> to be initialized with the found entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to follow a symbolic link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>path</emphasis> or <emphasis>entry</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied path name (<emphasis>path</emphasis>) is too long. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NOT_A_DIRECTORY</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> includes a non-directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>BEntry::SetTo(BDirectory *, const char *, bool)</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="41" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ab0d42ac72c4e1e720143ebfccc3ff9c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::GetEntry</definition>
        <argsstring>(BEntry *entry) const</argsstring>
        <name>GetEntry</name>
        <qualifiedname>BDirectory::GetEntry</qualifiedname>
        <param>
          <type><ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Gets a <ref refid="classBEntry" kindref="compound">BEntry</ref> object referring to the directory. If the initialization of <emphasis>entry</emphasis> fails, it is <ref refid="classBNode_1a53045ffc7e7c8bf97487d0de2e925cc2" kindref="member">Unset()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <emphasis>entry</emphasis> that will refer to the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>entry</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="37" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BDirectory::GetNextDirents</definition>
        <argsstring>(dirent *buf, size_t bufSize, int32 count=INT_MAX)</argsstring>
        <name>GetNextDirents</name>
        <qualifiedname>BDirectory::GetNextDirents</qualifiedname>
        <reimplements refid="classBEntryList_1a2f8498249c876866d5f53a8b89044871">GetNextDirents</reimplements>
        <param>
          <type>dirent *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufSize</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
          <defval>INT_MAX</defval>
        </param>
        <briefdescription>
<para>Returns the next entries of the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object as a pointer to dirent structures. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" kindref="member">GetNextEntry()</ref> and <ref refid="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" kindref="member">GetNextRef()</ref>, this method returns also the entries &quot;.&quot; and &quot;..&quot;.</para>
<para><simplesect kind="note"><para>The iterator used by this method is the same one used by <ref refid="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" kindref="member">GetNextEntry()</ref>, <ref refid="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" kindref="member">GetNextRef()</ref>, <ref refid="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" kindref="member">Rewind()</ref> and <ref refid="classBDirectory_1a9408e42d1c0683cd97991e8d3ac0b41f" kindref="member">CountEntries()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer filled with dirent structures containing the found entries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <emphasis>buf</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of entries to be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of dirent structures stored in the buffer, 0 when there are no more entries to be returned or a status code on error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>buf</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry&apos;s name is too long for the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="51" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::GetNextEntry</definition>
        <argsstring>(BEntry *entry, bool traverse=false)</argsstring>
        <name>GetNextEntry</name>
        <qualifiedname>BDirectory::GetNextEntry</qualifiedname>
        <reimplements refid="classBEntryList_1a52e6c79344a6e511e7890f008e7281d1">GetNextEntry</reimplements>
        <param>
          <type><ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the next entry as a <ref refid="classBEntry" kindref="compound">BEntry</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" kindref="member">GetNextDirents()</ref> this method ignores &quot;.&quot; and &quot;..&quot;.</para>
<para><simplesect kind="note"><para>The iterator used by this method is the same one used by <ref refid="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" kindref="member">GetNextRef()</ref>, <ref refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" kindref="member">GetNextDirents()</ref>, <ref refid="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" kindref="member">Rewind()</ref> and <ref refid="classBDirectory_1a9408e42d1c0683cd97991e8d3ac0b41f" kindref="member">CountEntries()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBEntry" kindref="compound">BEntry</ref> to be initialized to the found entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether or not to follow a symbolic link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>entry</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No more entries found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="49" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::GetNextRef</definition>
        <argsstring>(entry_ref *ref)</argsstring>
        <name>GetNextRef</name>
        <qualifiedname>BDirectory::GetNextRef</qualifiedname>
        <reimplements refid="classBEntryList_1a908ff7149239ab66683b12b27be917ee">GetNextRef</reimplements>
        <param>
          <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classBDirectory" kindref="compound">BDirectory</ref>&apos;s next entry as an <ref refid="structentry__ref" kindref="compound">entry_ref</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" kindref="member">GetNextDirents()</ref> this method ignores &quot;.&quot; and &quot;..&quot;.</para>
<para><simplesect kind="note"><para>The iterator used be this method is the same one used by <ref refid="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" kindref="member">GetNextEntry()</ref>, <ref refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" kindref="member">GetNextDirents()</ref>, <ref refid="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" kindref="member">Rewind()</ref> and <ref refid="classBDirectory_1a9408e42d1c0683cd97991e8d3ac0b41f" kindref="member">CountEntries()</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an <ref refid="structentry__ref" kindref="compound">entry_ref</ref> to be filled in with the data from the found entry.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>ref</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No more entries found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="50" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a81d2641c7e077b3c092b2bdf6931d392" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::GetStatFor</definition>
        <argsstring>(const char *path, struct stat *st) const</argsstring>
        <name>GetStatFor</name>
        <qualifiedname>BDirectory::GetStatFor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct stat *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Returns the stat structure of the entry referred to by the supplied path name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry&apos;s path name. May be relative to this directory or absolute, or <computeroutput>NULL</computeroutput> to get the directories stat info. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the stat structure to be filled in by this method.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>st</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied path name (<emphasis>path</emphasis>) is too long. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NOT_A_DIRECTORY</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> includes a non-directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="47" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ac4733f649de3216a646837756168515f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BDirectory::IsRootDirectory</definition>
        <argsstring>() const</argsstring>
        <name>IsRootDirectory</name>
        <qualifiedname>BDirectory::IsRootDirectory</qualifiedname>
        <briefdescription>
<para>Returns whether the directory is the root directory of a volume. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> is properly initialized and represents a root directory of a volume, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="39" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ae5a911700daaae50e052463c03ca8fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBDirectory" kindref="compound">BDirectory</ref> &amp;</type>
        <definition>BDirectory &amp; BDirectory::operator=</definition>
        <argsstring>(const BDirectory &amp;dir)</argsstring>
        <name>operator=</name>
        <qualifiedname>BDirectory::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Assigns another <ref refid="classBDirectory" kindref="compound">BDirectory</ref> to this <ref refid="classBDirectory" kindref="compound">BDirectory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the passed in <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object is uninitialized, the returned object will be too. Otherwise it will refer to the same directory, unless an error occurs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The original <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="62" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::Rewind</definition>
        <argsstring>()</argsstring>
        <name>Rewind</name>
        <qualifiedname>BDirectory::Rewind</qualifiedname>
        <reimplements refid="classBEntryList_1a6cbcd041425e5a1225a762c72a4eb8af">Rewind</reimplements>
        <briefdescription>
<para>Rewinds the directory iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" kindref="member">BDirectory::GetNextEntry()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" kindref="member">BDirectory::GetNextRef()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" kindref="member">BDirectory::GetNextDirents()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBDirectory_1a9408e42d1c0683cd97991e8d3ac0b41f" kindref="member">BDirectory::CountEntries()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="53" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a4408f4b96d16fbed8c0aceebd2cf5885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::SetTo</definition>
        <argsstring>(const BDirectory *dir, const char *path)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BDirectory::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBDirectory" kindref="compound">BDirectory</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Re-initializes the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> to the directory referred to by the supplied path name relative to the specified <ref refid="classBDirectory" kindref="compound">BDirectory</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory path name relative to <emphasis>dir</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>dir</emphasis> or <emphasis>path</emphasis>, or <emphasis>path</emphasis> is absolute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied path name (<emphasis>path</emphasis>) is too long. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NOT_A_DIRECTORY</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> includes a non-directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="35" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1aa5ccde8f60a83e1eb9abeeeea26714a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::SetTo</definition>
        <argsstring>(const BEntry *entry)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BDirectory::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBEntry" kindref="compound">BEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Re-initializes the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> to the directory referred to by the supplied <ref refid="classBEntry" kindref="compound">BEntry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBEntry" kindref="compound">BEntry</ref> referring to the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>entry</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="33" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ae8b830116a1fbc5a79c1f65cd25aedac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::SetTo</definition>
        <argsstring>(const char *path)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BDirectory::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Re-initializes the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> to the directory referred to by the supplied path name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory&apos;s <emphasis>path</emphasis> name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>path</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_TOO_LONG</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied path name (<emphasis>path</emphasis>) is too long. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NOT_A_DIRECTORY</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>path</emphasis> includes a non-directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="34" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a850625e878c321af0e4b014e518d84ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::SetTo</definition>
        <argsstring>(const entry_ref *ref)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BDirectory::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Re-initializes the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> to the directory referred to by the supplied <ref refid="structentry__ref" kindref="compound">entry_ref</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structentry__ref" kindref="compound">entry_ref</ref> referring to the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>ref</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="31" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1adab78ee96777e45d92c1b1c3f110705d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::SetTo</definition>
        <argsstring>(const node_ref *nref)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BDirectory::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> *</type>
          <declname>nref</declname>
        </param>
        <briefdescription>
<para>Re-initializes the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> to the directory referred to by the supplied <ref refid="structnode__ref" kindref="compound">node_ref</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nref</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnode__ref" kindref="compound">node_ref</ref> referring to the directory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>nref</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory not found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_PERMISSION_DENIED</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory permissions didn&apos;t allow operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory for operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_LINK_LIMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates a cyclic loop within the file system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>A node was busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_FILE_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>A general file error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_FDS</parametername>
</parameternamelist>
<parameterdescription>
<para>The application has run out of file descriptors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="32" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBDirectory_1a0748f422d00384ff84b48cef08f0a7e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BDirectory::_ErectorDirectory1</definition>
        <argsstring>()</argsstring>
        <name>_ErectorDirectory1</name>
        <qualifiedname>BDirectory::_ErectorDirectory1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="72" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1aecb4efdc57633942cc8592de5b71aa8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BDirectory::_ErectorDirectory2</definition>
        <argsstring>()</argsstring>
        <name>_ErectorDirectory2</name>
        <qualifiedname>BDirectory::_ErectorDirectory2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="73" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ad4667546b65f15f79421d08d27617a0b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BDirectory::_ErectorDirectory3</definition>
        <argsstring>()</argsstring>
        <name>_ErectorDirectory3</name>
        <qualifiedname>BDirectory::_ErectorDirectory3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="74" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a59f7e50507a1c7d6f97ceb192dfcf7ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BDirectory::_ErectorDirectory4</definition>
        <argsstring>()</argsstring>
        <name>_ErectorDirectory4</name>
        <qualifiedname>BDirectory::_ErectorDirectory4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="75" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1afa9c80494ec0bf85c0d0d1d04909f0db" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BDirectory::_ErectorDirectory5</definition>
        <argsstring>()</argsstring>
        <name>_ErectorDirectory5</name>
        <qualifiedname>BDirectory::_ErectorDirectory5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="76" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1ad60eccd6d8180c7a7e86fecc3c51472e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BDirectory::_ErectorDirectory6</definition>
        <argsstring>()</argsstring>
        <name>_ErectorDirectory6</name>
        <qualifiedname>BDirectory::_ErectorDirectory6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="77" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a12a68e0db12ca75f4132294092089f86" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::_GetStatFor</definition>
        <argsstring>(const char *path, struct stat *st) const</argsstring>
        <name>_GetStatFor</name>
        <qualifiedname>BDirectory::_GetStatFor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct stat *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="69" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1af083c82fbc0e63fc56b932e13c5b7beb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BDirectory::_GetStatFor</definition>
        <argsstring>(const char *path, struct stat_beos *st) const</argsstring>
        <name>_GetStatFor</name>
        <qualifiedname>BDirectory::_GetStatFor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct stat_beos *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="70" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1aa719442ee7958468fb2bb2c2b50747a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BDirectory::close_fd</definition>
        <argsstring>()</argsstring>
        <name>close_fd</name>
        <qualifiedname>BDirectory::close_fd</qualifiedname>
        <reimplements refid="classBNode_1a41fec1b8b693a7a8d835909ae50e163f">close_fd</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="80" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBDirectory_1a16218c2080a3f6b306851b01c82e2fe7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BDirectory::get_fd</definition>
        <argsstring>() const</argsstring>
        <name>get_fd</name>
        <qualifiedname>BDirectory::get_fd</qualifiedname>
        <briefdescription>
<para>Returns the file descriptor of the <ref refid="classBDirectory" kindref="compound">BDirectory</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method should be used instead of accessing the private <computeroutput>fDirFd</computeroutput> member directly.</para>
<para><simplesect kind="return"><para>the file descriptor, or -1 if not properly initialized.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="81" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A directory in the file system. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BDirectory</label>
        <link refid="classBDirectory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BEntryList</label>
        <link refid="classBEntryList"/>
      </node>
      <node id="2">
        <label>BNode</label>
        <link refid="classBNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BStatable</label>
        <link refid="classBStatable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BDirectory</label>
        <link refid="classBDirectory"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BEntryList</label>
        <link refid="classBEntryList"/>
      </node>
      <node id="2">
        <label>BNode</label>
        <link refid="classBNode"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BStatable</label>
        <link refid="classBStatable"/>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/storage/Directory.h" line="19" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/Directory.h" bodystart="19" bodyend="86"/>
    <listofallmembers>
      <member refid="classBDirectory_1a0748f422d00384ff84b48cef08f0a7e0" prot="private" virt="virtual"><scope>BDirectory</scope><name>_ErectorDirectory1</name></member>
      <member refid="classBDirectory_1aecb4efdc57633942cc8592de5b71aa8c" prot="private" virt="virtual"><scope>BDirectory</scope><name>_ErectorDirectory2</name></member>
      <member refid="classBDirectory_1ad4667546b65f15f79421d08d27617a0b" prot="private" virt="virtual"><scope>BDirectory</scope><name>_ErectorDirectory3</name></member>
      <member refid="classBDirectory_1a59f7e50507a1c7d6f97ceb192dfcf7ee" prot="private" virt="virtual"><scope>BDirectory</scope><name>_ErectorDirectory4</name></member>
      <member refid="classBDirectory_1afa9c80494ec0bf85c0d0d1d04909f0db" prot="private" virt="virtual"><scope>BDirectory</scope><name>_ErectorDirectory5</name></member>
      <member refid="classBDirectory_1ad60eccd6d8180c7a7e86fecc3c51472e" prot="private" virt="virtual"><scope>BDirectory</scope><name>_ErectorDirectory6</name></member>
      <member refid="classBDirectory_1a12a68e0db12ca75f4132294092089f86" prot="private" virt="non-virtual"><scope>BDirectory</scope><name>_GetStatFor</name></member>
      <member refid="classBDirectory_1af083c82fbc0e63fc56b932e13c5b7beb" prot="private" virt="non-virtual"><scope>BDirectory</scope><name>_GetStatFor</name></member>
      <member refid="classBDirectory_1a3c35b591f012715d4aa1c3df72502964" prot="private" virt="non-virtual"><scope>BDirectory</scope><name>_reservedData</name></member>
      <member refid="classBDirectory_1a785e87332e1947d603f6df2b0d05b3bb" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BDirectory</name></member>
      <member refid="classBDirectory_1ab7f15aadd54d73b15872ecd035d1c4c9" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BDirectory</name></member>
      <member refid="classBDirectory_1a05ff779b68659c03e5572caa41d68736" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BDirectory</name></member>
      <member refid="classBDirectory_1a7ee32ea09a7dff856d8287186a13e247" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BDirectory</name></member>
      <member refid="classBDirectory_1a7f27c8eade45a907ba3b7f47a7d9cba0" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BDirectory</name></member>
      <member refid="classBDirectory_1a389e65b24033d678255af171ca4de360" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BDirectory</name></member>
      <member refid="classBDirectory_1a47f53e8bf964d1a19fd6ae03087adf3b" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BDirectory</name></member>
      <member refid="classBEntryList_1adf5344c4229922691642b6e07c29bcaa" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BEntryList</name></member>
      <member refid="classBNode_1a4c41333d8fc73a6c9f37f77ae7418528" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BNode</name></member>
      <member refid="classBNode_1a3ba1cd7e2d530124350485de1ccffbf6" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BNode</name></member>
      <member refid="classBNode_1a2c8fd63c3e0e0d6d7596c1ca9c02cfc7" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BNode</name></member>
      <member refid="classBNode_1acfd887aa410f42347482347672de19c0" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BNode</name></member>
      <member refid="classBNode_1a959e6d749cdd455524fec3a5feca6008" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BNode</name></member>
      <member refid="classBNode_1a4cb06c36614e334a2ce3f132188f0b33" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>BNode</name></member>
      <member refid="classBDirectory_1aa719442ee7958468fb2bb2c2b50747a7" prot="private" virt="virtual"><scope>BDirectory</scope><name>close_fd</name></member>
      <member refid="classBDirectory_1a5377f63f3451f96dbb39ed3b3c2fa454" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>Contains</name></member>
      <member refid="classBDirectory_1a7c654287b2781a44d65f4a207829b0b6" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>Contains</name></member>
      <member refid="classBDirectory_1a9408e42d1c0683cd97991e8d3ac0b41f" prot="public" virt="virtual"><scope>BDirectory</scope><name>CountEntries</name></member>
      <member refid="classBDirectory_1a7965b93bf1c47e5c1dd33c071ee325ba" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>CreateDirectory</name></member>
      <member refid="classBDirectory_1ad14b083e3e702ba8626552567022f0b2" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>CreateFile</name></member>
      <member refid="classBDirectory_1a515a92f02cf5bcc7ef28bb9e33719476" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>CreateSymLink</name></member>
      <member refid="classBNode_1a74637e73a9f75f68eb8455ad2b1d920a" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>Dup</name></member>
      <member refid="classBDirectory_1ae067e8100aa82d5c2ecdb708a0db51fa" prot="private" virt="non-virtual"><scope>BDirectory</scope><name>fDirFd</name></member>
      <member refid="classBDirectory_1ad0e086ab2841d3ebc8f99dd716974dd4" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>FindEntry</name></member>
      <member refid="classBDirectory_1a16218c2080a3f6b306851b01c82e2fe7" prot="private" virt="non-virtual"><scope>BDirectory</scope><name>get_fd</name></member>
      <member refid="classBStatable_1a55dea9fb7be6e844b6515f73ee0a929a" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetAccessTime</name></member>
      <member refid="classBNode_1a57b7c93cbf40df5b76b3c1aae2ad0201" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetAttrInfo</name></member>
      <member refid="classBStatable_1ac80b82a49b8c757d4bf0034d70c33eb1" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetCreationTime</name></member>
      <member refid="classBDirectory_1ab0d42ac72c4e1e720143ebfccc3ff9c1" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetEntry</name></member>
      <member refid="classBStatable_1ab27d67f089c0c4bd14cdc48f57c51a17" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetGroup</name></member>
      <member refid="classBStatable_1a5571998c1d3ca9a59ad521556b3dee63" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetModificationTime</name></member>
      <member refid="classBNode_1a7ce18e673746f0f2c385ec533f10a015" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetNextAttrName</name></member>
      <member refid="classBDirectory_1ad163bac44f24104b1cd336487114e2fe" prot="public" virt="virtual"><scope>BDirectory</scope><name>GetNextDirents</name></member>
      <member refid="classBDirectory_1afc19ccbfe069ccd6d800d368eab24008" prot="public" virt="virtual"><scope>BDirectory</scope><name>GetNextEntry</name></member>
      <member refid="classBDirectory_1a915d4da2de8eebd949f9feb2d3407c32" prot="public" virt="virtual"><scope>BDirectory</scope><name>GetNextRef</name></member>
      <member refid="classBStatable_1ad22f2b8b8b11b151bc94d63caeb16c95" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetNodeRef</name></member>
      <member refid="classBStatable_1ae8cb57200fbeac9941622a33705d64a4" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetOwner</name></member>
      <member refid="classBStatable_1a6a8b0225646734f4528858c72a5f9073" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetPermissions</name></member>
      <member refid="classBStatable_1a52975e361937ae26f7c854da34e6e51a" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetSize</name></member>
      <member refid="classBNode_1aa8c7b4e488e8077aabc8f5fbe4504189" prot="public" virt="virtual"><scope>BDirectory</scope><name>GetStat</name></member>
      <member refid="classBDirectory_1a81d2641c7e077b3c092b2bdf6931d392" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetStatFor</name></member>
      <member refid="classBStatable_1a2488e774eaa96bf07ae6156ea320fc0a" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>GetVolume</name></member>
      <member refid="classBNode_1a8d1e28412f778e344e539946268fd03a" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>InitCheck</name></member>
      <member refid="classBStatable_1a853345d2d3673b47f59dd655b6a3adca" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>IsDirectory</name></member>
      <member refid="classBStatable_1acaa5a30c8a6ee1f8854a787958d13eaf" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>IsFile</name></member>
      <member refid="classBDirectory_1ac4733f649de3216a646837756168515f" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>IsRootDirectory</name></member>
      <member refid="classBStatable_1aa07af7f2d36c453d00e101bc6c6a487e" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>IsSymLink</name></member>
      <member refid="classBNode_1ac323c1303a20a0eb21c11185bfc18039" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>Lock</name></member>
      <member refid="classBNode_1a9fd78c56dd4a25fffc5d9f8f4ce7a594" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>operator!=</name></member>
      <member refid="classBDirectory_1ae5a911700daaae50e052463c03ca8fb7" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>operator=</name></member>
      <member refid="classBNode_1a690260cffeb7310ecb0461ecc118e402" prot="public" virt="non-virtual" ambiguityscope="BNode::"><scope>BDirectory</scope><name>operator=</name></member>
      <member refid="classBNode_1a19e5f2559d1a8649ad103cb559150897" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>operator==</name></member>
      <member refid="classBNode_1a6ae0c729e21a32902b13d0c00b53abc2" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>ReadAttr</name></member>
      <member refid="classBNode_1a92f9e44a87a4c5b2f20d8f6a2be89d5b" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>ReadAttrString</name></member>
      <member refid="classBNode_1a29fec4dac3d10f0459f7d3eb333aaf76" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>RemoveAttr</name></member>
      <member refid="classBNode_1adacbbc1aef867abbf05c1f64941561bb" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>RenameAttr</name></member>
      <member refid="classBDirectory_1a741e1b95a65ce83edad07baa11e5aa81" prot="public" virt="virtual"><scope>BDirectory</scope><name>Rewind</name></member>
      <member refid="classBNode_1a8848d2958c140f67e616415836835260" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>RewindAttrs</name></member>
      <member refid="classBStatable_1aab2c65df1f1459d014a0a2ba9638411e" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetAccessTime</name></member>
      <member refid="classBStatable_1a6a92b04cda608babf49f70ef4e3a2f36" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetCreationTime</name></member>
      <member refid="classBStatable_1af6e5ac17688536b3de2940a82349d043" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetGroup</name></member>
      <member refid="classBStatable_1a1f2b84cea7b32a238b41f97e0264a048" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetModificationTime</name></member>
      <member refid="classBStatable_1a640ef9862775efaa6720691ed4b58256" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetOwner</name></member>
      <member refid="classBStatable_1aaf215f1b31486d4fd65dd96229b26f97" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetPermissions</name></member>
      <member refid="classBDirectory_1a850625e878c321af0e4b014e518d84ff" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetTo</name></member>
      <member refid="classBDirectory_1adab78ee96777e45d92c1b1c3f110705d" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetTo</name></member>
      <member refid="classBDirectory_1aa5ccde8f60a83e1eb9abeeeea26714a1" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetTo</name></member>
      <member refid="classBDirectory_1ae8b830116a1fbc5a79c1f65cd25aedac" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetTo</name></member>
      <member refid="classBDirectory_1a4408f4b96d16fbed8c0aceebd2cf5885" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>SetTo</name></member>
      <member refid="classBNode_1a14e67d77c99a4ede2a0bc2fe2bc46da5" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>Sync</name></member>
      <member refid="classBNode_1af1aed40f239513e1001af2ee543dd9ec" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>Unlock</name></member>
      <member refid="classBNode_1a53045ffc7e7c8bf97487d0de2e925cc2" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>Unset</name></member>
      <member refid="classBNode_1a48b845ef1eafdc729ca672bb112bf873" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>WriteAttr</name></member>
      <member refid="classBNode_1aae3517eb2583c13ccf60e9488d5a198d" prot="public" virt="non-virtual"><scope>BDirectory</scope><name>WriteAttrString</name></member>
      <member refid="classBDirectory_1a6cb87cbac26348cb35179f623046544b" prot="public" virt="virtual"><scope>BDirectory</scope><name>~BDirectory</name></member>
      <member refid="classBEntryList_1ac239f4229be2d0a1c9a58c83f503be4c" prot="public" virt="virtual"><scope>BDirectory</scope><name>~BEntryList</name></member>
      <member refid="classBNode_1a2be9ef05bc8dc34f17982736a38e1adf" prot="public" virt="virtual"><scope>BDirectory</scope><name>~BNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
