<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMessenger" kind="class" language="C++" prot="public">
    <compoundname>BMessenger</compoundname>
      <sectiondef kind="user-defined">
      <header>Target</header>
      <memberdef kind="function" id="classBMessenger_1ac0b8b1360dd6ed6c0edf8def5ef390b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessenger::IsTargetLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsTargetLocal</name>
        <qualifiedname>BMessenger::IsTargetLocal</qualifiedname>
        <briefdescription>
<para>Returns whether the messenger and target belong to the same team. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the messenger is properly initialized and its target belong ot the same team, <computeroutput>false</computeroutput> if they reside in separate address spaces.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="34" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a763e36f482699e201795a04b39aabf1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>BHandler * BMessenger::Target</definition>
        <argsstring>(BLooper **looper) const</argsstring>
        <name>Target</name>
        <qualifiedname>BMessenger::Target</qualifiedname>
        <param>
          <type><ref refid="classBLooper" kindref="compound">BLooper</ref> **</type>
          <declname>looper</declname>
          <defname>_looper</defname>
        </param>
        <briefdescription>
<para>Returns the handler and looper targeted by the messenger (if the target is local). </para>
        </briefdescription>
        <detaileddescription>
<para>The handler is returned directly, the looper by reference. If both are <computeroutput>NULL</computeroutput>, the object is either not properly initialized, the target objects have been deleted or the target is remote. If only the returned handler is <computeroutput>NULL</computeroutput>, either the looper&apos;s preferred handler is targeted or the handler has been deleted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_looper</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBLooper" kindref="compound">BLooper</ref> pointer into which the pointer to the targeted looper is written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classBHandler" kindref="compound">BHandler</ref> targeted by the messenger.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="35" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a2a5eecda17bf16a4981db49a0d5773f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessenger::LockTarget</definition>
        <argsstring>() const</argsstring>
        <name>LockTarget</name>
        <qualifiedname>BMessenger::LockTarget</qualifiedname>
        <briefdescription>
<para>Locks the <ref refid="classBLooper" kindref="compound">BLooper</ref> targeted by the messenger (if the target is local). </para>
        </briefdescription>
        <detaileddescription>
<para>This method is a shorthand for retrieving the targeted looper via <ref refid="classBMessenger_1a763e36f482699e201795a04b39aabf1a" kindref="member">Target()</ref> and calling <ref refid="classBLooper_1a757a3e406ea3b7bb9a1ad16d04689b1d" kindref="member">BLooper::Lock()</ref> on the looper afterwards.</para>
<para><simplesect kind="see"><para><ref refid="classBLooper_1a757a3e406ea3b7bb9a1ad16d04689b1d" kindref="member">BLooper::Lock()</ref> for details.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the looper was locked successfully, <computeroutput>false</computeroutput>, if the messenger was not properly initialized, the target was remote, or the targeted looper was invalid.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="36" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1ab568c74c5ea2be4a5c684613f9116505" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::LockTargetWithTimeout</definition>
        <argsstring>(bigtime_t timeout) const</argsstring>
        <name>LockTargetWithTimeout</name>
        <qualifiedname>BMessenger::LockTargetWithTimeout</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Locks the <ref refid="classBLooper" kindref="compound">BLooper</ref> targeted by the messenger with a <emphasis>timeout</emphasis> (if the target is local). </para>
        </briefdescription>
        <detaileddescription>
<para>This method is a shorthand for retrieving the targeted looper via <ref refid="classBMessenger_1a763e36f482699e201795a04b39aabf1a" kindref="member">Target()</ref> and calling <ref refid="classBLooper_1a734cdb06bfe92efdea24528c9b43bfc1" kindref="member">BLooper::LockWithTimeout()</ref> on the looper afterwards.</para>
<para><simplesect kind="see"><para><ref refid="classBLooper_1a734cdb06bfe92efdea24528c9b43bfc1" kindref="member">BLooper::LockWithTimeout()</ref> for details.</para>
</simplesect>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise, all other error codes returned by <ref refid="classBLooper_1a734cdb06bfe92efdea24528c9b43bfc1" kindref="member">BLooper::LockWithTimeout()</ref>. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>if the looper could be locked successfully, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>if the messenger is not properly initialized, the target is remote, or the targeted looper is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBLooper_1a734cdb06bfe92efdea24528c9b43bfc1" kindref="member">BLooper::LockWithTimeout()</ref> for more error codes.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="37" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SendMessage</header>
      <memberdef kind="function" id="classBMessenger_1aebe5aba546fa4a4696988b1bf6028f3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::SendMessage</definition>
        <argsstring>(uint32 command, BHandler *replyTo=NULL) const</argsstring>
        <name>SendMessage</name>
        <qualifiedname>BMessenger::SendMessage</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>replyTo</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Delivers a <ref refid="classBMessage" kindref="compound">BMessage</ref> with <emphasis>command</emphasis> <computeroutput>what</computeroutput> identifier to the messenger&apos;s target. A response may be sent to the <emphasis>replyTo</emphasis> handler asynchronously. </para>
        </briefdescription>
        <detaileddescription>
<para>If the target&apos;s message port is full, the method waits indefinitely, until space becomes available in the port. After delivery the method returns immediately. It does not wait until the target processes the message or even sends a reply.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The what field of the message to deliver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTo</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler to which a reply to the message shall be sent. May be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_PORT_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The messenger is not properly initialized or its target doesn&apos;t exist anymore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1afee0227707703adc712c2b8e4064d45a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::SendMessage</definition>
        <argsstring>(BMessage *message, BHandler *replyTo=NULL, bigtime_t timeout=B_INFINITE_TIMEOUT) const</argsstring>
        <name>SendMessage</name>
        <qualifiedname>BMessenger::SendMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>replyTo</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>Delivers a <emphasis>message</emphasis> to the messenger&apos;s target. A response message may be sent back to the <emphasis>replyTo</emphasis> handler asynchronously. </para>
        </briefdescription>
        <detaileddescription>
<para>A copy of the supplied message is sent and the caller retains ownership of <emphasis>message</emphasis>.</para>
<para>If the target&apos;s message port is full, the method waits until space becomes available in the port or the specified timeout occurs (whichever happens first). After delivery the method returns immediately. It does not wait until the target processes the message or even sends a reply.</para>
<para>This method does not return by default until the message has been delivered. You can set a delivery <emphasis>timeout</emphasis> in microseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTo</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler for a response message to be sent. May be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The message delivery timeout in microseconds. (optional)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_PORT_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The messenger was not properly initialized or its target didn&apos;t exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_WOULD_BLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>A delivery timeout of 0 was supplied and the target port was full when trying to deliver the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_TIMED_OUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout expired while trying to deliver the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="44" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1ad1ac7efa3b7193245908adc7f293fb93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::SendMessage</definition>
        <argsstring>(BMessage *message, BMessenger replyTo, bigtime_t timeout=B_INFINITE_TIMEOUT) const</argsstring>
        <name>SendMessage</name>
        <qualifiedname>BMessenger::SendMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>replyTo</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>Delivers a <emphasis>message</emphasis> to the messenger&apos;s target. A response message may be sent back to the <emphasis>replyTo</emphasis> messenger&apos;s target asynchronously. </para>
        </briefdescription>
        <detaileddescription>
<para>A copy of the supplied message is sent and the caller retains ownership of <emphasis>message</emphasis>.</para>
<para>If the target&apos;s message port is full, the method waits until space becomes available in the port or the specified timeout occurs (whichever happens first). After delivery the method returns immediately. It does not wait until the target processes the message or even sends a reply.</para>
<para>This method does not return by default until the message has been delivered. You can set a delivery <emphasis>timeout</emphasis> in microseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTo</parametername>
</parameternamelist>
<parameterdescription>
<para>A messenger specifying the target for a response message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The message delivery timeout in microseconds. (optional)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_PORT_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The messenger was not properly initialized or its target didn&apos;t exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_WOULD_BLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>A delivery timeout of 0 was supplied and the target port was full when trying to deliver the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_TIMED_OUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout expired while trying to deliver the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="48" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a3d305370d4df56903c881cf083a655ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::SendMessage</definition>
        <argsstring>(uint32 command, BMessage *reply) const</argsstring>
        <name>SendMessage</name>
        <qualifiedname>BMessenger::SendMessage</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>reply</declname>
        </param>
        <briefdescription>
<para>Delivers a <ref refid="classBMessage" kindref="compound">BMessage</ref> with <emphasis>command</emphasis> <computeroutput>what</computeroutput> identifier to the messenger&apos;s target and waits for a <emphasis>reply</emphasis> <ref refid="classBMessage" kindref="compound">BMessage</ref> synchronously. </para>
        </briefdescription>
        <detaileddescription>
<para>The method does wait for a reply. The reply message is copied into <emphasis>reply</emphasis>. If the target doesn&apos;t send a reply, the <computeroutput>what</computeroutput> field of <emphasis>reply</emphasis> is set to <computeroutput>B_NO_REPLY</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The what field of the message to deliver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reply</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> object which the reply message will be copied into.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_PORT_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The messenger was not properly initialized or its target didn&apos;t exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_PORTS</parametername>
</parameternamelist>
<parameterdescription>
<para>All reply ports were in use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="52" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a18c896b7957702a5b44a080300ab7cef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::SendMessage</definition>
        <argsstring>(BMessage *message, BMessage *reply, bigtime_t deliveryTimeout=B_INFINITE_TIMEOUT, bigtime_t replyTimeout=B_INFINITE_TIMEOUT) const</argsstring>
        <name>SendMessage</name>
        <qualifiedname>BMessenger::SendMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>reply</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>deliveryTimeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>replyTimeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>Delivers a <emphasis>message</emphasis> to the messenger&apos;s target and waits for a <emphasis>reply</emphasis> to come back synchronously. </para>
        </briefdescription>
        <detaileddescription>
<para>A copy of the supplied message is sent and the caller retains ownership of <emphasis>message</emphasis>.</para>
<para>The method does wait for a reply. The reply message is copied into <emphasis>reply</emphasis>. If the target doesn&apos;t send a reply or if a reply timeout occurs, the <computeroutput>what</computeroutput> field of <emphasis>reply</emphasis> is set to <computeroutput>B_NO_REPLY</computeroutput>.</para>
<para>This method does not return by default until the message has been delivered and the reply has come back. You can set a <emphasis>deliveryTimeout</emphasis> and a <emphasis>replyTimeout</emphasis> in microseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to be sent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reply</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> which the reply message will be copied into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deliveryTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The message delivery timeout in microseconds. (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The reply message timeout in microseconds. (optional)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_PORT_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The messenger was not properly initialized or its target didn&apos;t exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_WOULD_BLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>A delivery timeout of 0 was supplied and the target port was full when trying to deliver the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_TIMED_OUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout expired while trying to deliver the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_PORTS</parametername>
</parameternamelist>
<parameterdescription>
<para>All reply ports were in use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="54" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>SetTo</header>
      <memberdef kind="function" id="classBMessenger_1a24f7642b053481247cdbaa17068f38f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::SetTo</definition>
        <argsstring>(const char *signature, team_id team=-1)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BMessenger::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>team_id</type>
          <declname>team</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Reinitializes a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> to target the already running application identified by the supplied signature and/or team ID. </para>
        </briefdescription>
        <detaileddescription>
<para>When only a signature is given, and multiple instances of the application are running it is indeterminate which one is chosen as the target. In case only a team ID is passed, the target application is identified uniquely. If both are supplied, the application identified by the team ID must have a matching signature, otherwise the initialization fails.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The target application&apos;s signature. May be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>team</parametername>
</parameternamelist>
<parameterdescription>
<para>The target application&apos;s team ID. May be negative.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if the reinitialization was successful or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The reinitialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>No application with the given <emphasis>signature</emphasis> or <emphasis>team</emphasis> ID was running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>No <emphasis>team</emphasis> ID was given and the <emphasis>signature</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_MISMATCHED_VALUES</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied <emphasis>signature</emphasis> and the signature of the team didn&apos;t match.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="63" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1ad7a2b0adc3affbdad8090308ec8e1892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessenger::SetTo</definition>
        <argsstring>(const BHandler *handler, const BLooper *looper=NULL)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BMessenger::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const <ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
          <declname>looper</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Reinitializes a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> to target the local <ref refid="classBHandler" kindref="compound">BHandler</ref> and/or <ref refid="classBLooper" kindref="compound">BLooper</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <computeroutput>NULL</computeroutput> handler is supplied, the preferred handler in the given looper is targeted. If no looper is supplied the looper the given handler belongs to is used <ndash/> that means in particular, that the handler must already belong to a looper. If both are supplied the handler must actually belong to looper.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The target handler. May be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>looper</parametername>
</parameternamelist>
<parameterdescription>
<para>The target looper. May be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if the reinitialization was successful or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The reinitialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Both <emphasis>handler</emphasis> and <emphasis>looper</emphasis> were <computeroutput>NULL</computeroutput> or invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_MISMATCHED_VALUES</parametername>
</parameternamelist>
<parameterdescription>
<para>The looper of the supplied <emphasis>handler</emphasis> and <emphasis>looper</emphasis> didn&apos;t match.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="65" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="classBMessenger_1afc7c0f773cff59935505bf5d57c82f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
        <definition>BMessenger &amp; BMessenger::operator=</definition>
        <argsstring>(const BMessenger &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BMessenger::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator, makes this <ref refid="classBMessenger" kindref="compound">BMessenger</ref> a copy of <emphasis>other</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the messenger to be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this object.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="68" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1ac5227eb37527e0fb53ecfad6a95cc1bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessenger::operator==</definition>
        <argsstring>(const BMessenger &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BMessenger::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator, returns whether this and <emphasis>other</emphasis> have the same target. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The messenger to be compared to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the messengers have the same target or if both aren&apos;t properly initialized, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="69" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBMessenger_1ac96b60d37bd806132da680e187dc2288" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Private</definition>
        <argsstring></argsstring>
        <name>Private</name>
        <qualifiedname>BMessenger::Private</qualifiedname>
        <param>
          <type>Private</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="81" column="14" bodyfile="/boot/home/src/haiku/headers/os/app/Messenger.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMessenger_1a2d0b9a28df08f35b185a909aca9e76c9" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMessenger::_reserved[3]</definition>
        <argsstring>[3]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMessenger::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="96" column="6" bodyfile="/boot/home/src/haiku/headers/os/app/Messenger.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessenger_1a3e27ec75ac0d4f74afd3d4fa488da673" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMessenger::fHandlerToken</definition>
        <argsstring></argsstring>
        <name>fHandlerToken</name>
        <qualifiedname>BMessenger::fHandlerToken</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="93" column="6" bodyfile="/boot/home/src/haiku/headers/os/app/Messenger.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessenger_1aa6d688e2262c10f5cf46b5dc01f298f8" prot="private" static="no" mutable="no">
        <type>port_id</type>
        <definition>port_id BMessenger::fPort</definition>
        <argsstring></argsstring>
        <name>fPort</name>
        <qualifiedname>BMessenger::fPort</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="92" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Messenger.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessenger_1a191aa7abecd1ae9500243661080e1ecc" prot="private" static="no" mutable="no">
        <type>team_id</type>
        <definition>team_id BMessenger::fTeam</definition>
        <argsstring></argsstring>
        <name>fTeam</name>
        <qualifiedname>BMessenger::fTeam</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="94" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Messenger.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMessenger_1a369f2de1289d74e8459d1c04ace3caa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessenger::BMessenger</definition>
        <argsstring>()</argsstring>
        <name>BMessenger</name>
        <qualifiedname>BMessenger::BMessenger</qualifiedname>
        <briefdescription>
<para>Creates an uninitialized <ref refid="classBMessenger" kindref="compound">BMessenger</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a48dceac75712d5cd8853d62d031e4dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessenger::BMessenger</definition>
        <argsstring>(const BHandler *handler, const BLooper *looper=NULL, status_t *result=NULL)</argsstring>
        <name>BMessenger</name>
        <qualifiedname>BMessenger::BMessenger</qualifiedname>
        <param>
          <type>const <ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const <ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
          <declname>looper</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref> *</type>
          <declname>result</declname>
          <defname>_result</defname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> and initializes it to target the local <ref refid="classBHandler" kindref="compound">BHandler</ref> and/or <ref refid="classBLooper" kindref="compound">BLooper</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <computeroutput>NULL</computeroutput> <emphasis>handler</emphasis> is supplied, the preferred handler in the <emphasis>looper</emphasis> is targeted. If no <emphasis>looper</emphasis> is supplied the looper that <emphasis>handler</emphasis> belongs to is used instead <ndash/> that means in particular, that the <emphasis>handler</emphasis> must already belong to a looper. If both are supplied the <emphasis>handler</emphasis> must belong to the <emphasis>looper</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The target handler. May be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>looper</parametername>
</parameternamelist>
<parameterdescription>
<para>The target looper. May be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_result</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to a pre-allocated status_t into which the result of the initialization is written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a8357653912eb9acce80ff4fb9011d0c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessenger::BMessenger</definition>
        <argsstring>(const BMessenger &amp;other)</argsstring>
        <name>BMessenger</name>
        <qualifiedname>BMessenger::BMessenger</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> and initializes it to have the same target as the supplied messenger. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a9a97e301b9c9cabb816a9b74e94ff237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessenger::BMessenger</definition>
        <argsstring>(const char *signature, team_id team=-1, status_t *result=NULL)</argsstring>
        <name>BMessenger</name>
        <qualifiedname>BMessenger::BMessenger</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>team_id</type>
          <declname>team</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref> *</type>
          <declname>result</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> and initializes it to target the already running application identified by its signature and/or team ID. </para>
        </briefdescription>
        <detaileddescription>
<para>When only a <emphasis>signature</emphasis> is given, and multiple instances of the application are running it is indeterminate which one is chosen as the target. In case only a <emphasis>team</emphasis> ID is passed, the target application is identified uniquely. If both are supplied, the application identified by the <emphasis>team</emphasis> ID must have a matching signature, otherwise the initialization fails.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The target application&apos;s signature. May be <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>team</parametername>
</parameternamelist>
<parameterdescription>
<para>The target application&apos;s team ID. May be &lt; 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to a pre-allocated status_t into which the result of the initialization is written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1ab5c0b585a6d49d4f3ae84356401ea075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessenger::~BMessenger</definition>
        <argsstring>()</argsstring>
        <name>~BMessenger</name>
        <qualifiedname>BMessenger::~BMessenger</qualifiedname>
        <briefdescription>
<para>Frees all resources associated with this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a34e4ce5acb6251a5691e328e02977a91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMessenger::HashValue</definition>
        <argsstring>() const</argsstring>
        <name>HashValue</name>
        <qualifiedname>BMessenger::HashValue</qualifiedname>
        <briefdescription>
<para>Returns a hash value that uniquely identifies the messenger. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="74" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a0094e94e04aacad5a8d5a0c3988be300" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessenger::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <qualifiedname>BMessenger::IsValid</qualifiedname>
        <briefdescription>
<para>Returns whether the messenger&apos;s target looper still exists. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method does not check whether the target handler also still exists.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the messenger&apos;s target looper still exists, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1abf7a4bbb4d1480efcfead072f598bafa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>team_id</type>
        <definition>team_id BMessenger::Team</definition>
        <argsstring>() const</argsstring>
        <name>Team</name>
        <qualifiedname>BMessenger::Team</qualifiedname>
        <briefdescription>
<para>Returns the ID of the team that the messenger&apos;s target belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The team of the messenger&apos;s target.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="72" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMessenger_1a91a16f9b175b560f125dc8c494b28488" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMessenger::_InitData</definition>
        <argsstring>(const BHandler *handler, const BLooper *looper, status_t *result)</argsstring>
        <name>_InitData</name>
        <qualifiedname>BMessenger::_InitData</qualifiedname>
        <param>
          <type>const <ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const <ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
          <declname>looper</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="87" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1aa27057ba6e62040387d810456d73546d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMessenger::_InitData</definition>
        <argsstring>(const char *signature, team_id team, status_t *result)</argsstring>
        <name>_InitData</name>
        <qualifiedname>BMessenger::_InitData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>team_id</type>
          <declname>team</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="85" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessenger_1a338e1356f37d35c58ba713c35f0ca5a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMessenger::_SetTo</definition>
        <argsstring>(team_id team, port_id port, int32 token)</argsstring>
        <name>_SetTo</name>
        <qualifiedname>BMessenger::_SetTo</qualifiedname>
        <param>
          <type>team_id</type>
          <declname>team</declname>
        </param>
        <param>
          <type>port_id</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="83" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class to send messages to a target <ref refid="classBLooper" kindref="compound">BLooper</ref> or <ref refid="classBHandler" kindref="compound">BHandler</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classBMessenger" kindref="compound">BMessenger</ref> can send messages to local and remote targets. If the target belongs to the same team as the <ref refid="classBMessenger" kindref="compound">BMessenger</ref> it is a local target, otherwise if the target lives in a separate address space it is a remote target.</para>
<para>The most significant (set of) method(s) in the class is <ref refid="classBMessenger_1aebe5aba546fa4a4696988b1bf6028f3c" kindref="member">SendMessage()</ref>, which sends its message to the target. For a local target <ref refid="classBMessenger_1aebe5aba546fa4a4696988b1bf6028f3c" kindref="member">SendMessage()</ref> is roughly equivalent in terms of efficiency to posting a message directly to the messenger&apos;s target (i.e. <ref refid="classBLooper_1a0de6737bfbf8a8b4913adc8c74bb544e" kindref="member">BLooper::PostMessage()</ref>).</para>
<para>If you supply a target <ref refid="classBMessenger" kindref="compound">BMessenger</ref> or <ref refid="classBHandler" kindref="compound">BHandler</ref> to <ref refid="classBMessenger_1aebe5aba546fa4a4696988b1bf6028f3c" kindref="member">SendMessage()</ref> the method will return immediately after delivery and the response will be handled asynchronously, otherwise the method will return once the reply has been delivered or after a set timeout.</para>
<para>The global <emphasis>be_app_messenger</emphasis> pointer targets the main message loop of <emphasis>be_app</emphasis> is automatically initialized for you when you create a <ref refid="classBApplication" kindref="compound">BApplication</ref> object, you can use it wherever a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> is called for.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/app/Messenger.h" line="20" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/Messenger.h" bodystart="20" bodyend="97"/>
    <listofallmembers>
      <member refid="classBMessenger_1aa27057ba6e62040387d810456d73546d" prot="private" virt="non-virtual"><scope>BMessenger</scope><name>_InitData</name></member>
      <member refid="classBMessenger_1a91a16f9b175b560f125dc8c494b28488" prot="private" virt="non-virtual"><scope>BMessenger</scope><name>_InitData</name></member>
      <member refid="classBMessenger_1a2d0b9a28df08f35b185a909aca9e76c9" prot="private" virt="non-virtual"><scope>BMessenger</scope><name>_reserved</name></member>
      <member refid="classBMessenger_1a338e1356f37d35c58ba713c35f0ca5a0" prot="private" virt="non-virtual"><scope>BMessenger</scope><name>_SetTo</name></member>
      <member refid="classBMessenger_1a369f2de1289d74e8459d1c04ace3caa7" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>BMessenger</name></member>
      <member refid="classBMessenger_1a9a97e301b9c9cabb816a9b74e94ff237" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>BMessenger</name></member>
      <member refid="classBMessenger_1a48dceac75712d5cd8853d62d031e4dd1" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>BMessenger</name></member>
      <member refid="classBMessenger_1a8357653912eb9acce80ff4fb9011d0c8" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>BMessenger</name></member>
      <member refid="classBMessenger_1a3e27ec75ac0d4f74afd3d4fa488da673" prot="private" virt="non-virtual"><scope>BMessenger</scope><name>fHandlerToken</name></member>
      <member refid="classBMessenger_1aa6d688e2262c10f5cf46b5dc01f298f8" prot="private" virt="non-virtual"><scope>BMessenger</scope><name>fPort</name></member>
      <member refid="classBMessenger_1a191aa7abecd1ae9500243661080e1ecc" prot="private" virt="non-virtual"><scope>BMessenger</scope><name>fTeam</name></member>
      <member refid="classBMessenger_1a34e4ce5acb6251a5691e328e02977a91" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>HashValue</name></member>
      <member refid="classBMessenger_1ac0b8b1360dd6ed6c0edf8def5ef390b7" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>IsTargetLocal</name></member>
      <member refid="classBMessenger_1a0094e94e04aacad5a8d5a0c3988be300" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>IsValid</name></member>
      <member refid="classBMessenger_1a2a5eecda17bf16a4981db49a0d5773f1" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>LockTarget</name></member>
      <member refid="classBMessenger_1ab568c74c5ea2be4a5c684613f9116505" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>LockTargetWithTimeout</name></member>
      <member refid="classBMessenger_1afc7c0f773cff59935505bf5d57c82f2b" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>operator=</name></member>
      <member refid="classBMessenger_1ac5227eb37527e0fb53ecfad6a95cc1bd" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>operator==</name></member>
      <member refid="classBMessenger_1aebe5aba546fa4a4696988b1bf6028f3c" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>SendMessage</name></member>
      <member refid="classBMessenger_1afee0227707703adc712c2b8e4064d45a" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>SendMessage</name></member>
      <member refid="classBMessenger_1ad1ac7efa3b7193245908adc7f293fb93" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>SendMessage</name></member>
      <member refid="classBMessenger_1a3d305370d4df56903c881cf083a655ca" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>SendMessage</name></member>
      <member refid="classBMessenger_1a18c896b7957702a5b44a080300ab7cef" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>SendMessage</name></member>
      <member refid="classBMessenger_1a24f7642b053481247cdbaa17068f38f6" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>SetTo</name></member>
      <member refid="classBMessenger_1ad7a2b0adc3affbdad8090308ec8e1892" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>SetTo</name></member>
      <member refid="classBMessenger_1a763e36f482699e201795a04b39aabf1a" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>Target</name></member>
      <member refid="classBMessenger_1abf7a4bbb4d1480efcfead072f598bafa" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>Team</name></member>
      <member refid="classBMessenger_1ab5c0b585a6d49d4f3ae84356401ea075" prot="public" virt="non-virtual"><scope>BMessenger</scope><name>~BMessenger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
