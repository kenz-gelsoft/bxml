<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BError" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BPrivate::Network::BError</compoundname>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BBorrowError" prot="public" virt="non-virtual">BPrivate::Network::BBorrowError</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1InvalidInput" prot="public" virt="non-virtual">BPrivate::Network::BHttpFields::InvalidInput</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod" prot="public" virt="non-virtual">BPrivate::Network::BHttpMethod::InvalidMethod</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BHttpTime_1_1InvalidInput" prot="public" virt="non-virtual">BPrivate::Network::BHttpTime::InvalidInput</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BInvalidUrl" prot="public" virt="non-virtual">BPrivate::Network::BInvalidUrl</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BNetworkRequestError" prot="public" virt="non-virtual">BPrivate::Network::BNetworkRequestError</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BRuntimeError" prot="public" virt="non-virtual">BPrivate::Network::BRuntimeError</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BSystemError" prot="public" virt="non-virtual">BPrivate::Network::BSystemError</derivedcompoundref>
    <derivedcompoundref refid="classBPrivate_1_1Network_1_1BUnsupportedProtocol" prot="public" virt="non-virtual">BPrivate::Network::BUnsupportedProtocol</derivedcompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BError_1a0329e9075735a5f257c6e6e3599e1e1e" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BPrivate::Network::BError::fOrigin</definition>
        <argsstring></argsstring>
        <name>fOrigin</name>
        <qualifiedname>BPrivate::Network::BError::fOrigin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="47" column="8" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a227208ede157ae501ea3acee188e46b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BError::BError</definition>
        <argsstring>(BError &amp;&amp;error) noexcept</argsstring>
        <name>BError</name>
        <qualifiedname>BPrivate::Network::BError::BError</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BError" kindref="compound">BError</ref> &amp;&amp;</type>
          <declname>error</declname>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1abbf80a044f5af02aac87a65a6aba703a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BError::BError</definition>
        <argsstring>(BString origin)</argsstring>
        <name>BError</name>
        <qualifiedname>BPrivate::Network::BError::BError</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref></type>
          <declname>origin</declname>
        </param>
        <briefdescription>
<para>Constructor that sets the <emphasis>origin</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1abf7e40af168fdcf53eb7a86e42c9141c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BError::BError</definition>
        <argsstring>(const BError &amp;error)</argsstring>
        <name>BError</name>
        <qualifiedname>BPrivate::Network::BError::BError</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BError" kindref="compound">BError</ref> &amp;</type>
          <declname>error</declname>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a98953038abdab68796b3bf373ead0540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BError::BError</definition>
        <argsstring>(const char *origin)</argsstring>
        <name>BError</name>
        <qualifiedname>BPrivate::Network::BError::BError</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>origin</declname>
          <defname>error</defname>
        </param>
        <briefdescription>
<para>Constructor that sets the <emphasis>origin</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a0ffdd9cc030c188df03dd95e1de82bf4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>BPrivate::Network::BError::~BError</definition>
        <argsstring>() noexcept</argsstring>
        <name>~BError</name>
        <qualifiedname>BPrivate::Network::BError::~BError</qualifiedname>
        <briefdescription>
<para>Standard destructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="26" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a93a2260671aad699aa8787fd74061f98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>virtual BString BPrivate::Network::BError::DebugMessage</definition>
        <argsstring>() const</argsstring>
        <name>DebugMessage</name>
        <qualifiedname>BPrivate::Network::BError::DebugMessage</qualifiedname>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BSystemError_1a5ee62b6ae8191453274a93c3e9d00b36">DebugMessage</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BHttpFields_1_1InvalidInput_1afb2156182ef6be328515b94733ec4bf2">DebugMessage</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1a7f52e4d68de0f5735b223e78f3ac4b67">DebugMessage</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BHttpTime_1_1InvalidInput_1a39203d08c6694acce04af2a6cfc5726e">DebugMessage</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a038e30d1d5fcaac6a48c6b8281b5b110">DebugMessage</reimplementedby>
        <briefdescription>
<para>Retrieve a debug message that contains all info in this error. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">[<ref refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" kindref="member">Origin</ref>]<sp/><ref refid="classBPrivate_1_1Network_1_1BError_1a2c1b049e967387a289b1b0b8694eca28" kindref="member">Message</ref><sp/>of<sp/>error</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>In the future this method may throw this exception when the memory for the debug message cannot be allocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classBString" kindref="compound">BString</ref> object that contains the debug message.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="36" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a2c1b049e967387a289b1b0b8694eca28" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>const char *</type>
        <definition>const char * BPrivate::Network::BError::Message</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>Message</name>
        <qualifiedname>BPrivate::Network::BError::Message</qualifiedname>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BRuntimeError_1a6a164c6533818d2bb23d099e45dfc837">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BSystemError_1ad4c1783170eebdd85479aaca28519565">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BBorrowError_1ac73f39c13681c993028f9c92ba654ffd">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BHttpFields_1_1InvalidInput_1a35b8bd69f9464a25407e1f1e5346db6a">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod_1a397e87c6134ba1a25488ad781519016e">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BHttpTime_1_1InvalidInput_1a9b89f597f4628bf70778d61d524549d2">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BUnsupportedProtocol_1ac332e120fd1aeab5cb44cf3704ba4841">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BInvalidUrl_1a68f2c421e5cfca9d7102257459602e23">Message</reimplementedby>
        <reimplementedby refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1aca0ab9afcc80043409a087da5a784508">Message</reimplementedby>
        <briefdescription>
<para>Access the string representation of the message. </para>
        </briefdescription>
        <detaileddescription>
<para>Implementations should return a meaningful description of the error that occured. The primary target audience of these messages are developers, who (hopefully) see them during development, testing or in bug reports. However, if it makes sense to have the error messages be instructive to users too, then do not hesitate to do so.</para>
<para>Implementations of this function should never return <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="34" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1ab80467e8f9af8142d4d7cfa311f04c68" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BError" kindref="compound">BError</ref> &amp;</type>
        <definition>BError &amp; BPrivate::Network::BError::operator=</definition>
        <argsstring>(BError &amp;&amp;error) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BError::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BError" kindref="compound">BError</ref> &amp;&amp;</type>
          <declname>error</declname>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="32" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1af4a889a39e9530458aeb649d2ba12d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BError" kindref="compound">BError</ref> &amp;</type>
        <definition>BError &amp; BPrivate::Network::BError::operator=</definition>
        <argsstring>(const BError &amp;error)</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BError::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BError" kindref="compound">BError</ref> &amp;</type>
          <declname>error</declname>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="31" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>const char *</type>
        <definition>const char * BPrivate::Network::BError::Origin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Origin</name>
        <qualifiedname>BPrivate::Network::BError::Origin</qualifiedname>
        <briefdescription>
<para>Access the string representation of the origin of the error. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation returns a pointer to the string that was set as the origin when this object was constructed.</para>
<para>Implementations of this function should never return <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="35" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a69a0b83a56c08e510e16aaba841f25e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BPrivate::Network::BError::WriteToOutput</definition>
        <argsstring>(BDataIO *output) const</argsstring>
        <name>WriteToOutput</name>
        <qualifiedname>BPrivate::Network::BError::WriteToOutput</qualifiedname>
        <param>
          <type><ref refid="classBDataIO" kindref="compound">BDataIO</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Write the error description to an output. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation will use the output from <ref refid="classBPrivate_1_1Network_1_1BError_1a93a2260671aad699aa8787fd74061f98" kindref="member">DebugMessage()</ref> and write it to the <emphasis>output</emphasis>, including a newline and the NUL that terminates the string.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>For any error that occurs when calling <ref refid="classBDataIO_1a01692303eba7601c6a7cfa72c06d6afb" kindref="member">BDataIO::Write()</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes that was written to <emphasis>output</emphasis>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="38" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a2c7538bd21c2844cd1ee0c8ee0ba74ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BError::WriteToStream</definition>
        <argsstring>(std::ostream &amp;stream) const</argsstring>
        <name>WriteToStream</name>
        <qualifiedname>BPrivate::Network::BError::WriteToStream</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Write the error description to an output stream. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation will write the output of the <ref refid="classBPrivate_1_1Network_1_1BError_1a93a2260671aad699aa8787fd74061f98" kindref="member">DebugMessage()</ref> method, and append a newline.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::ios_base::failure</parametername>
</parameternamelist>
<parameterdescription>
<para>Any error that is forwarded when writing to the <emphasis>stream</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="37" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a5579904ccba271af7057cd4434e7b03f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPrivate::Network::BError::_ReservedError1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedError1</name>
        <qualifiedname>BPrivate::Network::BError::_ReservedError1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="41" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a68279c4be0493f449d740b4eab6f390f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPrivate::Network::BError::_ReservedError2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedError2</name>
        <qualifiedname>BPrivate::Network::BError::_ReservedError2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="42" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1ad4cbb75910372ce2b221dd210da142b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPrivate::Network::BError::_ReservedError3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedError3</name>
        <qualifiedname>BPrivate::Network::BError::_ReservedError3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="43" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BError_1a7a497b98e693cc08cf45341973578379" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPrivate::Network::BError::_ReservedError4</definition>
        <argsstring>()</argsstring>
        <name>_ReservedError4</name>
        <qualifiedname>BPrivate::Network::BError::_ReservedError4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="44" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract base class for advanced error objects. </para>
    </briefdescription>
    <detaileddescription>
<para>This class defines the minimum interface for advanced error objects in modern parts of the Haiku API.</para>
<para>The minimum definition of an error is that it contains an <emphasis>origin</emphasis> and a <emphasis>message</emphasis>. The origin should contain a string that helps a developer identify the origin of the error. Common practise is to pass the <computeroutput>__PRETTY_FUNCTION__</computeroutput> from the place where the error is constructed, but subclasses can have their own definitions for the origin.</para>
<para>The message is a freeform message that describes the exact error condition. While it is not meant as a user-facing message, when creating custom error objects, take into account that a user may be confronted with a message in situations where an application presents it to a user as a final resort.</para>
<para><simplesect kind="note"><para>The advanced error objects are not used in the existing legacy Haiku Kits. They are being tested for use in the modern parts of the API and are therefore included in the network services kit.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BPrivate::Network::BBorrowError</label>
        <link refid="classBPrivate_1_1Network_1_1BBorrowError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BPrivate::Network::BError</label>
        <link refid="classBPrivate_1_1Network_1_1BError"/>
      </node>
      <node id="3">
        <label>BPrivate::Network::BHttpFields::InvalidInput</label>
        <link refid="classBPrivate_1_1Network_1_1BHttpFields_1_1InvalidInput"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BPrivate::Network::BHttpMethod::InvalidMethod</label>
        <link refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BPrivate::Network::BHttpTime::InvalidInput</label>
        <link refid="classBPrivate_1_1Network_1_1BHttpTime_1_1InvalidInput"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BPrivate::Network::BInvalidUrl</label>
        <link refid="classBPrivate_1_1Network_1_1BInvalidUrl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BPrivate::Network::BNetworkRequestError</label>
        <link refid="classBPrivate_1_1Network_1_1BNetworkRequestError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BPrivate::Network::BRuntimeError</label>
        <link refid="classBPrivate_1_1Network_1_1BRuntimeError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>BPrivate::Network::BSystemError</label>
        <link refid="classBPrivate_1_1Network_1_1BSystemError"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>BPrivate::Network::BUnsupportedProtocol</label>
        <link refid="classBPrivate_1_1Network_1_1BUnsupportedProtocol"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="21" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" bodystart="22" bodyend="48"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BError_1a5579904ccba271af7057cd4434e7b03f" prot="private" virt="virtual"><scope>BPrivate::Network::BError</scope><name>_ReservedError1</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a68279c4be0493f449d740b4eab6f390f" prot="private" virt="virtual"><scope>BPrivate::Network::BError</scope><name>_ReservedError2</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1ad4cbb75910372ce2b221dd210da142b2" prot="private" virt="virtual"><scope>BPrivate::Network::BError</scope><name>_ReservedError3</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a7a497b98e693cc08cf45341973578379" prot="private" virt="virtual"><scope>BPrivate::Network::BError</scope><name>_ReservedError4</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a98953038abdab68796b3bf373ead0540" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abbf80a044f5af02aac87a65a6aba703a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abf7e40af168fdcf53eb7a86e42c9141c" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a227208ede157ae501ea3acee188e46b7" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a93a2260671aad699aa8787fd74061f98" prot="public" virt="virtual"><scope>BPrivate::Network::BError</scope><name>DebugMessage</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a0329e9075735a5f257c6e6e3599e1e1e" prot="private" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>fOrigin</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a2c1b049e967387a289b1b0b8694eca28" prot="public" virt="pure-virtual"><scope>BPrivate::Network::BError</scope><name>Message</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1af4a889a39e9530458aeb649d2ba12d45" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1ab80467e8f9af8142d4d7cfa311f04c68" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" prot="public" virt="virtual"><scope>BPrivate::Network::BError</scope><name>Origin</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a69a0b83a56c08e510e16aaba841f25e5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>WriteToOutput</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a2c7538bd21c2844cd1ee0c8ee0ba74ef" prot="public" virt="non-virtual"><scope>BPrivate::Network::BError</scope><name>WriteToStream</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a0ffdd9cc030c188df03dd95e1de82bf4" prot="public" virt="virtual"><scope>BPrivate::Network::BError</scope><name>~BError</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
