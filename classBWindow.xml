<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBWindow" kind="class" language="C++" prot="public">
    <compoundname>BWindow</compoundname>
    <basecompoundref refid="classBLooper" prot="public" virt="non-virtual">BLooper</basecompoundref>
    <derivedcompoundref refid="classBAlert" prot="public" virt="non-virtual">BAlert</derivedcompoundref>
    <derivedcompoundref refid="classBDirectWindow" prot="public" virt="non-virtual">BDirectWindow</derivedcompoundref>
    <derivedcompoundref refid="classBWindowScreen" prot="public" virt="non-virtual">BWindowScreen</derivedcompoundref>
      <sectiondef kind="user-defined">
      <header>Shortcut Methods</header>
      <description><para>The key parameter is specified in the form of a Unicode code point. This is generally an ASCII character such as &apos;A&apos; or a key constant such as <computeroutput>B_RIGHT_ARROW</computeroutput>. To use a UTF-8 character you must first convert it to a Unicode code point using <ref refid="classBUnicodeChar_1afc8fda9ba1759ecae751d92cea4dac0a" kindref="member">BUnicodeChar::FromUTF8()</ref>. </para>
</description>
      <memberdef kind="function" id="classBWindow_1a5b05894e227eb22cba63ddaff289a95b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::AddShortcut</definition>
        <argsstring>(uint32 key, uint32 modifiers, BMessage *message)</argsstring>
        <name>AddShortcut</name>
        <qualifiedname>BWindow::AddShortcut</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Creates a keyboard shortcut that sends a <emphasis>message</emphasis> to the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Don&apos;t use this method to a create menu shortcut, add a <ref refid="classBMenuItem" kindref="compound">BMenuItem</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The character that activates the shortcut, case-insensitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of modifiers in addition to <computeroutput>B_COMMAND_KEY</computeroutput>, options include:<itemizedlist>
<listitem><para><computeroutput>B_SHIFT_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OPTION_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_CONTROL_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MENU_KEY</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>message</emphasis> to send when the shortcut is activated. The <ref refid="classBWindow" kindref="compound">BWindow</ref> takes ownership of the <emphasis>message</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="137" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a169c891ff22f6a76f10c15bd16cde3c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::AddShortcut</definition>
        <argsstring>(uint32 key, uint32 modifiers, BMessage *message, BHandler *target)</argsstring>
        <name>AddShortcut</name>
        <qualifiedname>BWindow::AddShortcut</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Creates a keyboard shortcut that sends a <emphasis>message</emphasis> to the specified <emphasis>target</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Don&apos;t use this method to a create menu shortcut, add a <ref refid="classBMenuItem" kindref="compound">BMenuItem</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The character that activates the shortcut, case-insensitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of modifiers in addition to <computeroutput>B_COMMAND_KEY</computeroutput>, options include one or more of the following:<itemizedlist>
<listitem><para><computeroutput>B_SHIFT_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OPTION_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_CONTROL_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MENU_KEY</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>message</emphasis> to send when the shortcut is activated. The <ref refid="classBWindow" kindref="compound">BWindow</ref> takes ownership of the <emphasis>message</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The handler to send the message to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="139" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a08765e38e5cd5f37e19981d217b985d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::HasShortcut</definition>
        <argsstring>(uint32 key, uint32 modifiers)</argsstring>
        <name>HasShortcut</name>
        <qualifiedname>BWindow::HasShortcut</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>modifiers</declname>
        </param>
        <briefdescription>
<para>Returns whether or not the specified shortcut is set on the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to check, case-insensitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of modifiers in addition to <computeroutput>B_COMMAND_KEY</computeroutput>, options include one or more of the following:<itemizedlist>
<listitem><para><computeroutput>B_SHIFT_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OPTION_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_CONTROL_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MENU_KEY</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the window has the specified shortcut, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="141" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a81d5e6ed3a8a7b7f5013055bf69593ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::RemoveShortcut</definition>
        <argsstring>(uint32 key, uint32 modifiers)</argsstring>
        <name>RemoveShortcut</name>
        <qualifiedname>BWindow::RemoveShortcut</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>modifiers</declname>
        </param>
        <briefdescription>
<para>Removes the specified shortcut from the window. </para>
        </briefdescription>
        <detaileddescription>
<para>The memory used by the shortcut message is freed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to remove, case-insensitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of modifiers in addition to <computeroutput>B_COMMAND_KEY</computeroutput>, options include one or more of the following:<itemizedlist>
<listitem><para><computeroutput>B_SHIFT_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OPTION_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_CONTROL_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MENU_KEY</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="142" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a32a7f1da1abac8069e816d0b381ebc4b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::AddShortcut</definition>
        <argsstring>(uint32 key, uint32 modifiers, BMenuItem *item)</argsstring>
        <name>AddShortcut</name>
        <qualifiedname>BWindow::AddShortcut</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type><ref refid="classBMenuItem" kindref="compound">BMenuItem</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Creates a keyboard shortcut that activates a menu <emphasis>item</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The character that activates the shortcut, case-insensitive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask of modifiers in addition to <computeroutput>B_COMMAND_KEY</computeroutput>, options include:<itemizedlist>
<listitem><para><computeroutput>B_SHIFT_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_OPTION_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_CONTROL_KEY</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MENU_KEY</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The menu <emphasis>item</emphasis> to activate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="319" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classBWindow_1a80555b2b21f0acf29485afb5ab41e702" prot="private" static="no">
        <type><ref refid="classBLooper" kindref="compound">BLooper</ref></type>
        <definition>typedef BLooper BWindow::inherited</definition>
        <argsstring></argsstring>
        <name>inherited</name>
        <qualifiedname>BWindow::inherited</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="291" column="17" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBWindow_1ae07a112dd19cb0680fc5a3aa8329f6eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t _safe_get_server_token_</definition>
        <argsstring>(const BLooper *, int32 *)</argsstring>
        <name>_safe_get_server_token_</name>
        <qualifiedname>BWindow::_safe_get_server_token_</qualifiedname>
        <param>
          <type>const <ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="306" column="17"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1ae5cc67892f014c4e5160e28eb7a5fe85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _set_menu_sem_</definition>
        <argsstring>(BWindow *w, sem_id sem)</argsstring>
        <name>_set_menu_sem_</name>
        <qualifiedname>BWindow::_set_menu_sem_</qualifiedname>
        <param>
          <type><ref refid="classBWindow" kindref="compound">BWindow</ref> *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>sem_id</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="305" column="13"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1af8cdccd4063fa9ffaf07db52c01ed82f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BAlert</definition>
        <argsstring></argsstring>
        <name>BAlert</name>
        <qualifiedname>BWindow::BAlert</qualifiedname>
        <param>
          <type><ref refid="classBAlert" kindref="compound">BAlert</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="295" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1ae165aff26722b3fd863557348acd8ef6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BApplication</definition>
        <argsstring></argsstring>
        <name>BApplication</name>
        <qualifiedname>BWindow::BApplication</qualifiedname>
        <param>
          <type><ref refid="classBApplication" kindref="compound">BApplication</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="296" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1aa1c71c19d9bd04555fada3927509cfc1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BBitmap</definition>
        <argsstring></argsstring>
        <name>BBitmap</name>
        <qualifiedname>BWindow::BBitmap</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="297" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1a001371fc88b73bbcaaef451a2f3a3780" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BDirectWindow</definition>
        <argsstring></argsstring>
        <name>BDirectWindow</name>
        <qualifiedname>BWindow::BDirectWindow</qualifiedname>
        <param>
          <type><ref refid="classBDirectWindow" kindref="compound">BDirectWindow</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="301" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1a81e421fc74d28f502cb4d8476e7f7e92" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BFilePanel</definition>
        <argsstring></argsstring>
        <name>BFilePanel</name>
        <qualifiedname>BWindow::BFilePanel</qualifiedname>
        <param>
          <type><ref refid="classBFilePanel" kindref="compound">BFilePanel</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="302" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1a12bd24b3ec9e88fba9562e8fee38d754" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMenuItem</definition>
        <argsstring></argsstring>
        <name>BMenuItem</name>
        <qualifiedname>BWindow::BMenuItem</qualifiedname>
        <param>
          <type><ref refid="classBMenuItem" kindref="compound">BMenuItem</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="299" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1a304c5edf0ab3769baf95966dda5800a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BView</definition>
        <argsstring></argsstring>
        <name>BView</name>
        <qualifiedname>BWindow::BView</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="298" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1a3802e96e8f2f71ab79212d12094134b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BWindowScreen</definition>
        <argsstring></argsstring>
        <name>BWindowScreen</name>
        <qualifiedname>BWindow::BWindowScreen</qualifiedname>
        <param>
          <type>BWindowScreen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="300" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBWindow_1ac02c3dd28861570003d406d6df682026" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BWindowStack</definition>
        <argsstring></argsstring>
        <name>BWindowStack</name>
        <qualifiedname>BWindow::BWindowStack</qualifiedname>
        <param>
          <type>BWindowStack</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="303" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBWindow_1a451390af2f650fa6454310eff95c6804" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BWindow::_reserved[9]</definition>
        <argsstring>[9]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BWindow::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="410" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a1eda4daaaeefa121ef27d2cebec81b39" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BWindow::_unused0</definition>
        <argsstring></argsstring>
        <name>_unused0</name>
        <qualifiedname>BWindow::_unused0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="372" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1afd95528843fae93fa0b740c52ee994d9" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BWindow::_unused1</definition>
        <argsstring></argsstring>
        <name>_unused1</name>
        <qualifiedname>BWindow::_unused1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="381" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a8b674130334aa7ecad9fab2456899c24" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::_unused4</definition>
        <argsstring></argsstring>
        <name>_unused4</name>
        <qualifiedname>BWindow::_unused4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="389" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a3bb331b92fd78ac367d668df65ae4788" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::_unused5</definition>
        <argsstring></argsstring>
        <name>_unused5</name>
        <qualifiedname>BWindow::_unused5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="391" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a0e9bd28506cf6f3120e4b713da97b7e8" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::_unused6</definition>
        <argsstring></argsstring>
        <name>_unused6</name>
        <qualifiedname>BWindow::_unused6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="394" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a69608659e3029eece5599cb608c959f0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::fActive</definition>
        <argsstring></argsstring>
        <name>fActive</name>
        <qualifiedname>BWindow::fActive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="374" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a449307330aad667f5b2d476bd3c107e7" prot="private" static="no" mutable="no">
        <type><ref refid="classBButton" kindref="compound">BButton</ref> *</type>
        <definition>BButton* BWindow::fDefaultButton</definition>
        <argsstring></argsstring>
        <name>fDefaultButton</name>
        <qualifiedname>BWindow::fDefaultButton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="383" column="8" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a47ab4cd4baa29ae397af79b6b4ceac17" prot="private" static="no" mutable="no">
        <type><ref refid="Window_8h_1a4a2cc5b573803174c60a35727f711bf3" kindref="member">window_feel</ref></type>
        <definition>window_feel BWindow::fFeel</definition>
        <argsstring></argsstring>
        <name>fFeel</name>
        <qualifiedname>BWindow::fFeel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="404" column="12" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1ad5e7ecd534fc2cbafaf8e77ef71b3526" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BWindow::fFlags</definition>
        <argsstring></argsstring>
        <name>fFlags</name>
        <qualifiedname>BWindow::fFlags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="376" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a1a2ba680cc2684b92b9f3e2afac3a3b0" prot="private" static="no" mutable="no">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView* BWindow::fFocus</definition>
        <argsstring></argsstring>
        <name>fFocus</name>
        <qualifiedname>BWindow::fFocus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="379" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1adc0722f1898fda17b27d1fc11f27790d" prot="private" static="no" mutable="no">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BWindow::fFrame</definition>
        <argsstring></argsstring>
        <name>fFrame</name>
        <qualifiedname>BWindow::fFrame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="402" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1ab8152d224529f39585351b06b06419fb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::fInTransaction</definition>
        <argsstring></argsstring>
        <name>fInTransaction</name>
        <qualifiedname>BWindow::fInTransaction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="373" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1acb3ae814556134832e638baf0119d402" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::fIsFilePanel</definition>
        <argsstring></argsstring>
        <name>fIsFilePanel</name>
        <qualifiedname>BWindow::fIsFilePanel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="388" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a18fa5cf927fe971b9be3ec6695c379f1" prot="private" static="no" mutable="no">
        <type><ref refid="classBMenuBar" kindref="compound">BMenuBar</ref> *</type>
        <definition>BMenuBar* BWindow::fKeyMenuBar</definition>
        <argsstring></argsstring>
        <name>fKeyMenuBar</name>
        <qualifiedname>BWindow::fKeyMenuBar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="382" column="9" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1ae91243b70d96f05112690ed59349a2dd" prot="private" static="no" mutable="no">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView* BWindow::fLastMouseMovedView</definition>
        <argsstring></argsstring>
        <name>fLastMouseMovedView</name>
        <qualifiedname>BWindow::fLastMouseMovedView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="380" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a86224a38384a122e20de9f97b0722897" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BWindow::fLastViewToken</definition>
        <argsstring></argsstring>
        <name>fLastViewToken</name>
        <qualifiedname>BWindow::fLastViewToken</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="405" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a2e4b4304314df3cbee8f3d273ae56c31" prot="private" static="no" mutable="no">
        <type>::BPrivate::PortLink *</type>
        <definition>::BPrivate::PortLink* BWindow::fLink</definition>
        <argsstring></argsstring>
        <name>fLink</name>
        <qualifiedname>BWindow::fLink</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="406" column="22" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a02beb61fe027632d5f735e3f14aac7d6" prot="private" static="no" mutable="no">
        <type><ref refid="Window_8h_1addfecca662cd95a41673f24622690b41" kindref="member">window_look</ref></type>
        <definition>window_look BWindow::fLook</definition>
        <argsstring></argsstring>
        <name>fLook</name>
        <qualifiedname>BWindow::fLook</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="403" column="12" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1acfac5b344d6b9783a405af791e177c30" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BWindow::fMaxHeight</definition>
        <argsstring></argsstring>
        <name>fMaxHeight</name>
        <qualifiedname>BWindow::fMaxHeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="400" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1ae0538393cd5920e4abbc1c42b3b94228" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BWindow::fMaxWidth</definition>
        <argsstring></argsstring>
        <name>fMaxWidth</name>
        <qualifiedname>BWindow::fMaxWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="401" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1ad7a79dfe50e11aaa0c4274e624513121" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BWindow::fMaxZoomHeight</definition>
        <argsstring></argsstring>
        <name>fMaxZoomHeight</name>
        <qualifiedname>BWindow::fMaxZoomHeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="396" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1af010407d807500f37b1a837ff09dcc83" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BWindow::fMaxZoomWidth</definition>
        <argsstring></argsstring>
        <name>fMaxZoomWidth</name>
        <qualifiedname>BWindow::fMaxZoomWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="397" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a31d4cc996e3e50e3b7c3524c2f40ef17" prot="private" static="no" mutable="no">
        <type>sem_id</type>
        <definition>sem_id BWindow::fMenuSem</definition>
        <argsstring></argsstring>
        <name>fMenuSem</name>
        <qualifiedname>BWindow::fMenuSem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="395" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a8c90bcc0525879975ab03dfa635c621c" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BWindow::fMinHeight</definition>
        <argsstring></argsstring>
        <name>fMinHeight</name>
        <qualifiedname>BWindow::fMinHeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="398" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a8125f58e2fb768b3eed185bec1e24f18" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::fMinimized</definition>
        <argsstring></argsstring>
        <name>fMinimized</name>
        <qualifiedname>BWindow::fMinimized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="392" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1aa739a1f88ab9126f46d8655656d1b639" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BWindow::fMinWidth</definition>
        <argsstring></argsstring>
        <name>fMinWidth</name>
        <qualifiedname>BWindow::fMinWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="399" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a1493f515711389e6d364ca79ff57dfc7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::fNoQuitShortcut</definition>
        <argsstring></argsstring>
        <name>fNoQuitShortcut</name>
        <qualifiedname>BWindow::fNoQuitShortcut</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="393" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a9d6cdca55f1a8c033e10c58bd88e0e49" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::fOffscreen</definition>
        <argsstring></argsstring>
        <name>fOffscreen</name>
        <qualifiedname>BWindow::fOffscreen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="387" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a44912572c6c8248067d8e54d295617d0" prot="private" static="no" mutable="no">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BWindow::fPreviousFrame</definition>
        <argsstring></argsstring>
        <name>fPreviousFrame</name>
        <qualifiedname>BWindow::fPreviousFrame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="408" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1aab9c5cfd4a00913e4b9e2e0e4f80996e" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BWindow::fPulseRate</definition>
        <argsstring></argsstring>
        <name>fPulseRate</name>
        <qualifiedname>BWindow::fPulseRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="390" column="10" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a2a05a43c7cd071cb1a731722809cc063" prot="private" static="no" mutable="no">
        <type><ref refid="classBMessageRunner" kindref="compound">BMessageRunner</ref> *</type>
        <definition>BMessageRunner* BWindow::fPulseRunner</definition>
        <argsstring></argsstring>
        <name>fPulseRunner</name>
        <qualifiedname>BWindow::fPulseRunner</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="407" column="15" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1aa6fddc8aa55ef63ad96c0c232a3ba4e7" prot="private" static="no" mutable="no">
        <type><ref refid="classBList" kindref="compound">BList</ref></type>
        <definition>BList BWindow::fShortcuts</definition>
        <argsstring></argsstring>
        <name>fShortcuts</name>
        <qualifiedname>BWindow::fShortcuts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="384" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a24d420273699627a2d352eaa10587ea8" prot="private" static="no" mutable="no">
        <type>short</type>
        <definition>short BWindow::fShowLevel</definition>
        <argsstring></argsstring>
        <name>fShowLevel</name>
        <qualifiedname>BWindow::fShowLevel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="375" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1ac0c60017692747cea84ebea1ef237cf5" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BWindow::fTitle</definition>
        <argsstring></argsstring>
        <name>fTitle</name>
        <qualifiedname>BWindow::fTitle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="371" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a64bd21ea867a6bebb82900fdff971bb1" prot="private" static="no" mutable="no">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView* BWindow::fTopView</definition>
        <argsstring></argsstring>
        <name>fTopView</name>
        <qualifiedname>BWindow::fTopView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="378" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1a38a7f889f3d28d01bdde1e30a8c85a02" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BWindow::fTopViewToken</definition>
        <argsstring></argsstring>
        <name>fTopViewToken</name>
        <qualifiedname>BWindow::fTopViewToken</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="385" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBWindow_1aa9602f228ee7ea38d2df83dce67d6189" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BWindow::fUpdateRequested</definition>
        <argsstring></argsstring>
        <name>fUpdateRequested</name>
        <qualifiedname>BWindow::fUpdateRequested</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="386" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBWindow_1a967856a612c3e7ad4d5d1f4970f744e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BWindow::BWindow</definition>
        <argsstring>(BMessage *archive)</argsstring>
        <name>BWindow</name>
        <qualifiedname>BWindow::BWindow</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>data</defname>
        </param>
        <briefdescription>
<para>Archive constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="classBMessage" kindref="compound">BMessage</ref> object to build the object from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a92dfad4d2089ea9a4e8ca8154776e82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BWindow::BWindow</definition>
        <argsstring>(BRect frame, const char *title, window_look look, window_feel feel, uint32 flags, uint32 workspace=B_CURRENT_WORKSPACE)</argsstring>
        <name>BWindow</name>
        <qualifiedname>BWindow::BWindow</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1addfecca662cd95a41673f24622690b41" kindref="member">window_look</ref></type>
          <declname>look</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1a4a2cc5b573803174c60a35727f711bf3" kindref="member">window_feel</ref></type>
          <declname>feel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>workspace</declname>
          <defval><ref refid="Window_8h_1acf1ba45f7f701a6e6eb5f78bb022c23e" kindref="member">B_CURRENT_WORKSPACE</ref></defval>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classBWindow" kindref="compound">BWindow</ref> object with the specified <emphasis>look</emphasis> and <emphasis>feel</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The inner <emphasis>frame</emphasis> rectangle in the screen coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The window <emphasis>title</emphasis> and thread title as &quot;w&gt;title&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>look</parametername>
</parameternamelist>
<parameterdescription>
<para>The window_look flags, one of the following:<itemizedlist>
<listitem><para><computeroutput>B_BORDERED_WINDOW_LOOK</computeroutput> No title bar, thin border, no resize control.</para>
</listitem><listitem><para><computeroutput>B_NO_BORDER_WINDOW_LOOK</computeroutput> A borderless rectangle with no provisions to move or close the window.</para>
</listitem><listitem><para><computeroutput>B_TITLED_WINDOW_LOOK</computeroutput> Like <computeroutput>B_DOCUMENT_WINDOW_LOOK</computeroutput>, but with a resize corner instead of a resize thumb.</para>
</listitem><listitem><para><computeroutput>B_DOCUMENT_WINDOW_LOOK</computeroutput> Large title bar, thick border, draggable resize corner thumb.</para>
</listitem><listitem><para><computeroutput>B_MODAL_WINDOW_LOOK</computeroutput> For modal dialogs: no title bar, thick border, resize corner depending on the <computeroutput>B_NOT_RESIZABLE</computeroutput> flag.</para>
</listitem><listitem><para><computeroutput>B_FLOATING_WINDOW_LOOK</computeroutput> For floating sub windows: small title bar, thin border, resize corner. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feel</parametername>
</parameternamelist>
<parameterdescription>
<para>The window_feel flags, one of the following:<itemizedlist>
<listitem><para><computeroutput>B_NORMAL_WINDOW_FEEL</computeroutput> Behaves like a normal, non-modal, non-floating window.</para>
</listitem><listitem><para><computeroutput>B_MODAL_SUBSET_WINDOW_FEEL</computeroutput> Blocks all windows in its subset when displayed. Visible only if a window in its subset is visible.</para>
</listitem><listitem><para><computeroutput>B_MODAL_APP_WINDOW_FEEL</computeroutput> Blocks all windows in its app when displayed. Visible only if a window in its app is visible.</para>
</listitem><listitem><para><computeroutput>B_MODAL_ALL_WINDOW_FEEL</computeroutput> Blocks all windows across the entire system when displayed. Always visible in all workspaces.</para>
</listitem><listitem><para><computeroutput>B_FLOATING_SUBSET_WINDOW_FEEL</computeroutput> Floats above all windows in its subset when displayed. Visible only if a window in its subset is the frontmost window.</para>
</listitem><listitem><para><computeroutput>B_FLOATING_APP_WINDOW_FEEL</computeroutput> Floats above all windows in its app when displayed. Visible only if a window in its app is the frontmost window.</para>
</listitem><listitem><para><computeroutput>B_FLOATING_ALL_WINDOW_FEEL</computeroutput> Floats above all windows across the entire system when displayed. Always visible in all workspaces. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask that defines window attributes:<itemizedlist>
<listitem><para><computeroutput>B_NOT_MOVABLE</computeroutput> cannot be moved by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_CLOSABLE</computeroutput> cannot be closed by the user, no close button displayed</para>
</listitem><listitem><para><computeroutput>B_NOT_ZOOMABLE</computeroutput> cannot be zoomed by the user, no zoom button displayed</para>
</listitem><listitem><para><computeroutput>B_NOT_MINIMIZABLE</computeroutput> cannot be minimized by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_RESIZABLE</computeroutput> cannot be resized by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_H_RESIZABLE</computeroutput> cannot be resized horizontally by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_V_RESIZABLE</computeroutput> cannot be resized vertically by the user</para>
</listitem><listitem><para><computeroutput>B_AVOID_FRONT</computeroutput> cannot be brought to front by the user</para>
</listitem><listitem><para><computeroutput>B_AVOID_FOCUS</computeroutput> cannot receive keyboard focus</para>
</listitem><listitem><para><computeroutput>B_WILL_ACCEPT_FIRST_CLICK</computeroutput> The first click is processed by the window.</para>
</listitem><listitem><para><computeroutput>B_OUTLINE_RESIZE</computeroutput> draws only its outline as it&apos;s resized and doesn&apos;t draw its contents.</para>
</listitem><listitem><para><computeroutput>B_NO_WORKSPACE_ACTIVATION</computeroutput> Causes the current workspace to stay active when activated on another workspace.</para>
</listitem><listitem><para><computeroutput>B_NOT_ANCHORED_ON_ACTIVATE</computeroutput> Causes the window to move to the current workspace when activated if it already exists on another workspace.</para>
</listitem><listitem><para><computeroutput>B_QUIT_ON_WINDOW_CLOSE</computeroutput> Quit the application when the window closes.</para>
</listitem><listitem><para><computeroutput>B_SAME_POSITION_IN_ALL_WORKSPACES</computeroutput> Window maintains its position across workspaces.</para>
</listitem><listitem><para><computeroutput>B_AUTO_UPDATE_SIZE_LIMITS</computeroutput> Automatically adjust the size according to layout constraints.</para>
</listitem><listitem><para><computeroutput>B_CLOSE_ON_ESCAPE</computeroutput> Close when the user pushes the Escape key.</para>
</listitem><listitem><para><computeroutput>B_NO_SERVER_SIDE_WINDOW_MODIFIERS</computeroutput> ?? </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask that indicates which of the 32 potential workspace(s) the window should be displayed in or <computeroutput>B_CURRENT_WORKSPACE</computeroutput> or <computeroutput>B_ALL_WORKSPACES</computeroutput> constants.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1afe03898c4cefc6b853f304c57afee533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BWindow::BWindow</definition>
        <argsstring>(BRect frame, const char *title, window_type type, uint32 flags, uint32 workspace=B_CURRENT_WORKSPACE)</argsstring>
        <name>BWindow</name>
        <qualifiedname>BWindow::BWindow</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1a4730a93b07f17fa824a2e42df3e0af6d" kindref="member">window_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>workspace</declname>
          <defval><ref refid="Window_8h_1acf1ba45f7f701a6e6eb5f78bb022c23e" kindref="member">B_CURRENT_WORKSPACE</ref></defval>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classBWindow" kindref="compound">BWindow</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The inner <emphasis>frame</emphasis> rectangle in the screen coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The window <emphasis>title</emphasis> and thread title as &quot;w&gt;title&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>window_type flag, one of the following:<itemizedlist>
<listitem><para><computeroutput>B_UNTYPED_WINDOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_TITLED_WINDOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_MODAL_WINDOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_DOCUMENT_WINDOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_BORDERED_WINDOW</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_FLOATING_WINDOW</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask that defines window attributes:<itemizedlist>
<listitem><para><computeroutput>B_NOT_MOVABLE</computeroutput> cannot be moved by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_CLOSABLE</computeroutput> cannot be closed by the user, no close button displayed</para>
</listitem><listitem><para><computeroutput>B_NOT_ZOOMABLE</computeroutput> cannot be zoomed by the user, no zoom button displayed</para>
</listitem><listitem><para><computeroutput>B_NOT_MINIMIZABLE</computeroutput> cannot be minimized by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_RESIZABLE</computeroutput> cannot be resized by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_H_RESIZABLE</computeroutput> cannot be resized horizontally by the user</para>
</listitem><listitem><para><computeroutput>B_NOT_V_RESIZABLE</computeroutput> cannot be resized vertically by the user</para>
</listitem><listitem><para><computeroutput>B_AVOID_FRONT</computeroutput> cannot be brought to front by the user</para>
</listitem><listitem><para><computeroutput>B_AVOID_FOCUS</computeroutput> cannot receive keyboard focus</para>
</listitem><listitem><para><computeroutput>B_WILL_ACCEPT_FIRST_CLICK</computeroutput> The first click is processed by the window.</para>
</listitem><listitem><para><computeroutput>B_OUTLINE_RESIZE</computeroutput> draws only its outline as it&apos;s resized and doesn&apos;t draw its contents.</para>
</listitem><listitem><para><computeroutput>B_NO_WORKSPACE_ACTIVATION</computeroutput> Causes the current workspace to stay active when activated on another workspace.</para>
</listitem><listitem><para><computeroutput>B_NOT_ANCHORED_ON_ACTIVATE</computeroutput> Causes the window to move to the current workspace when activated if it already exists on another workspace.</para>
</listitem><listitem><para><computeroutput>B_QUIT_ON_WINDOW_CLOSE</computeroutput> Quit the application when the window closes.</para>
</listitem><listitem><para><computeroutput>B_SAME_POSITION_IN_ALL_WORKSPACES</computeroutput> Window maintains its position across workspaces.</para>
</listitem><listitem><para><computeroutput>B_AUTO_UPDATE_SIZE_LIMITS</computeroutput> Automatically adjust the size according to layout constraints.</para>
</listitem><listitem><para><computeroutput>B_CLOSE_ON_ESCAPE</computeroutput> Close when the user pushes the Escape key.</para>
</listitem><listitem><para><computeroutput>B_NO_SERVER_SIDE_WINDOW_MODIFIERS</computeroutput> ?? </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask that indicates which of the 32 potential workspace(s) the window should be displayed in or <computeroutput>B_CURRENT_WORKSPACE</computeroutput> or <computeroutput>B_ALL_WORKSPACES</computeroutput> constants.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a896913784046fcfde7d1f8891e54af08" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BWindow::~BWindow</definition>
        <argsstring>()</argsstring>
        <name>~BWindow</name>
        <qualifiedname>BWindow::~BWindow</qualifiedname>
        <briefdescription>
<para>Destroys the <ref refid="classBWindow" kindref="compound">BWindow</ref> object and all attached views. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="102" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a24ef781656049451c5c6ed06eeb98c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::Activate</definition>
        <argsstring>(bool=true)</argsstring>
        <name>Activate</name>
        <qualifiedname>BWindow::Activate</qualifiedname>
        <param>
          <type>bool</type>
          <defname>active</defname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Activates or deactivates the window based on <emphasis>active</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The title tab of the active window is drawn more brightly, the window is made frontmost, and it becomes the target of keyboard events. Calling <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> automatically activates the window calling the <ref refid="classBWindow_1a0a17d973a17bb8d3aef09d45d58a9aca" kindref="member">WindowActivated()</ref> hook method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> to activate the window, <computeroutput>false</computeroutput> to deactivate the window.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="157" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a798386ef9d12eb4f0dafff375e3b85d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::AddChild</definition>
        <argsstring>(BLayoutItem *child)</argsstring>
        <name>AddChild</name>
        <qualifiedname>BWindow::AddChild</qualifiedname>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Add the <emphasis>child</emphasis> layout item to the view hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The child layout item to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="113" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac3b09ede3b0256df9cbcc7b2a3d6eda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::AddChild</definition>
        <argsstring>(BView *child, BView *before=NULL)</argsstring>
        <name>AddChild</name>
        <qualifiedname>BWindow::AddChild</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>child</declname>
        </param>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>before</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Adds <emphasis>child</emphasis> to the view hierarchy immediately before <emphasis>before</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>A view may only have one parent at a time so <emphasis>child</emphasis> must not have already been added to the view hierarchy. If <emphasis>before</emphasis> is <computeroutput>NULL</computeroutput> then <emphasis>child</emphasis> is added to the end of the view hierarchy.</para>
<para>The AttachedToWindow() method is invoked on <emphasis>child</emphasis> and all of its descendent views.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The child view to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>The sibling view to add <emphasis>child</emphasis> before.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="112" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac2abecfda66af23ee5e944530ce69c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::AddToSubset</definition>
        <argsstring>(BWindow *window)</argsstring>
        <name>AddToSubset</name>
        <qualifiedname>BWindow::AddToSubset</qualifiedname>
        <param>
          <type><ref refid="classBWindow" kindref="compound">BWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Adds <emphasis>window</emphasis> to be in the subset of the <ref refid="classBWindow" kindref="compound">BWindow</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>window</emphasis> was added as a subset of the <ref refid="classBWindow" kindref="compound">BWindow</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>window</computeroutput> is not <computeroutput>B_NORMAL_WINDOW_FEEL</computeroutput> or the <ref refid="classBWindow" kindref="compound">BWindow</ref> object&apos;s feel is not set to <computeroutput>B_MODAL_SUBSET_WINDOW_FEEL</computeroutput> or <computeroutput>B_FLOATING_SUBSET_WINDOW_FEEL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Could not lock the <ref refid="classBWindow" kindref="compound">BWindow</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="233" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a69163d40d8f1eda77c9134ad4ab745a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::Archive</definition>
        <argsstring>(BMessage *archive, bool deep=true) const</argsstring>
        <name>Archive</name>
        <qualifiedname>BWindow::Archive</qualifiedname>
        <reimplements refid="classBLooper_1a791ef8664f674b6683d551762888f1c2">Archive</reimplements>
        <reimplementedby refid="classBDirectWindow_1a39e69ba4bba5221b3099cf34129862c8">Archive</reimplementedby>
        <reimplementedby refid="classBAlert_1aba312ca5f7e668bf4d96efc7f41625a3">Archive</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>data</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Archives the object into the <emphasis>data</emphasis> message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="classBMessage" kindref="compound">BMessage</ref> object to archive the object into. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deep</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to archive child views as well.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if the object was archived or an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="106" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a160e5f8757a65eaf3fec463fd6f2ba33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::BeginViewTransaction</definition>
        <argsstring>()</argsstring>
        <name>BeginViewTransaction</name>
        <qualifiedname>BWindow::BeginViewTransaction</qualifiedname>
        <briefdescription>
<para>Stall updates to App Server allowing you to batch drawing commands to limit flickering. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classBWindow_1a83111af72c672b2b7029e712e9b702f3" kindref="member">DisableUpdates()</ref> the messages are sent but are not processed.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="194" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab1084c04b99938ec93d2865962ec6bc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BWindow::Bounds</definition>
        <argsstring>() const</argsstring>
        <name>Bounds</name>
        <qualifiedname>BWindow::Bounds</qualifiedname>
        <briefdescription>
<para>Returns the bounding rectangle of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The bounding rectangle of the window as a <ref refid="classBRect" kindref="compound">BRect</ref> in the window&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBWindow_1ab6c744272c04751fa0b44e605b063a5d" kindref="member">Frame()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="202" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a4ea700aa901a1ac76b23605d82c79de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::CenterIn</definition>
        <argsstring>(const BRect &amp;rect)</argsstring>
        <name>CenterIn</name>
        <qualifiedname>BWindow::CenterIn</qualifiedname>
        <param>
          <type>const <ref refid="classBRect" kindref="compound">BRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Center the window in <emphasis>rect</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to center the window in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="176" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a1fbaa783dffbd7bb5f0b135cde5e0237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::CenterOnScreen</definition>
        <argsstring>()</argsstring>
        <name>CenterOnScreen</name>
        <qualifiedname>BWindow::CenterOnScreen</qualifiedname>
        <briefdescription>
<para>Centers the window on the screen the window is currently on. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="177" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aa9890ed5cb76c2c2a8fb82d7cd664586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::CenterOnScreen</definition>
        <argsstring>(screen_id id)</argsstring>
        <name>CenterOnScreen</name>
        <qualifiedname>BWindow::CenterOnScreen</qualifiedname>
        <param>
          <type>screen_id</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Centers the window on the screen with the passed in <emphasis>id</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="178" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aeaeec9bcb12b7b03132e61dba501b19b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::ChildAt</definition>
        <argsstring>(int32 index) const</argsstring>
        <name>ChildAt</name>
        <qualifiedname>BWindow::ChildAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a pointer to the child view found at <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the child view to return a pointer of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the child view at <emphasis>index</emphasis> or <computeroutput>NULL</computeroutput> if not found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="116" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a3be508837c0b14b176b916e45c9c1f31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::Close</definition>
        <argsstring>()</argsstring>
        <name>Close</name>
        <qualifiedname>BWindow::Close</qualifiedname>
        <briefdescription>
<para>Deprecated alias for <ref refid="classBWindow_1a054c0206836014dcc20c59e50bceab44" kindref="member">BWindow::Quit()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The advised way to close a window is to use <ref refid="classBWindow_1a054c0206836014dcc20c59e50bceab44" kindref="member">BWindow::Quit()</ref>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="110" column="5" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="110" bodyend="110"/>
        <references refid="classBWindow_1a054c0206836014dcc20c59e50bceab44">Quit</references>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aaa76e90a0578a4081eb4765467d594ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::ConvertFromScreen</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BWindow::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>point</emphasis> from the screen&apos;s coordinate system to the window&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="162" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac0f4cc714ef1cc817100ae028f75d496" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BWindow::ConvertFromScreen</definition>
        <argsstring>(BPoint point) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BWindow::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>point</emphasis> converted from the screen&apos;s coordinate system to the window&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBPoint" kindref="compound">BPoint</ref> object in the window&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="163" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a7b3b4a579b4e14cd6acf1a95aee75687" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::ConvertFromScreen</definition>
        <argsstring>(BRect *rect) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BWindow::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>rect</emphasis> from the screen&apos;s coordinate system to the window&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="166" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae748ea5865c1905c56c30e110c2f4947" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BWindow::ConvertFromScreen</definition>
        <argsstring>(BRect rect) const</argsstring>
        <name>ConvertFromScreen</name>
        <qualifiedname>BWindow::ConvertFromScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>rect</emphasis> converted from the screen&apos;s coordinate system to the window&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBRect" kindref="compound">BRect</ref> object in the window&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="167" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a218bb4c66ca3f58fbc203a36996fd119" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::ConvertToScreen</definition>
        <argsstring>(BPoint *point) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BWindow::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>point</emphasis> to the screen&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="160" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac139848b8a9075d0ede0e28d87d95872" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BWindow::ConvertToScreen</definition>
        <argsstring>(BPoint point) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BWindow::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>point</emphasis> converted to the screen&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBPoint" kindref="compound">BPoint</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBPoint" kindref="compound">BPoint</ref> object in the screen&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="161" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a83c3d8f1fb020740f7b4c3658e5222b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::ConvertToScreen</definition>
        <argsstring>(BRect *rect) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BWindow::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Convert <emphasis>rect</emphasis> to the screen&apos;s coordinate system in place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="164" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a6997351ff94fca3d18459b41a790ce73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BWindow::ConvertToScreen</definition>
        <argsstring>(BRect rect) const</argsstring>
        <name>ConvertToScreen</name>
        <qualifiedname>BWindow::ConvertToScreen</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Returns <emphasis>rect</emphasis> converted to the screen&apos;s coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBRect" kindref="compound">BRect</ref> object to convert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="classBRect" kindref="compound">BRect</ref> object in the screen&apos;s coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="165" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a742200112899822a889c2e69bf86db5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BWindow::CountChildren</definition>
        <argsstring>() const</argsstring>
        <name>CountChildren</name>
        <qualifiedname>BWindow::CountChildren</qualifiedname>
        <briefdescription>
<para>Returns the number of child views that the window has. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of child views as an int32.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="115" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a31d98b696b4e2a98ae83c841e342fe1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::CurrentFocus</definition>
        <argsstring>() const</argsstring>
        <name>CurrentFocus</name>
        <qualifiedname>BWindow::CurrentFocus</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the current focus view of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the current focus view of the window or <computeroutput>NULL</computeroutput> if not found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="155" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a8a990fd437ac8f94f7be26f35145048d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BWindow::DecoratorFrame</definition>
        <argsstring>() const</argsstring>
        <name>DecoratorFrame</name>
        <qualifiedname>BWindow::DecoratorFrame</qualifiedname>
        <briefdescription>
<para>Returns the frame rectangle of the window decorator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The bounding rectangle of the window decorator as a <ref refid="classBRect" kindref="compound">BRect</ref> in the screen coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="204" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a6995f1dcc605c006e4118cc4b687e766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBButton" kindref="compound">BButton</ref> *</type>
        <definition>BButton * BWindow::DefaultButton</definition>
        <argsstring>() const</argsstring>
        <name>DefaultButton</name>
        <qualifiedname>BWindow::DefaultButton</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the default button set on the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the window&apos;s default button or <computeroutput>NULL</computeroutput> if it doesn&apos;t have one.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="145" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a83111af72c672b2b7029e712e9b702f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::DisableUpdates</definition>
        <argsstring>()</argsstring>
        <name>DisableUpdates</name>
        <qualifiedname>BWindow::DisableUpdates</qualifiedname>
        <briefdescription>
<para>Suppresses drawing within the window. </para>
        </briefdescription>
        <detaileddescription>
<para>If you want the results of several drawing operations to appear in the window all at once you disable updates, draw, and then re-enable updates.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="191" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a2089af8a214389c3f673c06420457b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::DispatchMessage</definition>
        <argsstring>(BMessage *message, BHandler *handler)</argsstring>
        <name>DispatchMessage</name>
        <qualifiedname>BWindow::DispatchMessage</qualifiedname>
        <reimplements refid="classBLooper_1add21ca8765c67b0dbf95b8f0361afa73">DispatchMessage</reimplements>
        <reimplementedby refid="classBDirectWindow_1a62952e05d331dde0b091998db878a9f6">DispatchMessage</reimplementedby>
        <reimplementedby refid="classBAlert_1a29b871841d182889a147b58b16a7c111">DispatchMessage</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>handler</declname>
          <defname>target</defname>
        </param>
        <briefdescription>
<para>Window&apos;s central message-processing method. </para>
        </briefdescription>
        <detaileddescription>
<para>This method called automatically as messages arrive in the queue, you should never call <ref refid="classBWindow_1a2089af8a214389c3f673c06420457b16" kindref="member">DispatchMessage()</ref> yourself.</para>
<para><simplesect kind="warning"><para>Don&apos;t override this method in your <ref refid="classBWindow" kindref="compound">BWindow</ref> subclass. Override <ref refid="classBWindow_1a1ce544ea7d9adcc6941759817a42affe" kindref="member">MessageReceived()</ref> instead to alter the window&apos;s message dispatching mechanism.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBLooper_1add21ca8765c67b0dbf95b8f0361afa73" kindref="member">BLooper::DispatchMessage()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="118" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab71c5c4ddd8f1cc677115157ec1c0c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::EnableUpdates</definition>
        <argsstring>()</argsstring>
        <name>EnableUpdates</name>
        <qualifiedname>BWindow::EnableUpdates</qualifiedname>
        <briefdescription>
<para>Re-enable drawing within the window. </para>
        </briefdescription>
        <detaileddescription>
<para>If you want the results of several drawing operations to appear in the window all at once you disable updates, draw, and then re-enable updates.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="192" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a54d387b099fb88e5aa565bdc40f338eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::EndViewTransaction</definition>
        <argsstring>()</argsstring>
        <name>EndViewTransaction</name>
        <qualifiedname>BWindow::EndViewTransaction</qualifiedname>
        <briefdescription>
<para>Ends a view transaction allowing update to go to App Server again. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="197" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab3cf63c90d209ec6cb1aaeadb7f61fb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Window_8h_1a4a2cc5b573803174c60a35727f711bf3" kindref="member">window_feel</ref></type>
        <definition>window_feel BWindow::Feel</definition>
        <argsstring>() const</argsstring>
        <name>Feel</name>
        <qualifiedname>BWindow::Feel</qualifiedname>
        <briefdescription>
<para>Returns the current window feel flag. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The currently set window feel flag.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="245" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a4c252d9c733a703ca25dcc4d3eae6209" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::FindView</definition>
        <argsstring>(BPoint) const</argsstring>
        <name>FindView</name>
        <qualifiedname>BWindow::FindView</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <defname>point</defname>
        </param>
        <briefdescription>
<para>Returns a pointer to the attached view located at the specified <emphasis>point</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>point</emphasis> to get the view at in the window&apos;s coordinate system.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the <ref refid="classBView" kindref="compound">BView</ref> object or <computeroutput>NULL</computeroutput> if no view is found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac295d2dff72e4c5254cf597d4b31f9c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::FindView</definition>
        <argsstring>(const char *viewName) const</argsstring>
        <name>FindView</name>
        <qualifiedname>BWindow::FindView</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>viewName</declname>
        </param>
        <briefdescription>
<para>Returns the attached view with the specified <emphasis>viewName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>viewName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the attached view to look for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the <ref refid="classBView" kindref="compound">BView</ref> object or <computeroutput>NULL</computeroutput> if no view is found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="153" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab99cdac9e2a0270c8afc07cfae7a02a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BWindow::Flags</definition>
        <argsstring>() const</argsstring>
        <name>Flags</name>
        <qualifiedname>BWindow::Flags</qualifiedname>
        <briefdescription>
<para>Returns the current window flags. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The currently set window flags.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="248" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a2e74fd82a8095399d73a28920cc7c9b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::Flush</definition>
        <argsstring>() const</argsstring>
        <name>Flush</name>
        <qualifiedname>BWindow::Flush</qualifiedname>
        <briefdescription>
<para>Flushes the window&apos;s connection to App Server causing any pending messages to be processed then returns immediately. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="186" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab6c744272c04751fa0b44e605b063a5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BWindow::Frame</definition>
        <argsstring>() const</argsstring>
        <name>Frame</name>
        <qualifiedname>BWindow::Frame</qualifiedname>
        <briefdescription>
<para>Returns the frame rectangle of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The bounding rectangle of the window as a <ref refid="classBRect" kindref="compound">BRect</ref> in the screen coordinate system.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBWindow_1ab1084c04b99938ec93d2865962ec6bc2" kindref="member">Bounds()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="203" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a95f6fb2941250e7ed54fce6671f782c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::FrameMoved</definition>
        <argsstring>(BPoint newPosition)</argsstring>
        <name>FrameMoved</name>
        <qualifiedname>BWindow::FrameMoved</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a90091f68f028a04d9454201603c27638">FrameMoved</reimplementedby>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>newPosition</declname>
        </param>
        <briefdescription>
<para>Hook method that gets called when the window is moved. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>The point of the top left corner of the frame rectangle that the window has been moved to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="121" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a280fab2b2900abc61dd4bcb7a2a4793f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::FrameResized</definition>
        <argsstring>(float newWidth, float newHeight)</argsstring>
        <name>FrameResized</name>
        <qualifiedname>BWindow::FrameResized</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a8d5888adb8fa39a0affbbdaae6bcfd24">FrameResized</reimplementedby>
        <reimplementedby refid="classBAlert_1a8409d243d503b948dc7da5d95e6ed66b">FrameResized</reimplementedby>
        <param>
          <type>float</type>
          <declname>newWidth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>newHeight</declname>
        </param>
        <briefdescription>
<para>Hook method that gets called when the window is resized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <emphasis>width</emphasis> of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <emphasis>height</emphasis> of the window.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="126" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a58fba1b0ad6c2035cf1dac6304d21912" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::GetDecoratorSettings</definition>
        <argsstring>(BMessage *settings) const</argsstring>
        <name>GetDecoratorSettings</name>
        <qualifiedname>BWindow::GetDecoratorSettings</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Fill out the window&apos;s decorator settings into <emphasis>settings</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>settings</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBMessage" kindref="compound">BMessage</ref> object to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if the decorator settings were filled out successfully or an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="221" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1adb07dc64e991f7a42dfad000b2a1b0c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBLayout" kindref="compound">BLayout</ref> *</type>
        <definition>BLayout * BWindow::GetLayout</definition>
        <argsstring>() const</argsstring>
        <name>GetLayout</name>
        <qualifiedname>BWindow::GetLayout</qualifiedname>
        <briefdescription>
<para>Get the layout of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The layout of the window.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="271" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aebce716c628bac67367875d1129db8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::GetSizeLimits</definition>
        <argsstring>(float *minWidth, float *maxWidth, float *minHeight, float *maxHeight)</argsstring>
        <name>GetSizeLimits</name>
        <qualifiedname>BWindow::GetSizeLimits</qualifiedname>
        <param>
          <type>float *</type>
          <declname>minWidth</declname>
          <defname>_minWidth</defname>
        </param>
        <param>
          <type>float *</type>
          <declname>maxWidth</declname>
          <defname>_maxWidth</defname>
        </param>
        <param>
          <type>float *</type>
          <declname>minHeight</declname>
          <defname>_minHeight</defname>
        </param>
        <param>
          <type>float *</type>
          <declname>maxHeight</declname>
          <defname>_maxHeight</defname>
        </param>
        <briefdescription>
<para>Fills out the size limits set on the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_minWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum width of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_maxWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_minHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum height of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_maxHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height of the window.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="216" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a8c2f3013601609b54778af99fa6a25ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::GetSupportedSuites</definition>
        <argsstring>(BMessage *data)</argsstring>
        <name>GetSupportedSuites</name>
        <qualifiedname>BWindow::GetSupportedSuites</qualifiedname>
        <reimplements refid="classBLooper_1a915a50de7d5b6263f0fd1a349a9a6d92">GetSupportedSuites</reimplements>
        <reimplementedby refid="classBDirectWindow_1a55e920fcba8972f5173bd3714f416c13">GetSupportedSuites</reimplementedby>
        <reimplementedby refid="classBAlert_1a9e658b2f7dc50b2c5da3191d77a22594">GetSupportedSuites</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reports the suites of messages and specifiers understood by the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3     </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="231" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a62a354bee61a0b5cd5ac499b5f728b7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::GetWindowAlignment</definition>
        <argsstring>(window_alignment *mode=NULL, int32 *h=NULL, int32 *hOffset=NULL, int32 *width=NULL, int32 *widthOffset=NULL, int32 *v=NULL, int32 *vOffset=NULL, int32 *height=NULL, int32 *heightOffset=NULL) const</argsstring>
        <name>GetWindowAlignment</name>
        <qualifiedname>BWindow::GetWindowAlignment</qualifiedname>
        <param>
          <type><ref refid="Window_8h_1af172769fce5d31926232c9ca022008bb" kindref="member">window_alignment</ref> *</type>
          <declname>mode</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>h</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>hOffset</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>width</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>widthOffset</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>v</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>vOffset</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>height</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>heightOffset</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Fills out the pointers with the alignment of the content of the window on the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="258" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::Hide</definition>
        <argsstring>()</argsstring>
        <name>Hide</name>
        <qualifiedname>BWindow::Hide</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1af9258f81376f03c05192a1c0627722bd">Hide</reimplementedby>
        <briefdescription>
<para>Removes the window from the screen, removes it from Deskbar&apos;s window list, and passes active status to another window. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls to <ref refid="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" kindref="member">Hide()</ref> and <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> are cumulative.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="182" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a6abf2efb0ab304b75d72df3b6a2b9df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::InvalidateLayout</definition>
        <argsstring>(bool descendants=false)</argsstring>
        <name>InvalidateLayout</name>
        <qualifiedname>BWindow::InvalidateLayout</qualifiedname>
        <param>
          <type>bool</type>
          <declname>descendants</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Invalidate layout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descendants</parametername>
</parameternamelist>
<parameterdescription>
<para>Also invalidate its children windows.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="273" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae5d1ae4e9598ed736c557031b92753ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::InViewTransaction</definition>
        <argsstring>() const</argsstring>
        <name>InViewTransaction</name>
        <qualifiedname>BWindow::InViewTransaction</qualifiedname>
        <briefdescription>
<para>Returns whether or not the window is currently in a view transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the window is currently in a view transaction, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="200" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1abbaa2f20d86a5c4d12591fefef0c49fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsActive</definition>
        <argsstring>() const</argsstring>
        <name>IsActive</name>
        <qualifiedname>BWindow::IsActive</qualifiedname>
        <briefdescription>
<para>Returns whether or not the window is active. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the window is active, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="209" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a54158d02e55dbeb212ccf9af5b5a2f23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsFloating</definition>
        <argsstring>() const</argsstring>
        <name>IsFloating</name>
        <qualifiedname>BWindow::IsFloating</qualifiedname>
        <briefdescription>
<para>Returns whether or not the window is floating. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the window is floating, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="251" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a61ab745cf98f47cac71ed3b750d4d21f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsFront</definition>
        <argsstring>() const</argsstring>
        <name>IsFront</name>
        <qualifiedname>BWindow::IsFront</qualifiedname>
        <briefdescription>
<para>Returns whether or not the window is the frontmost on screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if window is the frontmost on screen, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="208" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae92c2b3b1340af7740b7c4e3e14dcd30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsHidden</definition>
        <argsstring>() const</argsstring>
        <name>IsHidden</name>
        <qualifiedname>BWindow::IsHidden</qualifiedname>
        <briefdescription>
<para>Returns whether or not the window is hidden. </para>
        </briefdescription>
        <detaileddescription>
<para>Windows are hidden by default, you must call <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> to show the window starting the message loop going.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="183" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a6c209b1d5ab1b82f43993074b1373678" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsMinimized</definition>
        <argsstring>() const</argsstring>
        <name>IsMinimized</name>
        <qualifiedname>BWindow::IsMinimized</qualifiedname>
        <briefdescription>
<para>Returns whether or not the window is minimized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the window is minimized, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="184" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aa10b6592ab7e291ce7152a72605c68fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsModal</definition>
        <argsstring>() const</argsstring>
        <name>IsModal</name>
        <qualifiedname>BWindow::IsModal</qualifiedname>
        <briefdescription>
<para>Returns whether or not the window is modal. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the window is modal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="250" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a61d9b0d1e0de31231b835cc5293f8ed2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsOffscreenWindow</definition>
        <argsstring>() const</argsstring>
        <name>IsOffscreenWindow</name>
        <qualifiedname>BWindow::IsOffscreenWindow</qualifiedname>
        <briefdescription>
<para>Tests if window is used for drawing into a <ref refid="classBBitmap" kindref="compound">BBitmap</ref>. This is mostly used by the Interface Kit itself. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the window is used for drawing into a <ref refid="classBBitmap" kindref="compound">BBitmap</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="275" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a3f4cf14e9f6453e63b58acfd7098941c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMenuBar" kindref="compound">BMenuBar</ref> *</type>
        <definition>BMenuBar * BWindow::KeyMenuBar</definition>
        <argsstring>() const</argsstring>
        <name>KeyMenuBar</name>
        <qualifiedname>BWindow::KeyMenuBar</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the key menu bar set to the window. </para>
        </briefdescription>
        <detaileddescription>
<para>If the window contains only one menu bar it is automatically considered to be the key menu bar for the window. If more than one menu bar is attached to the window then the last one added to the window&apos;s view hierarchy is considered to be the key menu bar for the window.</para>
<para>To explicitly set a menu bar as the key menu bar call <ref refid="classBWindow_1aa1e9322c76ffdad1886253171f8a5972" kindref="member">SetKeyMenuBar()</ref>.</para>
<para><simplesect kind="return"><para>A pointer to the key menu bar or <computeroutput>NULL</computeroutput> is not is set.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="212" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a59ef137725976cea5008e5efd683357e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::LastMouseMovedView</definition>
        <argsstring>() const</argsstring>
        <name>LastMouseMovedView</name>
        <qualifiedname>BWindow::LastMouseMovedView</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the attached view that most recently received a <computeroutput>B_MOUSE_MOVED</computeroutput> message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer the <ref refid="classBView" kindref="compound">BView</ref> object that most recently received a <computeroutput>B_MOUSE_MOVED</computeroutput> message or <computeroutput>NULL</computeroutput> if not found.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="226" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae3f008c018e413d75ddea1a60b0c9df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::Layout</definition>
        <argsstring>(bool force)</argsstring>
        <name>Layout</name>
        <qualifiedname>BWindow::Layout</qualifiedname>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Update the size limits and do the layout of the topmost view attached to the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, layout even if valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="274" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a056fe3233f883b1c4518619e59d825cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Window_8h_1addfecca662cd95a41673f24622690b41" kindref="member">window_look</ref></type>
        <definition>window_look BWindow::Look</definition>
        <argsstring>() const</argsstring>
        <name>Look</name>
        <qualifiedname>BWindow::Look</qualifiedname>
        <briefdescription>
<para>Returns the current window look flag. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The currently set window look flag.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="242" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a981d5c2993f4514fbcd1bdaf297a2a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::MenusBeginning</definition>
        <argsstring>()</argsstring>
        <name>MenusBeginning</name>
        <qualifiedname>BWindow::MenusBeginning</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1af05688e3cffca075a7c88c4d8707c9b9">MenusBeginning</reimplementedby>
        <briefdescription>
<para>Hook method that gets called just before a menu owned by the window is shown. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method is not invoked by a message, there is no <computeroutput>B_MENUS_BEGINNING</computeroutput> flag.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="147" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a7bb882de172223e68ee6249596b80564" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::MenusEnded</definition>
        <argsstring>()</argsstring>
        <name>MenusEnded</name>
        <qualifiedname>BWindow::MenusEnded</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a4aa81f5f362906c8cf7b41230dce3879">MenusEnded</reimplementedby>
        <briefdescription>
<para>Hook method that gets called just before a menu owned by the window is hidden. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method is not invoked by a message, there is no <computeroutput>B_MENUS_ENDED</computeroutput> flag.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="148" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a1ce544ea7d9adcc6941759817a42affe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::MessageReceived</definition>
        <argsstring>(BMessage *message)</argsstring>
        <name>MessageReceived</name>
        <qualifiedname>BWindow::MessageReceived</qualifiedname>
        <reimplements refid="classBLooper_1a89303d11c987dae76cdfc38ad5d3c4c2">MessageReceived</reimplements>
        <reimplementedby refid="classBDirectWindow_1a1eb5e6dfeee341e9baf3d688ff66194a">MessageReceived</reimplementedby>
        <reimplementedby refid="classBAlert_1a1300fdf51e73dd4f8a24b908d6fc2e1e">MessageReceived</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Handle <emphasis>message</emphasis> received by the associated looper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>message</emphasis> received by the looper.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBHandler_1aeecda5017e0081db617f23bbff71fb53" kindref="member">BHandler::MessageReceived()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="120" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aabe75f91b52b94de6989b4cf49bd89b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::Minimize</definition>
        <argsstring>(bool minimize)</argsstring>
        <name>Minimize</name>
        <qualifiedname>BWindow::Minimize</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a8107850d1d7710dc11a1acf1bbf16972">Minimize</reimplementedby>
        <param>
          <type>bool</type>
          <declname>minimize</declname>
        </param>
        <briefdescription>
<para>Minimizes or un-minimizes the window based on <emphasis>minimize</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" kindref="member">Hide()</ref> an <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref>, <ref refid="classBWindow_1aabe75f91b52b94de6989b4cf49bd89b5" kindref="member">Minimize()</ref> dims and un-dims the entry for the window in Deskbar&apos;s window list rather than removing it. Also <ref refid="classBWindow_1aabe75f91b52b94de6989b4cf49bd89b5" kindref="member">Minimize()</ref> calls are not cumulative like <ref refid="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" kindref="member">Hide()</ref> and <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref>; one <computeroutput>false</computeroutput> call will undo multiple <computeroutput>true</computeroutput> calls.</para>
<para><ref refid="classBWindow_1aabe75f91b52b94de6989b4cf49bd89b5" kindref="member">Minimize()</ref> also acts as a hook method that is invoked when the user double- clicks on the title tab of the window or selects the window from the DeskBar window list. The <emphasis>minimize</emphasis> parameter is <computeroutput>true</computeroutput> if the window is about to be hidden and <computeroutput>false</computeroutput> if it is about to be shown.</para>
<para>If you override <ref refid="classBWindow_1aabe75f91b52b94de6989b4cf49bd89b5" kindref="member">Minimize()</ref> and you want to inherit <ref refid="classBWindow" kindref="compound">BWindow</ref>&apos;s behavior, you must call <ref refid="classBWindow_1aabe75f91b52b94de6989b4cf49bd89b5" kindref="member">BWindow::Minimize()</ref>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="127" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a146584fa5815bd413f71671f33a9de89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::MoveBy</definition>
        <argsstring>(float dx, float dy)</argsstring>
        <name>MoveBy</name>
        <qualifiedname>BWindow::MoveBy</qualifiedname>
        <param>
          <type>float</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dy</declname>
        </param>
        <briefdescription>
<para>Move the window by <emphasis>dx</emphasis> pixels horizontally and <emphasis>dy</emphasis> pixels vertically. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>dx</emphasis> and <emphasis>dy</emphasis> must be integral units.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to move the window vertically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels to move the window horizontally.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="169" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae426291c30652864d0a464518f9cda12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::MoveOnScreen</definition>
        <argsstring>(uint32 flags=0)</argsstring>
        <name>MoveOnScreen</name>
        <qualifiedname>BWindow::MoveOnScreen</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Update window size and position to make it visible on screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This convenience method helps you to automatically move and resize a window to make it visible on the screen, in case the window is partially off screen because of its size or its position. This method will do nothing if the window fits on the screen.</para>
<para>The default behavior is as follows:<itemizedlist>
<listitem><para>If the window size is larger than the screen, the window is resized so that it fits on the screen.</para>
</listitem><listitem><para>If the window is still partially off-screen, it will then be centered horizontally and vertically so that it is fully visible.</para>
</listitem></itemizedlist>
</para>
<para>Note that this does not affect window size and positions for windows that are currently visible on the screen. Also note that this method does not affect whether the window is covered by other windows that are on top. You can use <ref refid="classBWindow_1a24ef781656049451c5c6ed06eeb98c06" kindref="member">BWindow::Activate()</ref> to bring a window to the top.</para>
<para>The behavior of this method can be altered by passing either or both of the following modifiers in the <emphasis>flags</emphasis> parameter:<itemizedlist>
<listitem><para><ref refid="Window_8h_1afccd240f973cf154952fb917c9209719aa378a9df433b2886f8df647db7b6c2c3" kindref="member">B_DO_NOT_RESIZE_TO_FIT</ref> Do not resize the window. If the window is too large to be on the screen, then it will at least be moved so that the left-top of the window is visible, and only the right and/or bottom of the window will be off screen.</para>
</listitem><listitem><para><ref refid="Window_8h_1afccd240f973cf154952fb917c9209719aa2f8362b59b670aaa704eaa3f9ce976d" kindref="member">B_MOVE_IF_PARTIALLY_OFFSCREEN</ref> Use this parameter if instead of centering the window in the middle of the screen, you only want to do the minimum movement so that at least the top left part of the window is visible on screen.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Can be <computeroutput>0</computeroutput> for the default behavior, or a any combination of <computeroutput>B_DO_NOT_RESIZE_TO_FIT</computeroutput> and <computeroutput>B_MOVE_IF_PARTIALLY_OFFSCREEN</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="179" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae81b509d6ee2eb29b9a703c75ef07ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::MoveTo</definition>
        <argsstring>(BPoint)</argsstring>
        <name>MoveTo</name>
        <qualifiedname>BWindow::MoveTo</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <defname>point</defname>
        </param>
        <briefdescription>
<para>Move the window to <emphasis>point</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>the location to move the window in the screen&apos;s coordinate system.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="170" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1af419313a1b9b73a2c1cdb2365ff16189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::MoveTo</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>MoveTo</name>
        <qualifiedname>BWindow::MoveTo</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Move the window to the specified <emphasis>x</emphasis> and <emphasis>y</emphasis> coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>x</emphasis> and <emphasis>y</emphasis> must be integral units.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal coordinate to move the window to in the screen&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical coordinate to move the window to in the screen&apos;s coordinate system.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="171" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a9c03d9a6a454edec5eb38657e5c66490" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::NeedsUpdate</definition>
        <argsstring>() const</argsstring>
        <name>NeedsUpdate</name>
        <qualifiedname>BWindow::NeedsUpdate</qualifiedname>
        <briefdescription>
<para>Returns whether or not any of the attached views need to be updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if an attached view needs to be updated, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="150" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1afde7d74e5526f740dedb82a1d10faa7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BWindow::Perform</definition>
        <argsstring>(perform_code code, void *data)</argsstring>
        <name>Perform</name>
        <qualifiedname>BWindow::Perform</qualifiedname>
        <reimplements refid="classBLooper_1adfc642544ce22888d412e6a4be25fa72">Perform</reimplements>
        <reimplementedby refid="classBDirectWindow_1a113afd3534fca8b81bcc86f8e55738be">Perform</reimplementedby>
        <reimplementedby refid="classBAlert_1a3d2769c5bf9b9822f21770e38e561fd6">Perform</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1ad2237b0064c91c237159edc020989bab" kindref="member">perform_code</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Internal method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="236" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a8ea37743fc8c09aab2a511a7c14fa9c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BWindow::PulseRate</definition>
        <argsstring>() const</argsstring>
        <name>PulseRate</name>
        <qualifiedname>BWindow::PulseRate</qualifiedname>
        <briefdescription>
<para>Returns the pulse rate of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>B_PULSE</computeroutput> messages are sent by default every 500,000 microseconds provided that no other messages are pending.</para>
<para><simplesect kind="return"><para>The pulse rate of the window as a bigtime_t.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="135" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a054c0206836014dcc20c59e50bceab44" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::Quit</definition>
        <argsstring>()</argsstring>
        <name>Quit</name>
        <qualifiedname>BWindow::Quit</qualifiedname>
        <reimplements refid="classBLooper_1a10d5a4873f14fd247890a6dfc9b8b949">Quit</reimplements>
        <reimplementedby refid="classBDirectWindow_1a0e078c054a66514021099c529cfdde2f">Quit</reimplementedby>
        <reimplementedby refid="classBAlert_1a691fe42dc7dc5acea09771e9c080dd0e">Quit</reimplementedby>
        <briefdescription>
<para>Deletes the window and all child views, destroys the window thread, removes the window&apos;s connection to the Application Server, and deletes the object. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this method to destroy a window rather than using the delete operator.</para>
<para>This method works much like the <ref refid="classBLooper_1a10d5a4873f14fd247890a6dfc9b8b949" kindref="member">BLooper::Quit()</ref>, it doesn&apos;t return when called from the <ref refid="classBWindow" kindref="compound">BWindow</ref>&apos;s thread and it returns after all messages have been processed when called from another thread and the <ref refid="classBWindow" kindref="compound">BWindow</ref> and its thread has been destroyed.</para>
<para><simplesect kind="warning"><para>The window must first be locked before calling <ref refid="classBWindow_1a054c0206836014dcc20c59e50bceab44" kindref="member">Quit()</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBLooper_1a10d5a4873f14fd247890a6dfc9b8b949" kindref="member">BLooper::Quit()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="109" column="12"/>
        <referencedby refid="classBWindow_1a3be508837c0b14b176b916e45c9c1f31" compoundref="Window_8h" startline="110" endline="110">Close</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a8fccbfd10fceb2c6103c6036ca9e961a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BWindow::QuitRequested</definition>
        <argsstring>()</argsstring>
        <name>QuitRequested</name>
        <qualifiedname>BWindow::QuitRequested</qualifiedname>
        <reimplements refid="classBLooper_1aff7aaf066538383f0e0ea28d18eb8863">QuitRequested</reimplements>
        <reimplementedby refid="classBAlert_1ae91bb7bb3b99006f0b2616d47cf85985">QuitRequested</reimplementedby>
        <briefdescription>
<para>Hook method that gets called when the window receives a <emphasis>B_QUIT_REQUESTED</emphasis> message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBWindow_1a054c0206836014dcc20c59e50bceab44" kindref="member">Quit()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBLooper_1aff7aaf066538383f0e0ea28d18eb8863" kindref="member">BLooper::QuitRequested()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="267" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac271fe9be15e5d6e0a5d59b7b2ed3e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::RemoveChild</definition>
        <argsstring>(BView *child)</argsstring>
        <name>RemoveChild</name>
        <qualifiedname>BWindow::RemoveChild</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Removes <emphasis>child</emphasis> from the view hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>The child view to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether or not <emphasis>child</emphasis> was removed from the view hierarchy.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="114" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1af9ef1e4afee9bfde7c7d9d8e2796c2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::RemoveFromSubset</definition>
        <argsstring>(BWindow *window)</argsstring>
        <name>RemoveFromSubset</name>
        <qualifiedname>BWindow::RemoveFromSubset</qualifiedname>
        <param>
          <type><ref refid="classBWindow" kindref="compound">BWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Remove <emphasis>window</emphasis> from the subset of the <ref refid="classBWindow" kindref="compound">BWindow</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>window</emphasis> was removed from the subset of the <ref refid="classBWindow" kindref="compound">BWindow</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>window</computeroutput> is not <computeroutput>B_NORMAL_WINDOW_FEEL</computeroutput> or the <ref refid="classBWindow" kindref="compound">BWindow</ref> object&apos;s feel is not set to <computeroutput>B_MODAL_SUBSET_WINDOW_FEEL</computeroutput> or <computeroutput>B_FLOATING_SUBSET_WINDOW_FEEL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Could not lock the <ref refid="classBWindow" kindref="compound">BWindow</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="234" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a6aba4ddafc654f362799b6a96e6c76cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::ResizeBy</definition>
        <argsstring>(float dx, float dy)</argsstring>
        <name>ResizeBy</name>
        <qualifiedname>BWindow::ResizeBy</qualifiedname>
        <param>
          <type>float</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dy</declname>
        </param>
        <briefdescription>
<para>Resize the window by <emphasis>dx</emphasis> pixels horizontally and <emphasis>dy</emphasis> pixels vertically. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>dx</emphasis> and <emphasis>dy</emphasis> must be integral units.</para>
<para>dx The number of pixels to resize the window horizontally.</para>
<para>dy The number of pixels to resize the window vertically.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="172" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a31e2ea325258646128cfe8618cb79edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::ResizeTo</definition>
        <argsstring>(float width, float height)</argsstring>
        <name>ResizeTo</name>
        <qualifiedname>BWindow::ResizeTo</qualifiedname>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Resize the window to the specified <emphasis>width</emphasis> and <emphasis>height</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>width</emphasis> and <emphasis>height</emphasis> must be integral units.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width to resize the window to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height to resize the window to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="173" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a68db6173b92973252fc1876c5376bcd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::ResizeToPreferred</definition>
        <argsstring>()</argsstring>
        <name>ResizeToPreferred</name>
        <qualifiedname>BWindow::ResizeToPreferred</qualifiedname>
        <briefdescription>
<para>Resize the window to the preferred size of the window&apos;s layout. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="174" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aaf328e28799cf868ec31df2847a4ed37" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>BHandler * BWindow::ResolveSpecifier</definition>
        <argsstring>(BMessage *message, int32 index, BMessage *specifier, int32 what, const char *property)</argsstring>
        <name>ResolveSpecifier</name>
        <qualifiedname>BWindow::ResolveSpecifier</qualifiedname>
        <reimplements refid="classBLooper_1a16b494160d9b37d4dbbc0d426a22c946">ResolveSpecifier</reimplements>
        <reimplementedby refid="classBAlert_1a22285daeb96ea0936faab97b077115e6">ResolveSpecifier</reimplementedby>
        <reimplementedby refid="classBDirectWindow_1aee5db7142cabc984cb16e61eaa7baa36">ResolveSpecifier</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>what</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the proper handler for a scripting message.  </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The scripting message to determine the handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the specifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>specifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The message which contains the specifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>The &apos;what&apos; field of the specifier message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the target property.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the proper <ref refid="classBHandler" kindref="compound">BHandler</ref> for the given scripting message.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3     </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="228" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae49c02ad870d55514c800631b37b97cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>thread_id</type>
        <definition>thread_id BWindow::Run</definition>
        <argsstring>()</argsstring>
        <name>Run</name>
        <qualifiedname>BWindow::Run</qualifiedname>
        <reimplements refid="classBLooper_1a88bb85410e0c4124bdc6f16168df4811">Run</reimplements>
        <briefdescription>
<para>Spawns the message loop thread and starts the window running. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBLooper_1a88bb85410e0c4124bdc6f16168df4811" kindref="member">BLooper::Run()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="268" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab53cad2a56a967f0a52d5603d806561b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::ScreenChanged</definition>
        <argsstring>(BRect screenSize, color_space depth)</argsstring>
        <name>ScreenChanged</name>
        <qualifiedname>BWindow::ScreenChanged</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1af260392459433e8abf6e47e869065975">ScreenChanged</reimplementedby>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>screenSize</declname>
        </param>
        <param>
          <type>color_space</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>Hook method that is called when the screen that the window is located on changes size or location or the color space of the screen changes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>screenSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The new screen size in the screen&apos;s coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The new color space of the screen.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="131" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a88c3aa6ee3ea29d7868bafec749f891e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::SendBehind</definition>
        <argsstring>(const BWindow *window)</argsstring>
        <name>SendBehind</name>
        <qualifiedname>BWindow::SendBehind</qualifiedname>
        <param>
          <type>const <ref refid="classBWindow" kindref="compound">BWindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Moves the <ref refid="classBWindow" kindref="compound">BWindow</ref> object behind <emphasis>window</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the window to move behind.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or <computeroutput>B_ERROR</computeroutput> on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="189" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aecfdd5136ed18c193357a8e3130ba578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::SetDecoratorSettings</definition>
        <argsstring>(const BMessage &amp;settings)</argsstring>
        <name>SetDecoratorSettings</name>
        <qualifiedname>BWindow::SetDecoratorSettings</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>settings</declname>
        </param>
        <briefdescription>
<para>Set the window decorator settings according to <emphasis>settings</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>settings</parametername>
</parameternamelist>
<parameterdescription>
<para>The decorator <emphasis>settings</emphasis> message to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if the decorator settings were set successfully or an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="220" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab6c969b403bd24dc8b1e9d846a4ae414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetDefaultButton</definition>
        <argsstring>(BButton *button)</argsstring>
        <name>SetDefaultButton</name>
        <qualifiedname>BWindow::SetDefaultButton</qualifiedname>
        <param>
          <type><ref refid="classBButton" kindref="compound">BButton</ref> *</type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Set the default button of the window to <emphasis>button</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The default button has a grey outline and is activated by the user pushing the Enter key. The user can activate the default button even if another view is currently set to be the focus view of the window.</para>
<para>A window may only have one default button at a time, to remove the current default without setting another button you may pass in <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the button to set as the default or <computeroutput>NULL</computeroutput> to unset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="144" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a2317402cb859f5a438bc69e186ee2f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::SetFeel</definition>
        <argsstring>(window_feel feel)</argsstring>
        <name>SetFeel</name>
        <qualifiedname>BWindow::SetFeel</qualifiedname>
        <param>
          <type><ref refid="Window_8h_1a4a2cc5b573803174c60a35727f711bf3" kindref="member">window_feel</ref></type>
          <declname>feel</declname>
        </param>
        <briefdescription>
<para>Changes the window feel set in the constructor to <emphasis>feel</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="244" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a8f0caf4693a1952ac9bbe9a52bfdd778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::SetFlags</definition>
        <argsstring>(uint32)</argsstring>
        <name>SetFlags</name>
        <qualifiedname>BWindow::SetFlags</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <defname>flags</defname>
        </param>
        <briefdescription>
<para>Changes the window flags set in the constructor to <emphasis>flags</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="247" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aa1e9322c76ffdad1886253171f8a5972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetKeyMenuBar</definition>
        <argsstring>(BMenuBar *bar)</argsstring>
        <name>SetKeyMenuBar</name>
        <qualifiedname>BWindow::SetKeyMenuBar</qualifiedname>
        <param>
          <type><ref refid="classBMenuBar" kindref="compound">BMenuBar</ref> *</type>
          <declname>bar</declname>
        </param>
        <briefdescription>
<para>Set the specified menu <emphasis>bar</emphasis> as the key menu bar for the window. </para>
        </briefdescription>
        <detaileddescription>
<para>The key menu bar is the one located at the top of the window at the root of the menu hierarchy that the user can navigate with the keyboard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bar</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the menu <emphasis>bar</emphasis> to set as as the key menu <emphasis>bar</emphasis> for the window.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="211" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ad0e630f2691a0f7919b809b7ea265095" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::SetLayout</definition>
        <argsstring>(BLayout *layout)</argsstring>
        <name>SetLayout</name>
        <qualifiedname>BWindow::SetLayout</qualifiedname>
        <param>
          <type><ref refid="classBLayout" kindref="compound">BLayout</ref> *</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
<para>Sets the <emphasis>layout</emphasis> of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>layout</emphasis> to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="270" column="12"/>
        <referencedby refid="classBLayoutBuilder_1_1Cards_1a08329883aebee0490f3faf96d86f1108" compoundref="LayoutBuilder_8h" startline="1433" endline="1440">BLayoutBuilder::Cards&lt; ParentBuilder &gt;::Cards</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Grid_1ad7bd68789548063830f46a0bb279e17a" compoundref="LayoutBuilder_8h" startline="793" endline="800">BLayoutBuilder::Grid&lt; ParentBuilder &gt;::Grid</referencedby>
        <referencedby refid="classBLayoutBuilder_1_1Group_1adebaf628afb53fdd86d6b153d60cf0ea" compoundref="LayoutBuilder_8h" startline="454" endline="461">BLayoutBuilder::Group&lt; ParentBuilder &gt;::Group</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac9ca5f4b8a78f95403dbc35ad9728e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::SetLook</definition>
        <argsstring>(window_look look)</argsstring>
        <name>SetLook</name>
        <qualifiedname>BWindow::SetLook</qualifiedname>
        <param>
          <type><ref refid="Window_8h_1addfecca662cd95a41673f24622690b41" kindref="member">window_look</ref></type>
          <declname>look</declname>
        </param>
        <briefdescription>
<para>Changes the window look set in the constructor to <emphasis>look</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="241" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ad69001922aad8daf7b65f82eb4b439f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetPulseRate</definition>
        <argsstring>(bigtime_t rate)</argsstring>
        <name>SetPulseRate</name>
        <qualifiedname>BWindow::SetPulseRate</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Sets how often <computeroutput>B_PULSE</computeroutput> messages are posted to the window. </para>
        </briefdescription>
        <detaileddescription>
<para>All BViews attached to a window share the same pulse rate.</para>
<para><emphasis>rate</emphasis> should not be set to less than 100,000 microseconds, differences less than 50,000 microseconds may not be noticeable.</para>
<para>Setting the <emphasis>rate</emphasis> to 0 disables pulsing for all views attache to the window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>The pulse rate to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="134" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a8668ecf18ad145391f66704c3339eb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetSizeLimits</definition>
        <argsstring>(float minWidth, float maxWidth, float minHeight, float maxHeight)</argsstring>
        <name>SetSizeLimits</name>
        <qualifiedname>BWindow::SetSizeLimits</qualifiedname>
        <param>
          <type>float</type>
          <declname>minWidth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxWidth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>minHeight</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxHeight</declname>
        </param>
        <briefdescription>
<para>Set size limits on the window. </para>
        </briefdescription>
        <detaileddescription>
<para>The user won&apos;t be able to resize the window beyond the limits set by this method. <ref refid="classBWindow_1a8668ecf18ad145391f66704c3339eb3d" kindref="member">SetSizeLimits()</ref> constrains the user, not the programmer, you may still resize the window outside of the size limits set by this method by calling <ref refid="classBWindow_1a6aba4ddafc654f362799b6a96e6c76cd" kindref="member">ResizeBy()</ref> or <ref refid="classBWindow_1a31e2ea325258646128cfe8618cb79edc" kindref="member">ResizeTo()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum width of the window to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width of the window to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum height of the window to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height of the window to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="214" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a7cd4bf7dc0079e9a52b0ac1e7e2f897b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetTitle</definition>
        <argsstring>(const char *title)</argsstring>
        <name>SetTitle</name>
        <qualifiedname>BWindow::SetTitle</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Sets the window title to <emphasis>title</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Also renames the window thread to &quot;w&gt;title&quot; where &quot;title&quot; is the passed in title string.</para>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="207" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a0f8f96c37d83e8df9e97c25a69c68295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::SetType</definition>
        <argsstring>(window_type type)</argsstring>
        <name>SetType</name>
        <qualifiedname>BWindow::SetType</qualifiedname>
        <param>
          <type><ref refid="Window_8h_1a4730a93b07f17fa824a2e42df3e0af6d" kindref="member">window_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Changes the window type set in the constructor to <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or an error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="238" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a91d42de7f54efe1399c3838d35162d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BWindow::SetWindowAlignment</definition>
        <argsstring>(window_alignment mode, int32 h, int32 hOffset=0, int32 width=0, int32 widthOffset=0, int32 v=0, int32 vOffset=0, int32 height=0, int32 heightOffset=0)</argsstring>
        <name>SetWindowAlignment</name>
        <qualifiedname>BWindow::SetWindowAlignment</qualifiedname>
        <param>
          <type><ref refid="Window_8h_1af172769fce5d31926232c9ca022008bb" kindref="member">window_alignment</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>hOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>widthOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>v</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>vOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>height</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>heightOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the alignment of the content of the window on the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="253" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a3549fdb63a64637fa8e2054e8c21272d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetWorkspaces</definition>
        <argsstring>(uint32)</argsstring>
        <name>SetWorkspaces</name>
        <qualifiedname>BWindow::SetWorkspaces</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <defname>workspaces</defname>
        </param>
        <briefdescription>
<para>Sets the set of workspaces where the window can be displayed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>workspaces</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para><computeroutput>B_CURRENT_WORKSPACE</computeroutput> to place the window in the currently displayed workspace removing it from all others.</para>
</listitem><listitem><para><computeroutput>B_ALL_WORKSPACES</computeroutput> to make the window show up in all workspaces.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="224" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ad3c2e560e41b377456faf9bd5dabcdc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetZoomLimits</definition>
        <argsstring>(float maxWidth, float maxHeight)</argsstring>
        <name>SetZoomLimits</name>
        <qualifiedname>BWindow::SetZoomLimits</qualifiedname>
        <param>
          <type>float</type>
          <declname>maxWidth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxHeight</declname>
        </param>
        <briefdescription>
<para>Sets the maximum size that the window will zoom to when <ref refid="classBWindow_1a722772f2902e82bf65010ac2c13570bc" kindref="member">Zoom()</ref> is called. </para>
        </briefdescription>
        <detaileddescription>
<para>The window will zoom to the minimum of the screen size, the maximum values set by <ref refid="classBWindow_1a8668ecf18ad145391f66704c3339eb3d" kindref="member">SetSizeLimits()</ref>, and the maximum values set by this method.</para>
<para>/see <ref refid="classBWindow_1a722772f2902e82bf65010ac2c13570bc" kindref="member">Zoom()</ref></para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="130" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::Show</definition>
        <argsstring>()</argsstring>
        <name>Show</name>
        <qualifiedname>BWindow::Show</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a48d82b1d72a1def5188b1985b5f51f33">Show</reimplementedby>
        <briefdescription>
<para>Shows the window on screen, places it frontmost on the screen, adds the window to Deskbar&apos;s window list, and makes it the active window. </para>
        </briefdescription>
        <detaileddescription>
<para>If this is the first time <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> has been called on the window the message loop is started and it is unlocked.</para>
<para>Calls to <ref refid="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" kindref="member">Hide()</ref> and <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> are cumulative.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="181" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1afc61a0c6129f233e56fa373107bd8790" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BWindow::Size</definition>
        <argsstring>() const</argsstring>
        <name>Size</name>
        <qualifiedname>BWindow::Size</qualifiedname>
        <briefdescription>
<para>Returns the size of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the window as a <ref refid="classBSize" kindref="compound">BSize</ref> in the screen coordinate system.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="205" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a332bea9ef16fedc16134bf587b52fa09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::Sync</definition>
        <argsstring>() const</argsstring>
        <name>Sync</name>
        <qualifiedname>BWindow::Sync</qualifiedname>
        <briefdescription>
<para>Synchronizes the attached window&apos;s connection to App Server causing any pending messages to be processed and then waits for the App Server to respond. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="187" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a73c7a05ef33d579de61b83b5daaf3c6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BWindow::Title</definition>
        <argsstring>() const</argsstring>
        <name>Title</name>
        <qualifiedname>BWindow::Title</qualifiedname>
        <briefdescription>
<para>Returns the window title as set by the constructor or <ref refid="classBWindow_1a7cd4bf7dc0079e9a52b0ac1e7e2f897b" kindref="member">SetTitle()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the window title.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="206" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a103e6f93287afd65ed72ff760403fdf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Window_8h_1a4730a93b07f17fa824a2e42df3e0af6d" kindref="member">window_type</ref></type>
        <definition>window_type BWindow::Type</definition>
        <argsstring>() const</argsstring>
        <name>Type</name>
        <qualifiedname>BWindow::Type</qualifiedname>
        <briefdescription>
<para>Returns the current window type flag. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The currently set window type flag.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="239" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a49b0c49eeef751b17bdc08d2e4d58cb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::UpdateIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>UpdateIfNeeded</name>
        <qualifiedname>BWindow::UpdateIfNeeded</qualifiedname>
        <briefdescription>
<para>Invokes Draw() immediately on each child view that needs updating. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is synchronous, it waits for each child view to update before returning. This method is ignored unless it is called from within the message loop of the thread that the <ref refid="classBWindow" kindref="compound">BWindow</ref> is running in.</para>
<para>You may call this method as part of a hook function such as MouseMoved() or KeyDown() to force invalid views to be immediately redrawn without having to wait for the hook function to finish.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="151" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a99df6b9964c69b1c69c47fab6262abee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::UpdateSizeLimits</definition>
        <argsstring>()</argsstring>
        <name>UpdateSizeLimits</name>
        <qualifiedname>BWindow::UpdateSizeLimits</qualifiedname>
        <briefdescription>
<para>Updates the window&apos;s size limits from the minimum and maximum sizes of its top view. </para>
        </briefdescription>
        <detaileddescription>
<para>This method does nothing unless the <computeroutput>B_AUTO_UPDATE_SIZE_LIMITS</computeroutput> window flag is set.</para>
<para>The method is called automatically after a layout invalidation. Since it is invoked asynchronously, calling this method manually is necessary, if it is desired to adjust the limits (and as a possible side effect the window size) earlier, e.g. before the first call to the <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> method.)</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="218" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a0a17d973a17bb8d3aef09d45d58a9aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::WindowActivated</definition>
        <argsstring>(bool focus)</argsstring>
        <name>WindowActivated</name>
        <qualifiedname>BWindow::WindowActivated</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a1521e3361a53816b665861141b3d651a">WindowActivated</reimplementedby>
        <param>
          <type>bool</type>
          <declname>focus</declname>
          <defname>active</defname>
        </param>
        <briefdescription>
<para>Hook method that gets called when the window becomes activated or deactivated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if the window has become activated, <computeroutput>false</computeroutput> if the window has become deactivated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="158" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac3c293ef3d60df9b3125fb15d0c67cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::WorkspaceActivated</definition>
        <argsstring>(int32 workspace, bool state)</argsstring>
        <name>WorkspaceActivated</name>
        <qualifiedname>BWindow::WorkspaceActivated</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a965f35341d9515e1f5c9c93eaa3404eb">WorkspaceActivated</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>workspace</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Hook method that gets called when the active workspace changes. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is only called when a workspace in which the window resides is activated or deactivated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>workspace</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>workspace</emphasis> number that was activated/deactivated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if activated, <computeroutput>false</computeroutput> if deactivated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="124" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aba3b83e88043338b66c2b2f501fbbbee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BWindow::Workspaces</definition>
        <argsstring>() const</argsstring>
        <name>Workspaces</name>
        <qualifiedname>BWindow::Workspaces</qualifiedname>
        <briefdescription>
<para>Returns the set of workspaces where the window can be displayed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="223" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1af8dc496d4239a2c343a364a4ad9aabc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::WorkspacesChanged</definition>
        <argsstring>(uint32 oldWorkspaces, uint32 newWorkspaces)</argsstring>
        <name>WorkspacesChanged</name>
        <qualifiedname>BWindow::WorkspacesChanged</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1a566f11807e382e2e09610619a2029f63">WorkspacesChanged</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>oldWorkspaces</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>newWorkspaces</declname>
        </param>
        <briefdescription>
<para>Hook method that gets called whenever the workspaces the window is in changes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldWorkspaces</parametername>
</parameternamelist>
<parameterdescription>
<para>The old set of workspaces the window was visible in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newWorkspaces</parametername>
</parameternamelist>
<parameterdescription>
<para>The new set of workspaces the window is visible in.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="122" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a722772f2902e82bf65010ac2c13570bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::Zoom</definition>
        <argsstring>()</argsstring>
        <name>Zoom</name>
        <qualifiedname>BWindow::Zoom</qualifiedname>
        <briefdescription>
<para>Resize the window to the minimum of the screen size, the maximum values set by <ref refid="classBWindow_1a8668ecf18ad145391f66704c3339eb3d" kindref="member">SetSizeLimits()</ref>, and the maximum values set by <ref refid="classBWindow_1ad3c2e560e41b377456faf9bd5dabcdc0" kindref="member">SetZoomLimits()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>You may call <ref refid="classBWindow_1a722772f2902e82bf65010ac2c13570bc" kindref="member">Zoom()</ref> even if the window has the <computeroutput>B_NOT_ZOOMABLE</computeroutput> flag set.</para>
<para>This is the method called when the user clicks the window&apos;s zoom button. It can also be called programmatically.</para>
<para>The window dimensions are calculated from the smallest of three rectangles:<orderedlist>
<listitem><para>the screen frame,</para>
</listitem><listitem><para>the rectangle defined by <ref refid="classBWindow_1ad3c2e560e41b377456faf9bd5dabcdc0" kindref="member">SetZoomLimits()</ref>,</para>
</listitem><listitem><para>the rectangle defined by <ref refid="classBWindow_1a8668ecf18ad145391f66704c3339eb3d" kindref="member">SetSizeLimits()</ref>.</para>
</listitem></orderedlist>
</para>
<para>However if the window frame already matches these new dimensions, <ref refid="classBWindow_1a722772f2902e82bf65010ac2c13570bc" kindref="member">Zoom()</ref> uses the previous size and location of the window instead.</para>
<para>This method calls <ref refid="classBWindow_1ae7bea03df00c760d7f489acd3e312290" kindref="member">Zoom(BPoint, float, float)</ref> to do the actualy zooming.</para>
<para><simplesect kind="see"><para><ref refid="classBWindow_1ae7bea03df00c760d7f489acd3e312290" kindref="member">Zoom(BPoint, float, float)</ref>;</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="129" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae7bea03df00c760d7f489acd3e312290" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BWindow::Zoom</definition>
        <argsstring>(BPoint origin, float width, float height)</argsstring>
        <name>Zoom</name>
        <qualifiedname>BWindow::Zoom</qualifiedname>
        <reimplementedby refid="classBDirectWindow_1afa7f05be4a2964c593b3287a3216b041">Zoom</reimplementedby>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>origin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Move window to <emphasis>origin</emphasis>, then resize to <emphasis>width</emphasis> and <emphasis>height</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>You may call <ref refid="classBWindow_1a722772f2902e82bf65010ac2c13570bc" kindref="member">Zoom()</ref> even if the window has the <computeroutput>B_NOT_ZOOMABLE</computeroutput> flag set.</para>
<para>This method may move and resize the window resulting in both the <ref refid="classBWindow_1a95f6fb2941250e7ed54fce6671f782c6" kindref="member">FrameMoved()</ref> and <ref refid="classBWindow_1a280fab2b2900abc61dd4bcb7a2a4793f" kindref="member">FrameResized()</ref> hook methods to be called.</para>
<para>You can override this method to change how your window behaves when the user clicks the zoom button or when <ref refid="classBWindow_1a722772f2902e82bf65010ac2c13570bc" kindref="member">Zoom()</ref> is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>The point that the window was moved to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height of the window.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="128" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBWindow_1af03c3109307589d67a1888a26f516f3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *</type>
        <definition>BArchivable * BWindow::Instantiate</definition>
        <argsstring>(BMessage *archive)</argsstring>
        <name>Instantiate</name>
        <qualifiedname>BWindow::Instantiate</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>data</defname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="classBWindow" kindref="compound">BWindow</ref> object from the <emphasis>data</emphasis> message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="classBMessage" kindref="compound">BMessage</ref> object to build the object from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created <ref refid="classBWindow" kindref="compound">BWindow</ref> object or <computeroutput>NULL</computeroutput> if the message doesn&apos;t contain an archived <ref refid="classBWindow" kindref="compound">BWindow</ref>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="105" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBWindow_1abecfacc176845e197e39052291db6b9e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BWindow::BWindow</definition>
        <argsstring>()</argsstring>
        <name>BWindow</name>
        <qualifiedname>BWindow::BWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aa76ec604e089fd22e9a2eaf65c804529" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BWindow::BWindow</definition>
        <argsstring>(BRect frame, int32 bitmapToken)</argsstring>
        <name>BWindow</name>
        <qualifiedname>BWindow::BWindow</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bitmapToken</declname>
        </param>
        <briefdescription>
<para>Offscreen bitmap constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The inner <emphasis>frame</emphasis> rectangle in the screen coordinate system. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmapToken</parametername>
</parameternamelist>
<parameterdescription>
<para>Token to pass into App Server for offscreen window bitmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a458a2c793a19d35e8491fa274efb2a55" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BWindow::BWindow</definition>
        <argsstring>(BWindow &amp;)</argsstring>
        <name>BWindow</name>
        <qualifiedname>BWindow::BWindow</qualifiedname>
        <param>
          <type><ref refid="classBWindow" kindref="compound">BWindow</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a06cc3daafec47dc08b70906415136e9c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_AdoptResize</definition>
        <argsstring>()</argsstring>
        <name>_AdoptResize</name>
        <qualifiedname>BWindow::_AdoptResize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="346" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab6a28213432ea0e208596c816492d708" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Window_8h_1a4730a93b07f17fa824a2e42df3e0af6d" kindref="member">window_type</ref></type>
        <definition>window_type BWindow::_ComposeType</definition>
        <argsstring>(window_look look, window_feel feel) const</argsstring>
        <name>_ComposeType</name>
        <qualifiedname>BWindow::_ComposeType</qualifiedname>
        <param>
          <type><ref refid="Window_8h_1addfecca662cd95a41673f24622690b41" kindref="member">window_look</ref></type>
          <declname>look</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1a4a2cc5b573803174c60a35727f711bf3" kindref="member">window_feel</ref></type>
          <declname>feel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="336" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a0fc8202c5b4c048c93a0c33e2f396ee3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_CreateTopView</definition>
        <argsstring>()</argsstring>
        <name>_CreateTopView</name>
        <qualifiedname>BWindow::_CreateTopView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="345" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a27bff790471d914442672df3ee83dd1d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_DecomposeType</definition>
        <argsstring>(window_type type, window_look *look, window_feel *feel) const</argsstring>
        <name>_DecomposeType</name>
        <qualifiedname>BWindow::_DecomposeType</qualifiedname>
        <param>
          <type><ref refid="Window_8h_1a4730a93b07f17fa824a2e42df3e0af6d" kindref="member">window_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1addfecca662cd95a41673f24622690b41" kindref="member">window_look</ref> *</type>
          <declname>look</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1a4a2cc5b573803174c60a35727f711bf3" kindref="member">window_feel</ref> *</type>
          <declname>feel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="338" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a993b103ee6b85fe2353e7428b09c39bf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_DequeueAll</definition>
        <argsstring>()</argsstring>
        <name>_DequeueAll</name>
        <qualifiedname>BWindow::_DequeueAll</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="335" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1adae305650d2b0f1d969f6cb7e2713730" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>BHandler * BWindow::_DetermineTarget</definition>
        <argsstring>(BMessage *message, BHandler *target)</argsstring>
        <name>_DetermineTarget</name>
        <qualifiedname>BWindow::_DetermineTarget</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="321" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a2e5ad659b8933e359bd1bfab8559a351" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::_FindNextNavigable</definition>
        <argsstring>(BView *focus, uint32 flags)</argsstring>
        <name>_FindNextNavigable</name>
        <qualifiedname>BWindow::_FindNextNavigable</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>focus</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="356" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aa04a7237dab045133da2431861745e12" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::_FindPreviousNavigable</definition>
        <argsstring>(BView *focus, uint32 flags)</argsstring>
        <name>_FindPreviousNavigable</name>
        <qualifiedname>BWindow::_FindPreviousNavigable</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>focus</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="357" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a66bcf526cb1c074d79beeb9519a75dc7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Shortcut *</type>
        <definition>Shortcut * BWindow::_FindShortcut</definition>
        <argsstring>(uint32 key, uint32 modifiers)</argsstring>
        <name>_FindShortcut</name>
        <qualifiedname>BWindow::_FindShortcut</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>modifiers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="351" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a2e1fb19ea97782e04c64662ef0f5e045" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::_FindView</definition>
        <argsstring>(BView *view, BPoint point) const</argsstring>
        <name>_FindView</name>
        <qualifiedname>BWindow::_FindView</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>view</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="352" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a6aeec1ba3011c1db91dab34c0f662ed1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::_FindView</definition>
        <argsstring>(int32 token)</argsstring>
        <name>_FindView</name>
        <qualifiedname>BWindow::_FindView</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="353" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ae0c05e8806cb361a2cc602dac001b824" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_GetDecoratorSize</definition>
        <argsstring>(float *_borderWidth, float *_tabHeight) const</argsstring>
        <name>_GetDecoratorSize</name>
        <qualifiedname>BWindow::_GetDecoratorSize</qualifiedname>
        <param>
          <type>float *</type>
          <declname>_borderWidth</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_tabHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="365" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aac823c940dac892f2ef2860666b9ae3f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::_HandleKeyDown</definition>
        <argsstring>(BMessage *event)</argsstring>
        <name>_HandleKeyDown</name>
        <qualifiedname>BWindow::_HandleKeyDown</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="361" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a9e6cae1504a061124801fbf3ce7ba9d9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::_HandleUnmappedKeyDown</definition>
        <argsstring>(BMessage *event)</argsstring>
        <name>_HandleUnmappedKeyDown</name>
        <qualifiedname>BWindow::_HandleUnmappedKeyDown</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="362" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ac8e16a8be2ffe1e4e8438c936ab7dff6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_InitData</definition>
        <argsstring>(BRect frame, const char *title, window_look look, window_feel feel, uint32 flags, uint32 workspace, int32 bitmapToken=-1)</argsstring>
        <name>_InitData</name>
        <qualifiedname>BWindow::_InitData</qualifiedname>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1addfecca662cd95a41673f24622690b41" kindref="member">window_look</ref></type>
          <declname>look</declname>
        </param>
        <param>
          <type><ref refid="Window_8h_1a4a2cc5b573803174c60a35727f711bf3" kindref="member">window_feel</ref></type>
          <declname>feel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>workspace</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>bitmapToken</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="309" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a81520f0824ac22dda5e956aad6843ce9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::_IsFocusMessage</definition>
        <argsstring>(BMessage *message)</argsstring>
        <name>_IsFocusMessage</name>
        <qualifiedname>BWindow::_IsFocusMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="323" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a5ef023616447a5a70dcc4d57f894f317" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_KeyboardNavigation</definition>
        <argsstring>()</argsstring>
        <name>_KeyboardNavigation</name>
        <qualifiedname>BWindow::_KeyboardNavigation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="363" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a5df1e6b046eee3596dd5d9c8f0dcb524" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
        <definition>BView * BWindow::_LastViewChild</definition>
        <argsstring>(BView *parent)</argsstring>
        <name>_LastViewChild</name>
        <qualifiedname>BWindow::_LastViewChild</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="354" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a7add61c4b06aded3ab83f31ec7234f2f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_PropagateMessageToChildViews</definition>
        <argsstring>(BMessage *)</argsstring>
        <name>_PropagateMessageToChildViews</name>
        <qualifiedname>BWindow::_PropagateMessageToChildViews</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="368" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a493e145bc42d730569570733772917cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::_ReservedWindow2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedWindow2</name>
        <qualifiedname>BWindow::_ReservedWindow2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="278" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1add707cfeaae11d988b32fbea652b6e44" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::_ReservedWindow3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedWindow3</name>
        <qualifiedname>BWindow::_ReservedWindow3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="279" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ab2ea6134eed95342f74de94006908d15" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::_ReservedWindow4</definition>
        <argsstring>()</argsstring>
        <name>_ReservedWindow4</name>
        <qualifiedname>BWindow::_ReservedWindow4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="280" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a77324f7acb867c25d5c1363f64f20093" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::_ReservedWindow5</definition>
        <argsstring>()</argsstring>
        <name>_ReservedWindow5</name>
        <qualifiedname>BWindow::_ReservedWindow5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="281" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a0adf2e39cd450319a9b3bbb375897eac" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::_ReservedWindow6</definition>
        <argsstring>()</argsstring>
        <name>_ReservedWindow6</name>
        <qualifiedname>BWindow::_ReservedWindow6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="282" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a8eef2d866bb67b12e335f6beca2938bf" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::_ReservedWindow7</definition>
        <argsstring>()</argsstring>
        <name>_ReservedWindow7</name>
        <qualifiedname>BWindow::_ReservedWindow7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="283" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a59ac758a4f66909abefe5c4898a20f7f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::_ReservedWindow8</definition>
        <argsstring>()</argsstring>
        <name>_ReservedWindow8</name>
        <qualifiedname>BWindow::_ReservedWindow8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="284" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a05cfedcdf445b5b73a30a0e843515db1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_SanitizeMessage</definition>
        <argsstring>(BMessage *message, BHandler *target, bool usePreferred)</argsstring>
        <name>_SanitizeMessage</name>
        <qualifiedname>BWindow::_SanitizeMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>usePreferred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="327" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a20525148a4b112c18ea991c97df92576" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_SendShowOrHideMessage</definition>
        <argsstring>()</argsstring>
        <name>_SendShowOrHideMessage</name>
        <qualifiedname>BWindow::_SendShowOrHideMessage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="367" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aa20963956be2a4ad5fff755109ea69b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_SetFocus</definition>
        <argsstring>(BView *focusView, bool notifyIputServer=false)</argsstring>
        <name>_SetFocus</name>
        <qualifiedname>BWindow::_SetFocus</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>focusView</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>notifyIputServer</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="347" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1af4247df7709d3a5cd804bb34ffc06c2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_SetName</definition>
        <argsstring>(const char *title)</argsstring>
        <name>_SetName</name>
        <qualifiedname>BWindow::_SetName</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="349" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1ad4cb21c08c6aa684c575c2ac4d396e14" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::_StealMouseMessage</definition>
        <argsstring>(BMessage *message, bool &amp;deleteMessage)</argsstring>
        <name>_StealMouseMessage</name>
        <qualifiedname>BWindow::_StealMouseMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>deleteMessage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="329" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a35739e5b3fae88b16a8aabc15bc08f8e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::_Switcher</definition>
        <argsstring>(int32 rawKey, uint32 modifiers, bool repeat)</argsstring>
        <name>_Switcher</name>
        <qualifiedname>BWindow::_Switcher</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>rawKey</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>modifiers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="359" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a132e99cd1eb478826fb95f62218fe486" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BWindow::_TransitForMouseMoved</definition>
        <argsstring>(BView *view, BView *viewUnderMouse) const</argsstring>
        <name>_TransitForMouseMoved</name>
        <qualifiedname>BWindow::_TransitForMouseMoved</qualifiedname>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>view</declname>
        </param>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>viewUnderMouse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="331" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1aca6d417751216052078d56d4844f23f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::_UnpackMessage</definition>
        <argsstring>(unpack_cookie &amp;state, BMessage **_message, BHandler **_target, bool *_usePreferred)</argsstring>
        <name>_UnpackMessage</name>
        <qualifiedname>BWindow::_UnpackMessage</qualifiedname>
        <param>
          <type>unpack_cookie &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> **</type>
          <declname>_message</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> **</type>
          <declname>_target</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>_usePreferred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="324" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a6142b0fffd9667dc1426d77694c71af6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BWindow::AlertPosition</definition>
        <argsstring>(const BRect &amp;frame)</argsstring>
        <name>AlertPosition</name>
        <qualifiedname>BWindow::AlertPosition</qualifiedname>
        <param>
          <type>const <ref refid="classBRect" kindref="compound">BRect</ref> &amp;</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="316" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a46de81dc0e4aefd6ff2e2ff84c72e37c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>virtual BMessage * BWindow::ConvertToMessage</definition>
        <argsstring>(void *raw, int32 code)</argsstring>
        <name>ConvertToMessage</name>
        <qualifiedname>BWindow::ConvertToMessage</qualifiedname>
        <reimplements refid="classBLooper_1aacd56b5034dd54835f91666abe8a7202">ConvertToMessage</reimplements>
        <reimplementedby refid="classBDirectWindow_1a76f533f2ddedce57b026c771d4cedc99">ConvertToMessage</reimplementedby>
        <param>
          <type>void *</type>
          <declname>raw</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="317" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a0b2202847a7ffb78cf7fc30b2c37254d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::InUpdate</definition>
        <argsstring>()</argsstring>
        <name>InUpdate</name>
        <qualifiedname>BWindow::InUpdate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="334" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1af731dc0e1c1285d727aa8082f894e627" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BWindow::IsFilePanel</definition>
        <argsstring>() const</argsstring>
        <name>IsFilePanel</name>
        <qualifiedname>BWindow::IsFilePanel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="343" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a723522be6f51b3051b6f6d4c86415416" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBWindow" kindref="compound">BWindow</ref> &amp;</type>
        <definition>BWindow &amp; BWindow::operator=</definition>
        <argsstring>(BWindow &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BWindow::operator=</qualifiedname>
        <param>
          <type><ref refid="classBWindow" kindref="compound">BWindow</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="288" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1af3bed3bf0b9516ddaf76bbdd90746ce8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BWindow::SetIsFilePanel</definition>
        <argsstring>(bool yes)</argsstring>
        <name>SetIsFilePanel</name>
        <qualifiedname>BWindow::SetIsFilePanel</qualifiedname>
        <param>
          <type>bool</type>
          <declname>yes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="342" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBWindow_1a03af45cf0edd6565f15e8fce29a146b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BWindow::task_looper</definition>
        <argsstring>()</argsstring>
        <name>task_looper</name>
        <qualifiedname>BWindow::task_looper</qualifiedname>
        <reimplements refid="classBLooper_1a4ce97f42833c0823df099ecdc69d6cb8">task_looper</reimplements>
        <reimplementedby refid="classBDirectWindow_1a6c5ed232c8060d3ce8f6c861fa2d793c">task_looper</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="314" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Window base class. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classBWindow" kindref="compound">BWindow</ref> is an on-screen window which contains views and is the target of keyboard and mouse events. A <ref refid="classBWindow" kindref="compound">BWindow</ref> instance is nearly always subclassed.</para>
<para><ref refid="classBWindow" kindref="compound">BWindow</ref> draws by talking to App Server. If you want draw directly into the graphics card by-passing App Server, you need to use a <ref refid="classBDirectWindow" kindref="compound">BDirectWindow</ref> or BWindowScreen.</para>
<para>Despite the fact that <ref refid="classBWindow" kindref="compound">BWindow</ref> inherits from <ref refid="classBLooper" kindref="compound">BLooper</ref>, you should not invoke <ref refid="classBWindow_1ae49c02ad870d55514c800631b37b97cf" kindref="member">Run()</ref> on a <ref refid="classBWindow" kindref="compound">BWindow</ref>, instead, call <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> to get the message loop started and show the window on screen. Once you&apos;ve called <ref refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" kindref="member">Show()</ref> you may remove a window from the screen without interrupting the message loop by calling <ref refid="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" kindref="member">Hide()</ref>. Other message loop details such as locking and quitting are detailed in the <ref refid="classBLooper" kindref="compound">BLooper</ref> class.</para>
<para><ref refid="classBWindow" kindref="compound">BWindow</ref> has the following built-in shortcuts:</para>
<para><table rows="20" cols="3"><row>
<entry thead="yes"><para>Shortcut </para>
</entry><entry thead="yes"><para>Action </para>
</entry><entry thead="yes"><para>Handler  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+X </para>
</entry><entry thead="no"><para>Cut </para>
</entry><entry thead="no"><para>Focus view  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+C </para>
</entry><entry thead="no"><para>Copy </para>
</entry><entry thead="no"><para>Focus view  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+V </para>
</entry><entry thead="no"><para>Paste </para>
</entry><entry thead="no"><para>Focus view  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+A </para>
</entry><entry thead="no"><para>Select All </para>
</entry><entry thead="no"><para>Focus view  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+W </para>
</entry><entry thead="no"><para>Close </para>
</entry><entry thead="no"><para>Window (if closable)  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Q </para>
</entry><entry thead="no"><para>Quit </para>
</entry><entry thead="no"><para>Application (non-modal windows only)  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+M </para>
</entry><entry thead="no"><para>Minimize </para>
</entry><entry thead="no"><para>Window (if minimizable)  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+Z </para>
</entry><entry thead="no"><para>Zoom </para>
</entry><entry thead="no"><para>Window (if zoomable)  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+H </para>
</entry><entry thead="no"><para>Hide </para>
</entry><entry thead="no"><para>Window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+F </para>
</entry><entry thead="no"><para>Send to front </para>
</entry><entry thead="no"><para>Window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+B </para>
</entry><entry thead="no"><para>Send behind </para>
</entry><entry thead="no"><para>Window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+← </para>
</entry><entry thead="no"><para>Go to left workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+→ </para>
</entry><entry thead="no"><para>Go to right workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+↑ </para>
</entry><entry thead="no"><para>Go to above workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+↓ </para>
</entry><entry thead="no"><para>Go to below workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+Shift+← </para>
</entry><entry thead="no"><para>Send window and go to left workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+Shift+→ </para>
</entry><entry thead="no"><para>Send window and go to right workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+Shift+↑ </para>
</entry><entry thead="no"><para>Send window and go to above workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
<row>
<entry thead="no"><para>Command+Control+Shift+↓ </para>
</entry><entry thead="no"><para>Send window and go to below workspace </para>
</entry><entry thead="no"><para>Desktop window  </para>
</entry></row>
</table>
</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>BAlert</label>
        <link refid="classBAlert"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="6">
        <label>BDirectWindow</label>
        <link refid="classBDirectWindow"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BHandler</label>
        <link refid="classBHandler"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BLooper</label>
        <link refid="classBLooper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BWindow</label>
        <link refid="classBWindow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="3">
        <label>BHandler</label>
        <link refid="classBHandler"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BLooper</label>
        <link refid="classBLooper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BWindow</label>
        <link refid="classBWindow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/interface/Window.h" line="93" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/Window.h" bodystart="93" bodyend="411"/>
    <listofallmembers>
      <member refid="classBWindow_1a06cc3daafec47dc08b70906415136e9c" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_AdoptResize</name></member>
      <member refid="classBWindow_1ab6a28213432ea0e208596c816492d708" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_ComposeType</name></member>
      <member refid="classBWindow_1a0fc8202c5b4c048c93a0c33e2f396ee3" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_CreateTopView</name></member>
      <member refid="classBWindow_1a27bff790471d914442672df3ee83dd1d" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_DecomposeType</name></member>
      <member refid="classBWindow_1a993b103ee6b85fe2353e7428b09c39bf" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_DequeueAll</name></member>
      <member refid="classBWindow_1adae305650d2b0f1d969f6cb7e2713730" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_DetermineTarget</name></member>
      <member refid="classBWindow_1a2e5ad659b8933e359bd1bfab8559a351" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_FindNextNavigable</name></member>
      <member refid="classBWindow_1aa04a7237dab045133da2431861745e12" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_FindPreviousNavigable</name></member>
      <member refid="classBWindow_1a66bcf526cb1c074d79beeb9519a75dc7" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_FindShortcut</name></member>
      <member refid="classBWindow_1a2e1fb19ea97782e04c64662ef0f5e045" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_FindView</name></member>
      <member refid="classBWindow_1a6aeec1ba3011c1db91dab34c0f662ed1" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_FindView</name></member>
      <member refid="classBWindow_1ae0c05e8806cb361a2cc602dac001b824" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_GetDecoratorSize</name></member>
      <member refid="classBWindow_1aac823c940dac892f2ef2860666b9ae3f" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_HandleKeyDown</name></member>
      <member refid="classBWindow_1a9e6cae1504a061124801fbf3ce7ba9d9" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_HandleUnmappedKeyDown</name></member>
      <member refid="classBWindow_1ac8e16a8be2ffe1e4e8438c936ab7dff6" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_InitData</name></member>
      <member refid="classBWindow_1a81520f0824ac22dda5e956aad6843ce9" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_IsFocusMessage</name></member>
      <member refid="classBWindow_1a5ef023616447a5a70dcc4d57f894f317" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_KeyboardNavigation</name></member>
      <member refid="classBWindow_1a5df1e6b046eee3596dd5d9c8f0dcb524" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_LastViewChild</name></member>
      <member refid="classBWindow_1a7add61c4b06aded3ab83f31ec7234f2f" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_PropagateMessageToChildViews</name></member>
      <member refid="classBWindow_1a451390af2f650fa6454310eff95c6804" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_reserved</name></member>
      <member refid="classBWindow_1a493e145bc42d730569570733772917cc" prot="private" virt="virtual"><scope>BWindow</scope><name>_ReservedWindow2</name></member>
      <member refid="classBWindow_1add707cfeaae11d988b32fbea652b6e44" prot="private" virt="virtual"><scope>BWindow</scope><name>_ReservedWindow3</name></member>
      <member refid="classBWindow_1ab2ea6134eed95342f74de94006908d15" prot="private" virt="virtual"><scope>BWindow</scope><name>_ReservedWindow4</name></member>
      <member refid="classBWindow_1a77324f7acb867c25d5c1363f64f20093" prot="private" virt="virtual"><scope>BWindow</scope><name>_ReservedWindow5</name></member>
      <member refid="classBWindow_1a0adf2e39cd450319a9b3bbb375897eac" prot="private" virt="virtual"><scope>BWindow</scope><name>_ReservedWindow6</name></member>
      <member refid="classBWindow_1a8eef2d866bb67b12e335f6beca2938bf" prot="private" virt="virtual"><scope>BWindow</scope><name>_ReservedWindow7</name></member>
      <member refid="classBWindow_1a59ac758a4f66909abefe5c4898a20f7f" prot="private" virt="virtual"><scope>BWindow</scope><name>_ReservedWindow8</name></member>
      <member refid="classBWindow_1ae07a112dd19cb0680fc5a3aa8329f6eb" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_safe_get_server_token_</name></member>
      <member refid="classBWindow_1a05cfedcdf445b5b73a30a0e843515db1" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_SanitizeMessage</name></member>
      <member refid="classBWindow_1a20525148a4b112c18ea991c97df92576" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_SendShowOrHideMessage</name></member>
      <member refid="classBWindow_1ae5cc67892f014c4e5160e28eb7a5fe85" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_set_menu_sem_</name></member>
      <member refid="classBWindow_1aa20963956be2a4ad5fff755109ea69b2" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_SetFocus</name></member>
      <member refid="classBWindow_1af4247df7709d3a5cd804bb34ffc06c2e" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_SetName</name></member>
      <member refid="classBWindow_1ad4cb21c08c6aa684c575c2ac4d396e14" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_StealMouseMessage</name></member>
      <member refid="classBWindow_1a35739e5b3fae88b16a8aabc15bc08f8e" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_Switcher</name></member>
      <member refid="classBWindow_1a132e99cd1eb478826fb95f62218fe486" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_TransitForMouseMoved</name></member>
      <member refid="classBWindow_1aca6d417751216052078d56d4844f23f0" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_UnpackMessage</name></member>
      <member refid="classBWindow_1a1eda4daaaeefa121ef27d2cebec81b39" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_unused0</name></member>
      <member refid="classBWindow_1afd95528843fae93fa0b740c52ee994d9" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_unused1</name></member>
      <member refid="classBWindow_1a8b674130334aa7ecad9fab2456899c24" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_unused4</name></member>
      <member refid="classBWindow_1a3bb331b92fd78ac367d668df65ae4788" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_unused5</name></member>
      <member refid="classBWindow_1a0e9bd28506cf6f3120e4b713da97b7e8" prot="private" virt="non-virtual"><scope>BWindow</scope><name>_unused6</name></member>
      <member refid="classBWindow_1a24ef781656049451c5c6ed06eeb98c06" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Activate</name></member>
      <member refid="classBWindow_1ac3b09ede3b0256df9cbcc7b2a3d6eda4" prot="public" virt="non-virtual"><scope>BWindow</scope><name>AddChild</name></member>
      <member refid="classBWindow_1a798386ef9d12eb4f0dafff375e3b85d6" prot="public" virt="non-virtual"><scope>BWindow</scope><name>AddChild</name></member>
      <member refid="classBLooper_1a25adc41bdfd741e9c82d2b469a5086b0" prot="public" virt="virtual"><scope>BWindow</scope><name>AddCommonFilter</name></member>
      <member refid="classBHandler_1a862bea548363faac6f883b348cbed838" prot="public" virt="virtual"><scope>BWindow</scope><name>AddFilter</name></member>
      <member refid="classBLooper_1a484be74814014e3c48c1a16f44e34074" prot="public" virt="non-virtual"><scope>BWindow</scope><name>AddHandler</name></member>
      <member refid="classBWindow_1a5b05894e227eb22cba63ddaff289a95b" prot="public" virt="non-virtual"><scope>BWindow</scope><name>AddShortcut</name></member>
      <member refid="classBWindow_1a169c891ff22f6a76f10c15bd16cde3c5" prot="public" virt="non-virtual"><scope>BWindow</scope><name>AddShortcut</name></member>
      <member refid="classBWindow_1a32a7f1da1abac8069e816d0b381ebc4b" prot="private" virt="non-virtual"><scope>BWindow</scope><name>AddShortcut</name></member>
      <member refid="classBWindow_1ac2abecfda66af23ee5e944530ce69c97" prot="public" virt="non-virtual"><scope>BWindow</scope><name>AddToSubset</name></member>
      <member refid="classBWindow_1a6142b0fffd9667dc1426d77694c71af6" prot="private" virt="non-virtual"><scope>BWindow</scope><name>AlertPosition</name></member>
      <member refid="classBArchivable_1a4075315c407443a3b0dbb3d7551b53c9" prot="public" virt="virtual"><scope>BWindow</scope><name>AllArchived</name></member>
      <member refid="classBArchivable_1a2b1d74c147ea18e4b4bfacd42f11e0d2" prot="public" virt="virtual"><scope>BWindow</scope><name>AllUnarchived</name></member>
      <member refid="classBWindow_1a69163d40d8f1eda77c9134ad4ab745a2" prot="public" virt="virtual"><scope>BWindow</scope><name>Archive</name></member>
      <member refid="classBArchivable_1aed4f0566f9659b03912a859077c27c89" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BArchivable</name></member>
      <member refid="classBArchivable_1a66e6b947f092d32f287913a8c253290f" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BArchivable</name></member>
      <member refid="classBWindow_1a160e5f8757a65eaf3fec463fd6f2ba33" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BeginViewTransaction</name></member>
      <member refid="classBHandler_1a2142e21fe781b24f914ec2086e5f05b7" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BHandler</name></member>
      <member refid="classBHandler_1add8fa081a7bb8633581e78777b215d0b" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BHandler</name></member>
      <member refid="classBLooper_1a33fa84a6ed383e5a897d11380d72ce38" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BLooper</name></member>
      <member refid="classBLooper_1aad314758fd652fb48d61bcccab8b6ae3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BLooper</name></member>
      <member refid="classBWindow_1ab1084c04b99938ec93d2865962ec6bc2" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Bounds</name></member>
      <member refid="classBWindow_1afe03898c4cefc6b853f304c57afee533" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BWindow</name></member>
      <member refid="classBWindow_1a92dfad4d2089ea9a4e8ca8154776e82d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BWindow</name></member>
      <member refid="classBWindow_1a967856a612c3e7ad4d5d1f4970f744e3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>BWindow</name></member>
      <member refid="classBWindow_1abecfacc176845e197e39052291db6b9e" prot="private" virt="non-virtual"><scope>BWindow</scope><name>BWindow</name></member>
      <member refid="classBWindow_1a458a2c793a19d35e8491fa274efb2a55" prot="private" virt="non-virtual"><scope>BWindow</scope><name>BWindow</name></member>
      <member refid="classBWindow_1aa76ec604e089fd22e9a2eaf65c804529" prot="private" virt="non-virtual"><scope>BWindow</scope><name>BWindow</name></member>
      <member refid="classBWindow_1a4ea700aa901a1ac76b23605d82c79de8" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CenterIn</name></member>
      <member refid="classBWindow_1a1fbaa783dffbd7bb5f0b135cde5e0237" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CenterOnScreen</name></member>
      <member refid="classBWindow_1aa9890ed5cb76c2c2a8fb82d7cd664586" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CenterOnScreen</name></member>
      <member refid="classBWindow_1aeaeec9bcb12b7b03132e61dba501b19b" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ChildAt</name></member>
      <member refid="classBWindow_1a3be508837c0b14b176b916e45c9c1f31" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Close</name></member>
      <member refid="classBLooper_1ad64f1a98c1cce8087e7d492860461a62" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CommonFilterList</name></member>
      <member refid="classBWindow_1aaa76e90a0578a4081eb4765467d594ea" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertFromScreen</name></member>
      <member refid="classBWindow_1ac0f4cc714ef1cc817100ae028f75d496" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertFromScreen</name></member>
      <member refid="classBWindow_1a7b3b4a579b4e14cd6acf1a95aee75687" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertFromScreen</name></member>
      <member refid="classBWindow_1ae748ea5865c1905c56c30e110c2f4947" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertFromScreen</name></member>
      <member refid="classBWindow_1a46de81dc0e4aefd6ff2e2ff84c72e37c" prot="private" virt="virtual"><scope>BWindow</scope><name>ConvertToMessage</name></member>
      <member refid="classBWindow_1a218bb4c66ca3f58fbc203a36996fd119" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertToScreen</name></member>
      <member refid="classBWindow_1ac139848b8a9075d0ede0e28d87d95872" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertToScreen</name></member>
      <member refid="classBWindow_1a83c3d8f1fb020740f7b4c3658e5222b5" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertToScreen</name></member>
      <member refid="classBWindow_1a6997351ff94fca3d18459b41a790ce73" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ConvertToScreen</name></member>
      <member refid="classBWindow_1a742200112899822a889c2e69bf86db5d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CountChildren</name></member>
      <member refid="classBLooper_1a6179629238d0be92d7a89503be24d4e3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CountHandlers</name></member>
      <member refid="classBLooper_1a64e7b89294df1f7b614d1267f870ecd9" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CountLockRequests</name></member>
      <member refid="classBLooper_1a4eec703acd9bd7fe9a455af0f81e08f9" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CountLocks</name></member>
      <member refid="classBWindow_1a31d98b696b4e2a98ae83c841e342fe1b" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CurrentFocus</name></member>
      <member refid="classBLooper_1a6d244af065c4a12ea795bbbc7bb20e07" prot="public" virt="non-virtual"><scope>BWindow</scope><name>CurrentMessage</name></member>
      <member refid="classBWindow_1a8a990fd437ac8f94f7be26f35145048d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>DecoratorFrame</name></member>
      <member refid="classBWindow_1a6995f1dcc605c006e4118cc4b687e766" prot="public" virt="non-virtual"><scope>BWindow</scope><name>DefaultButton</name></member>
      <member refid="classBLooper_1a7c8f05bcc354bc1d53026417417120e3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>DetachCurrentMessage</name></member>
      <member refid="classBWindow_1a83111af72c672b2b7029e712e9b702f3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>DisableUpdates</name></member>
      <member refid="classBLooper_1a3a2d3773466de19a6c117f3a04861b11" prot="public" virt="non-virtual"><scope>BWindow</scope><name>DispatchExternalMessage</name></member>
      <member refid="classBWindow_1a2089af8a214389c3f673c06420457b16" prot="public" virt="virtual"><scope>BWindow</scope><name>DispatchMessage</name></member>
      <member refid="classBWindow_1ab71c5c4ddd8f1cc677115157ec1c0c96" prot="public" virt="non-virtual"><scope>BWindow</scope><name>EnableUpdates</name></member>
      <member refid="classBWindow_1a54d387b099fb88e5aa565bdc40f338eb" prot="public" virt="non-virtual"><scope>BWindow</scope><name>EndViewTransaction</name></member>
      <member refid="classBWindow_1a69608659e3029eece5599cb608c959f0" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fActive</name></member>
      <member refid="classBWindow_1a449307330aad667f5b2d476bd3c107e7" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fDefaultButton</name></member>
      <member refid="classBWindow_1ab3cf63c90d209ec6cb1aaeadb7f61fb1" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Feel</name></member>
      <member refid="classBWindow_1a47ab4cd4baa29ae397af79b6b4ceac17" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fFeel</name></member>
      <member refid="classBWindow_1ad5e7ecd534fc2cbafaf8e77ef71b3526" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fFlags</name></member>
      <member refid="classBWindow_1a1a2ba680cc2684b92b9f3e2afac3a3b0" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fFocus</name></member>
      <member refid="classBWindow_1adc0722f1898fda17b27d1fc11f27790d" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fFrame</name></member>
      <member refid="classBHandler_1a909662a049856f6863a934cf18161554" prot="public" virt="non-virtual"><scope>BWindow</scope><name>FilterList</name></member>
      <member refid="classBWindow_1ac295d2dff72e4c5254cf597d4b31f9c6" prot="public" virt="non-virtual"><scope>BWindow</scope><name>FindView</name></member>
      <member refid="classBWindow_1a4c252d9c733a703ca25dcc4d3eae6209" prot="public" virt="non-virtual"><scope>BWindow</scope><name>FindView</name></member>
      <member refid="classBWindow_1ab8152d224529f39585351b06b06419fb" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fInTransaction</name></member>
      <member refid="classBWindow_1acb3ae814556134832e638baf0119d402" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fIsFilePanel</name></member>
      <member refid="classBWindow_1a18fa5cf927fe971b9be3ec6695c379f1" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fKeyMenuBar</name></member>
      <member refid="classBWindow_1ab99cdac9e2a0270c8afc07cfae7a02a8" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Flags</name></member>
      <member refid="classBWindow_1ae91243b70d96f05112690ed59349a2dd" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fLastMouseMovedView</name></member>
      <member refid="classBWindow_1a86224a38384a122e20de9f97b0722897" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fLastViewToken</name></member>
      <member refid="classBWindow_1a2e4b4304314df3cbee8f3d273ae56c31" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fLink</name></member>
      <member refid="classBWindow_1a02beb61fe027632d5f735e3f14aac7d6" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fLook</name></member>
      <member refid="classBWindow_1a2e74fd82a8095399d73a28920cc7c9b9" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Flush</name></member>
      <member refid="classBWindow_1acfac5b344d6b9783a405af791e177c30" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMaxHeight</name></member>
      <member refid="classBWindow_1ae0538393cd5920e4abbc1c42b3b94228" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMaxWidth</name></member>
      <member refid="classBWindow_1ad7a79dfe50e11aaa0c4274e624513121" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMaxZoomHeight</name></member>
      <member refid="classBWindow_1af010407d807500f37b1a837ff09dcc83" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMaxZoomWidth</name></member>
      <member refid="classBWindow_1a31d4cc996e3e50e3b7c3524c2f40ef17" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMenuSem</name></member>
      <member refid="classBWindow_1a8c90bcc0525879975ab03dfa635c621c" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMinHeight</name></member>
      <member refid="classBWindow_1a8125f58e2fb768b3eed185bec1e24f18" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMinimized</name></member>
      <member refid="classBWindow_1aa739a1f88ab9126f46d8655656d1b639" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fMinWidth</name></member>
      <member refid="classBWindow_1a1493f515711389e6d364ca79ff57dfc7" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fNoQuitShortcut</name></member>
      <member refid="classBWindow_1a9d6cdca55f1a8c033e10c58bd88e0e49" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fOffscreen</name></member>
      <member refid="classBWindow_1a44912572c6c8248067d8e54d295617d0" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fPreviousFrame</name></member>
      <member refid="classBWindow_1aab9c5cfd4a00913e4b9e2e0e4f80996e" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fPulseRate</name></member>
      <member refid="classBWindow_1a2a05a43c7cd071cb1a731722809cc063" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fPulseRunner</name></member>
      <member refid="classBWindow_1ab6c744272c04751fa0b44e605b063a5d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Frame</name></member>
      <member refid="classBWindow_1a95f6fb2941250e7ed54fce6671f782c6" prot="public" virt="virtual"><scope>BWindow</scope><name>FrameMoved</name></member>
      <member refid="classBWindow_1a280fab2b2900abc61dd4bcb7a2a4793f" prot="public" virt="virtual"><scope>BWindow</scope><name>FrameResized</name></member>
      <member refid="classBWindow_1aa6fddc8aa55ef63ad96c0c232a3ba4e7" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fShortcuts</name></member>
      <member refid="classBWindow_1a24d420273699627a2d352eaa10587ea8" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fShowLevel</name></member>
      <member refid="classBWindow_1ac0c60017692747cea84ebea1ef237cf5" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fTitle</name></member>
      <member refid="classBWindow_1a64bd21ea867a6bebb82900fdff971bb1" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fTopView</name></member>
      <member refid="classBWindow_1a38a7f889f3d28d01bdde1e30a8c85a02" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fTopViewToken</name></member>
      <member refid="classBWindow_1aa9602f228ee7ea38d2df83dce67d6189" prot="private" virt="non-virtual"><scope>BWindow</scope><name>fUpdateRequested</name></member>
      <member refid="classBWindow_1a58fba1b0ad6c2035cf1dac6304d21912" prot="public" virt="non-virtual"><scope>BWindow</scope><name>GetDecoratorSettings</name></member>
      <member refid="classBWindow_1adb07dc64e991f7a42dfad000b2a1b0c7" prot="public" virt="non-virtual"><scope>BWindow</scope><name>GetLayout</name></member>
      <member refid="classBWindow_1aebce716c628bac67367875d1129db8c5" prot="public" virt="non-virtual"><scope>BWindow</scope><name>GetSizeLimits</name></member>
      <member refid="classBWindow_1a8c2f3013601609b54778af99fa6a25ca" prot="public" virt="virtual"><scope>BWindow</scope><name>GetSupportedSuites</name></member>
      <member refid="classBWindow_1a62a354bee61a0b5cd5ac499b5f728b7f" prot="public" virt="non-virtual"><scope>BWindow</scope><name>GetWindowAlignment</name></member>
      <member refid="classBLooper_1a6976132123edacf4b3a2831eadf5f4bf" prot="public" virt="non-virtual"><scope>BWindow</scope><name>HandlerAt</name></member>
      <member refid="classBWindow_1a08765e38e5cd5f37e19981d217b985d3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>HasShortcut</name></member>
      <member refid="classBWindow_1a53b85e4d43d34e5259b3b16ff6c52b32" prot="public" virt="virtual"><scope>BWindow</scope><name>Hide</name></member>
      <member refid="classBLooper_1a3061534f6d2f3186efca4cddd19f378f" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IndexOf</name></member>
      <member refid="classBWindow_1a80555b2b21f0acf29485afb5ab41e702" prot="private" virt="non-virtual"><scope>BWindow</scope><name>inherited</name></member>
      <member refid="classBWindow_1af03c3109307589d67a1888a26f516f3f" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Instantiate</name></member>
      <member refid="classBWindow_1a0b2202847a7ffb78cf7fc30b2c37254d" prot="private" virt="non-virtual"><scope>BWindow</scope><name>InUpdate</name></member>
      <member refid="classBWindow_1a6abf2efb0ab304b75d72df3b6a2b9df3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>InvalidateLayout</name></member>
      <member refid="classBWindow_1ae5d1ae4e9598ed736c557031b92753ce" prot="public" virt="non-virtual"><scope>BWindow</scope><name>InViewTransaction</name></member>
      <member refid="classBWindow_1abbaa2f20d86a5c4d12591fefef0c49fa" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsActive</name></member>
      <member refid="classBWindow_1af731dc0e1c1285d727aa8082f894e627" prot="private" virt="non-virtual"><scope>BWindow</scope><name>IsFilePanel</name></member>
      <member refid="classBWindow_1a54158d02e55dbeb212ccf9af5b5a2f23" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsFloating</name></member>
      <member refid="classBWindow_1a61ab745cf98f47cac71ed3b750d4d21f" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsFront</name></member>
      <member refid="classBWindow_1ae92c2b3b1340af7740b7c4e3e14dcd30" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsHidden</name></member>
      <member refid="classBLooper_1a525d6677c2fc76a84c2d48853dad142a" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsLocked</name></member>
      <member refid="classBLooper_1a27fd22b9eeaeadbeff1e973ed5242a64" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsMessageWaiting</name></member>
      <member refid="classBWindow_1a6c209b1d5ab1b82f43993074b1373678" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsMinimized</name></member>
      <member refid="classBWindow_1aa10b6592ab7e291ce7152a72605c68fa" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsModal</name></member>
      <member refid="classBWindow_1a61d9b0d1e0de31231b835cc5293f8ed2" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsOffscreenWindow</name></member>
      <member refid="classBHandler_1a581b84f0f067afa88768ce6a0c07f59f" prot="public" virt="non-virtual"><scope>BWindow</scope><name>IsWatched</name></member>
      <member refid="classBWindow_1a3f4cf14e9f6453e63b58acfd7098941c" prot="public" virt="non-virtual"><scope>BWindow</scope><name>KeyMenuBar</name></member>
      <member refid="classBWindow_1a59ef137725976cea5008e5efd683357e" prot="public" virt="non-virtual"><scope>BWindow</scope><name>LastMouseMovedView</name></member>
      <member refid="classBWindow_1ae3f008c018e413d75ddea1a60b0c9df7" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Layout</name></member>
      <member refid="classBLooper_1a757a3e406ea3b7bb9a1ad16d04689b1d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Lock</name></member>
      <member refid="classBLooper_1a1d5d9dbc9d890ed1329b69fbfe9254b3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>LockingThread</name></member>
      <member refid="classBHandler_1a9d64bf66b4914918e24390d117e83477" prot="public" virt="non-virtual"><scope>BWindow</scope><name>LockLooper</name></member>
      <member refid="classBHandler_1afa0099ff6defcb6d64e3ee1c2fb47afe" prot="public" virt="non-virtual"><scope>BWindow</scope><name>LockLooperWithTimeout</name></member>
      <member refid="classBLooper_1a734cdb06bfe92efdea24528c9b43bfc1" prot="public" virt="non-virtual"><scope>BWindow</scope><name>LockWithTimeout</name></member>
      <member refid="classBWindow_1a056fe3233f883b1c4518619e59d825cd" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Look</name></member>
      <member refid="classBLooper_1a5cb1d2eb7640fdcbc1085ad19583691d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Loop</name></member>
      <member refid="classBHandler_1ac8e949959b12e602e3b0c4f023c60e6c" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Looper</name></member>
      <member refid="classBLooper_1acf16bb9628e7dbbace3920ebeff6dc34" prot="public" virt="non-virtual"><scope>BWindow</scope><name>LooperForThread</name></member>
      <member refid="classBWindow_1a981d5c2993f4514fbcd1bdaf297a2a2d" prot="public" virt="virtual"><scope>BWindow</scope><name>MenusBeginning</name></member>
      <member refid="classBWindow_1a7bb882de172223e68ee6249596b80564" prot="public" virt="virtual"><scope>BWindow</scope><name>MenusEnded</name></member>
      <member refid="classBLooper_1a1be73aad8e8fed41659b98633525e5b3" prot="protected" virt="non-virtual"><scope>BWindow</scope><name>MessageFromPort</name></member>
      <member refid="classBLooper_1ad0643973ceda5cca540c4684a9f670ac" prot="public" virt="non-virtual"><scope>BWindow</scope><name>MessageQueue</name></member>
      <member refid="classBWindow_1a1ce544ea7d9adcc6941759817a42affe" prot="public" virt="virtual"><scope>BWindow</scope><name>MessageReceived</name></member>
      <member refid="classBWindow_1aabe75f91b52b94de6989b4cf49bd89b5" prot="public" virt="virtual"><scope>BWindow</scope><name>Minimize</name></member>
      <member refid="classBWindow_1a146584fa5815bd413f71671f33a9de89" prot="public" virt="non-virtual"><scope>BWindow</scope><name>MoveBy</name></member>
      <member refid="classBWindow_1ae426291c30652864d0a464518f9cda12" prot="public" virt="non-virtual"><scope>BWindow</scope><name>MoveOnScreen</name></member>
      <member refid="classBWindow_1ae81b509d6ee2eb29b9a703c75ef07ee5" prot="public" virt="non-virtual"><scope>BWindow</scope><name>MoveTo</name></member>
      <member refid="classBWindow_1af419313a1b9b73a2c1cdb2365ff16189" prot="public" virt="non-virtual"><scope>BWindow</scope><name>MoveTo</name></member>
      <member refid="classBHandler_1a40b246ac272e09b2f641d1290be21200" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Name</name></member>
      <member refid="classBWindow_1a9c03d9a6a454edec5eb38657e5c66490" prot="public" virt="non-virtual"><scope>BWindow</scope><name>NeedsUpdate</name></member>
      <member refid="classBHandler_1a92855d8f88f6072e7225bde292feaa38" prot="public" virt="non-virtual"><scope>BWindow</scope><name>NextHandler</name></member>
      <member refid="classBWindow_1a723522be6f51b3051b6f6d4c86415416" prot="private" virt="non-virtual"><scope>BWindow</scope><name>operator=</name></member>
      <member refid="classBWindow_1afde7d74e5526f740dedb82a1d10faa7a" prot="public" virt="virtual"><scope>BWindow</scope><name>Perform</name></member>
      <member refid="classBLooper_1a0de6737bfbf8a8b4913adc8c74bb544e" prot="public" virt="non-virtual"><scope>BWindow</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1ae79a7818ce950d8edcd238f7948df020" prot="public" virt="non-virtual"><scope>BWindow</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1a2dc16ecf211eb7e32eaa4b08863e856d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1ac75eed80e72b236650f19b4015de6e99" prot="public" virt="non-virtual"><scope>BWindow</scope><name>PostMessage</name></member>
      <member refid="classBLooper_1af1a4af6872abc40a887bfcabd55aff98" prot="public" virt="non-virtual"><scope>BWindow</scope><name>PreferredHandler</name></member>
      <member refid="classBWindow_1a8ea37743fc8c09aab2a511a7c14fa9c4" prot="public" virt="non-virtual"><scope>BWindow</scope><name>PulseRate</name></member>
      <member refid="classBWindow_1a054c0206836014dcc20c59e50bceab44" prot="public" virt="virtual"><scope>BWindow</scope><name>Quit</name></member>
      <member refid="classBWindow_1a8fccbfd10fceb2c6103c6036ca9e961a" prot="public" virt="virtual"><scope>BWindow</scope><name>QuitRequested</name></member>
      <member refid="classBWindow_1ac271fe9be15e5d6e0a5d59b7b2ed3e8d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>RemoveChild</name></member>
      <member refid="classBLooper_1ad2233fa143e9deff912bff39eebac4a2" prot="public" virt="virtual"><scope>BWindow</scope><name>RemoveCommonFilter</name></member>
      <member refid="classBHandler_1a2b608135b27f283802648e7c6f8cdc83" prot="public" virt="virtual"><scope>BWindow</scope><name>RemoveFilter</name></member>
      <member refid="classBWindow_1af9ef1e4afee9bfde7c7d9d8e2796c2de" prot="public" virt="non-virtual"><scope>BWindow</scope><name>RemoveFromSubset</name></member>
      <member refid="classBLooper_1a5af57140bf018388a2e64343f46ac330" prot="public" virt="non-virtual"><scope>BWindow</scope><name>RemoveHandler</name></member>
      <member refid="classBWindow_1a81d5e6ed3a8a7b7f5013055bf69593ba" prot="public" virt="non-virtual"><scope>BWindow</scope><name>RemoveShortcut</name></member>
      <member refid="classBWindow_1a6aba4ddafc654f362799b6a96e6c76cd" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ResizeBy</name></member>
      <member refid="classBWindow_1a31e2ea325258646128cfe8618cb79edc" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ResizeTo</name></member>
      <member refid="classBWindow_1a68db6173b92973252fc1876c5376bcd4" prot="public" virt="non-virtual"><scope>BWindow</scope><name>ResizeToPreferred</name></member>
      <member refid="classBWindow_1aaf328e28799cf868ec31df2847a4ed37" prot="public" virt="virtual"><scope>BWindow</scope><name>ResolveSpecifier</name></member>
      <member refid="classBWindow_1ae49c02ad870d55514c800631b37b97cf" prot="public" virt="virtual"><scope>BWindow</scope><name>Run</name></member>
      <member refid="classBWindow_1ab53cad2a56a967f0a52d5603d806561b" prot="public" virt="virtual"><scope>BWindow</scope><name>ScreenChanged</name></member>
      <member refid="classBLooper_1aa96df67561b0ce1428ae45148c21e01f" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Sem</name></member>
      <member refid="classBWindow_1a88c3aa6ee3ea29d7868bafec749f891e" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SendBehind</name></member>
      <member refid="classBHandler_1a71bf72dc17a64bcd42656722271a9e0c" prot="public" virt="virtual"><scope>BWindow</scope><name>SendNotices</name></member>
      <member refid="classBLooper_1a9b39e686873763cc6491c91f77b177b7" prot="public" virt="virtual"><scope>BWindow</scope><name>SetCommonFilterList</name></member>
      <member refid="classBWindow_1aecfdd5136ed18c193357a8e3130ba578" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetDecoratorSettings</name></member>
      <member refid="classBWindow_1ab6c969b403bd24dc8b1e9d846a4ae414" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetDefaultButton</name></member>
      <member refid="classBWindow_1a2317402cb859f5a438bc69e186ee2f04" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetFeel</name></member>
      <member refid="classBHandler_1a503344dc801858e1f5f419be3919e9cf" prot="public" virt="virtual"><scope>BWindow</scope><name>SetFilterList</name></member>
      <member refid="classBWindow_1a8f0caf4693a1952ac9bbe9a52bfdd778" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetFlags</name></member>
      <member refid="classBWindow_1af3bed3bf0b9516ddaf76bbdd90746ce8" prot="private" virt="non-virtual"><scope>BWindow</scope><name>SetIsFilePanel</name></member>
      <member refid="classBWindow_1aa1e9322c76ffdad1886253171f8a5972" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetKeyMenuBar</name></member>
      <member refid="classBWindow_1ad0e630f2691a0f7919b809b7ea265095" prot="public" virt="virtual"><scope>BWindow</scope><name>SetLayout</name></member>
      <member refid="classBWindow_1ac9ca5f4b8a78f95403dbc35ad9728e0c" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetLook</name></member>
      <member refid="classBHandler_1abf861126df4b6e71b9261a99da4ad0eb" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetName</name></member>
      <member refid="classBHandler_1a02f78779c8141987d6030e73c22e734a" prot="public" virt="virtual"><scope>BWindow</scope><name>SetNextHandler</name></member>
      <member refid="classBLooper_1a07c6e5c65354b48465fde2b0b44e22c6" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetPreferredHandler</name></member>
      <member refid="classBWindow_1ad69001922aad8daf7b65f82eb4b439f0" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetPulseRate</name></member>
      <member refid="classBWindow_1a8668ecf18ad145391f66704c3339eb3d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetSizeLimits</name></member>
      <member refid="classBWindow_1a7cd4bf7dc0079e9a52b0ac1e7e2f897b" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetTitle</name></member>
      <member refid="classBWindow_1a0f8f96c37d83e8df9e97c25a69c68295" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetType</name></member>
      <member refid="classBWindow_1a91d42de7f54efe1399c3838d35162d20" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetWindowAlignment</name></member>
      <member refid="classBWindow_1a3549fdb63a64637fa8e2054e8c21272d" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetWorkspaces</name></member>
      <member refid="classBWindow_1ad3c2e560e41b377456faf9bd5dabcdc0" prot="public" virt="non-virtual"><scope>BWindow</scope><name>SetZoomLimits</name></member>
      <member refid="classBWindow_1af7009117df50add72cf0e799ff7d0fa5" prot="public" virt="virtual"><scope>BWindow</scope><name>Show</name></member>
      <member refid="classBWindow_1afc61a0c6129f233e56fa373107bd8790" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Size</name></member>
      <member refid="classBHandler_1af7d600e33a0586af7444d9abc8500504" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StartWatching</name></member>
      <member refid="classBHandler_1a20713ff6ee9df49a014f391374eaf689" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StartWatching</name></member>
      <member refid="classBHandler_1a58d7c8d30e47fbb7590f10dea1f21166" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StartWatchingAll</name></member>
      <member refid="classBHandler_1a31927c51d89e0e3b3bf609a786ee6c3b" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StartWatchingAll</name></member>
      <member refid="classBHandler_1a9d1f0d55b3dc7337058aba769b4e4f93" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StopWatching</name></member>
      <member refid="classBHandler_1ad3544be491270f856a0af8d36ce02d78" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StopWatching</name></member>
      <member refid="classBHandler_1a199c167e0dcee95aa65d09435804b3d9" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StopWatchingAll</name></member>
      <member refid="classBHandler_1a8b9a424ce63f5932666094b6eadf10cf" prot="public" virt="non-virtual"><scope>BWindow</scope><name>StopWatchingAll</name></member>
      <member refid="classBWindow_1a332bea9ef16fedc16134bf587b52fa09" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Sync</name></member>
      <member refid="classBWindow_1a03af45cf0edd6565f15e8fce29a146b7" prot="private" virt="virtual"><scope>BWindow</scope><name>task_looper</name></member>
      <member refid="classBLooper_1afeb7a4900f26e7746d6c8bdb5cf684f3" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Team</name></member>
      <member refid="classBLooper_1a257d396d04d128edf7a0c9669ead36c0" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Thread</name></member>
      <member refid="classBWindow_1a73c7a05ef33d579de61b83b5daaf3c6b" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Title</name></member>
      <member refid="classBWindow_1a103e6f93287afd65ed72ff760403fdf6" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Type</name></member>
      <member refid="classBLooper_1ac84ea15405640082b9fda58f6672467c" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Unlock</name></member>
      <member refid="classBHandler_1ab131af7eb7aa2b9eea3a11ac1bfd4c03" prot="public" virt="non-virtual"><scope>BWindow</scope><name>UnlockLooper</name></member>
      <member refid="classBWindow_1a49b0c49eeef751b17bdc08d2e4d58cb9" prot="public" virt="non-virtual"><scope>BWindow</scope><name>UpdateIfNeeded</name></member>
      <member refid="classBWindow_1a99df6b9964c69b1c69c47fab6262abee" prot="public" virt="non-virtual"><scope>BWindow</scope><name>UpdateSizeLimits</name></member>
      <member refid="classBWindow_1a0a17d973a17bb8d3aef09d45d58a9aca" prot="public" virt="virtual"><scope>BWindow</scope><name>WindowActivated</name></member>
      <member refid="classBWindow_1ac3c293ef3d60df9b3125fb15d0c67cf7" prot="public" virt="virtual"><scope>BWindow</scope><name>WorkspaceActivated</name></member>
      <member refid="classBWindow_1aba3b83e88043338b66c2b2f501fbbbee" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Workspaces</name></member>
      <member refid="classBWindow_1af8dc496d4239a2c343a364a4ad9aabc4" prot="public" virt="virtual"><scope>BWindow</scope><name>WorkspacesChanged</name></member>
      <member refid="classBWindow_1ae7bea03df00c760d7f489acd3e312290" prot="public" virt="virtual"><scope>BWindow</scope><name>Zoom</name></member>
      <member refid="classBWindow_1a722772f2902e82bf65010ac2c13570bc" prot="public" virt="non-virtual"><scope>BWindow</scope><name>Zoom</name></member>
      <member refid="classBArchivable_1af1a37be4b953423787b0d0be0b345ff3" prot="public" virt="virtual"><scope>BWindow</scope><name>~BArchivable</name></member>
      <member refid="classBHandler_1a928254034959d19ef588b7898a6f8194" prot="public" virt="virtual"><scope>BWindow</scope><name>~BHandler</name></member>
      <member refid="classBLooper_1ab2fa21c0315644144f55523adbdc0457" prot="public" virt="virtual"><scope>BWindow</scope><name>~BLooper</name></member>
      <member refid="classBWindow_1a896913784046fcfde7d1f8891e54af08" prot="public" virt="virtual"><scope>BWindow</scope><name>~BWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
