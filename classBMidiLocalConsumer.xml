<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMidiLocalConsumer" kind="class" language="C++" prot="public">
    <compoundname>BMidiLocalConsumer</compoundname>
    <basecompoundref refid="classBMidiConsumer" prot="public" virt="non-virtual">BMidiConsumer</basecompoundref>
    <includes local="no">MidiConsumer.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBMidiLocalConsumer_1aa7877aaa191fd09c00240c338ad0db67" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 _midi_event_thread</definition>
        <argsstring>(void *)</argsstring>
        <name>_midi_event_thread</name>
        <qualifiedname>BMidiLocalConsumer::_midi_event_thread</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="96" column="14"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiLocalConsumer_1a0dd92f24708e1530ff6437e668a2cbb9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiRoster</definition>
        <argsstring></argsstring>
        <name>BMidiRoster</name>
        <qualifiedname>BMidiLocalConsumer::BMidiRoster</qualifiedname>
        <param>
          <type><ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="95" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMidiLocalConsumer_1a0475373ebb6fef18fb1d75a96dae6be2" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMidiLocalConsumer::_reserved[1]</definition>
        <argsstring>[1]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMidiLocalConsumer::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="114" column="8" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiLocalConsumer_1a03ea5f167ce570f22990f3b2603b36b7" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMidiLocalConsumer::fCurrentProducer</definition>
        <argsstring></argsstring>
        <name>fCurrentProducer</name>
        <qualifiedname>BMidiLocalConsumer::fCurrentProducer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="111" column="7" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiLocalConsumer_1a29999e46ac692df5311196879f8a3351" prot="private" static="no" mutable="no">
        <type>thread_id</type>
        <definition>thread_id BMidiLocalConsumer::fThread</definition>
        <argsstring></argsstring>
        <name>fThread</name>
        <qualifiedname>BMidiLocalConsumer::fThread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="112" column="11" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiLocalConsumer_1a677e0b3945bed01bdc41e84f75e77fb4" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BMidiLocalConsumer::fTimeout</definition>
        <argsstring></argsstring>
        <name>fTimeout</name>
        <qualifiedname>BMidiLocalConsumer::fTimeout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="109" column="11" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiLocalConsumer_1ad71094992b4a241114053aca376d6b4c" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* BMidiLocalConsumer::fTimeoutData</definition>
        <argsstring></argsstring>
        <name>fTimeoutData</name>
        <qualifiedname>BMidiLocalConsumer::fTimeoutData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="110" column="6" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMidiLocalConsumer_1af5599649a8dcb2b5b378d140648d6e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMidiLocalConsumer::BMidiLocalConsumer</definition>
        <argsstring>(const char *name=NULL)</argsstring>
        <name>BMidiLocalConsumer</name>
        <qualifiedname>BMidiLocalConsumer::BMidiLocalConsumer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Creates a new local consumer endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>The new endpoint is not visible to other applications until you <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register()</ref> it.</para>
<para>You can tell the constructor what the name of the new consumer will be. If you pass NULL (or use the default argument), then the consumer&apos;s name will be an empty string. It won&apos;t be NULL, since endpoint names cannot be NULL.</para>
<para>There is no guarantee that the endpoint will be successfully created. For example, the Midi Server may not be running. Therefore, you should always call <ref refid="classBMidiEndpoint_1a0c9f93e72f5302f6f0c631e5a4f0ddb2" kindref="member">IsValid()</ref> after creating a new endpoint to make sure that everything went okay. If not, <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release()</ref> the object to reclaim memory and abort gracefully.</para>
<para><programlisting><codeline><highlight class="normal">MyConsumer*<sp/>cons<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MyConsumer(...);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cons-&gt;IsValid())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cons-&gt;Release();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...exit<sp/>gracefully...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a0992ee0c4927c5a14fad7beba6e68cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::AllNotesOff</definition>
        <argsstring>(bool justChannel, bigtime_t time)</argsstring>
        <name>AllNotesOff</name>
        <qualifiedname>BMidiLocalConsumer::AllNotesOff</qualifiedname>
        <param>
          <type>bool</type>
          <declname>justChannel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Not used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="87" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1af44b9be98bfa1993de27a3d557eb7699" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::ChannelPressure</definition>
        <argsstring>(uchar channel, uchar pressure, bigtime_t time)</argsstring>
        <name>ChannelPressure</name>
        <qualifiedname>BMidiLocalConsumer::ChannelPressure</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>pressure</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Channel Pressure event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1a29eacce2dc50b1e193903ae28b5e5feb" kindref="member">BMidiLocalProducer::SprayChannelPressure()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="71" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a48ae4c29a7044c1f53fa2901f0aad548" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::ControlChange</definition>
        <argsstring>(uchar channel, uchar controlNumber, uchar controlValue, bigtime_t time)</argsstring>
        <name>ControlChange</name>
        <qualifiedname>BMidiLocalConsumer::ControlChange</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>controlNumber</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>controlValue</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Controller Change event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1a25e58f5d855eadfebd50d8ac5e9db423" kindref="member">BMidiLocalProducer::SprayControlChange()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="64" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::Data</definition>
        <argsstring>(uchar *data, size_t length, bool atomic, bigtime_t time)</argsstring>
        <name>Data</name>
        <qualifiedname>BMidiLocalConsumer::Data</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>atomic</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when raw MIDI is received. </para>
        </briefdescription>
        <detaileddescription>
<para>What the default implementation of <ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data()</ref> does depends on the value of atomic. If atomic is true, the data received comprises a single MIDI event; i.e. one status byte followed by the appropriate number of data bytes and nothing else. In this case, <ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data()</ref> calls the event-specific hook function that corresponds to that status byte. This optimization is used by the Midi Kit to allow faster dispatch of events generated by the specific Spray functions from <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref>.</para>
<para>If atomic is false, <ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data()</ref> ignores the MIDI event. If you want a consumer to handle non-atomic events, you have to override <ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data()</ref> and program this yourself. In that case, you probably also want to call the default implementation to handle the &quot;normal&quot; MIDI events.</para>
<para><ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data()</ref> is rarely overridden, but you can override it if you want to. If you do, remember that the data buffer is owned by the Midi Kit. Do not attempt to modify or free it, lest you wish to be laughed at by other developers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the MIDI event data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>byte size of the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atomic</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the data buffer contains a single complete MIDI event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>the requested performance time of the event</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1ae8cabda990298dbb11a3c4d70edcb047" kindref="member">BMidiLocalProducer::SprayData()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="52" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a5fdd8a43dbaec4e2c96f476b2b008783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMidiLocalConsumer::GetProducerID</definition>
        <argsstring>()</argsstring>
        <name>GetProducerID</name>
        <qualifiedname>BMidiLocalConsumer::GetProducerID</qualifiedname>
        <briefdescription>
<para>Returns the ID of the producer that most recently sent a MIDI event to this consumer. </para>
        </briefdescription>
        <detaileddescription>
<para>You can call this from one of the hooks to determine which producer the event came from. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="47" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a40bd466df44bc73cb896123e693cb96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::KeyPressure</definition>
        <argsstring>(uchar channel, uchar note, uchar pressure, bigtime_t time)</argsstring>
        <name>KeyPressure</name>
        <qualifiedname>BMidiLocalConsumer::KeyPressure</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>note</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>pressure</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Polyphonic Pressure (Aftertouch) event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1a7508488d1d0268d0061146c706392e5c" kindref="member">BMidiLocalProducer::SprayKeyPressure()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="61" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a25329db05d4e210e7495d0618cc7e2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::NoteOff</definition>
        <argsstring>(uchar channel, uchar note, uchar velocity, bigtime_t time)</argsstring>
        <name>NoteOff</name>
        <qualifiedname>BMidiLocalConsumer::NoteOff</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>note</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>velocity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Note Off event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1a9a8eaf2c2993e435f4b766ebc3dc0135" kindref="member">BMidiLocalProducer::SprayNoteOff()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="55" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1af8986251fbb08548712e0273c13dd87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::NoteOn</definition>
        <argsstring>(uchar channel, uchar note, uchar velocity, bigtime_t time)</argsstring>
        <name>NoteOn</name>
        <qualifiedname>BMidiLocalConsumer::NoteOn</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>note</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>velocity</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Note On event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1ae894fdb7f04b2c65329720592cb525dd" kindref="member">BMidiLocalProducer::SprayNoteOn()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="58" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a0aeef8a6c7ac0933c290e34ec413b679" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::PitchBend</definition>
        <argsstring>(uchar channel, uchar lsb, uchar msb, bigtime_t time)</argsstring>
        <name>PitchBend</name>
        <qualifiedname>BMidiLocalConsumer::PitchBend</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>lsb</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>msb</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Pitch Bend event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1ab8bf5919d03bd48cb245868d6765da72" kindref="member">BMidiLocalProducer::SprayPitchBend()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="74" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1abc694df60305b285bfd82291709cf3f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::ProgramChange</definition>
        <argsstring>(uchar channel, uchar programNumber, bigtime_t time)</argsstring>
        <name>ProgramChange</name>
        <qualifiedname>BMidiLocalConsumer::ProgramChange</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>programNumber</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Program Change event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1a1996b1a5486d0ff0008e7705138fe9d6" kindref="member">BMidiLocalProducer::SprayProgramChange()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="68" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a63fc7918e61adf5bee4ec3a24cb7cbb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::SetLatency</definition>
        <argsstring>(bigtime_t latency)</argsstring>
        <name>SetLatency</name>
        <qualifiedname>BMidiLocalConsumer::SetLatency</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>latency</declname>
        </param>
        <briefdescription>
<para>Changes the published latency of the consumer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiConsumer_1a11a23be136f1eaa0f797d1e8b5b4e460" kindref="member">Latency()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="46" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a92d0d4dc591ca2c90bc51a3ac883ce29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::SetTimeout</definition>
        <argsstring>(bigtime_t when, void *data)</argsstring>
        <name>SetTimeout</name>
        <qualifiedname>BMidiLocalConsumer::SetTimeout</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>when</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Requests that the <ref refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" kindref="member">Timeout()</ref> hook will be called at some point. </para>
        </briefdescription>
        <detaileddescription>
<para>This method asks the consumer thread to call the <ref refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" kindref="member">Timeout()</ref> hook as soon as possible after the timeout expires. For every call to <ref refid="classBMidiLocalConsumer_1a92d0d4dc591ca2c90bc51a3ac883ce29" kindref="member">SetTimeout()</ref>, the <ref refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" kindref="member">Timeout()</ref> hook is only called once. Note: the term &quot;timeout&quot; may be a little misleading; the hook will <emphasis>always</emphasis> be called, even if events are received in the mean time. Apparently, this facility is handy for dealing with early events.</para>
<para>Note that the event thread blocks on the consumer&apos;s port as long as no events arrive. By default no timeout is set, and as a result the thread blocks forever. Your call to <ref refid="classBMidiLocalConsumer_1a92d0d4dc591ca2c90bc51a3ac883ce29" kindref="member">SetTimeout()</ref> doesn&apos;t change this. The new timeout value will go into effect the next time the thread tries to read from the port, i.e. after the first event has been received. If no event ever comes in, the <ref refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" kindref="member">Timeout()</ref> hook will never be called. This also means that you cannot cancel a timeout once you have set it. To repeat, calling <ref refid="classBMidiLocalConsumer_1a92d0d4dc591ca2c90bc51a3ac883ce29" kindref="member">SetTimeout()</ref> only takes effect after at least one new event has been received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>when</parametername>
</parameternamelist>
<parameterdescription>
<para>An absolute time that&apos;s measured against the system clock.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a &quot;cookie&quot; that you can pass along to <ref refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" kindref="member">Timeout()</ref>. The data is not copied, so you must ensure that the pointer remains valid until <ref refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" kindref="member">Timeout()</ref> is called. You typically delete the data inside <ref refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" kindref="member">Timeout()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="49" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a269746afdbeed326f7d95ba897e8d10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::SystemCommon</definition>
        <argsstring>(uchar status, uchar data1, uchar data2, bigtime_t time)</argsstring>
        <name>SystemCommon</name>
        <qualifiedname>BMidiLocalConsumer::SystemCommon</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>data1</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>data2</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a System Common event is received. </para>
        </briefdescription>
        <detaileddescription>
<para>Not all data bytes are used for all common events. Unused bytes are set to 0.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1a7e0de2eea30f60f75ef06a8bc03b853e" kindref="member">BMidiLocalProducer::SpraySystemCommon()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="80" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a64798d8363e51044b516addc23937788" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::SystemExclusive</definition>
        <argsstring>(void *data, size_t length, bigtime_t time)</argsstring>
        <name>SystemExclusive</name>
        <qualifiedname>BMidiLocalConsumer::SystemExclusive</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a System Exclusive event is received. </para>
        </briefdescription>
        <detaileddescription>
<para>The data does not include the sysex start and end control bytes (0xF0 and 0xF7), only the payload of the sysex message.</para>
<para>The data belongs to the Midi Kit and is only valid for the duration of this event. You may not modify or free it.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1af7aeb206b4e0b343d95f42e68db5d956" kindref="member">BMidiLocalProducer::SpraySystemExclusive()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="77" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a3a36cf048a1bb7d92a9d97e98ffc3dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::SystemRealTime</definition>
        <argsstring>(uchar status, bigtime_t time)</argsstring>
        <name>SystemRealTime</name>
        <qualifiedname>BMidiLocalConsumer::SystemRealTime</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Real Time event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1a776c12865641386d826145a37796bd54" kindref="member">BMidiLocalProducer::SpraySystemRealTime()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="83" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1aa86d74b50c5b0ff5f2a49c8d0ad9e01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::TempoChange</definition>
        <argsstring>(int32 beatsPerMinute, bigtime_t time)</argsstring>
        <name>TempoChange</name>
        <qualifiedname>BMidiLocalConsumer::TempoChange</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>beatsPerMinute</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Invoked when a Tempo Change event is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalProducer_1ae7302b78045f6e99a50bb43ec255b848" kindref="member">BMidiLocalProducer::SprayTempoChange()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="85" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BMidiLocalConsumer::Timeout</definition>
        <argsstring>(void *data)</argsstring>
        <name>Timeout</name>
        <qualifiedname>BMidiLocalConsumer::Timeout</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Hook function that is called per your own request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiLocalConsumer_1a92d0d4dc591ca2c90bc51a3ac883ce29" kindref="member">SetTimeout()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="50" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBMidiLocalConsumer_1ad2f38bd50641f77a6ce191ea782b4ff3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMidiLocalConsumer::~BMidiLocalConsumer</definition>
        <argsstring>()</argsstring>
        <name>~BMidiLocalConsumer</name>
        <qualifiedname>BMidiLocalConsumer::~BMidiLocalConsumer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="91" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMidiLocalConsumer_1ae5170e25d8d3316f63a8a61f7b37a21c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved1</definition>
        <argsstring>()</argsstring>
        <name>_Reserved1</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved1</qualifiedname>
        <reimplements refid="classBMidiConsumer_1aa24c739bb4019ae852f54faf6688df64">_Reserved1</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="98" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a7634548966ea0e8a98717e34ca68fc24" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved2</definition>
        <argsstring>()</argsstring>
        <name>_Reserved2</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved2</qualifiedname>
        <reimplements refid="classBMidiConsumer_1af7f6fb3e83b2047bc01299c33f0656ae">_Reserved2</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="99" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a7320d022e7609a6bf7a9be39c8e54e17" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved3</definition>
        <argsstring>()</argsstring>
        <name>_Reserved3</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved3</qualifiedname>
        <reimplements refid="classBMidiConsumer_1a21a3bc846696c6290b436dd0693718cc">_Reserved3</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="100" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a9349ae52b8e31f2db04c853641fbe433" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved4</definition>
        <argsstring>()</argsstring>
        <name>_Reserved4</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved4</qualifiedname>
        <reimplements refid="classBMidiConsumer_1a03c50834d2adf800cbd46fdae136a5cf">_Reserved4</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="101" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a122deadd602ebfa3ff511d9bfcb58bad" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved5</definition>
        <argsstring>()</argsstring>
        <name>_Reserved5</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved5</qualifiedname>
        <reimplements refid="classBMidiConsumer_1a38a7c777fc8912593326340783539f1e">_Reserved5</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="102" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a26d2239a54cdda9da7530e4933195f83" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved6</definition>
        <argsstring>()</argsstring>
        <name>_Reserved6</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved6</qualifiedname>
        <reimplements refid="classBMidiConsumer_1a0272e6ebc30e78146bd875f3495ce34f">_Reserved6</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="103" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a29a660762ec97691b309e8a211e36aba" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved7</definition>
        <argsstring>()</argsstring>
        <name>_Reserved7</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved7</qualifiedname>
        <reimplements refid="classBMidiConsumer_1ad8f8456da1208b12b1f997648caa126b">_Reserved7</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="104" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a2168f99235fe194047605da86d1c7a09" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiLocalConsumer::_Reserved8</definition>
        <argsstring>()</argsstring>
        <name>_Reserved8</name>
        <qualifiedname>BMidiLocalConsumer::_Reserved8</qualifiedname>
        <reimplements refid="classBMidiConsumer_1ace806feb1b49021f4388252ba2f5ab30">_Reserved8</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="105" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiLocalConsumer_1a7b7ca292c845593dac67633c94d14ede" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMidiLocalConsumer::EventThread</definition>
        <argsstring>()</argsstring>
        <name>EventThread</name>
        <qualifiedname>BMidiLocalConsumer::EventThread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="107" column="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A consumer endpoint that is created by your own application. </para>
    </briefdescription>
    <detaileddescription>
<para>If you want to create a consumer that reacts to MIDI events, you should subclass <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref>.</para>
<para>Each local consumer has its own thread that receives and dispatches the MIDI events. Whenever MIDI data arrives, the <ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data()</ref> hook passes the MIDI event on to a more specific hook function: <ref refid="classBMidiLocalConsumer_1af8986251fbb08548712e0273c13dd87e" kindref="member">NoteOn()</ref>, <ref refid="classBMidiLocalConsumer_1a25329db05d4e210e7495d0618cc7e2cd" kindref="member">NoteOff()</ref>, <ref refid="classBMidiLocalConsumer_1a64798d8363e51044b516addc23937788" kindref="member">SystemExclusive()</ref>, and so on. Calls to these hook functions are serialized <ndash/> they will never have to be re-entrant. They also should not be called from outside the thread that is invoking them.</para>
<para>Your subclass can override any of the MIDI event hooks. <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref> doesn&apos;t provide default implementations for them, so you don&apos;t have to call a hook&apos;s default implementation if you override it. For complete control, you can also override <ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data()</ref>.</para>
<para>Most hook functions take a channel argument. Even though MIDI channels are really numbered 1 through 16, the hook functions work with channels 0 through 15. The performance time for the event is specified in microseconds relative to the system time base. A performance time that is 0 (or really any time in the past) means &quot;play as soon as possible&quot;. See the <ref refid="midi2_intro_1midi2time" kindref="member">introduction</ref> for more information about timing and consumers.</para>
<para>The thread driving the consumer&apos;s events is a very high priority real time thread. Events should be handled as quickly as possible (not counting snoozing). If non-time-critical computation is needed it may be wise to queue events up for a lower priority thread to handle them external to the main event thread. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BMidiConsumer</label>
        <link refid="classBMidiConsumer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BMidiEndpoint</label>
        <link refid="classBMidiEndpoint"/>
      </node>
      <node id="1">
        <label>BMidiLocalConsumer</label>
        <link refid="classBMidiLocalConsumer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BMidiConsumer</label>
        <link refid="classBMidiConsumer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BMidiEndpoint</label>
        <link refid="classBMidiEndpoint"/>
      </node>
      <node id="1">
        <label>BMidiLocalConsumer</label>
        <link refid="classBMidiLocalConsumer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" line="40" column="1" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiConsumer.h" bodystart="41" bodyend="115"/>
    <listofallmembers>
      <member refid="classBMidiLocalConsumer_1aa7877aaa191fd09c00240c338ad0db67" prot="private" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>_midi_event_thread</name></member>
      <member refid="classBMidiLocalConsumer_1a0475373ebb6fef18fb1d75a96dae6be2" prot="private" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>_reserved</name></member>
      <member refid="classBMidiLocalConsumer_1ae5170e25d8d3316f63a8a61f7b37a21c" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved1</name></member>
      <member refid="classBMidiLocalConsumer_1a7634548966ea0e8a98717e34ca68fc24" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved2</name></member>
      <member refid="classBMidiLocalConsumer_1a7320d022e7609a6bf7a9be39c8e54e17" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved3</name></member>
      <member refid="classBMidiLocalConsumer_1a9349ae52b8e31f2db04c853641fbe433" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved4</name></member>
      <member refid="classBMidiLocalConsumer_1a122deadd602ebfa3ff511d9bfcb58bad" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved5</name></member>
      <member refid="classBMidiLocalConsumer_1a26d2239a54cdda9da7530e4933195f83" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved6</name></member>
      <member refid="classBMidiLocalConsumer_1a29a660762ec97691b309e8a211e36aba" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved7</name></member>
      <member refid="classBMidiLocalConsumer_1a2168f99235fe194047605da86d1c7a09" prot="private" virt="virtual"><scope>BMidiLocalConsumer</scope><name>_Reserved8</name></member>
      <member refid="classBMidiEndpoint_1a504efce89310e4473c4a9ae77da7a641" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>Acquire</name></member>
      <member refid="classBMidiLocalConsumer_1a0992ee0c4927c5a14fad7beba6e68cc9" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>AllNotesOff</name></member>
      <member refid="classBMidiLocalConsumer_1af5599649a8dcb2b5b378d140648d6e1c" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>BMidiLocalConsumer</name></member>
      <member refid="classBMidiLocalConsumer_1af44b9be98bfa1993de27a3d557eb7699" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>ChannelPressure</name></member>
      <member refid="classBMidiLocalConsumer_1a48ae4c29a7044c1f53fa2901f0aad548" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>ControlChange</name></member>
      <member refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>Data</name></member>
      <member refid="classBMidiLocalConsumer_1a7b7ca292c845593dac67633c94d14ede" prot="private" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>EventThread</name></member>
      <member refid="classBMidiLocalConsumer_1a03ea5f167ce570f22990f3b2603b36b7" prot="private" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>fCurrentProducer</name></member>
      <member refid="classBMidiLocalConsumer_1a29999e46ac692df5311196879f8a3351" prot="private" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>fThread</name></member>
      <member refid="classBMidiLocalConsumer_1a677e0b3945bed01bdc41e84f75e77fb4" prot="private" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>fTimeout</name></member>
      <member refid="classBMidiLocalConsumer_1ad71094992b4a241114053aca376d6b4c" prot="private" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>fTimeoutData</name></member>
      <member refid="classBMidiLocalConsumer_1a5fdd8a43dbaec4e2c96f476b2b008783" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>GetProducerID</name></member>
      <member refid="classBMidiEndpoint_1a5c6c8dc7f451e7c908df05319f24a64f" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>GetProperties</name></member>
      <member refid="classBMidiEndpoint_1a3f5b840617bf84cddbca779c470cef17" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>ID</name></member>
      <member refid="classBMidiEndpoint_1ae20fe83d79bd0d08cb818d3dda0fdc23" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>IsConsumer</name></member>
      <member refid="classBMidiEndpoint_1a3edca82a4aa8bfa2aad3874cc9192b4d" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>IsLocal</name></member>
      <member refid="classBMidiEndpoint_1a20623d6d71190a701e9bccc23e646e6a" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>IsPersistent</name></member>
      <member refid="classBMidiEndpoint_1a2555a377a070eaea225ca40b9e5bb696" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>IsProducer</name></member>
      <member refid="classBMidiEndpoint_1a11fc9a34aee618e137d9affcd67a7b36" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>IsRemote</name></member>
      <member refid="classBMidiEndpoint_1a0c9f93e72f5302f6f0c631e5a4f0ddb2" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>IsValid</name></member>
      <member refid="classBMidiLocalConsumer_1a40bd466df44bc73cb896123e693cb96b" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>KeyPressure</name></member>
      <member refid="classBMidiConsumer_1a11a23be136f1eaa0f797d1e8b5b4e460" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>Latency</name></member>
      <member refid="classBMidiEndpoint_1a685e4d64cfbf56e30c7a3c5849fc72d8" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>Name</name></member>
      <member refid="classBMidiLocalConsumer_1a25329db05d4e210e7495d0618cc7e2cd" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>NoteOff</name></member>
      <member refid="classBMidiLocalConsumer_1af8986251fbb08548712e0273c13dd87e" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>NoteOn</name></member>
      <member refid="classBMidiLocalConsumer_1a0aeef8a6c7ac0933c290e34ec413b679" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>PitchBend</name></member>
      <member refid="classBMidiLocalConsumer_1abc694df60305b285bfd82291709cf3f7" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>ProgramChange</name></member>
      <member refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>Register</name></member>
      <member refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>Release</name></member>
      <member refid="classBMidiLocalConsumer_1a63fc7918e61adf5bee4ec3a24cb7cbb7" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>SetLatency</name></member>
      <member refid="classBMidiEndpoint_1afa167950f7b60558712224798f7e50aa" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>SetName</name></member>
      <member refid="classBMidiEndpoint_1a58cf2c701ba336b640067db743ba9746" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>SetProperties</name></member>
      <member refid="classBMidiLocalConsumer_1a92d0d4dc591ca2c90bc51a3ac883ce29" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>SetTimeout</name></member>
      <member refid="classBMidiLocalConsumer_1a269746afdbeed326f7d95ba897e8d10c" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>SystemCommon</name></member>
      <member refid="classBMidiLocalConsumer_1a64798d8363e51044b516addc23937788" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>SystemExclusive</name></member>
      <member refid="classBMidiLocalConsumer_1a3a36cf048a1bb7d92a9d97e98ffc3dc4" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>SystemRealTime</name></member>
      <member refid="classBMidiLocalConsumer_1aa86d74b50c5b0ff5f2a49c8d0ad9e01d" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>TempoChange</name></member>
      <member refid="classBMidiLocalConsumer_1a1331cbaa81327455ed000ec45dff0f27" prot="public" virt="virtual"><scope>BMidiLocalConsumer</scope><name>Timeout</name></member>
      <member refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" prot="public" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>Unregister</name></member>
      <member refid="classBMidiLocalConsumer_1ad2f38bd50641f77a6ce191ea782b4ff3" prot="protected" virt="non-virtual"><scope>BMidiLocalConsumer</scope><name>~BMidiLocalConsumer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
