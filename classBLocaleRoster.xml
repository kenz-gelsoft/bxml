<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBLocaleRoster" kind="class" language="C++" prot="public">
    <compoundname>BLocaleRoster</compoundname>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classBLocaleRoster_1a9101c9fe8699509a7e97bef936f9034a" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* BLocaleRoster::kCatFingerprintAttr</definition>
        <argsstring></argsstring>
        <name>kCatFingerprintAttr</name>
        <qualifiedname>BLocaleRoster::kCatFingerprintAttr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="91" column="17" bodyfile="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBLocaleRoster_1ab5b40f71fca27b3bad6a0e0509d1181b" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* BLocaleRoster::kCatLangAttr</definition>
        <argsstring></argsstring>
        <name>kCatLangAttr</name>
        <qualifiedname>BLocaleRoster::kCatLangAttr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="89" column="17" bodyfile="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBLocaleRoster_1a8bbdeb1b6a6d980880f39986a5111b05" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* BLocaleRoster::kCatSigAttr</definition>
        <argsstring></argsstring>
        <name>kCatSigAttr</name>
        <qualifiedname>BLocaleRoster::kCatSigAttr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="90" column="17" bodyfile="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBLocaleRoster_1ac8ce4efd634e377187547eebdc9b3088" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* BLocaleRoster::kEmbeddedCatAttr</definition>
        <argsstring></argsstring>
        <name>kEmbeddedCatAttr</name>
        <qualifiedname>BLocaleRoster::kEmbeddedCatAttr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="93" column="17" bodyfile="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBLocaleRoster_1a778e9399e01d004e2004a3628ba53102" prot="public" static="yes" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BLocaleRoster::kEmbeddedCatResId</definition>
        <argsstring></argsstring>
        <name>kEmbeddedCatResId</name>
        <qualifiedname>BLocaleRoster::kEmbeddedCatResId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="94" column="12" bodyfile="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBLocaleRoster_1a1b5974f8ba0906b956e781bee26f3799" prot="protected" static="no" mutable="no">
        <type>BPrivate::LocaleRosterData *</type>
        <definition>BPrivate::LocaleRosterData* BLocaleRoster::fData</definition>
        <argsstring></argsstring>
        <name>fData</name>
        <qualifiedname>BLocaleRoster::fData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="100" column="27" bodyfile="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBLocaleRoster_1ad6672b698c844bac6a6b663a24a123c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BLocaleRoster::~BLocaleRoster</definition>
        <argsstring>()</argsstring>
        <name>~BLocaleRoster</name>
        <qualifiedname>BLocaleRoster::~BLocaleRoster</qualifiedname>
        <briefdescription>
<para>Destructor. Does nothing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a63549adde7995fec7acc00743aa8ba93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetAvailableCatalogs</definition>
        <argsstring>(BMessage *message, const char *sigPattern=NULL, const char *langPattern=NULL, int32 fingerprint=0) const</argsstring>
        <name>GetAvailableCatalogs</name>
        <qualifiedname>BLocaleRoster::GetAvailableCatalogs</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
          <defname>languageList</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sigPattern</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>langPattern</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fingerprint</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the available locales and catalogs. </para>
        </briefdescription>
        <detaileddescription>
<para>Fills the passed <emphasis>languageList</emphasis> message with one or more &apos;locale&apos; string fields containing the locale names.</para>
<para>The optional parameters can be used to filter the list and only get the locales for which a catalog is available for the given app (sigPattern, fingerprint), or the locales with a given language.</para>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>NULL</computeroutput> <emphasis>languageList</emphasis> message was passed in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error locking the default RosterData.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="67" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a6df1035b9449247552c4d1be2c4b74c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetAvailableCountries</definition>
        <argsstring>(BMessage *timeZones) const</argsstring>
        <name>GetAvailableCountries</name>
        <qualifiedname>BLocaleRoster::GetAvailableCountries</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>timeZones</declname>
          <defname>message</defname>
        </param>
        <briefdescription>
<para>Fills in the passed in <emphasis>message</emphasis> with one or more &apos;country&apos; string fields, containing the (ISO-639) code of each country. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="52" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1ae5927ab7e48d8001233f853da7442bfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetAvailableLanguages</definition>
        <argsstring>(BMessage *message) const</argsstring>
        <name>GetAvailableLanguages</name>
        <qualifiedname>BLocaleRoster::GetAvailableLanguages</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Fills <computeroutput>message</computeroutput> with &apos;language&apos;-fields containing the language ID(s) of all available languages. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="51" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a89336fc6c6975ea380466ad983bbc540" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetAvailableTimeZones</definition>
        <argsstring>(BMessage *timeZones) const</argsstring>
        <name>GetAvailableTimeZones</name>
        <qualifiedname>BLocaleRoster::GetAvailableTimeZones</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>timeZones</declname>
        </param>
        <briefdescription>
<para>Fills in the passed in <emphasis>timeZones</emphasis> message with all time zone strings for the locale. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>NULL</computeroutput> <emphasis>timeZones</emphasis> message was passed in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred trying to retrieve the localized time zone strings.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="54" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a62c4502b121114bb5e96b588e071d712" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetAvailableTimeZonesForCountry</definition>
        <argsstring>(BMessage *message, const char *countryCode) const</argsstring>
        <name>GetAvailableTimeZonesForCountry</name>
        <qualifiedname>BLocaleRoster::GetAvailableTimeZonesForCountry</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
          <defname>timeZones</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>countryCode</declname>
        </param>
        <briefdescription>
<para>Fills in the passed in <emphasis>timeZones</emphasis> message with one or more time zone strings containing the time zones for the country specified by <emphasis>countryCode</emphasis> for the locale. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>NULL</computeroutput> <emphasis>timeZones</emphasis> message was passed in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred trying to retrieve the localized time zones most likely due to an invalid <emphasis>countryCode</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="58" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1acbb6ea261bd9c68fac2ea72e68944e5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetAvailableTimeZonesWithRegionInfo</definition>
        <argsstring>(BMessage *timeZonesWithRegonInfo) const</argsstring>
        <name>GetAvailableTimeZonesWithRegionInfo</name>
        <qualifiedname>BLocaleRoster::GetAvailableTimeZonesWithRegionInfo</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>timeZonesWithRegonInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="56" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a53aba1534d9d5433fb6edbf61de49db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBCatalog" kindref="compound">BCatalog</ref> *</type>
        <definition>BCatalog * BLocaleRoster::GetCatalog</definition>
        <argsstring>()</argsstring>
        <name>GetCatalog</name>
        <qualifiedname>BLocaleRoster::GetCatalog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="77" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a5d0da86bd0efc8f520bb0b5b94768c73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBLocale" kindref="compound">BLocale</ref> *</type>
        <definition>const BLocale * BLocaleRoster::GetDefaultLocale</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultLocale</name>
        <qualifiedname>BLocaleRoster::GetDefaultLocale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="81" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a7cb5f911107993a9c4816b52e9221572" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetDefaultTimeZone</definition>
        <argsstring>(BTimeZone *timezone) const</argsstring>
        <name>GetDefaultTimeZone</name>
        <qualifiedname>BLocaleRoster::GetDefaultTimeZone</qualifiedname>
        <param>
          <type><ref refid="classBTimeZone" kindref="compound">BTimeZone</ref> *</type>
          <declname>timezone</declname>
        </param>
        <briefdescription>
<para>Get the default timezone. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="44" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a683b5acbb28931d4ef5306c2085b08e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetFlagIconForCountry</definition>
        <argsstring>(BBitmap *flagIcon, const char *countryCode)</argsstring>
        <name>GetFlagIconForCountry</name>
        <qualifiedname>BLocaleRoster::GetFlagIconForCountry</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>flagIcon</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>countryCode</declname>
        </param>
        <briefdescription>
<para>Sets <emphasis>flagIcon</emphasis> to the flag for the passed in <emphasis>countryCode</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>NULL</computeroutput> or invalid <emphasis>countryCode</emphasis> was passed in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error locking the default RosterData. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag could not be found for the <emphasis>countryCode</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="62" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a7878ec917e8d8d9733b7a6ff06218122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetFlagIconForLanguage</definition>
        <argsstring>(BBitmap *flagIcon, const char *languageCode)</argsstring>
        <name>GetFlagIconForLanguage</name>
        <qualifiedname>BLocaleRoster::GetFlagIconForLanguage</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>flagIcon</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>languageCode</declname>
        </param>
        <briefdescription>
<para>Sets <emphasis>flagIcon</emphasis> to the flag for the passed in <emphasis>languageCode</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a flag could not be located for the passed in <emphasis>languageCode</emphasis> then <ref refid="classBLocaleRoster_1a7878ec917e8d8d9733b7a6ff06218122" kindref="member">GetFlagIconForLanguage()</ref> attempts to locate the default country&apos;s flag for the <emphasis>languageCode</emphasis> instead. The default country flag for a language is usually set to the country of the languages origin such as Germany for German or Spain for Spanish.</para>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went well. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>NULL</computeroutput> or invalid <emphasis>languageCode</emphasis> was passed in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error locking the default RosterData. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag could not be found for the default country&apos;s flag for the <emphasis>languageCode</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="64" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1aef01ac9c948bbf836464c7bf79195e2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetLanguage</definition>
        <argsstring>(const char *languageCode, BLanguage **_language) const</argsstring>
        <name>GetLanguage</name>
        <qualifiedname>BLocaleRoster::GetLanguage</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>languageCode</declname>
          <defname>languagecode</defname>
        </param>
        <param>
          <type>BLanguage **</type>
          <declname>_language</declname>
        </param>
        <briefdescription>
<para>Instantiate a language from its code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="46" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a2fd434b841e208a139510c14679588b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetLocalizedFileName</definition>
        <argsstring>(BString &amp;localizedFileName, const entry_ref &amp;ref, bool traverse=false)</argsstring>
        <name>GetLocalizedFileName</name>
        <qualifiedname>BLocaleRoster::GetLocalizedFileName</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>localizedFileName</declname>
        </param>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Looks up a localized filename from a catalog. </para>
        </briefdescription>
        <detaileddescription>
<para>Attribute format: &quot;signature:context:string&quot; (no colon in any of signature, context and string)</para>
<para>Lookup is done for the top preferred language only. Lookup fails if a comment is present in the catalog entry.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>localizedFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>A pre-allocated <ref refid="classBString" kindref="compound">BString</ref> object for the result of the lookup. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="structentry__ref" kindref="compound">entry_ref</ref> with an attribute holding data for catalog lookup. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>traverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines if symlinks should be traversed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>failure. Attribute not found, entry not found in catalog, etc.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="85" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a8c0de7c09e1be6c30590a69c61753bf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::GetPreferredLanguages</definition>
        <argsstring>(BMessage *message) const</argsstring>
        <name>GetPreferredLanguages</name>
        <qualifiedname>BLocaleRoster::GetPreferredLanguages</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Return the list of user preferred languages. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills in the given message with one or more language string fields. They constitute the ordered list of user-selected languages to use for string translation.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="49" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a967c86a687870d0fe59054dbfcce2453" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BLocaleRoster::IsFilesystemTranslationPreferred</definition>
        <argsstring>() const</argsstring>
        <name>IsFilesystemTranslationPreferred</name>
        <qualifiedname>BLocaleRoster::IsFilesystemTranslationPreferred</qualifiedname>
        <briefdescription>
<para>Returns whether or not filesystem translation is preferred. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_ERROR</computeroutput> if there was an error locking the default RosterData.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="83" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBLocaleRoster_1a127b816155049b4a96a653835a35da97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::Refresh</definition>
        <argsstring>()</argsstring>
        <name>Refresh</name>
        <qualifiedname>BLocaleRoster::Refresh</qualifiedname>
        <briefdescription>
<para>Refreshes the BLocalRoster. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="73" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBLocaleRoster_1a72133385bc675be3d92da85bf564049b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBLocaleRoster" kindref="compound">BLocaleRoster</ref> *</type>
        <definition>BLocaleRoster * BLocaleRoster::Default</definition>
        <argsstring>()</argsstring>
        <name>Default</name>
        <qualifiedname>BLocaleRoster::Default</qualifiedname>
        <briefdescription>
<para>Returns default BLocalRoster. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="42" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBLocaleRoster_1a1db4296b22fe68475894eea78a00c313" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BLocaleRoster::BLocaleRoster</definition>
        <argsstring>()</argsstring>
        <name>BLocaleRoster</name>
        <qualifiedname>BLocaleRoster::BLocaleRoster</qualifiedname>
        <briefdescription>
<para>Constructor. Does nothing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="97" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classBLocaleRoster_1a6da2438182c16954b678fa2f59a9a542" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBCatalog" kindref="compound">BCatalog</ref> *</type>
        <definition>BCatalog * BLocaleRoster::_GetCatalog</definition>
        <argsstring>(BCatalog *catalog, int32 *catalogInitStatus)</argsstring>
        <name>_GetCatalog</name>
        <qualifiedname>BLocaleRoster::_GetCatalog</qualifiedname>
        <param>
          <type><ref refid="classBCatalog" kindref="compound">BCatalog</ref> *</type>
          <declname>catalog</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>catalogInitStatus</declname>
        </param>
        <briefdescription>
<para>Get the current image catalog. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes and returns the catalog for the calling image (application, add-on, or shared library). Note that it doesn&apos;t allow to specify a fingerprint. The language will be selected from the user preferences.</para>
<para>This function is used by the Locale Kit macros.</para>
<para><simplesect kind="warning"><para>This function needs the calling image to be linked with liblocalestub.a</para>
</simplesect>
<simplesect kind="return"><para>The catalog, if it was loaded successfully.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>catalog</parametername>
</parameternamelist>
<parameterdescription>
<para>The catalog to load. The pointer location is used to identify the image for which to load the catalog. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catalogInitStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>the state of the catalog. This will be set to true on the first call for a given catalog, and if already true the function will do nothing on subsequent calls.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="103" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBLocaleRoster_1ab37fe0fbcb8301778dba5005a4e716b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BLocaleRoster::_PrepareCatalogEntry</definition>
        <argsstring>(const entry_ref &amp;ref, BString &amp;signature, BString &amp;context, BString &amp;string, bool traverse)</argsstring>
        <name>_PrepareCatalogEntry</name>
        <qualifiedname>BLocaleRoster::_PrepareCatalogEntry</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>signature</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>traverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="106" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main class for accessing the Locale Kit data. </para>
    </briefdescription>
    <detaileddescription>
<para>The Locale Roster is the central part of the locale kit. It is a global object (<computeroutput>be_locale_roster</computeroutput>) storing all the useful locale data. Other classes from the Locale Kit can be constructed on their own, but only the Locale Roster allows you to do so while taking account of the user&apos;s locale settings.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" line="37" column="1" bodyfile="/boot/home/src/haiku/headers/os/locale/LocaleRoster.h" bodystart="37" bodyend="110"/>
    <listofallmembers>
      <member refid="classBLocaleRoster_1a6da2438182c16954b678fa2f59a9a542" prot="private" virt="non-virtual"><scope>BLocaleRoster</scope><name>_GetCatalog</name></member>
      <member refid="classBLocaleRoster_1ab37fe0fbcb8301778dba5005a4e716b3" prot="private" virt="non-virtual"><scope>BLocaleRoster</scope><name>_PrepareCatalogEntry</name></member>
      <member refid="classBLocaleRoster_1a1db4296b22fe68475894eea78a00c313" prot="protected" virt="non-virtual"><scope>BLocaleRoster</scope><name>BLocaleRoster</name></member>
      <member refid="classBLocaleRoster_1a72133385bc675be3d92da85bf564049b" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>Default</name></member>
      <member refid="classBLocaleRoster_1a1b5974f8ba0906b956e781bee26f3799" prot="protected" virt="non-virtual"><scope>BLocaleRoster</scope><name>fData</name></member>
      <member refid="classBLocaleRoster_1a63549adde7995fec7acc00743aa8ba93" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetAvailableCatalogs</name></member>
      <member refid="classBLocaleRoster_1a6df1035b9449247552c4d1be2c4b74c7" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetAvailableCountries</name></member>
      <member refid="classBLocaleRoster_1ae5927ab7e48d8001233f853da7442bfe" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetAvailableLanguages</name></member>
      <member refid="classBLocaleRoster_1a89336fc6c6975ea380466ad983bbc540" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetAvailableTimeZones</name></member>
      <member refid="classBLocaleRoster_1a62c4502b121114bb5e96b588e071d712" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetAvailableTimeZonesForCountry</name></member>
      <member refid="classBLocaleRoster_1acbb6ea261bd9c68fac2ea72e68944e5d" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetAvailableTimeZonesWithRegionInfo</name></member>
      <member refid="classBLocaleRoster_1a53aba1534d9d5433fb6edbf61de49db4" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetCatalog</name></member>
      <member refid="classBLocaleRoster_1a5d0da86bd0efc8f520bb0b5b94768c73" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetDefaultLocale</name></member>
      <member refid="classBLocaleRoster_1a7cb5f911107993a9c4816b52e9221572" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetDefaultTimeZone</name></member>
      <member refid="classBLocaleRoster_1a683b5acbb28931d4ef5306c2085b08e4" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetFlagIconForCountry</name></member>
      <member refid="classBLocaleRoster_1a7878ec917e8d8d9733b7a6ff06218122" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetFlagIconForLanguage</name></member>
      <member refid="classBLocaleRoster_1aef01ac9c948bbf836464c7bf79195e2e" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetLanguage</name></member>
      <member refid="classBLocaleRoster_1a2fd434b841e208a139510c14679588b9" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetLocalizedFileName</name></member>
      <member refid="classBLocaleRoster_1a8c0de7c09e1be6c30590a69c61753bf1" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>GetPreferredLanguages</name></member>
      <member refid="classBLocaleRoster_1a967c86a687870d0fe59054dbfcce2453" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>IsFilesystemTranslationPreferred</name></member>
      <member refid="classBLocaleRoster_1a9101c9fe8699509a7e97bef936f9034a" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>kCatFingerprintAttr</name></member>
      <member refid="classBLocaleRoster_1ab5b40f71fca27b3bad6a0e0509d1181b" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>kCatLangAttr</name></member>
      <member refid="classBLocaleRoster_1a8bbdeb1b6a6d980880f39986a5111b05" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>kCatSigAttr</name></member>
      <member refid="classBLocaleRoster_1ac8ce4efd634e377187547eebdc9b3088" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>kEmbeddedCatAttr</name></member>
      <member refid="classBLocaleRoster_1a778e9399e01d004e2004a3628ba53102" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>kEmbeddedCatResId</name></member>
      <member refid="classBLocaleRoster_1a127b816155049b4a96a653835a35da97" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>Refresh</name></member>
      <member refid="classBLocaleRoster_1ad6672b698c844bac6a6b663a24a123c4" prot="public" virt="non-virtual"><scope>BLocaleRoster</scope><name>~BLocaleRoster</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
