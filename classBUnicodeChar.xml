<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBUnicodeChar" kind="class" language="C++" prot="public">
    <compoundname>BUnicodeChar</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBUnicodeChar_1a67bb2e55a6df3edfd7e8cbed5c0895f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BUnicodeChar::DigitValue</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>DigitValue</name>
        <qualifiedname>BUnicodeChar::DigitValue</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Gets the numeric value <emphasis>c</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The numeric version of the specified unicode character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="349" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a8abd82cfaa2a3f0bbc3bce51ca6c5a77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unicode_east_asian_width</type>
        <definition>static unicode_east_asian_width BUnicodeChar::EastAsianWidth</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>EastAsianWidth</name>
        <qualifiedname>BUnicodeChar::EastAsianWidth</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="350" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1afc8fda9ba1759ecae751d92cea4dac0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BUnicodeChar::FromUTF8</definition>
        <argsstring>(const char **in)</argsstring>
        <name>FromUTF8</name>
        <qualifiedname>BUnicodeChar::FromUTF8</qualifiedname>
        <param>
          <type>const char **</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Transform a UTF-8 string to an UTF-32 character. </para>
        </briefdescription>
        <detaileddescription>
<para>If the string contains multiple characters, only the fist one is used. This function updates the in pointer so that it points on the next character for the following call.</para>
<para><simplesect kind="return"><para>The UTF-32 encoded version of <emphasis>in</emphasis>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="353" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1ad370878d74ec0caf21b582b6b6fd8ab6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BUnicodeChar::FromUTF8</definition>
        <argsstring>(const char *in)</argsstring>
        <name>FromUTF8</name>
        <qualifiedname>BUnicodeChar::FromUTF8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="354" column="15" bodyfile="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" bodystart="365" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a4f2527179e7166f757d8a96daa3b8b77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsAlNum</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsAlNum</name>
        <qualifiedname>BUnicodeChar::IsAlNum</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is alphanumeric. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a alphabetic or numeric character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="330" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a5742a6696309783267a3402fac001961" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsAlpha</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsAlpha</name>
        <qualifiedname>BUnicodeChar::IsAlpha</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is alphabetic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is an alphabetic character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="329" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1aeb5bb45061d6aba81f79b824eea3f280" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsBase</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsBase</name>
        <qualifiedname>BUnicodeChar::IsBase</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> can be used with a diacritic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classBUnicodeChar_1aeb5bb45061d6aba81f79b824eea3f280" kindref="member">IsBase()</ref> does not determine if a unicode character is distinct.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a base form character that can be used with a diacritic.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="342" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1aaae54f38cc91cbb2227e48d86583f2b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsControl</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsControl</name>
        <qualifiedname>BUnicodeChar::IsControl</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is a control character. </para>
        </briefdescription>
        <detaileddescription>
<para>Example control characters are the non-printable ASCII characters from 0x0 to 0x1F.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a control character.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBUnicodeChar_1a1d938ac2279485c3a8a09c5ae7406275" kindref="member">IsPrintable()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="337" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1ae5250d53b709291a61a66279d0ccc061" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsDefined</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsDefined</name>
        <qualifiedname>BUnicodeChar::IsDefined</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is defined. </para>
        </briefdescription>
        <detaileddescription>
<para>In unicode some codes are not valid or not attributed yet. For these codes this method will return <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is defined.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="341" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1af839a05c7079c29dd5131c10e95dbc3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsDigit</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsDigit</name>
        <qualifiedname>BUnicodeChar::IsDigit</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is numeric. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a number character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="331" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1aebff7cb08394bcf1a7ed0fb7880d2ff7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsHexDigit</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsHexDigit</name>
        <qualifiedname>BUnicodeChar::IsHexDigit</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is a hexadecimal digit. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a hexadecimal number character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="332" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1aa6c837f19a90696fa20bf75f07a466a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsLower</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsLower</name>
        <qualifiedname>BUnicodeChar::IsLower</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is lowercase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a lowercase character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="334" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a1d938ac2279485c3a8a09c5ae7406275" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsPrintable</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsPrintable</name>
        <qualifiedname>BUnicodeChar::IsPrintable</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is printable. </para>
        </briefdescription>
        <detaileddescription>
<para>Printable characters are not control characters.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a printable character.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBUnicodeChar_1aaae54f38cc91cbb2227e48d86583f2b4" kindref="member">IsControl()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="339" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a3eae5f1aceb4bda319ad3228b6d4d7e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsPunctuation</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsPunctuation</name>
        <qualifiedname>BUnicodeChar::IsPunctuation</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is punctuation character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a punctuation character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="338" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a73440dcc192f995a423694f7150afad5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsSpace</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsSpace</name>
        <qualifiedname>BUnicodeChar::IsSpace</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is a space. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="classBUnicodeChar_1a10120c029b7157d97cfae72c9b254f64" kindref="member">IsWhitespace()</ref> this function will return <computeroutput>true</computeroutput> for non-breakable spaces. This method is useful for determining if the character will render as an empty space which can be stretched on-screen.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is some kind of a space character.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBUnicodeChar_1a10120c029b7157d97cfae72c9b254f64" kindref="member">IsWhitespace()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="335" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1aaa46b9e4e672588a077cda7d55acbd72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsTitle</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsTitle</name>
        <qualifiedname>BUnicodeChar::IsTitle</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is title case. </para>
        </briefdescription>
        <detaileddescription>
<para>Title case characters are a smaller version of normal uppercase letters.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a title case character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="340" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1adbbd94d47f0c5cd850aeca194ed8cca3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsUpper</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsUpper</name>
        <qualifiedname>BUnicodeChar::IsUpper</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is uppercase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is an uppercase character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="333" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a10120c029b7157d97cfae72c9b254f64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnicodeChar::IsWhitespace</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>IsWhitespace</name>
        <qualifiedname>BUnicodeChar::IsWhitespace</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Determine if <emphasis>c</emphasis> is whitespace. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is essentially the same as <ref refid="classBUnicodeChar_1a73440dcc192f995a423694f7150afad5" kindref="member">IsSpace()</ref>, but excludes all non-breakable spaces.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified unicode character is a whitespace character.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBUnicodeChar_1a73440dcc192f995a423694f7150afad5" kindref="member">IsSpace()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="336" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a565af2e2c1bea1f8268b92c98a8576fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BUnicodeChar::ToLower</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>ToLower</name>
        <qualifiedname>BUnicodeChar::ToLower</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Transforms <emphasis>c</emphasis> to lowercase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The lowercase version of the specified unicode character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="346" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1ae241f694ac02fbae4b88da234101a3e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BUnicodeChar::ToTitle</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>ToTitle</name>
        <qualifiedname>BUnicodeChar::ToTitle</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Transforms <emphasis>c</emphasis> to title case. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The title case version of the specified unicode character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="348" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a60941ccc1f91411200cce679d7ecb962" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BUnicodeChar::ToUpper</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>ToUpper</name>
        <qualifiedname>BUnicodeChar::ToUpper</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Transforms <emphasis>c</emphasis> to uppercase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The uppercase version of the specified unicode character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="347" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a357fcf22fa1cf39303ce104e0172435e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BUnicodeChar::ToUTF8</definition>
        <argsstring>(uint32 c, char **out)</argsstring>
        <name>ToUTF8</name>
        <qualifiedname>BUnicodeChar::ToUTF8</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Transform a character to UTF-8 encoding. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The UTF-8 encoding of the specified unicode character.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="352" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1adf54317eca46b1d2da67ed46a3c4b0ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
        <definition>static int8 BUnicodeChar::Type</definition>
        <argsstring>(uint32 c)</argsstring>
        <name>Type</name>
        <qualifiedname>BUnicodeChar::Type</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Gets the type of a character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A member of the <computeroutput>unicode_char_category</computeroutput> enum.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="344" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1af0ba5d552b7c76a46bcaa524907adff2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BUnicodeChar::UTF8StringLength</definition>
        <argsstring>(const char *string)</argsstring>
        <name>UTF8StringLength</name>
        <qualifiedname>BUnicodeChar::UTF8StringLength</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Counts the characters in the given <computeroutput>NUL</computeroutput> terminated string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of UTF-8 characters in the <computeroutput>NUL</computeroutput> terminated string.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBString_1ab7324c44bfcbd8c8b590b257eafc7886" kindref="member">BString::CountChars()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="356" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBUnicodeChar_1a2d04840a4ff3327bb341d3f1c366523f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BUnicodeChar::UTF8StringLength</definition>
        <argsstring>(const char *string, size_t maxLength)</argsstring>
        <name>UTF8StringLength</name>
        <qualifiedname>BUnicodeChar::UTF8StringLength</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
<para>Counts the characters in the given string up to <emphasis>maxLength</emphasis> characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>does not need to be <computeroutput>NUL</computeroutput> terminated if you specify a <emphasis>maxLength</emphasis> that is shorter than the maximum length of the string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum length of the string in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of UTF-8 characters in the <computeroutput>NUL</computeroutput> terminated string up to <emphasis>maxLength</emphasis> characters.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="357" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBUnicodeChar_1a525d4b1d8815250e702d3e419ad43166" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BUnicodeChar::BUnicodeChar</definition>
        <argsstring>()</argsstring>
        <name>BUnicodeChar</name>
        <qualifiedname>BUnicodeChar::BUnicodeChar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="360" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Management of all information about characters. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provide a set of tools for managing the whole set of characters defined by unicode. This include information about special sets of characters such as if the character is whitespace, or alphanumeric. It also provides the uppercase equivalent of a character and determines whether a character can be ornamented with accents.</para>
<para>This class consists entirely of static methods, so you do not have to instantiate it. You can call one of the methods passing in the character that you want to be examined.</para>
<para>Note all the function work with chars encoded in UTF-32. This is not the most usual way to handle characters, but it is the fastest. To convert an UTF-8 string to an UTF-32 character use the <ref refid="classBUnicodeChar_1afc8fda9ba1759ecae751d92cea4dac0a" kindref="member">FromUTF8()</ref> method.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" line="327" column="1" bodyfile="/boot/home/src/haiku/headers/os/locale/UnicodeChar.h" bodystart="327" bodyend="361"/>
    <listofallmembers>
      <member refid="classBUnicodeChar_1a525d4b1d8815250e702d3e419ad43166" prot="private" virt="non-virtual"><scope>BUnicodeChar</scope><name>BUnicodeChar</name></member>
      <member refid="classBUnicodeChar_1a67bb2e55a6df3edfd7e8cbed5c0895f4" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>DigitValue</name></member>
      <member refid="classBUnicodeChar_1a8abd82cfaa2a3f0bbc3bce51ca6c5a77" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>EastAsianWidth</name></member>
      <member refid="classBUnicodeChar_1afc8fda9ba1759ecae751d92cea4dac0a" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>FromUTF8</name></member>
      <member refid="classBUnicodeChar_1ad370878d74ec0caf21b582b6b6fd8ab6" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>FromUTF8</name></member>
      <member refid="classBUnicodeChar_1a4f2527179e7166f757d8a96daa3b8b77" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsAlNum</name></member>
      <member refid="classBUnicodeChar_1a5742a6696309783267a3402fac001961" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsAlpha</name></member>
      <member refid="classBUnicodeChar_1aeb5bb45061d6aba81f79b824eea3f280" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsBase</name></member>
      <member refid="classBUnicodeChar_1aaae54f38cc91cbb2227e48d86583f2b4" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsControl</name></member>
      <member refid="classBUnicodeChar_1ae5250d53b709291a61a66279d0ccc061" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsDefined</name></member>
      <member refid="classBUnicodeChar_1af839a05c7079c29dd5131c10e95dbc3e" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsDigit</name></member>
      <member refid="classBUnicodeChar_1aebff7cb08394bcf1a7ed0fb7880d2ff7" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsHexDigit</name></member>
      <member refid="classBUnicodeChar_1aa6c837f19a90696fa20bf75f07a466a4" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsLower</name></member>
      <member refid="classBUnicodeChar_1a1d938ac2279485c3a8a09c5ae7406275" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsPrintable</name></member>
      <member refid="classBUnicodeChar_1a3eae5f1aceb4bda319ad3228b6d4d7e1" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsPunctuation</name></member>
      <member refid="classBUnicodeChar_1a73440dcc192f995a423694f7150afad5" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsSpace</name></member>
      <member refid="classBUnicodeChar_1aaa46b9e4e672588a077cda7d55acbd72" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsTitle</name></member>
      <member refid="classBUnicodeChar_1adbbd94d47f0c5cd850aeca194ed8cca3" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsUpper</name></member>
      <member refid="classBUnicodeChar_1a10120c029b7157d97cfae72c9b254f64" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>IsWhitespace</name></member>
      <member refid="classBUnicodeChar_1a565af2e2c1bea1f8268b92c98a8576fa" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>ToLower</name></member>
      <member refid="classBUnicodeChar_1ae241f694ac02fbae4b88da234101a3e7" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>ToTitle</name></member>
      <member refid="classBUnicodeChar_1a60941ccc1f91411200cce679d7ecb962" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>ToUpper</name></member>
      <member refid="classBUnicodeChar_1a357fcf22fa1cf39303ce104e0172435e" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>ToUTF8</name></member>
      <member refid="classBUnicodeChar_1adf54317eca46b1d2da67ed46a3c4b0ca" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>Type</name></member>
      <member refid="classBUnicodeChar_1af0ba5d552b7c76a46bcaa524907adff2" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>UTF8StringLength</name></member>
      <member refid="classBUnicodeChar_1a2d04840a4ff3327bb341d3f1c366523f" prot="public" virt="non-virtual"><scope>BUnicodeChar</scope><name>UTF8StringLength</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
