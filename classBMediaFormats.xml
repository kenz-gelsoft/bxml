<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMediaFormats" kind="class" language="C++" prot="public">
    <compoundname>BMediaFormats</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3" prot="public" static="no" strong="no">
        <type></type>
        <name>make_format_flags</name>
        <qualifiedname>BMediaFormats::make_format_flags</qualifiedname>
        <enumvalue id="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3aa0eb95a678f8589c5fcfebe349284791" prot="public">
          <name>B_EXCLUSIVE</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3a7d4cc551e3051c4a43226f79664aa2c3" prot="public">
          <name>B_NO_MERGE</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3a9f478081c0093a4309dcb583e6d2fb6f" prot="public">
          <name>B_SET_DEFAULT</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="212" column="1" bodyfile="/boot/home/src/haiku/headers/os/media/MediaFormats.h" bodystart="212" bodyend="224"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMediaFormats_1a15f562cbd34218649d35fe34e4e5abe8" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMediaFormats::_reserved[30]</definition>
        <argsstring>[30]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMediaFormats::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="266" column="7" bodyfile="/boot/home/src/haiku/headers/os/media/MediaFormats.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMediaFormats_1a2ed743a26b5e07b14e9a2f4d1098fe26" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMediaFormats::fIteratorIndex</definition>
        <argsstring></argsstring>
        <name>fIteratorIndex</name>
        <qualifiedname>BMediaFormats::fIteratorIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="264" column="6" bodyfile="/boot/home/src/haiku/headers/os/media/MediaFormats.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMediaFormats_1a388c95a58299df8b6c641591b71fabac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMediaFormats::BMediaFormats</definition>
        <argsstring>()</argsstring>
        <name>BMediaFormats</name>
        <qualifiedname>BMediaFormats::BMediaFormats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a21273c5fec560f1dd5590f5920b81ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BMediaFormats::~BMediaFormats</definition>
        <argsstring>()</argsstring>
        <name>~BMediaFormats</name>
        <qualifiedname>BMediaFormats::~BMediaFormats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="206" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1ab177ca025ecccd2a943d8b58f1948de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaFormats::GetCodeFor</definition>
        <argsstring>(const media_format &amp;format, media_format_family family, media_format_description *_outDescription)</argsstring>
        <name>GetCodeFor</name>
        <qualifiedname>BMediaFormats::GetCodeFor</qualifiedname>
        <param>
          <type>const media_format &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>media_format_family</type>
          <declname>family</declname>
        </param>
        <param>
          <type>media_format_description *</type>
          <declname>_outDescription</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="234" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a5226d0ce3a790f2fa35d00b5fa390bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaFormats::GetFormatFor</definition>
        <argsstring>(const media_format_description &amp;description, media_format *_outFormat)</argsstring>
        <name>GetFormatFor</name>
        <qualifiedname>BMediaFormats::GetFormatFor</qualifiedname>
        <param>
          <type>const media_format_description &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_outFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="231" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a756fc5b765636a5e699d31665f92d5ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaFormats::GetNextFormat</definition>
        <argsstring>(media_format *_outFormat, media_format_description *_outDescription)</argsstring>
        <name>GetNextFormat</name>
        <qualifiedname>BMediaFormats::GetNextFormat</qualifiedname>
        <param>
          <type>media_format *</type>
          <declname>_outFormat</declname>
        </param>
        <param>
          <type>media_format_description *</type>
          <declname>_outDescription</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="239" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a6fff6ac742b005ced2b874ce88b77c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaFormats::InitCheck</definition>
        <argsstring>()</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BMediaFormats::InitCheck</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="208" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1aea9f6eda1e1e1b1e5c9b8789a62ef0cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMediaFormats::Lock</definition>
        <argsstring>()</argsstring>
        <name>Lock</name>
        <qualifiedname>BMediaFormats::Lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="244" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a56461a648fb00ec126fc7b41c1e0a67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaFormats::MakeFormatFor</definition>
        <argsstring>(const media_format_description &amp;description, const media_format &amp;inFormat, media_format *_outFormat)</argsstring>
        <name>MakeFormatFor</name>
        <qualifiedname>BMediaFormats::MakeFormatFor</qualifiedname>
        <param>
          <type>const media_format_description &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type>const media_format &amp;</type>
          <declname>inFormat</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_outFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="259" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a8a684d1bb4227a4aff75f9fa78d5ab0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaFormats::MakeFormatFor</definition>
        <argsstring>(const media_format_description *descriptions, int32 descriptionCount, media_format *_inOutFormat, uint32 flags=0, void *_reserved=0)</argsstring>
        <name>MakeFormatFor</name>
        <qualifiedname>BMediaFormats::MakeFormatFor</qualifiedname>
        <param>
          <type>const media_format_description *</type>
          <declname>descriptions</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>descriptionCount</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_inOutFormat</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>_reserved</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="226" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a2b6f5caf4c0bec52245ff23bb06828ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaFormats::RewindFormats</definition>
        <argsstring>()</argsstring>
        <name>RewindFormats</name>
        <qualifiedname>BMediaFormats::RewindFormats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="238" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a6e5eaa8078fd5b86b2f921c484e234e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMediaFormats::Unlock</definition>
        <argsstring>()</argsstring>
        <name>Unlock</name>
        <qualifiedname>BMediaFormats::Unlock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="245" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBMediaFormats_1add54660c5ad084f847526ed52ba0d84d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BMediaFormats::GetAVIFormatFor</definition>
        <argsstring>(uint32 fourcc, media_format *_outFormat, media_type type=B_MEDIA_UNKNOWN_TYPE)</argsstring>
        <name>GetAVIFormatFor</name>
        <qualifiedname>BMediaFormats::GetAVIFormatFor</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>fourcc</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_outFormat</declname>
        </param>
        <param>
          <type>media_type</type>
          <declname>type</declname>
          <defval>B_MEDIA_UNKNOWN_TYPE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="251" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1a2b22fc48ec01be22340ced1822b98eac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BMediaFormats::GetBeOSFormatFor</definition>
        <argsstring>(uint32 fourcc, media_format *_outFormat, media_type type=B_MEDIA_UNKNOWN_TYPE)</argsstring>
        <name>GetBeOSFormatFor</name>
        <qualifiedname>BMediaFormats::GetBeOSFormatFor</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>fourcc</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_outFormat</declname>
        </param>
        <param>
          <type>media_type</type>
          <declname>type</declname>
          <defval>B_MEDIA_UNKNOWN_TYPE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="248" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaFormats_1ae54eda19635fad2b74d7f30107e19a71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BMediaFormats::GetQuicktimeFormatFor</definition>
        <argsstring>(uint32 vendor, uint32 fourcc, media_format *_outFormat, media_type type=B_MEDIA_UNKNOWN_TYPE)</argsstring>
        <name>GetQuicktimeFormatFor</name>
        <qualifiedname>BMediaFormats::GetQuicktimeFormatFor</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>vendor</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>fourcc</declname>
        </param>
        <param>
          <type>media_format *</type>
          <declname>_outFormat</declname>
        </param>
        <param>
          <type>media_type</type>
          <declname>type</declname>
          <defval>B_MEDIA_UNKNOWN_TYPE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="254" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/media/MediaFormats.h" line="203" column="1" bodyfile="/boot/home/src/haiku/headers/os/media/MediaFormats.h" bodystart="203" bodyend="267"/>
    <listofallmembers>
      <member refid="classBMediaFormats_1a15f562cbd34218649d35fe34e4e5abe8" prot="private" virt="non-virtual"><scope>BMediaFormats</scope><name>_reserved</name></member>
      <member refid="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3aa0eb95a678f8589c5fcfebe349284791" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>B_EXCLUSIVE</name></member>
      <member refid="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3a7d4cc551e3051c4a43226f79664aa2c3" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>B_NO_MERGE</name></member>
      <member refid="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3a9f478081c0093a4309dcb583e6d2fb6f" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>B_SET_DEFAULT</name></member>
      <member refid="classBMediaFormats_1a388c95a58299df8b6c641591b71fabac" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>BMediaFormats</name></member>
      <member refid="classBMediaFormats_1a2ed743a26b5e07b14e9a2f4d1098fe26" prot="private" virt="non-virtual"><scope>BMediaFormats</scope><name>fIteratorIndex</name></member>
      <member refid="classBMediaFormats_1add54660c5ad084f847526ed52ba0d84d" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>GetAVIFormatFor</name></member>
      <member refid="classBMediaFormats_1a2b22fc48ec01be22340ced1822b98eac" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>GetBeOSFormatFor</name></member>
      <member refid="classBMediaFormats_1ab177ca025ecccd2a943d8b58f1948de2" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>GetCodeFor</name></member>
      <member refid="classBMediaFormats_1a5226d0ce3a790f2fa35d00b5fa390bef" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>GetFormatFor</name></member>
      <member refid="classBMediaFormats_1a756fc5b765636a5e699d31665f92d5ca" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>GetNextFormat</name></member>
      <member refid="classBMediaFormats_1ae54eda19635fad2b74d7f30107e19a71" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>GetQuicktimeFormatFor</name></member>
      <member refid="classBMediaFormats_1a6fff6ac742b005ced2b874ce88b77c1f" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>InitCheck</name></member>
      <member refid="classBMediaFormats_1aea9f6eda1e1e1b1e5c9b8789a62ef0cc" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>Lock</name></member>
      <member refid="classBMediaFormats_1aa348d98cb98d66f81691c561ac661ac3" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>make_format_flags</name></member>
      <member refid="classBMediaFormats_1a8a684d1bb4227a4aff75f9fa78d5ab0f" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>MakeFormatFor</name></member>
      <member refid="classBMediaFormats_1a56461a648fb00ec126fc7b41c1e0a67f" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>MakeFormatFor</name></member>
      <member refid="classBMediaFormats_1a2b6f5caf4c0bec52245ff23bb06828ad" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>RewindFormats</name></member>
      <member refid="classBMediaFormats_1a6e5eaa8078fd5b86b2f921c484e234e5" prot="public" virt="non-virtual"><scope>BMediaFormats</scope><name>Unlock</name></member>
      <member refid="classBMediaFormats_1a21273c5fec560f1dd5590f5920b81ebc" prot="public" virt="virtual"><scope>BMediaFormats</scope><name>~BMediaFormats</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
