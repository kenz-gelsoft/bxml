<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="locale_intro" kind="page">
    <compoundname>locale_intro</compoundname>
    <title>Introduction to the Locale Kit</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The Locale Kit provides a set of tools for internationalizing, localizing and translating your software. This includes not only replacing string with their translations at runtime, but also more complex tasks such as formatting numbers, dates, and times in a way that match the locale preferences of the user.</para>
<para>The main way to access locale data is through <ref refid="classBLocaleRoster_1a72133385bc675be3d92da85bf564049b" kindref="member">BLocaleRoster::Default()</ref>. This returns a global instance of the <ref refid="classBLocaleRoster" kindref="compound">BLocaleRoster</ref> class, storing the data for localizing an application according to the user&apos;s preferred settings. Most of the time, you should be able to use the default <ref refid="classBLocale" kindref="compound">BLocale</ref> object and its convenience methods to get things formatted according to the user preferences. However, you can also use the various formatter classes directly when you need a more advanced formatting. For example, you may need to format a date with a fixed format in english for including in an e-mail header, as it is the only format accepted there.</para>
<para>Note that creating a new format is a costly operation. The idea is that you create your format object once and reuse it accross your application to format all the stuff that needs it. </para>
    </detaileddescription>
    <location file="locale/localeintro.dox"/>
  </compounddef>
</doxygen>
