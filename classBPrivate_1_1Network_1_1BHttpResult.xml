<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BHttpResult" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BHttpResult</compoundname>
      <sectiondef kind="user-defined">
      <header>Constructors, assignment operators and destructor</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1ae7511645ad5e24dd69a857a95305d0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpResult::BHttpResult</definition>
        <argsstring>(const BHttpResult &amp;other)=delete</argsstring>
        <name>BHttpResult</name>
        <qualifiedname>BPrivate::Network::BHttpResult::BHttpResult</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpResult" kindref="compound">BHttpResult</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor is disabled. </para>
        </briefdescription>
        <detaileddescription>
<para>These objects cannot be copied.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1abd0f5b0598998a80adb51a8b1a75699a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpResult::BHttpResult</definition>
        <argsstring>(BHttpResult &amp;&amp;other) noexcept</argsstring>
        <name>BHttpResult</name>
        <qualifiedname>BPrivate::Network::BHttpResult::BHttpResult</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpResult" kindref="compound">BHttpResult</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to move from. The <emphasis>other</emphasis> object will be in an invalid state and will always throw exceptions when it is used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a872c3098ebe80c9e8f9f14bae954d840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpResult::~BHttpResult</definition>
        <argsstring>()</argsstring>
        <name>~BHttpResult</name>
        <qualifiedname>BPrivate::Network::BHttpResult::~BHttpResult</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a86e358e0586bab389c5bf1558a508b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpResult" kindref="compound">BHttpResult</ref> &amp;</type>
        <definition>BHttpResult &amp; BPrivate::Network::BHttpResult::operator=</definition>
        <argsstring>(const BHttpResult &amp;other)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpResult::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpResult" kindref="compound">BHttpResult</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment is disabled. </para>
        </briefdescription>
        <detaileddescription>
<para>These objects cannot be copied.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="114" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1ab7e4087ac2ff36f9d805e10bb1da51fd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpResult" kindref="compound">BHttpResult</ref> &amp;</type>
        <definition>BHttpResult &amp; BPrivate::Network::BHttpResult::operator=</definition>
        <argsstring>(BHttpResult &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpResult::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpResult" kindref="compound">BHttpResult</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to move from. The <emphasis>other</emphasis> object will be in an invalid state and will always throw exceptions when it is used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="115" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Blocking Data Access</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a67e061b8e1c60b6b195c8a24f728c392" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structBPrivate_1_1Network_1_1BHttpStatus" kindref="compound">BHttpStatus</ref> &amp;</type>
        <definition>const BHttpStatus &amp; BPrivate::Network::BHttpResult::Status</definition>
        <argsstring>() const</argsstring>
        <name>Status</name>
        <qualifiedname>BPrivate::Network::BHttpResult::Status</qualifiedname>
        <briefdescription>
<para>Retrieve the status line of the HTTP response. </para>
        </briefdescription>
        <detaileddescription>
<para>If the status line is not yet available, then this method call will block until it is. You can use the <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1ae31cede2d4456b59a826d34960a6c536" kindref="member">HasStatus()</ref> method to do a non-blocking check if the status is available.</para>
<para><simplesect kind="return"><para>A const reference to the <ref refid="structBPrivate_1_1Network_1_1BHttpStatus" kindref="compound">BHttpStatus</ref> object that describes the status of the response.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError" kindref="compound">BNetworkRequestError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when there was an error that prevented completely retrieving and parsing the HTTP response.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="118" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a0193d68aed1470532a62d63476477972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> &amp;</type>
        <definition>const BHttpFields &amp; BPrivate::Network::BHttpResult::Fields</definition>
        <argsstring>() const</argsstring>
        <name>Fields</name>
        <qualifiedname>BPrivate::Network::BHttpResult::Fields</qualifiedname>
        <briefdescription>
<para>Retrieve the header fields of the HTTP response. </para>
        </briefdescription>
        <detaileddescription>
<para>If the header fields are not yet available, then this method call will block until it is. You can use the <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1ab5714b0675051500751ed2edad4445d6" kindref="member">HasFields()</ref> method to do a non-blocking check if the fields are available.</para>
<para><simplesect kind="return"><para>A const reference to the <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> object that describes the header fields of the response.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError" kindref="compound">BNetworkRequestError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when there was an error that prevented completely retrieving and parsing the HTTP response.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="119" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1adeef8669a4d6f0fcbbbc2766072a8519" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBPrivate_1_1Network_1_1BHttpBody" kindref="compound">BHttpBody</ref> &amp;</type>
        <definition>BHttpBody &amp; BPrivate::Network::BHttpResult::Body</definition>
        <argsstring>() const</argsstring>
        <name>Body</name>
        <qualifiedname>BPrivate::Network::BHttpResult::Body</qualifiedname>
        <briefdescription>
<para>Retrieve the body of the HTTP response. </para>
        </briefdescription>
        <detaileddescription>
<para>If the body is not yet available, then this method call will block until it is. You can use the <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1a7a12921bb7c5f99de05e7d3819fcd05a" kindref="member">HasBody()</ref> method to do a non-blocking check if the status is available.</para>
<para>The lifetime of the body is tied to the lifetime of this response result object. If you want to keep the body beyond that time, you can copy or move the data from the <ref refid="structBPrivate_1_1Network_1_1BHttpBody" kindref="compound">BHttpBody</ref> object.</para>
<para><simplesect kind="return"><para>A reference to the <ref refid="structBPrivate_1_1Network_1_1BHttpBody" kindref="compound">BHttpBody</ref> object that contains the body.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError" kindref="compound">BNetworkRequestError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when there was an error that prevented completely retrieving and parsing the HTTP response.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="120" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Non-blocking status functions</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1ae31cede2d4456b59a826d34960a6c536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpResult::HasStatus</definition>
        <argsstring>() const</argsstring>
        <name>HasStatus</name>
        <qualifiedname>BPrivate::Network::BHttpResult::HasStatus</qualifiedname>
        <briefdescription>
<para>Check if the status is available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The status line of the response is available using the <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1a67e061b8e1c60b6b195c8a24f728c392" kindref="member">Status()</ref> method. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The line is not yet available. Any call to <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1a67e061b8e1c60b6b195c8a24f728c392" kindref="member">Status()</ref> will block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="123" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1ab5714b0675051500751ed2edad4445d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpResult::HasFields</definition>
        <argsstring>() const</argsstring>
        <name>HasFields</name>
        <qualifiedname>BPrivate::Network::BHttpResult::HasFields</qualifiedname>
        <briefdescription>
<para>Check if the header fields are available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The header fields of the response is available using the <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1a0193d68aed1470532a62d63476477972" kindref="member">Fields()</ref> method. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>They are not yet available. Any call to <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1a0193d68aed1470532a62d63476477972" kindref="member">Fields()</ref> will block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="124" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a7a12921bb7c5f99de05e7d3819fcd05a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpResult::HasBody</definition>
        <argsstring>() const</argsstring>
        <name>HasBody</name>
        <qualifiedname>BPrivate::Network::BHttpResult::HasBody</qualifiedname>
        <briefdescription>
<para>Check if the body is available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The body of the response is available using the <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1adeef8669a4d6f0fcbbbc2766072a8519" kindref="member">Body()</ref> method. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The body is not yet available. Any call to <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1adeef8669a4d6f0fcbbbc2766072a8519" kindref="member">Body()</ref> will block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="125" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a258156ef5ffab1367eb616b2438c470d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpResult::IsCompleted</definition>
        <argsstring>() const</argsstring>
        <name>IsCompleted</name>
        <qualifiedname>BPrivate::Network::BHttpResult::IsCompleted</qualifiedname>
        <briefdescription>
<para>Check if the request is completed. </para>
        </briefdescription>
        <detaileddescription>
<para>A request is completed when the status, headers and body have been received, or an error was raised while receiving the data.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="126" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a2136f32fa9d3efdd78ff6cc40e8c5821" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BPrivate::Network::BHttpResult::Identity</definition>
        <argsstring>() const</argsstring>
        <name>Identity</name>
        <qualifiedname>BPrivate::Network::BHttpResult::Identity</qualifiedname>
        <briefdescription>
<para>Unique identifier for the response. </para>
        </briefdescription>
        <detaileddescription>
<para>The identifier can be used to cancel requests in a <ref refid="classBPrivate_1_1Network_1_1BHttpSession" kindref="compound">BHttpSession</ref>. It can also be uses to check incoming asynchronous event messages against the response.</para>
<para><simplesect kind="return"><para>A unique identifier that associates this response with an active or completed request.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>BRuntimeException</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the object has been moved from and is thus no longer valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="129" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBPrivate_1_1Network_1_1BHttpResult_1a67e2f931bcc4e7fbb93da82b73735316" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BHttpSession</definition>
        <argsstring></argsstring>
        <name>BHttpSession</name>
        <qualifiedname>BPrivate::Network::BHttpResult::BHttpSession</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpSession" kindref="compound">BHttpSession</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="132" column="14" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpResult_1a8c7da778889591097fef08dfadf3cd10" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; HttpResultPrivate &gt;</type>
        <definition>std::shared_ptr&lt;HttpResultPrivate&gt; BPrivate::Network::BHttpResult::fData</definition>
        <argsstring></argsstring>
        <name>fData</name>
        <qualifiedname>BPrivate::Network::BHttpResult::fData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="134" column="17" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpResult_1a4ab6a41a8137844b9898866c2faf9dd7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpResult::BHttpResult</definition>
        <argsstring>(std::shared_ptr&lt; HttpResultPrivate &gt; data)</argsstring>
        <name>BHttpResult</name>
        <qualifiedname>BPrivate::Network::BHttpResult::BHttpResult</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; HttpResultPrivate &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="133" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Unique object to wait for and access a HTTP response data. </para>
    </briefdescription>
    <detaileddescription>
<para>Once you have scheduled a HTTP request in a HTTP session, you will get an object of this type as a return value. This object allows you to track the progress of receiving the response, and to inspect the status, the headers and the data as the response is received from the server.</para>
<para>The object is a future type, meaning that eventually it will contain the data or an error. The <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1a67e061b8e1c60b6b195c8a24f728c392" kindref="member">Status()</ref>, <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1a0193d68aed1470532a62d63476477972" kindref="member">Fields()</ref> and <ref refid="classBPrivate_1_1Network_1_1BHttpResult_1adeef8669a4d6f0fcbbbc2766072a8519" kindref="member">Body()</ref> methods will yield the respective data. If it is not yet received, they will block until it is available. You can also use the non-blocking methods to check if data is available yet.</para>
<para>The result can either be a partial or completed HTTP Response, or an error. The partial aspect is represented by the fact that the status line, the fields and the body are loaded progressively and can be accessed as soon as they have been received. The meaning of a HTTP response is defined by the HTTP standards. For example, a GET request can return a response with a 200 status code, a set of headers and a body. But it can also return a 404 response, indicating that the resource was not found at the location. It is important to note that both responses are valid HTTP responses within the context of this API. This means that you can still use the access methods of this class to access data from the 404 response without raising an exception.</para>
<para>When there are errors during the request that lead to the situation where there is no valid response according to the HTTP specification, then this object goes into an error state. This means that the access methods of this object will throw an exception of the <ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError" kindref="compound">BNetworkRequestError</ref> type.</para>
<para>A special property of this object is that it is unique. This means it cannot be copied, only moved. Objects that have moved from, are in an invalid state, and will always raise a <ref refid="classBPrivate_1_1Network_1_1BRuntimeError" kindref="compound">BRuntimeError</ref> exception when they are used.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" line="105" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpResult.h" bodystart="106" bodyend="135"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1ae7511645ad5e24dd69a857a95305d0a1" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>BHttpResult</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1abd0f5b0598998a80adb51a8b1a75699a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>BHttpResult</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a4ab6a41a8137844b9898866c2faf9dd7" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>BHttpResult</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1adeef8669a4d6f0fcbbbc2766072a8519" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>Body</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a8c7da778889591097fef08dfadf3cd10" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>fData</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a0193d68aed1470532a62d63476477972" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>Fields</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a7a12921bb7c5f99de05e7d3819fcd05a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>HasBody</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1ab5714b0675051500751ed2edad4445d6" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>HasFields</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1ae31cede2d4456b59a826d34960a6c536" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>HasStatus</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a2136f32fa9d3efdd78ff6cc40e8c5821" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>Identity</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a258156ef5ffab1367eb616b2438c470d" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>IsCompleted</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a86e358e0586bab389c5bf1558a508b68" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1ab7e4087ac2ff36f9d805e10bb1da51fd" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a67e061b8e1c60b6b195c8a24f728c392" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>Status</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpResult_1a872c3098ebe80c9e8f9f14bae954d840" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpResult</scope><name>~BHttpResult</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
