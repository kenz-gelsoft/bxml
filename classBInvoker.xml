<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBInvoker" kind="class" language="C++" prot="public">
    <compoundname>BInvoker</compoundname>
    <derivedcompoundref refid="classBControl" prot="public" virt="non-virtual">BControl</derivedcompoundref>
    <derivedcompoundref refid="classBListView" prot="public" virt="non-virtual">BListView</derivedcompoundref>
    <derivedcompoundref refid="classBMenuItem" prot="public" virt="non-virtual">BMenuItem</derivedcompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBInvoker_1a2b11ded4c89f756da5b6073640201100" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BInvoker::_reserved[1]</definition>
        <argsstring>[1]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BInvoker::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="69" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/Invoker.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBInvoker_1a1340f335e15484e840ed1d255670c737" prot="private" static="no" mutable="no">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>BMessage* BInvoker::fMessage</definition>
        <argsstring></argsstring>
        <name>fMessage</name>
        <qualifiedname>BInvoker::fMessage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="64" column="9" bodyfile="/boot/home/src/haiku/headers/os/app/Invoker.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBInvoker_1ae888f3f427aa410ee0a431400bdd070d" prot="private" static="no" mutable="no">
        <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
        <definition>BMessenger BInvoker::fMessenger</definition>
        <argsstring></argsstring>
        <name>fMessenger</name>
        <qualifiedname>BInvoker::fMessenger</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="65" column="11" bodyfile="/boot/home/src/haiku/headers/os/app/Invoker.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBInvoker_1a77e3bc2ed03a44c2c2a0dd19a5f59f12" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BInvoker::fNotifyKind</definition>
        <argsstring></argsstring>
        <name>fNotifyKind</name>
        <qualifiedname>BInvoker::fNotifyKind</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="68" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/Invoker.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBInvoker_1a29d25a504c8e91a7420b323079059b35" prot="private" static="no" mutable="no">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>BHandler* BInvoker::fReplyTo</definition>
        <argsstring></argsstring>
        <name>fReplyTo</name>
        <qualifiedname>BInvoker::fReplyTo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="66" column="9" bodyfile="/boot/home/src/haiku/headers/os/app/Invoker.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBInvoker_1a84506205fa48a2870ae7111c747b55d7" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BInvoker::fTimeout</definition>
        <argsstring></argsstring>
        <name>fTimeout</name>
        <qualifiedname>BInvoker::fTimeout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="67" column="10" bodyfile="/boot/home/src/haiku/headers/os/app/Invoker.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBInvoker_1ad03149db91cd6460f12adb72780a7080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BInvoker::BInvoker</definition>
        <argsstring>()</argsstring>
        <name>BInvoker</name>
        <qualifiedname>BInvoker::BInvoker</qualifiedname>
        <briefdescription>
<para>Initializes a <ref refid="classBInvoker" kindref="compound">BInvoker</ref> without a message or target. </para>
        </briefdescription>
        <detaileddescription>
<para>You must call <ref refid="classBInvoker_1ac857ceb882d95a5826447dc12dd06c74" kindref="member">SetTarget()</ref> to set the invoker&apos;s target before calling <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> for the message to be sent.</para>
<para>You may call <ref refid="classBInvoker_1a42fae8f984af3765c1a6af404dc36816" kindref="member">SetMessage()</ref> to set the message to send when calling <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref>, alternatively you may pass a <ref refid="classBMessage" kindref="compound">BMessage</ref> to <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> each time you call it.</para>
<para><simplesect kind="see"><para><ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBInvoker_1a42fae8f984af3765c1a6af404dc36816" kindref="member">SetMessage()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBInvoker_1ac857ceb882d95a5826447dc12dd06c74" kindref="member">SetTarget()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1adaf9b3df1b4a318e10df04a5eb9f59ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BInvoker::BInvoker</definition>
        <argsstring>(BMessage *message, BMessenger target)</argsstring>
        <name>BInvoker</name>
        <qualifiedname>BInvoker::BInvoker</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>target</declname>
          <defname>messenger</defname>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="classBInvoker" kindref="compound">BInvoker</ref> with <emphasis>message</emphasis> and sets the target <emphasis>messenger</emphasis> where the message is sent when <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> is called. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="classBMessenger" kindref="compound">BMessenger</ref> can target either local or remote objects.</para>
<para><simplesect kind="see"><para><ref refid="classBInvoker_1a42fae8f984af3765c1a6af404dc36816" kindref="member">SetMessage()</ref> for details.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a6405334f1589c7a9fc3604ff8a4c8c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BInvoker::BInvoker</definition>
        <argsstring>(BMessage *message, const BHandler *handler, const BLooper *looper=NULL)</argsstring>
        <name>BInvoker</name>
        <qualifiedname>BInvoker::BInvoker</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const <ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const <ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
          <declname>looper</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="classBInvoker" kindref="compound">BInvoker</ref> with <emphasis>message</emphasis> and sets the target to either a local <emphasis>handler</emphasis> or as the preferred handler of a local <emphasis>looper</emphasis> where the message is sent when <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> is called. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It is not necessary to specify both the <emphasis>handler</emphasis> and the <emphasis>looper</emphasis>, the unused parameter should be passed in as <computeroutput>NULL</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBInvoker_1ac857ceb882d95a5826447dc12dd06c74" kindref="member">SetTarget(const BHandler*, const BLooper*)</ref> for details.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a68714c3b78a2cf2931daf54f5dc94dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BInvoker::~BInvoker</definition>
        <argsstring>()</argsstring>
        <name>~BInvoker</name>
        <qualifiedname>BInvoker::~BInvoker</qualifiedname>
        <briefdescription>
<para>Destructor method, deletes the <ref refid="classBMessage" kindref="compound">BMessage</ref> object if set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="28" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a6eb323ab957a5ee99e8db2b2fb0e9800" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BInvoker::Command</definition>
        <argsstring>() const</argsstring>
        <name>Command</name>
        <qualifiedname>BInvoker::Command</qualifiedname>
        <briefdescription>
<para>Returns the message&apos;s <computeroutput>what</computeroutput> data member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a message has not been assigned to the invoker this method returns <computeroutput>0</computeroutput> instead.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="32" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a710e78abc03eb29e9e25d11d34c874cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>BHandler * BInvoker::HandlerForReply</definition>
        <argsstring>() const</argsstring>
        <name>HandlerForReply</name>
        <qualifiedname>BInvoker::HandlerForReply</qualifiedname>
        <briefdescription>
<para>Returns the previously set reply handler or <computeroutput>NULL</computeroutput> if not set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BInvoker::Invoke</definition>
        <argsstring>(BMessage *message=NULL)</argsstring>
        <name>Invoke</name>
        <qualifiedname>BInvoker::Invoke</qualifiedname>
        <reimplementedby refid="classBButton_1ad9942f380f9e8337147f307972e02a9b">Invoke</reimplementedby>
        <reimplementedby refid="classBChannelControl_1a29dcbf2de885c423dc2981c95b225691">Invoke</reimplementedby>
        <reimplementedby refid="classBCheckBox_1a90978d140f092824dc9aeff535bd8638">Invoke</reimplementedby>
        <reimplementedby refid="classBColorControl_1a40cd8db37322ffb2770896ded8ec1600">Invoke</reimplementedby>
        <reimplementedby refid="classBControl_1afa04e938d3c42b1de43baa48edb8fd3e">Invoke</reimplementedby>
        <reimplementedby refid="classBListView_1a88701bff61aeb58857ca33a5a8920e40">Invoke</reimplementedby>
        <reimplementedby refid="classBMenuItem_1ae51fbc9628a915b133b5862e436314a4">Invoke</reimplementedby>
        <reimplementedby refid="classBPictureButton_1ad3f58a97ed8348711aff7128ebf0b5dd">Invoke</reimplementedby>
        <reimplementedby refid="classBRadioButton_1ae0aec96932eaa5f1de8591392a739b0b">Invoke</reimplementedby>
        <reimplementedby refid="classBTextControl_1ae82b482d40833e4a2903301839e37f8c">Invoke</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Sends the <emphasis>message</emphasis> to the invoker&apos;s target. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>message</emphasis> is <computeroutput>NULL</computeroutput> the default message is sent instead. You can set the default message using <emphasis>SetMessage</emphasis> or in the constructor.</para>
<para>This method also sends a B_CONTROL_INVOKED notification to handlers which registered themselves using StartWatching</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="44" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BInvoker::InvokeNotify</definition>
        <argsstring>(BMessage *message, uint32 kind=B_CONTROL_INVOKED)</argsstring>
        <name>InvokeNotify</name>
        <qualifiedname>BInvoker::InvokeNotify</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>kind</declname>
          <defval>B_CONTROL_INVOKED</defval>
        </param>
        <briefdescription>
<para>Sends the <emphasis>message</emphasis> to its target, using the notification code specified by <emphasis>kind</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If message is <computeroutput>NULL</computeroutput>, no message is sent to the target, but any watchers of the invoker&apos;s handler will receive their expected notifications. By default, <emphasis>kind</emphasis> is <computeroutput>B_CONTROL_INVOKED</computeroutput>, the same as sent by <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref>.</para>
<para><ref refid="classBInvoker" kindref="compound">BInvoker</ref> does not send the notification itself, it is up to subclasses to do that as needed.</para>
<para><simplesect kind="see"><para><ref refid="classBHandler_1af7d600e33a0586af7444d9abc8500504" kindref="member">BLooper::StartWatching()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBHandler_1a71bf72dc17a64bcd42656722271a9e0c" kindref="member">BLooper::SendNotices()</ref> </para>
</simplesect>
<simplesect kind="see"><para>BHandler::NoticeChange()</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="45" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a17470932a103267815f01d0df9e891e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BInvoker::IsTargetLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsTargetLocal</name>
        <qualifiedname>BInvoker::IsTargetLocal</qualifiedname>
        <briefdescription>
<para>Returns whether or not the invoker and its target belong to the same team. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the invoker and its target are in the same team, <computeroutput>false</computeroutput> if they reside in separate address spaces.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="37" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1ab0b73729de282c93b4da51e6b9dbc170" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>BMessage * BInvoker::Message</definition>
        <argsstring>() const</argsstring>
        <name>Message</name>
        <qualifiedname>BInvoker::Message</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the invoker&apos;s message object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a message has not been assigned to the invoker this method returns <computeroutput>NULL</computeroutput> instead.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="31" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1aac0992846032f0caaed3d968cd9a1fca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
        <definition>BMessenger BInvoker::Messenger</definition>
        <argsstring>() const</argsstring>
        <name>Messenger</name>
        <qualifiedname>BInvoker::Messenger</qualifiedname>
        <briefdescription>
<para>Returns the <ref refid="classBMessenger" kindref="compound">BMessenger</ref> object that the invoker uses to send its messages. </para>
        </briefdescription>
        <detaileddescription>
<para>If a target hasn&apos;t been set yet, the returned <ref refid="classBMessenger" kindref="compound">BMessenger</ref> object will be invalid.</para>
<para><simplesect kind="see"><para><ref refid="classBMessenger_1a0094e94e04aacad5a8d5a0c3988be300" kindref="member">BMessenger::IsValid()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="39" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a9983897bef828eea70f574f9571b8e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BInvoker::SetHandlerForReply</definition>
        <argsstring>(BHandler *handler)</argsstring>
        <name>SetHandlerForReply</name>
        <qualifiedname>BInvoker::SetHandlerForReply</qualifiedname>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>handler</declname>
          <defname>replyHandler</defname>
        </param>
        <briefdescription>
<para>Sets the <ref refid="classBHandler" kindref="compound">BHandler</ref> object responsible for handling reply messages. </para>
        </briefdescription>
        <detaileddescription>
<para>When <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> is called, the <emphasis>replyHandler</emphasis> is passed to the messenger&apos;s SendMessage() method, as follows:</para>
<para><programlisting><codeline><highlight class="normal">messenger-&gt;SendMessage(message,<sp/>replyHandler);</highlight></codeline>
</programlisting></para>
<para>By default, the handler for replies is <computeroutput>NULL</computeroutput>, consequently all reply messages will be sent to the <ref refid="classBApplication" kindref="compound">BApplication</ref> instead.</para>
<para><simplesect kind="return"><para>Always returns <computeroutput>B_OK</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="41" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a42fae8f984af3765c1a6af404dc36816" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BInvoker::SetMessage</definition>
        <argsstring>(BMessage *message)</argsstring>
        <name>SetMessage</name>
        <qualifiedname>BInvoker::SetMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Assigns <emphasis>message</emphasis> to the invoker, deleting any previously assigned message. </para>
        </briefdescription>
        <detaileddescription>
<para>You may pass <computeroutput>NULL</computeroutput> into <emphasis>message</emphasis> to delete the current message without replacing it.</para>
<para>When <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> is called with a <computeroutput>NULL</computeroutput> message parameter, a copy of the passed in <emphasis>message</emphasis> is sent to the target <ref refid="classBHandler" kindref="compound">BHandler</ref>. <ref refid="classBInvoker" kindref="compound">BInvoker</ref> takes ownership of the <ref refid="classBMessage" kindref="compound">BMessage</ref> object, so you must not delete it yourself.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="30" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a17e8040bfd829b6b084c2f6234776e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BInvoker::SetTarget</definition>
        <argsstring>(BMessenger messenger)</argsstring>
        <name>SetTarget</name>
        <qualifiedname>BInvoker::SetTarget</qualifiedname>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>messenger</declname>
        </param>
        <briefdescription>
<para>Sets the invoker&apos;s target to <emphasis>messenger</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="classBMessenger" kindref="compound">BMessenger</ref> target can be used to designate a remote handler (living in another team).</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="36" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1ac857ceb882d95a5826447dc12dd06c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BInvoker::SetTarget</definition>
        <argsstring>(const BHandler *handler, const BLooper *looper=NULL)</argsstring>
        <name>SetTarget</name>
        <qualifiedname>BInvoker::SetTarget</qualifiedname>
        <param>
          <type>const <ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const <ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
          <declname>looper</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Sets the target to either a local <emphasis>handler</emphasis> or as the preferred handler of a local <emphasis>looper</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It is not necessary to specify both the <emphasis>handler</emphasis> and the <emphasis>looper</emphasis>, the unused parameter should be passed in as <computeroutput>NULL</computeroutput>.</para>
</simplesect>
If given only a <emphasis>handler</emphasis>, it must already be attached to a <ref refid="classBLooper" kindref="compound">BLooper</ref>.</para>
<para>If given only a <emphasis>looper</emphasis>, the message will be sent to its preferred handler (in the case of a <ref refid="classBWindow" kindref="compound">BWindow</ref> that is the focused view).</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="34" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1ab3c4f55b01f3775832871944b5c943de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BInvoker::SetTimeout</definition>
        <argsstring>(bigtime_t timeout)</argsstring>
        <name>SetTimeout</name>
        <qualifiedname>BInvoker::SetTimeout</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Sets the timeout to use when sending the message to the target. </para>
        </briefdescription>
        <detaileddescription>
<para>By default the timeout is set to <computeroutput>B_INFINITE_TIMEOUT</computeroutput>. The <emphasis>timeout</emphasis> value is passed into the timeout parameter of <ref refid="classBMessenger_1aebe5aba546fa4a4696988b1bf6028f3c" kindref="member">BMessenger::SendMessage()</ref>.</para>
<para><simplesect kind="see"><para>BMessenger::SendMessage(BMessage*, BHandler*, bigtime_t) for details.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="47" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1aba5a469f2e0c94c08553ebe59c238cc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
        <definition>BHandler * BInvoker::Target</definition>
        <argsstring>(BLooper **_looper=NULL) const</argsstring>
        <name>Target</name>
        <qualifiedname>BInvoker::Target</qualifiedname>
        <param>
          <type><ref refid="classBLooper" kindref="compound">BLooper</ref> **</type>
          <declname>_looper</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Invoke <ref refid="classBMessenger_1a763e36f482699e201795a04b39aabf1a" kindref="member">BMessenger::Target()</ref> on the internal messenger. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMessenger_1a763e36f482699e201795a04b39aabf1a" kindref="member">BMessenger::Target()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1af2632aee4882b11ed1bc34ce55ef4bbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BInvoker::Timeout</definition>
        <argsstring>() const</argsstring>
        <name>Timeout</name>
        <qualifiedname>BInvoker::Timeout</qualifiedname>
        <briefdescription>
<para>Returns the current timeout value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="48" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBInvoker_1ada272cb8671448d7f7efd607791f31a7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BInvoker::BeginInvokeNotify</definition>
        <argsstring>(uint32 kind=B_CONTROL_INVOKED)</argsstring>
        <name>BeginInvokeNotify</name>
        <qualifiedname>BInvoker::BeginInvokeNotify</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>kind</declname>
          <defval>B_CONTROL_INVOKED</defval>
        </param>
        <briefdescription>
<para>Implement this method to set up an <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref> context. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used by derive classes to emulate an <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref> call inside of <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> without breaking binary compatibility.</para>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a2169cfbba1c3da1921baa9a550581b54" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BInvoker::EndInvokeNotify</definition>
        <argsstring>()</argsstring>
        <name>EndInvokeNotify</name>
        <qualifiedname>BInvoker::EndInvokeNotify</qualifiedname>
        <briefdescription>
<para>Implement this method to tear down an <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref> context. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a6e33e81c7ee307621295e8da6181d3f8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BInvoker::InvokeKind</definition>
        <argsstring>(bool *_notify=NULL)</argsstring>
        <name>InvokeKind</name>
        <qualifiedname>BInvoker::InvokeKind</qualifiedname>
        <param>
          <type>bool *</type>
          <declname>_notify</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Returns the kind set by <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Derived classes should implement this method and call it from within <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> to determine what kind was specified when <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref> was called.</para>
<para>If you care whether <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> or <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref> was originally called, you can use a bool pointer and set its value to <computeroutput>true</computeroutput> if <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref> was called, or <computeroutput>false</computeroutput> if <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> was called. This lets you fetch the <ref refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" kindref="member">InvokeNotify()</ref> arguments from <ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> without breaking binary compatibility with older applications.</para>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="51" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBInvoker_1a51ddbf433154782451b641b253847a50" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BInvoker::BInvoker</definition>
        <argsstring>(const BInvoker &amp;)</argsstring>
        <name>BInvoker</name>
        <qualifiedname>BInvoker::BInvoker</qualifiedname>
        <param>
          <type>const <ref refid="classBInvoker" kindref="compound">BInvoker</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a2c01a51c95c165062198ec7a6ece6a8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BInvoker::_ReservedInvoker1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedInvoker1</name>
        <qualifiedname>BInvoker::_ReservedInvoker1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="57" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1ab76270036e64bfc4fff2ed88a88575a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BInvoker::_ReservedInvoker2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedInvoker2</name>
        <qualifiedname>BInvoker::_ReservedInvoker2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="58" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a8f384a28fc8ce2e41b446c246440d650" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BInvoker::_ReservedInvoker3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedInvoker3</name>
        <qualifiedname>BInvoker::_ReservedInvoker3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="59" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBInvoker_1a12b79fe5cc2dab0667335f56f8f89f99" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBInvoker" kindref="compound">BInvoker</ref> &amp;</type>
        <definition>BInvoker &amp; BInvoker::operator=</definition>
        <argsstring>(const BInvoker &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BInvoker::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBInvoker" kindref="compound">BInvoker</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="62" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An object that can be &quot;invoked&quot; to send a message to a <ref refid="classBHandler" kindref="compound">BHandler</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>The designated <ref refid="classBHandler" kindref="compound">BHandler</ref> of a <ref refid="classBInvoker" kindref="compound">BInvoker</ref> is known as its &quot;target&quot;.</para>
<para><ref refid="classBInvoker" kindref="compound">BInvoker</ref> is most often used as a mix-in class, for example, <ref refid="classBControl" kindref="compound">BControl</ref> derives from <ref refid="classBInvoker" kindref="compound">BInvoker</ref> as well as from <ref refid="classBView" kindref="compound">BView</ref>.</para>
<para><simplesect kind="see"><para><ref refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" kindref="member">Invoke()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBInvoker_1ac857ceb882d95a5826447dc12dd06c74" kindref="member">SetTarget(const BHandler*, const BLooper*)</ref> for details.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BButton</label>
        <link refid="classBButton"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BChannelControl</label>
        <link refid="classBChannelControl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BChannelSlider</label>
        <link refid="classBChannelSlider"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BCheckBox</label>
        <link refid="classBCheckBox"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BColorControl</label>
        <link refid="classBColorControl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BControl</label>
        <link refid="classBControl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BInvoker</label>
        <link refid="classBInvoker"/>
      </node>
      <node id="13">
        <label>BListView</label>
        <link refid="classBListView"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>BMenuItem</label>
        <link refid="classBMenuItem"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BOptionControl</label>
        <link refid="classBOptionControl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>BOptionPopUp</label>
        <link refid="classBOptionPopUp"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>BOutlineListView</label>
        <link refid="classBOutlineListView"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>BPictureButton</label>
        <link refid="classBPictureButton"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>BRadioButton</label>
        <link refid="classBRadioButton"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>BSeparatorItem</label>
        <link refid="classBSeparatorItem"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>BTextControl</label>
        <link refid="classBTextControl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/boot/home/src/haiku/headers/os/app/Invoker.h" line="21" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/Invoker.h" bodystart="21" bodyend="70"/>
    <listofallmembers>
      <member refid="classBInvoker_1a2b11ded4c89f756da5b6073640201100" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>_reserved</name></member>
      <member refid="classBInvoker_1a2c01a51c95c165062198ec7a6ece6a8d" prot="private" virt="virtual"><scope>BInvoker</scope><name>_ReservedInvoker1</name></member>
      <member refid="classBInvoker_1ab76270036e64bfc4fff2ed88a88575a1" prot="private" virt="virtual"><scope>BInvoker</scope><name>_ReservedInvoker2</name></member>
      <member refid="classBInvoker_1a8f384a28fc8ce2e41b446c246440d650" prot="private" virt="virtual"><scope>BInvoker</scope><name>_ReservedInvoker3</name></member>
      <member refid="classBInvoker_1ada272cb8671448d7f7efd607791f31a7" prot="protected" virt="non-virtual"><scope>BInvoker</scope><name>BeginInvokeNotify</name></member>
      <member refid="classBInvoker_1ad03149db91cd6460f12adb72780a7080" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>BInvoker</name></member>
      <member refid="classBInvoker_1a6405334f1589c7a9fc3604ff8a4c8c83" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>BInvoker</name></member>
      <member refid="classBInvoker_1adaf9b3df1b4a318e10df04a5eb9f59ee" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>BInvoker</name></member>
      <member refid="classBInvoker_1a51ddbf433154782451b641b253847a50" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>BInvoker</name></member>
      <member refid="classBInvoker_1a6eb323ab957a5ee99e8db2b2fb0e9800" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>Command</name></member>
      <member refid="classBInvoker_1a2169cfbba1c3da1921baa9a550581b54" prot="protected" virt="non-virtual"><scope>BInvoker</scope><name>EndInvokeNotify</name></member>
      <member refid="classBInvoker_1a1340f335e15484e840ed1d255670c737" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>fMessage</name></member>
      <member refid="classBInvoker_1ae888f3f427aa410ee0a431400bdd070d" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>fMessenger</name></member>
      <member refid="classBInvoker_1a77e3bc2ed03a44c2c2a0dd19a5f59f12" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>fNotifyKind</name></member>
      <member refid="classBInvoker_1a29d25a504c8e91a7420b323079059b35" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>fReplyTo</name></member>
      <member refid="classBInvoker_1a84506205fa48a2870ae7111c747b55d7" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>fTimeout</name></member>
      <member refid="classBInvoker_1a710e78abc03eb29e9e25d11d34c874cc" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>HandlerForReply</name></member>
      <member refid="classBInvoker_1ad4eb9ad4b3b8286f2a155ad7f087511c" prot="public" virt="virtual"><scope>BInvoker</scope><name>Invoke</name></member>
      <member refid="classBInvoker_1a6e33e81c7ee307621295e8da6181d3f8" prot="protected" virt="non-virtual"><scope>BInvoker</scope><name>InvokeKind</name></member>
      <member refid="classBInvoker_1ab009fe9c6a1f64798c614612e8c3db20" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>InvokeNotify</name></member>
      <member refid="classBInvoker_1a17470932a103267815f01d0df9e891e9" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>IsTargetLocal</name></member>
      <member refid="classBInvoker_1ab0b73729de282c93b4da51e6b9dbc170" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>Message</name></member>
      <member refid="classBInvoker_1aac0992846032f0caaed3d968cd9a1fca" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>Messenger</name></member>
      <member refid="classBInvoker_1a12b79fe5cc2dab0667335f56f8f89f99" prot="private" virt="non-virtual"><scope>BInvoker</scope><name>operator=</name></member>
      <member refid="classBInvoker_1a9983897bef828eea70f574f9571b8e85" prot="public" virt="virtual"><scope>BInvoker</scope><name>SetHandlerForReply</name></member>
      <member refid="classBInvoker_1a42fae8f984af3765c1a6af404dc36816" prot="public" virt="virtual"><scope>BInvoker</scope><name>SetMessage</name></member>
      <member refid="classBInvoker_1ac857ceb882d95a5826447dc12dd06c74" prot="public" virt="virtual"><scope>BInvoker</scope><name>SetTarget</name></member>
      <member refid="classBInvoker_1a17e8040bfd829b6b084c2f6234776e11" prot="public" virt="virtual"><scope>BInvoker</scope><name>SetTarget</name></member>
      <member refid="classBInvoker_1ab3c4f55b01f3775832871944b5c943de" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>SetTimeout</name></member>
      <member refid="classBInvoker_1aba5a469f2e0c94c08553ebe59c238cc8" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>Target</name></member>
      <member refid="classBInvoker_1af2632aee4882b11ed1bc34ce55ef4bbe" prot="public" virt="non-virtual"><scope>BInvoker</scope><name>Timeout</name></member>
      <member refid="classBInvoker_1a68714c3b78a2cf2931daf54f5dc94dca" prot="public" virt="virtual"><scope>BInvoker</scope><name>~BInvoker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
