<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="TLS_8h" kind="file" language="C++">
    <compoundname>TLS.h</compoundname>
    <includes refid="SupportDefs_8h" local="no">SupportDefs.h</includes>
    <incdepgraph>
      <node id="2">
        <label>SupportDefs.h</label>
        <link refid="SupportDefs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>TLS.h</label>
        <link refid="TLS_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>BeBuild.h</label>
      </node>
      <node id="4">
        <label>inttypes.h</label>
      </node>
      <node id="5">
        <label>sys/types.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="TLS_8h_1a293e0f8326776013ccdc56e66324e98e" prot="public" static="no">
        <name>TLS_MAX_KEYS</name>
        <initializer>64</initializer>
        <briefdescription>
<para>The maximum number of thread local storage variables. This number is process wide. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/TLS.h" line="16" column="9" bodyfile="/boot/home/src/haiku/headers/os/support/TLS.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="TLS_8h_1a785afbdffc6b59ee1233d12d104e1da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tls_address</definition>
        <argsstring>(int32 index)</argsstring>
        <name>tls_address</name>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Retrieve the pointer that refers to the data of this thread at the provided <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>You can use this pointer to directly manipulate your thread data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> that you retrieved with <ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to where your thread&apos;s data is, or <computeroutput>NULL</computeroutput> if the index is invalid.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" kindref="member">tls_get()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/TLS.h" line="25" column="13" declfile="/boot/home/src/haiku/headers/os/support/TLS.h" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 tls_allocate</definition>
        <argsstring>(void)</argsstring>
        <name>tls_allocate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate a unique index to use for storing variables. </para>
        </briefdescription>
        <detaileddescription>
<para>You should only have to do this once to allocate the global index, which you can reuse in every thread.</para>
<para><simplesect kind="return"><para>A unique index to which you can associate per thread data. If we overrun the maximum number of keys, as defined by <ref refid="TLS_8h_1a293e0f8326776013ccdc56e66324e98e" kindref="member">TLS_MAX_KEYS</ref>, the function will return <computeroutput>B_NO_MEMORY</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" kindref="member">tls_get()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1a785afbdffc6b59ee1233d12d104e1da8" kindref="member">tls_address()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/TLS.h" line="23" column="14" declfile="/boot/home/src/haiku/headers/os/support/TLS.h" declline="23" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tls_get</definition>
        <argsstring>(int32 index)</argsstring>
        <name>tls_get</name>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Retrieve the data stored for this thread at the provided <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> that you retrieved with <ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The data you set using <ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set()</ref> for this thread, or <computeroutput>NULL</computeroutput> if there is no data set, or the <emphasis>index</emphasis> is invalid.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/TLS.h" line="24" column="13" declfile="/boot/home/src/haiku/headers/os/support/TLS.h" declline="24" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_set</definition>
        <argsstring>(int32 index, void *value)</argsstring>
        <name>tls_set</name>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data of this thread at the provided <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is up to you to make sure the <emphasis>index</emphasis> is valid. Any invalid indices can lead to unpredictable results.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> that you retrieved with <ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The data that should be associated with the index for this thread.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" kindref="member">tls_get()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/TLS.h" line="26" column="13" declfile="/boot/home/src/haiku/headers/os/support/TLS.h" declline="26" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions to use Thread Local Storage. </para>
    </briefdescription>
    <detaileddescription>
<para>The Thread Local Storage API provides convenient methods to transform global variables in to thread-context sensitive variables. Some applications rely on global variables as a way of intercommunicating between functions and objects, but one of your demands might be that the contents of that variable differs between threads.</para>
<para>The following example demonstrates how an imaginary thread manager that stores per thread data would function. The constructor of this <computeroutput>ThreadManager</computeroutput> allocates the TLS variables using <ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate()</ref>. This only has to be done once, and not in every spawned thread! Then, every spawned thread that interacts with this thread manager, should call the <computeroutput>InitThread()</computeroutput> function. This one associates the supplied thread data with the TLS index using <ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set()</ref>. Each thread can get their associated data with <computeroutput>GetCurrentThreadData()</computeroutput>, which uses <ref refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" kindref="member">tls_get()</ref> to retrieve the associated thread data at the provided index.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/>gThreadName;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/>gThreadData;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ThreadManager</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>General<sp/>initialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadManager()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gThreadName<sp/>=<sp/><ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gThreadStatus<sp/>=<sp/><ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Called<sp/>from<sp/>the<sp/>thread<sp/>entry<sp/>function<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitThread(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set</ref>(gThreadName,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set</ref>(gThreadData,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>called<sp/>from<sp/>any<sp/>of<sp/>the<sp/>threads.<sp/>The<sp/>returned<sp/>data<sp/>will<sp/>be<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>the<sp/>thread<sp/>explicitly<sp/>set<sp/>in<sp/>the<sp/>InitThread()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetCurrentThreadData()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Thread<sp/>%s<sp/>asked<sp/>for<sp/>its<sp/>data.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" kindref="member">tls_get</ref>(gThreadName));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" kindref="member">tls_get</ref>(gThreadData);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para><orderedlist>
<listitem><para>It is impossible to get data other than from your thread.</para>
</listitem><listitem><para>There is a limit to the number of TLS variables you can allocate. This limit is define by <ref refid="TLS_8h_1a293e0f8326776013ccdc56e66324e98e" kindref="member">TLS_MAX_KEYS</ref>, but do realize that you share this limit with all the libraries your application is linked to.</para>
</listitem><listitem><para>The actual global variables, in the example <computeroutput>gThreadName</computeroutput> and <computeroutput>gThreadData</computeroutput>, are only indexes. You cannot use these variables to access data without the TLS API.</para>
</listitem></orderedlist>
</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2003-2021,<sp/>Haiku,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>License.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_TLS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_TLS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="SupportDefs_8h" kindref="compound">SupportDefs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>maximum<sp/>of<sp/>64<sp/>keys<sp/>is<sp/>allowed<sp/>to<sp/>store<sp/>in<sp/>TLS<sp/>-<sp/>the<sp/>key<sp/>is<sp/>reserved</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>process-wide.<sp/>Note<sp/>that<sp/>tls_allocate()<sp/>will<sp/>return<sp/>B_NO_MEMORY<sp/>if<sp/>you</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>try<sp/>to<sp/>exceed<sp/>this<sp/>limit.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="TLS_8h_1a293e0f8326776013ccdc56e66324e98e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TLS_MAX_KEYS<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/><ref refid="TLS_8h_1a88b53a55b8a9eedbeb68bf7e79e7f62d" kindref="member">tls_allocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24" refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="TLS_8h_1aea1877f92a10f897bf1ce0a19907d732" kindref="member">tls_get</ref>(<ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/>index);</highlight></codeline>
<codeline lineno="25" refid="TLS_8h_1a785afbdffc6b59ee1233d12d104e1da8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="TLS_8h_1a785afbdffc6b59ee1233d12d104e1da8" kindref="member">tls_address</ref>(<ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/>index);</highlight></codeline>
<codeline lineno="26" refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TLS_8h_1acfd89c1efb8e2fd98e2f8494f09a01cd" kindref="member">tls_set</ref>(<ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/>index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>_TLS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/boot/home/src/haiku/headers/os/support/TLS.h"/>
  </compounddef>
</doxygen>
