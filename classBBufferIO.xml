<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBBufferIO" kind="class" language="C++" prot="public">
    <compoundname>BBufferIO</compoundname>
    <basecompoundref refid="classBPositionIO" prot="public" virt="non-virtual">BPositionIO</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBBufferIO_1ac5691957300cc720bd3fae67c33af36c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BBufferIO::_reserved_bools[6]</definition>
        <argsstring>[6]</argsstring>
        <name>_reserved_bools</name>
        <qualifiedname>BBufferIO::_reserved_bools</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="56" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1a86caa929b1a97a8583e046d2999c0258" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BBufferIO::_reserved_ints[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_reserved_ints</name>
        <qualifiedname>BBufferIO::_reserved_ints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="51" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1ac7d938ab161dbd1f16ed4950676740c6" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BBufferIO::fBuffer</definition>
        <argsstring></argsstring>
        <name>fBuffer</name>
        <qualifiedname>BBufferIO::fBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="46" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1a653fb8b7cb163e4bc424628d8a4a4a45" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BBufferIO::fBufferIsDirty</definition>
        <argsstring></argsstring>
        <name>fBufferIsDirty</name>
        <qualifiedname>BBufferIO::fBufferIsDirty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="53" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1ab81f6a02524bfa7feecf2ced241d153f" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BBufferIO::fBufferSize</definition>
        <argsstring></argsstring>
        <name>fBufferSize</name>
        <qualifiedname>BBufferIO::fBufferSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="47" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1a256fd10da4679264c2766b212ecdc783" prot="private" static="no" mutable="no">
        <type>off_t</type>
        <definition>off_t BBufferIO::fBufferStart</definition>
        <argsstring></argsstring>
        <name>fBufferStart</name>
        <qualifiedname>BBufferIO::fBufferStart</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="44" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1a5e529346bc7684aa67ec3955ec1b64c7" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BBufferIO::fBufferUsed</definition>
        <argsstring></argsstring>
        <name>fBufferUsed</name>
        <qualifiedname>BBufferIO::fBufferUsed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="48" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1a22037dfb0acd987c50a0fb225ff79927" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BBufferIO::fOwnsStream</definition>
        <argsstring></argsstring>
        <name>fOwnsStream</name>
        <qualifiedname>BBufferIO::fOwnsStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="54" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1af593f087d0e8057b4c80f624c86b952e" prot="private" static="no" mutable="no">
        <type>off_t</type>
        <definition>off_t BBufferIO::fPosition</definition>
        <argsstring></argsstring>
        <name>fPosition</name>
        <qualifiedname>BBufferIO::fPosition</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="49" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBufferIO_1a8581bda78defe5d74406a01a279da5f9" prot="private" static="no" mutable="no">
        <type><ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> *</type>
        <definition>BPositionIO* BBufferIO::fStream</definition>
        <argsstring></argsstring>
        <name>fStream</name>
        <qualifiedname>BBufferIO::fStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="45" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBBufferIO_1a48fbdf7ea0d409c492addc9636ec8d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BBufferIO::BBufferIO</definition>
        <argsstring>(BPositionIO *stream, size_t bufferSize=65536L, bool ownsStream=true)</argsstring>
        <name>BBufferIO</name>
        <qualifiedname>BBufferIO::BBufferIO</qualifiedname>
        <param>
          <type><ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
          <defval>65536L</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ownsStream</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classBBufferIO" kindref="compound">BBufferIO</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>The constructor will create a buffer of the given size and associate the object with the given <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer that the object will allocate and use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ownsStream</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies if the object will delete the stream on destruction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a3318cecf9a1780b332fe157656113006" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BBufferIO::~BBufferIO</definition>
        <argsstring>()</argsstring>
        <name>~BBufferIO</name>
        <qualifiedname>BBufferIO::~BBufferIO</qualifiedname>
        <briefdescription>
<para>Free the resources allocated by the object. </para>
        </briefdescription>
        <detaileddescription>
<para>Flush pending changes to the stream and free the allocated memory. If the <computeroutput>owns_stream</computeroutput> property is <computeroutput>true</computeroutput>, the destructor also deletes the stream associated with the <ref refid="classBBufferIO" kindref="compound">BBufferIO</ref> object.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="17" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a847813fab6391b1a21fad19bd1e41dae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BBufferIO::BufferSize</definition>
        <argsstring>() const</argsstring>
        <name>BufferSize</name>
        <qualifiedname>BBufferIO::BufferSize</qualifiedname>
        <briefdescription>
<para>Return the size of the internal buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the buffer allocated by the object.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="30" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a6c51066fea50d99b1b87228651c689f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BBufferIO::Flush</definition>
        <argsstring>()</argsstring>
        <name>Flush</name>
        <qualifiedname>BBufferIO::Flush</qualifiedname>
        <reimplements refid="classBDataIO_1a38a8df63b367585fe5e6b6a85c406d05">Flush</reimplements>
        <briefdescription>
<para>Write pending modifications to the stream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The amount of bytes written, or if it failed it will return an error code.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="26" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a830fee2824d387c64ae8855c13ba872a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BBufferIO::OwnsStream</definition>
        <argsstring>() const</argsstring>
        <name>OwnsStream</name>
        <qualifiedname>BBufferIO::OwnsStream</qualifiedname>
        <briefdescription>
<para>Return whether or not the <ref refid="classBBufferIO" kindref="compound">BBufferIO</ref> object &quot;owns&quot; the stream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether or not the <ref refid="classBBufferIO" kindref="compound">BBufferIO</ref> object &quot;owns&quot; the stream. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The object &quot;owns&quot; the stream and will destroy it upon destruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The object does not own the stream.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBBufferIO_1ab47ac843be8304193fa1e99c720703e1" kindref="member">SetOwnsStream()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="31" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a83acd23044df368781a9069191492cf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BBufferIO::Position</definition>
        <argsstring>() const</argsstring>
        <name>Position</name>
        <qualifiedname>BBufferIO::Position</qualifiedname>
        <reimplements refid="classBPositionIO_1a4ebc2cd7a7493767e79fa6d88657a84a">Position</reimplements>
        <briefdescription>
<para>Return the current position in the stream. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current position as an offset in bytes from the beginning of the stream. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>The object is not associated with a valid <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="24" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1aa6c5bb0b0a3c2fba56b2faced6044ef3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BBufferIO::PrintToStream</definition>
        <argsstring>() const</argsstring>
        <name>PrintToStream</name>
        <qualifiedname>BBufferIO::PrintToStream</qualifiedname>
        <briefdescription>
<para>Print the object to standard output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="34" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a7887fde998d8629c6a4063ba5c3e41aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BBufferIO::ReadAt</definition>
        <argsstring>(off_t pos, void *buffer, size_t size)</argsstring>
        <name>ReadAt</name>
        <qualifiedname>BBufferIO::ReadAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a6eb7aff1d69bf3049b2b421da52fdf8f">ReadAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Read the specified amount of bytes at the given position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset into the stream where to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer where to copy the read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of bytes to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The amount of bytes actually read, or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>The object is not associated with a valid <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>buffer</computeroutput> parameter is not valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="20" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a7ba7f66e172e2d7ad87a114069028876" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BBufferIO::Seek</definition>
        <argsstring>(off_t position, uint32 seekMode)</argsstring>
        <name>Seek</name>
        <qualifiedname>BBufferIO::Seek</qualifiedname>
        <reimplements refid="classBPositionIO_1af8296875d9711dd498b0fbcace028abc">Seek</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>seekMode</declname>
        </param>
        <briefdescription>
<para>Set the position in the stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the position in the stream where the <ref refid="classBPositionIO_1abce66c314f7cbd5ab6de0e6480bd7a00" kindref="member">Read()</ref> and <ref refid="classBPositionIO_1a50ec7f6b834893a153d46c0f3c0e09c4" kindref="member">Write()</ref> functions (inherited from <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref>) begin reading and writing. How the position argument is understood depends on the seek_mode flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position where you want to seek. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Can have three values:<itemizedlist>
<listitem><para><computeroutput>SEEK_SET</computeroutput> The position passed is an offset from the beginning of the stream; in other words, the current position is set to position. For this mode, position should be a positive value.</para>
</listitem><listitem><para><computeroutput>SEEK_CUR</computeroutput> The position argument is an offset from the current position; the value of the argument is added to the current position.</para>
</listitem><listitem><para><computeroutput>SEEK_END</computeroutput>. The position argument is an offset from the end of the stream. In this mode the position argument should be negative (or zero).</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current position as an offset in bytes from the beginning of the stream. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>The object is not associated with a valid <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="23" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1ab47ac843be8304193fa1e99c720703e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BBufferIO::SetOwnsStream</definition>
        <argsstring>(bool ownsStream)</argsstring>
        <name>SetOwnsStream</name>
        <qualifiedname>BBufferIO::SetOwnsStream</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ownsStream</declname>
          <defname>owns_stream</defname>
        </param>
        <briefdescription>
<para>Set the <computeroutput>owns_stream</computeroutput> property of the object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owns_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>If you pass <computeroutput>true</computeroutput>, the object will delete the stream upon destruction, if you pass <computeroutput>false</computeroutput> it will not.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1aed5125f4b157b0e5208cd39aa0af0d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BBufferIO::SetSize</definition>
        <argsstring>(off_t size)</argsstring>
        <name>SetSize</name>
        <qualifiedname>BBufferIO::SetSize</qualifiedname>
        <reimplements refid="classBPositionIO_1a35613c7ee06c7c9583ca2505e1fdff28">SetSize</reimplements>
        <param>
          <type>off_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Call the <ref refid="classBBufferIO_1aed5125f4b157b0e5208cd39aa0af0d77" kindref="member">SetSize()</ref> function of the assigned <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream is resized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>The object is not associated with a valid <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="25" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a2a50815b961ccd527b7e1b10e7dc7281" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> *</type>
        <definition>BPositionIO * BBufferIO::Stream</definition>
        <argsstring>() const</argsstring>
        <name>Stream</name>
        <qualifiedname>BBufferIO::Stream</qualifiedname>
        <briefdescription>
<para>Return a pointer to the stream specified on construction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream specified on construction.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="29" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a949b030b3fd3dc93be06d39f627f2bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BBufferIO::WriteAt</definition>
        <argsstring>(off_t pos, const void *buffer, size_t size)</argsstring>
        <name>WriteAt</name>
        <qualifiedname>BBufferIO::WriteAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a0efce1a07d1d6509e8ec00598244ace1">WriteAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write the specified amount of bytes at the given position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset into the stream where to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer which contains the data to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of bytes to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The amount of bytes actually written, or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>The object is not associated with a valid <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>buffer</computeroutput> parameter is not valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="21" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBBufferIO_1a491b33030a08400a1e1dc118e86044e9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BBufferIO::_Reserved_BufferIO_0</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_BufferIO_0</name>
        <qualifiedname>BBufferIO::_Reserved_BufferIO_0</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="37" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a89c15d2c0b73f92ef138fb5ace394af0" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BBufferIO::_Reserved_BufferIO_1</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_BufferIO_1</name>
        <qualifiedname>BBufferIO::_Reserved_BufferIO_1</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="38" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1ad6a8cbcdbda8733b458d222ffdb6eafe" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BBufferIO::_Reserved_BufferIO_2</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_BufferIO_2</name>
        <qualifiedname>BBufferIO::_Reserved_BufferIO_2</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="39" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a405507efa55e08d96ce840741719e569" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BBufferIO::_Reserved_BufferIO_3</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_BufferIO_3</name>
        <qualifiedname>BBufferIO::_Reserved_BufferIO_3</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="40" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBBufferIO_1a258e65360243a589e0725541e02146a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BBufferIO::_Reserved_BufferIO_4</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_BufferIO_4</name>
        <qualifiedname>BBufferIO::_Reserved_BufferIO_4</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="41" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A buffered adapter for <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para>This class differs from other classes derived from <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> in a sense that it does not actually provide an actual entity to be read or written to, but rather acts like a &quot;frontend&quot; to a stream. This class especially comes in handy when working with files that are constantly written and rewritten and where you want do this writing buffered so that the hard disk or the network will not have to be accessed so frequently.</para>
<para>This class works as follows. After constructing a <ref refid="classBBufferIO" kindref="compound">BBufferIO</ref> object that you want to be buffered, you can create this object. The constructor takes a <emphasis>stream</emphasis> parameter that points to the object to be buffered.</para>
<para>You then use this object as a proxy to the resource you want to read of or write to. As soon as you use <ref refid="classBBufferIO_1a7887fde998d8629c6a4063ba5c3e41aa" kindref="member">ReadAt()</ref>, the buffer will be initialized to the contents of the original stream, and subsequent calls to the positions within the buffer will not be routed to the original stream. In the same way <ref refid="classBBufferIO_1a949b030b3fd3dc93be06d39f627f2bce" kindref="member">WriteAt()</ref> will change the data in the buffer, but not in the actual stream. In order to flush the changes to the original stream, use the <ref refid="classBBufferIO_1a6c51066fea50d99b1b87228651c689f3" kindref="member">Flush()</ref> method. Deleting the object when you are done with it will also flush the stream and update the original stream.</para>
<para><simplesect kind="note"><para>This class is not meant to be used in cases where the original stream requires to be in a consistent state. Neither should this class be used as a way to perform &apos;atomic&apos; writes, because the object might need to do partial writes if it needs to &apos;move&apos; the buffer. This happens for instance if the original stream is bigger than the buffer.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BBufferIO</label>
        <link refid="classBBufferIO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BBufferIO</label>
        <link refid="classBBufferIO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/support/BufferIO.h" line="12" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/BufferIO.h" bodystart="12" bodyend="57"/>
    <listofallmembers>
      <member refid="classBBufferIO_1ac5691957300cc720bd3fae67c33af36c" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>_reserved_bools</name></member>
      <member refid="classBBufferIO_1a491b33030a08400a1e1dc118e86044e9" prot="private" virt="virtual"><scope>BBufferIO</scope><name>_Reserved_BufferIO_0</name></member>
      <member refid="classBBufferIO_1a89c15d2c0b73f92ef138fb5ace394af0" prot="private" virt="virtual"><scope>BBufferIO</scope><name>_Reserved_BufferIO_1</name></member>
      <member refid="classBBufferIO_1ad6a8cbcdbda8733b458d222ffdb6eafe" prot="private" virt="virtual"><scope>BBufferIO</scope><name>_Reserved_BufferIO_2</name></member>
      <member refid="classBBufferIO_1a405507efa55e08d96ce840741719e569" prot="private" virt="virtual"><scope>BBufferIO</scope><name>_Reserved_BufferIO_3</name></member>
      <member refid="classBBufferIO_1a258e65360243a589e0725541e02146a6" prot="private" virt="virtual"><scope>BBufferIO</scope><name>_Reserved_BufferIO_4</name></member>
      <member refid="classBBufferIO_1a86caa929b1a97a8583e046d2999c0258" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>_reserved_ints</name></member>
      <member refid="classBBufferIO_1a48fbdf7ea0d409c492addc9636ec8d0e" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>BBufferIO</name></member>
      <member refid="classBDataIO_1a67891b7afe78d6a77845dd0352218801" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>BDataIO</name></member>
      <member refid="classBPositionIO_1a08051e865cd2623fab56c3733ecbf099" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>BPositionIO</name></member>
      <member refid="classBBufferIO_1a847813fab6391b1a21fad19bd1e41dae" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>BufferSize</name></member>
      <member refid="classBBufferIO_1ac7d938ab161dbd1f16ed4950676740c6" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fBuffer</name></member>
      <member refid="classBBufferIO_1a653fb8b7cb163e4bc424628d8a4a4a45" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fBufferIsDirty</name></member>
      <member refid="classBBufferIO_1ab81f6a02524bfa7feecf2ced241d153f" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fBufferSize</name></member>
      <member refid="classBBufferIO_1a256fd10da4679264c2766b212ecdc783" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fBufferStart</name></member>
      <member refid="classBBufferIO_1a5e529346bc7684aa67ec3955ec1b64c7" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fBufferUsed</name></member>
      <member refid="classBBufferIO_1a6c51066fea50d99b1b87228651c689f3" prot="public" virt="virtual"><scope>BBufferIO</scope><name>Flush</name></member>
      <member refid="classBBufferIO_1a22037dfb0acd987c50a0fb225ff79927" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fOwnsStream</name></member>
      <member refid="classBBufferIO_1af593f087d0e8057b4c80f624c86b952e" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fPosition</name></member>
      <member refid="classBBufferIO_1a8581bda78defe5d74406a01a279da5f9" prot="private" virt="non-virtual"><scope>BBufferIO</scope><name>fStream</name></member>
      <member refid="classBPositionIO_1a5be704340522f36f80697c6bc883a00d" prot="public" virt="virtual"><scope>BBufferIO</scope><name>GetSize</name></member>
      <member refid="classBBufferIO_1a830fee2824d387c64ae8855c13ba872a" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>OwnsStream</name></member>
      <member refid="classBBufferIO_1a83acd23044df368781a9069191492cf7" prot="public" virt="virtual"><scope>BBufferIO</scope><name>Position</name></member>
      <member refid="classBBufferIO_1aa6c5bb0b0a3c2fba56b2faced6044ef3" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>PrintToStream</name></member>
      <member refid="classBPositionIO_1abce66c314f7cbd5ab6de0e6480bd7a00" prot="public" virt="virtual"><scope>BBufferIO</scope><name>Read</name></member>
      <member refid="classBBufferIO_1a7887fde998d8629c6a4063ba5c3e41aa" prot="public" virt="virtual"><scope>BBufferIO</scope><name>ReadAt</name></member>
      <member refid="classBPositionIO_1a91bab7ae60926dbe3726bc73734318b6" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>ReadAtExactly</name></member>
      <member refid="classBDataIO_1a3a0b0fc36232531a1d8c1144a7d75741" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>ReadExactly</name></member>
      <member refid="classBBufferIO_1a7ba7f66e172e2d7ad87a114069028876" prot="public" virt="virtual"><scope>BBufferIO</scope><name>Seek</name></member>
      <member refid="classBBufferIO_1ab47ac843be8304193fa1e99c720703e1" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>SetOwnsStream</name></member>
      <member refid="classBBufferIO_1aed5125f4b157b0e5208cd39aa0af0d77" prot="public" virt="virtual"><scope>BBufferIO</scope><name>SetSize</name></member>
      <member refid="classBBufferIO_1a2a50815b961ccd527b7e1b10e7dc7281" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>Stream</name></member>
      <member refid="classBPositionIO_1a50ec7f6b834893a153d46c0f3c0e09c4" prot="public" virt="virtual"><scope>BBufferIO</scope><name>Write</name></member>
      <member refid="classBBufferIO_1a949b030b3fd3dc93be06d39f627f2bce" prot="public" virt="virtual"><scope>BBufferIO</scope><name>WriteAt</name></member>
      <member refid="classBPositionIO_1a18100db340087226321c332182816d27" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>WriteAtExactly</name></member>
      <member refid="classBDataIO_1a0095cfffa454a82eac3dedda2e187ab7" prot="public" virt="non-virtual"><scope>BBufferIO</scope><name>WriteExactly</name></member>
      <member refid="classBBufferIO_1a3318cecf9a1780b332fe157656113006" prot="public" virt="virtual"><scope>BBufferIO</scope><name>~BBufferIO</name></member>
      <member refid="classBDataIO_1a45daa9db670dd2e5b83efcefcf8dbaed" prot="public" virt="virtual"><scope>BBufferIO</scope><name>~BDataIO</name></member>
      <member refid="classBPositionIO_1a505defae83a1a6937c77b9acac2aaafe" prot="public" virt="virtual"><scope>BBufferIO</scope><name>~BPositionIO</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
