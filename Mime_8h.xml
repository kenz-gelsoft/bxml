<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Mime_8h" kind="file" language="C++">
    <compoundname>Mime.h</compoundname>
    <includes local="no">sys/types.h</includes>
    <includes refid="SupportDefs_8h" local="no">SupportDefs.h</includes>
    <includes refid="StorageDefs_8h" local="no">StorageDefs.h</includes>
    <includes refid="TypeConstants_8h" local="no">TypeConstants.h</includes>
    <includes refid="MimeType_8h" local="no">MimeType.h</includes>
    <includedby refid="IconUtils_8h" local="no">IconUtils.h</includedby>
    <includedby refid="MimeType_8h" local="no">MimeType.h</includedby>
    <includedby refid="NodeInfo_8h" local="no">NodeInfo.h</includedby>
    <includedby refid="Volume_8h" local="no">Volume.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>Message.h</label>
        <link refid="Message_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Messenger.h</label>
        <link refid="Messenger_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Point.h</label>
        <link refid="Point_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Rect.h</label>
        <link refid="Rect_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Size.h</label>
        <link refid="Size_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Entry.h</label>
        <link refid="Entry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>File.h</label>
        <link refid="File_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Mime.h</label>
        <link refid="Mime_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>MimeType.h</label>
        <link refid="MimeType_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Node.h</label>
        <link refid="Node_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Statable.h</label>
        <link refid="Statable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>DataIO.h</label>
        <link refid="DataIO_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Flattenable.h</label>
        <link refid="Flattenable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SupportDefs.h</label>
        <link refid="SupportDefs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>TypeConstants.h</label>
        <link refid="TypeConstants_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>BeBuild.h</label>
      </node>
      <node id="9">
        <label>OS.h</label>
      </node>
      <node id="5">
        <label>inttypes.h</label>
      </node>
      <node id="22">
        <label>limits.h</label>
      </node>
      <node id="19">
        <label>math.h</label>
      </node>
      <node id="11">
        <label>new</label>
      </node>
      <node id="14">
        <label>sys/stat.h</label>
      </node>
      <node id="2">
        <label>sys/types.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>IconUtils.h</label>
        <link refid="IconUtils_8h"/>
      </node>
      <node id="5">
        <label>AppFileInfo.h</label>
        <link refid="AppFileInfo_8h"/>
      </node>
      <node id="1">
        <label>Mime.h</label>
        <link refid="Mime_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>MimeType.h</label>
        <link refid="MimeType_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>NodeInfo.h</label>
        <link refid="NodeInfo_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Volume.h</label>
        <link refid="Volume_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>VolumeRoster.h</label>
        <link refid="VolumeRoster_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17" prot="public" static="no" strong="no">
        <type></type>
        <name>@93</name>
        <enumvalue id="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17ab2b1ea3766699c428c6a94bc661d95a9" prot="public">
          <name>B_UPDATE_MIME_INFO_NO_FORCE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Files that already have a <computeroutput>BEOS:TYPE</computeroutput> attribute won&apos;t be updated. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17a91cc26e2d71dfab2cbb5fa3501ba5a05" prot="public">
          <name>B_UPDATE_MIME_INFO_FORCE_KEEP_TYPE</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Files that already have a <computeroutput>BEOS:TYPE</computeroutput> attribute will be updated too, but <computeroutput>BEOS:TYPE</computeroutput> itself will remain untouched. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17aaba0d06170b381254ecdf8eca2a3a24c" prot="public">
          <name>B_UPDATE_MIME_INFO_FORCE_UPDATE_ALL</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Similar to <computeroutput>B_UPDATE_MIME_INFO_FORCE_KEEP_TYPE</computeroutput>, but the <computeroutput>BEOS:TYPE</computeroutput> attribute will be updated too. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="22" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/Mime.h" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" prot="public" static="no" strong="no">
        <type></type>
        <name>icon_size</name>
        <enumvalue id="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15a788acb110dbd7d3c1533ebb556abe12d" prot="public">
          <name>B_LARGE_ICON</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32x32 &quot;Large&quot; icon.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15a91cdfdbe842569ef06c465c7de629ec6" prot="public">
          <name>B_MINI_ICON</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16x16 &quot;Mini&quot; icon.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="16" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/Mime.h" bodystart="16" bodyend="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Mime_8h_1a9e578e56ba490c90291f65d46dfc497d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t create_app_meta_mime</definition>
        <argsstring>(const char *path, int recursive, int synchronous, int force)</argsstring>
        <name>create_app_meta_mime</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recursive</declname>
        </param>
        <param>
          <type>int</type>
          <declname>synchronous</declname>
        </param>
        <param>
          <type>int</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Creates a MIME database entry for one or more applications. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>path</emphasis> points to an application file, a MIME DB entry is create for the application. If it points to a directory and <emphasis>recursive</emphasis> is not <computeroutput>NULL</computeroutput> then entries are created for all application files in the given directory tree. If path is <computeroutput>NULL</computeroutput> then all files are considered and <emphasis>recursive</emphasis> is ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to an application file, a directory, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recursive</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger recursive behavior if not <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synchronous</parametername>
</parameternamelist>
<parameterdescription>
<para>Waits until the operation is finished if not <computeroutput>NULL</computeroutput>, otherwise it returns immediately and the operation is done asynchronously. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries are created even if they do already exist if not <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine, an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="37" column="10" declfile="/boot/home/src/haiku/headers/os/storage/Mime.h" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Mime_8h_1a101dec79629525c00ec066d13bb56e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t get_device_icon</definition>
        <argsstring>(const char *device, BBitmap *icon, icon_size which)</argsstring>
        <name>get_device_icon</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Retrieves an icon associated with a given device into a <ref refid="classBBitmap" kindref="compound">BBitmap</ref>, C++ only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBBitmap" kindref="compound">BBitmap</ref> of the correct dimension to store the requested icon (16x16 for the mini and 32x32 for the large icon). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon to retrieve. Currently 16 (<computeroutput>B_MINI_ICON</computeroutput>) and 32 (<computeroutput>B_LARGE_ICON</computeroutput>) are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine, an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Retrieved the icon successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>device</emphasis> or <emphasis>icon</emphasis> was <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="48" column="10" declfile="/boot/home/src/haiku/headers/os/storage/Mime.h" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Mime_8h_1a8717a56a6511013cbae2085c915294a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t get_device_icon</definition>
        <argsstring>(const char *device, uint8 **_data, size_t *_size, type_code *_type)</argsstring>
        <name>get_device_icon</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> **</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>_size</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref> *</type>
          <declname>_type</declname>
        </param>
        <briefdescription>
<para>Try to get the icon by name first, if that fails try to get the vector icon, C++ only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer to an array of uint8 pixel data to fill out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon to fill out. If vector, it is filled in with the width in pixels, if bitmap, one of the following constants:<itemizedlist>
<listitem><para><computeroutput>B_MINI_ICON</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_LARGE_ICON</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The icon type code to fill out, one of the following:<itemizedlist>
<listitem><para><computeroutput>B_MINI_ICON_TYPE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_LARGE_ICON_TYPE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_VECTOR_ICON_TYPE</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine, an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Retrieved the icon successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>device</emphasis>, <emphasis>_data</emphasis>, <emphasis>_size</emphasis>, or _type was <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="49" column="10" declfile="/boot/home/src/haiku/headers/os/storage/Mime.h" declline="49" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Mime_8h_1a976bf1f9aa837c56707a817404d403d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t get_device_icon</definition>
        <argsstring>(const char *device, void *icon, int32 size)</argsstring>
        <name>get_device_icon</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>icon</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Retrieves an icon associated with a given device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer the icon data shall be written to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon to retrieve. Currently 16 (<computeroutput>B_MINI_ICON</computeroutput>) and 32 (<computeroutput>B_LARGE_ICON</computeroutput>) are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine, an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Retrieved the icon successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>device</emphasis> or <emphasis>icon</emphasis> was <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Ran out of memory allocating bitmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="39" column="10" declfile="/boot/home/src/haiku/headers/os/storage/Mime.h" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Mime_8h_1a828f65ad4c0acecf6f44bc1ff69e6d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t get_named_icon</definition>
        <argsstring>(const char *name, BBitmap *icon, icon_size which)</argsstring>
        <name>get_named_icon</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Get the icon by name, C++ only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the icon to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBBitmap" kindref="compound">BBitmap</ref> of the correct dimension to store the requested icon (16x16 for the mini and 32x32 for the large icon). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon to retrieve. Currently 16 (<computeroutput>B_MINI_ICON</computeroutput>) and 32 (<computeroutput>B_LARGE_ICON</computeroutput>) are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine, an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Retrieved the icon successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>name</emphasis> or <emphasis>icon</emphasis> was <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="52" column="10" declfile="/boot/home/src/haiku/headers/os/storage/Mime.h" declline="52" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Mime_8h_1a4b492eacc54ae569d91ab1f40ae17704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t get_named_icon</definition>
        <argsstring>(const char *name, uint8 **_data, size_t *_size, type_code *_type)</argsstring>
        <name>get_named_icon</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> **</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>_size</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref> *</type>
          <declname>_type</declname>
        </param>
        <briefdescription>
<para>Get the icon by name, C++ only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the icon to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer to an array of uint8 pixel data to fill out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon to fill out. If vector, it is filled in with the width in pixels, if bitmap, one of the following constants:<itemizedlist>
<listitem><para><computeroutput>B_MINI_ICON</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_LARGE_ICON</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The icon type code to fill out, one of the following:<itemizedlist>
<listitem><para><computeroutput>B_MINI_ICON_TYPE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_LARGE_ICON_TYPE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_VECTOR_ICON_TYPE</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine, an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Retrieved the icon successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>name</emphasis>, <emphasis>_data</emphasis>, <emphasis>_size</emphasis>, or <computeroutput>_type</computeroutput> was <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="53" column="10" declfile="/boot/home/src/haiku/headers/os/storage/Mime.h" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Mime_8h_1a858cba99ec2a245b3372f7da84838325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int update_mime_info</definition>
        <argsstring>(const char *path, int recursive, int synchronous, int force)</argsstring>
        <name>update_mime_info</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recursive</declname>
        </param>
        <param>
          <type>int</type>
          <declname>synchronous</declname>
        </param>
        <param>
          <type>int</type>
          <declname>force</declname>
        </param>
        <briefdescription>
<para>Updates the MIME information (i.e MIME type) for one or more files. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>path</emphasis> points to a file, the MIME information for this file are updated only. If it points to a directory and <emphasis>recursive</emphasis> is non-null, the information for all the files in the given directory tree are updated. If path is <computeroutput>NULL</computeroutput> all files are considered; <emphasis>recursive</emphasis> is ignored in this case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to a file or directory, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recursive</parametername>
</parameternamelist>
<parameterdescription>
<para>Triggers recursive behavior if not <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>synchronous</parametername>
</parameternamelist>
<parameterdescription>
<para>If not <computeroutput>NULL</computeroutput> <ref refid="Mime_8h_1a858cba99ec2a245b3372f7da84838325" kindref="member">update_mime_info()</ref> waits until the operation is finished, otherwise it returns immediately and the update is done asynchronously. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to handle files that already have MIME information. See enum definitions for more information:<itemizedlist>
<listitem><para><computeroutput>B_UPDATE_MIME_INFO_NO_FORCE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_UPDATE_MIME_INFO_FORCE_KEEP_TYPE</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_UPDATE_MIME_INFO_FORCE_UPDATE_ALL</computeroutput> </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine, an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Mime.h" line="35" column="5" declfile="/boot/home/src/haiku/headers/os/storage/Mime.h" declline="35" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides C and Haiku-only C++ MIME-type handling functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2004-2008,<sp/>Haiku<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>License.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MIME_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_MIME_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="SupportDefs_8h" kindref="compound">SupportDefs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;StorageDefs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="TypeConstants_8h" kindref="compound">TypeConstants.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref><sp/>{</highlight></codeline>
<codeline lineno="17" refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15a788acb110dbd7d3c1533ebb556abe12d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15a788acb110dbd7d3c1533ebb556abe12d" kindref="member">B_LARGE_ICON</ref><sp/><sp/><sp/><sp/>=<sp/>32,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15a91cdfdbe842569ef06c465c7de629ec6" kindref="member">B_MINI_ICON</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>16</highlight></codeline>
<codeline lineno="19" refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15a91cdfdbe842569ef06c465c7de629ec6" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>values<sp/>for<sp/>the<sp/>&quot;force&quot;<sp/>parameter<sp/>of<sp/>update_mime_info()<sp/>(Haiku<sp/>only)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23" refid="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17ab2b1ea3766699c428c6a94bc661d95a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17ab2b1ea3766699c428c6a94bc661d95a9" kindref="member">B_UPDATE_MIME_INFO_NO_FORCE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="24" refid="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17a91cc26e2d71dfab2cbb5fa3501ba5a05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17a91cc26e2d71dfab2cbb5fa3501ba5a05" kindref="member">B_UPDATE_MIME_INFO_FORCE_KEEP_TYPE</ref><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="25" refid="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17aaba0d06170b381254ecdf8eca2a3a24c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Mime_8h_1a9a3be2d66956bd67c0b66c32d8b30f17aaba0d06170b381254ecdf8eca2a3a24c" kindref="member">B_UPDATE_MIME_INFO_FORCE_UPDATE_ALL</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>C<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="Mime_8h_1a858cba99ec2a245b3372f7da84838325" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="Mime_8h_1a858cba99ec2a245b3372f7da84838325" kindref="member">update_mime_info</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursive,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>synchronous,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force);</highlight></codeline>
<codeline lineno="37" refid="Mime_8h_1a9e578e56ba490c90291f65d46dfc497d" refkind="member"><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/><ref refid="Mime_8h_1a9e578e56ba490c90291f65d46dfc497d" kindref="member">create_app_meta_mime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursive,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>synchronous,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force);</highlight></codeline>
<codeline lineno="39" refid="Mime_8h_1a976bf1f9aa837c56707a817404d403d1" refkind="member"><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/><ref refid="Mime_8h_1a976bf1f9aa837c56707a817404d403d1" kindref="member">get_device_icon</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>device,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>icon,<sp/><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/>size);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>C++<sp/>functions,<sp/>Haiku<sp/>only!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBBitmap" kindref="compound">BBitmap</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="Mime_8h_1a101dec79629525c00ec066d13bb56e87" refkind="member"><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/><ref refid="Mime_8h_1a976bf1f9aa837c56707a817404d403d1" kindref="member">get_device_icon</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>device,<sp/><ref refid="classBBitmap" kindref="compound">BBitmap</ref>*<sp/>icon,<sp/><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref><sp/>which);</highlight></codeline>
<codeline lineno="49" refid="Mime_8h_1a8717a56a6511013cbae2085c915294a5" refkind="member"><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/><ref refid="Mime_8h_1a976bf1f9aa837c56707a817404d403d1" kindref="member">get_device_icon</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>device,<sp/><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref>**<sp/>_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>_size,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref>*<sp/>_type);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="Mime_8h_1a828f65ad4c0acecf6f44bc1ff69e6d4f" refkind="member"><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/><ref refid="Mime_8h_1a828f65ad4c0acecf6f44bc1ff69e6d4f" kindref="member">get_named_icon</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/><ref refid="classBBitmap" kindref="compound">BBitmap</ref>*<sp/>icon,<sp/><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref><sp/>which);</highlight></codeline>
<codeline lineno="53" refid="Mime_8h_1a4b492eacc54ae569d91ab1f40ae17704" refkind="member"><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/><ref refid="Mime_8h_1a828f65ad4c0acecf6f44bc1ff69e6d4f" kindref="member">get_named_icon</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref>**<sp/>_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>_size,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref>*<sp/>_type);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>include<sp/>MimeType.h<sp/>for<sp/>convenience<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;<ref refid="MimeType_8h" kindref="compound">MimeType.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>_MIME_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/boot/home/src/haiku/headers/os/storage/Mime.h"/>
  </compounddef>
</doxygen>
