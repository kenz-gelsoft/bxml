<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBFileInterface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BFileInterface</compoundname>
    <basecompoundref refid="classBMediaNode" prot="public" virt="virtual">BMediaNode</basecompoundref>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBFileInterface_1ae7f4ad1aafb45f9a3ee3faff0214396f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMediaNode</definition>
        <argsstring></argsstring>
        <name>BMediaNode</name>
        <qualifiedname>BFileInterface::BMediaNode</qualifiedname>
        <param>
          <type><ref refid="classBMediaNode" kindref="compound">BMediaNode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="41" column="14" bodyfile="/boot/home/src/haiku/headers/os/media/FileInterface.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBFileInterface_1a3759eab3ec58a6d50c3a51b10ab3cf95" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BFileInterface::_reserved_file_interface_[16]</definition>
        <argsstring>[16]</argsstring>
        <name>_reserved_file_interface_</name>
        <qualifiedname>BFileInterface::_reserved_file_interface_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="63" column="7" bodyfile="/boot/home/src/haiku/headers/os/media/FileInterface.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBFileInterface_1ae3a5749bb67df08ad3e50132a572ebb4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BFileInterface::BFileInterface</definition>
        <argsstring>()</argsstring>
        <name>BFileInterface</name>
        <qualifiedname>BFileInterface::BFileInterface</qualifiedname>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a9f1355c5ffecbba9f882de0f61f9c778" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BFileInterface::~BFileInterface</definition>
        <argsstring>()</argsstring>
        <name>~BFileInterface</name>
        <qualifiedname>BFileInterface::~BFileInterface</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="17" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a99d5c4dfe9b028110fb3693bf97fcc1a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>void BFileInterface::DisposeFileFormatCookie</definition>
        <argsstring>(int32 cookie)=0</argsstring>
        <name>DisposeFileFormatCookie</name>
        <qualifiedname>BFileInterface::DisposeFileFormatCookie</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
<para>Implement this method to dispose of a file format supported by your node indexed by <emphasis>cookie</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>You are responsible for freeing any data blocks associated with this <emphasis>cookie</emphasis> before returning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the cookie you wish to dispose of. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="27" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1af16daa3210ffc3399cf8aa749895523f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFileInterface::GetDuration</definition>
        <argsstring>(bigtime_t *_time)=0</argsstring>
        <name>GetDuration</name>
        <qualifiedname>BFileInterface::GetDuration</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref> *</type>
          <declname>_time</declname>
        </param>
        <briefdescription>
<para>Implement this method to fill out the duration in microseconds of the media data contained in the currently referenced file in <emphasis>_time</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The duration parameter to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, typically <computeroutput>B_OK</computeroutput> on success and <computeroutput>B_ERROR</computeroutput> or another error code on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="29" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a5cc3b4a49d5ade8a1357c4163a62c2e5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFileInterface::GetNextFileFormat</definition>
        <argsstring>(int32 *cookie, media_file_format *_format)=0</argsstring>
        <name>GetNextFileFormat</name>
        <qualifiedname>BFileInterface::GetNextFileFormat</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>media_file_format *</type>
          <declname>_format</declname>
        </param>
        <briefdescription>
<para>Implement this method to fill out information about a file format indexed by <emphasis>cookie</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The first time this method is called <emphasis>cookie</emphasis> will be set to 0. In your implementation you should set information about the first file format you support in <emphasis>_format</emphasis> and set <emphasis>cookie</emphasis> to some meaningful non-zero value to track your positing in the list of supported formats, then return <computeroutput>B_OK</computeroutput>.</para>
<para>On successive calls return successive file format information and update <emphasis>cookie</emphasis> to track your position in the list. Each time you return new information about a file format return <computeroutput>B_OK</computeroutput>.</para>
<para>Once you run out of formats return <computeroutput>B_ERROR</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of file format to fill out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_format</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a preallocated <computeroutput>media_file_format</computeroutput> object to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if a file format was filled out for <emphasis>cookie</emphasis>, <computeroutput>B_ERROR</computeroutput> or an appropriate error code otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="25" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a7544c7072ce649af46863a872f31d9b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFileInterface::GetRef</definition>
        <argsstring>(entry_ref *_ref, char *_mimeType)=0</argsstring>
        <name>GetRef</name>
        <qualifiedname>BFileInterface::GetRef</qualifiedname>
        <param>
          <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>_ref</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>_mimeType</declname>
        </param>
        <briefdescription>
<para>Implement to set the <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> and the MIME type of the file referenced by the current node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to the <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to the MIME type of the current file.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or an appropriate error code such as <computeroutput>B_ERROR</computeroutput> on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="35" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1ab69c5000ffe084e34af54d1f2ad641e7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFileInterface::HandleMessage</definition>
        <argsstring>(int32 message, const void *data, size_t size)</argsstring>
        <name>HandleMessage</name>
        <qualifiedname>BFileInterface::HandleMessage</qualifiedname>
        <reimplements refid="classBMediaNode_1aeb6e35269350dee6db103b93715bf599">HandleMessage</reimplements>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>message</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Dispatches a message to the appropriate <ref refid="classBMediaNode" kindref="compound">BMediaNode</ref> hook method given a message received on the control port. Implement this method to handle messages that arrive on your control port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The message data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the message data in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Message was dispatched. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error dispatching the message, possibly because it doesn&apos;t correspond to a hook function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>BMediaNode::HandleMessage() for details. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="22" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a95b3bf9e479102fe094c007cfdb8d7cd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFileInterface::SetRef</definition>
        <argsstring>(const entry_ref &amp;file, bool create, bigtime_t *_time)=0</argsstring>
        <name>SetRef</name>
        <qualifiedname>BFileInterface::SetRef</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>create</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref> *</type>
          <declname>_time</declname>
        </param>
        <briefdescription>
<para>Used when an application wants your node to use a specific file. </para>
        </briefdescription>
        <detaileddescription>
<para>The file specified by <emphasis>file</emphasis> may or may not exist.</para>
<para>If create is <computeroutput>false</computeroutput> you should try to open the existing file, and if successful you should write the running time of the file into <emphasis>_time</emphasis>. If you the file does not exist you should return <computeroutput>B_ENTRY_NOT_FOUND</computeroutput>.</para>
<para>If <emphasis>create</emphasis> is <computeroutput>true</computeroutput> you should create a new file, initialize the file for writing, and store 0 in <emphasis>_time</emphasis>. You should overwrite the file if it already exists.</para>
<para><simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or an appropriate error code such as <computeroutput>B_ERROR</computeroutput> or <computeroutput>B_ENTRY_NOT_FOUND</computeroutput> on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="33" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a98d7947526061d8ee32474ecba68bc90" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFileInterface::SniffRef</definition>
        <argsstring>(const entry_ref &amp;file, char *_mimeType, float *_quality)=0</argsstring>
        <name>SniffRef</name>
        <qualifiedname>BFileInterface::SniffRef</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>_mimeType</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>_quality</declname>
        </param>
        <briefdescription>
<para>Implement this method to allow the Media Roster to identify a file format associated with this node. </para>
        </briefdescription>
        <detaileddescription>
<para>If you can handle the format, set <emphasis>_mimeType</emphasis> to the MIME type of the file format and set <emphasis>_quality</emphasis> to indicate how well you can process the file.</para>
<para>A <emphasis>_quality</emphasis> of 0.0 means that you can&apos;t handle the file format at all and an <emphasis>_quality</emphasis> of 1.0 means you have total control over the file format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file being sniffed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>Fill this out with the appropriate MIME type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_quality</parametername>
</parameternamelist>
<parameterdescription>
<para>How well you are able to handle the file format from 0.0 to 1.0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if you can identify the file&apos;s contents, otherwise return an appropriate error code. If you can&apos;t handle the file format at all, you should return <computeroutput>B_MEDIA_NO_HANDLER</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="30" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBFileInterface_1a2daaffae9bf822438bbd64407d050f06" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BFileInterface::BFileInterface</definition>
        <argsstring>(const BFileInterface &amp;other)</argsstring>
        <name>BFileInterface</name>
        <qualifiedname>BFileInterface::BFileInterface</qualifiedname>
        <param>
          <type>const <ref refid="classBFileInterface" kindref="compound">BFileInterface</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1ab8860e4968212afee3160bd053cbbd4e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_0</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_0</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_0</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="46" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a3c3d683b9740e13d31d1aaa76ab190d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_1</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_1</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_1</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="47" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1acdbbbe54c1263f6ac970aece90975240" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_10</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_10</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_10</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="56" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a8a78d6c9ddabdc0f9cc3e60c75539590" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_11</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_11</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_11</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="57" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a6593d6d19246ceead6e6d350b7a3debe" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_12</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_12</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_12</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="58" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1abdb76abcc0e50c741c43dcfdf0129901" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_13</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_13</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_13</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="59" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a4598c025562376ced71e47f6e5b52fdf" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_14</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_14</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_14</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="60" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a761912127572230455c9e238d18fe635" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_15</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_15</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_15</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="61" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1abb9f2b2abd3c036cf66fcf251c1f12be" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_2</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_2</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_2</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="48" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1acd8e555f52494223f78274f8c6a49373" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_3</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_3</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_3</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="49" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1ab2cf90d39f7887ef890f4906e00e58f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_4</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_4</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_4</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="50" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1ad4b043cddb575d7cacd056da73b406a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_5</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_5</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_5</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="51" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a99f3eec493ad63d3b2fe4f51ab5e6d70" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_6</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_6</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_6</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="52" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a7b4e7ea2b22ed7205d7f1f6cccd4b3a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_7</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_7</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_7</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="53" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1a4f5886be4adf99483cddda3890ddd5af" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_8</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_8</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_8</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="54" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1ad897336f11e6cf1f236625ff1415aa15" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BFileInterface::_Reserved_FileInterface_9</definition>
        <argsstring>(void *)</argsstring>
        <name>_Reserved_FileInterface_9</name>
        <qualifiedname>BFileInterface::_Reserved_FileInterface_9</qualifiedname>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="55" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBFileInterface_1adf7eb387cf7b9e44e16eafa3dccced76" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBFileInterface" kindref="compound">BFileInterface</ref> &amp;</type>
        <definition>BFileInterface &amp; BFileInterface::operator=</definition>
        <argsstring>(const BFileInterface &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BFileInterface::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBFileInterface" kindref="compound">BFileInterface</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="44" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A node that can read and write data to a file on disk. </para>
    </briefdescription>
    <detaileddescription>
<para>You should derive your subclass from <ref refid="classBFileInterface" kindref="compound">BFileInterface</ref> so that your application may specify the file that the node will reference. The Media Server will then call upon the node to try to identify and work with files that are hereunto unknown to it.</para>
<para>Your node must also derive from BBufferConsumer or BBufferProducer, in addition to <ref refid="classBFileInterface" kindref="compound">BFileInterface</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BFileInterface</label>
        <link refid="classBFileInterface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BMediaNode</label>
        <link refid="classBMediaNode"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BFileInterface</label>
        <link refid="classBFileInterface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BMediaNode</label>
        <link refid="classBMediaNode"/>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/media/FileInterface.h" line="15" column="1" bodyfile="/boot/home/src/haiku/headers/os/media/FileInterface.h" bodystart="15" bodyend="64"/>
    <listofallmembers>
      <member refid="classBFileInterface_1a3759eab3ec58a6d50c3a51b10ab3cf95" prot="private" virt="non-virtual"><scope>BFileInterface</scope><name>_reserved_file_interface_</name></member>
      <member refid="classBFileInterface_1ab8860e4968212afee3160bd053cbbd4e" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_0</name></member>
      <member refid="classBFileInterface_1a3c3d683b9740e13d31d1aaa76ab190d5" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_1</name></member>
      <member refid="classBFileInterface_1acdbbbe54c1263f6ac970aece90975240" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_10</name></member>
      <member refid="classBFileInterface_1a8a78d6c9ddabdc0f9cc3e60c75539590" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_11</name></member>
      <member refid="classBFileInterface_1a6593d6d19246ceead6e6d350b7a3debe" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_12</name></member>
      <member refid="classBFileInterface_1abdb76abcc0e50c741c43dcfdf0129901" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_13</name></member>
      <member refid="classBFileInterface_1a4598c025562376ced71e47f6e5b52fdf" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_14</name></member>
      <member refid="classBFileInterface_1a761912127572230455c9e238d18fe635" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_15</name></member>
      <member refid="classBFileInterface_1abb9f2b2abd3c036cf66fcf251c1f12be" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_2</name></member>
      <member refid="classBFileInterface_1acd8e555f52494223f78274f8c6a49373" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_3</name></member>
      <member refid="classBFileInterface_1ab2cf90d39f7887ef890f4906e00e58f6" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_4</name></member>
      <member refid="classBFileInterface_1ad4b043cddb575d7cacd056da73b406a7" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_5</name></member>
      <member refid="classBFileInterface_1a99f3eec493ad63d3b2fe4f51ab5e6d70" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_6</name></member>
      <member refid="classBFileInterface_1a7b4e7ea2b22ed7205d7f1f6cccd4b3a1" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_7</name></member>
      <member refid="classBFileInterface_1a4f5886be4adf99483cddda3890ddd5af" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_8</name></member>
      <member refid="classBFileInterface_1ad897336f11e6cf1f236625ff1415aa15" prot="private" virt="virtual"><scope>BFileInterface</scope><name>_Reserved_FileInterface_9</name></member>
      <member refid="classBMediaNode_1a1d7a95a44994e683a5fbe7d9773cec0b" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>Acquire</name></member>
      <member refid="classBMediaNode_1abb9e4ecd556ee1a952377ceab7a6040a" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>AddNodeKind</name></member>
      <member refid="classBMediaNode_1a684d078c99ea93b8fc0c01edfe909aba" prot="public" virt="pure-virtual"><scope>BFileInterface</scope><name>AddOn</name></member>
      <member refid="classBMediaNode_1ac27baba88cb72f97c3cd5da98ca9f8f5" prot="public" virt="virtual"><scope>BFileInterface</scope><name>AddTimer</name></member>
      <member refid="classBMediaNode_1a0164ded56d6f66562134c70a5b5c10faa53e239e0a01a0444e4994b5306bf6ec8" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_DECREASE_PRECISION</name></member>
      <member refid="classBMediaNode_1a0164ded56d6f66562134c70a5b5c10faae71ef69f78e67b687a029d9715c8ca75" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_DROP_DATA</name></member>
      <member refid="classBMediaNode_1a0164ded56d6f66562134c70a5b5c10faaf05092b5c72de037b9c4a869d3cb7ffc" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_INCREASE_LATENCY</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507ba6287d8e20756ebb8175444a2559fd374" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_FAILED_PREROLL</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507ba7e74043d2d0bf682d1f59e37df7588b2" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_FAILED_SEEK</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507baf1ee428bb2e4989e8a89e82c2bb76e1d" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_FAILED_SET_RUN_MODE</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507baab261b086b38099eb293c16ecc5d15dc" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_FAILED_SET_TIME_SOURCE_FOR</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507ba6987a7238276ba621f408c14a3d961df" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_FAILED_START</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507babc274e7c8d22f8f9909670a7517806f1" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_FAILED_STOP</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507baf57c17af5c8074cbb26c14847e4728eb" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_FAILED_TIME_WARP</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507ba024edc817ac86524f4c06bc993ef6f12" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_NODE_IN_DISTRESS</name></member>
      <member refid="classBMediaNode_1a0164ded56d6f66562134c70a5b5c10faae1be9ad405d3e7902cf21f0c8c9b8ff6" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_OFFLINE</name></member>
      <member refid="classBMediaNode_1a0164ded56d6f66562134c70a5b5c10faa87f18bf585fab9829b50d9ce28bcdf50" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>B_RECORDING</name></member>
      <member refid="classBFileInterface_1ae3a5749bb67df08ad3e50132a572ebb4" prot="protected" virt="non-virtual"><scope>BFileInterface</scope><name>BFileInterface</name></member>
      <member refid="classBFileInterface_1a2daaffae9bf822438bbd64407d050f06" prot="private" virt="non-virtual"><scope>BFileInterface</scope><name>BFileInterface</name></member>
      <member refid="classBMediaNode_1aa97658b152884edd258e49b113111cff" prot="protected" virt="non-virtual"><scope>BFileInterface</scope><name>BMediaNode</name></member>
      <member refid="classBMediaNode_1a07755c01a6f6b51c913b7abf6f1f7e2d" prot="public" virt="virtual"><scope>BFileInterface</scope><name>ControlPort</name></member>
      <member refid="classBMediaNode_1add44db1eebd51d2c4e8ce50bc13d78d2" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>DeleteHook</name></member>
      <member refid="classBFileInterface_1a99d5c4dfe9b028110fb3693bf97fcc1a" prot="protected" virt="pure-virtual"><scope>BFileInterface</scope><name>DisposeFileFormatCookie</name></member>
      <member refid="classBFileInterface_1af16daa3210ffc3399cf8aa749895523f" prot="protected" virt="pure-virtual"><scope>BFileInterface</scope><name>GetDuration</name></member>
      <member refid="classBFileInterface_1a5cc3b4a49d5ade8a1357c4163a62c2e5" prot="protected" virt="pure-virtual"><scope>BFileInterface</scope><name>GetNextFileFormat</name></member>
      <member refid="classBMediaNode_1a5e22528f968029a1e6ac57487970e81c" prot="public" virt="virtual"><scope>BFileInterface</scope><name>GetNodeAttributes</name></member>
      <member refid="classBFileInterface_1a7544c7072ce649af46863a872f31d9b3" prot="protected" virt="pure-virtual"><scope>BFileInterface</scope><name>GetRef</name></member>
      <member refid="classBMediaNode_1ae59174fa9687b3e9a950797311d5de07" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>HandleBadMessage</name></member>
      <member refid="classBFileInterface_1ab69c5000ffe084e34af54d1f2ad641e7" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>HandleMessage</name></member>
      <member refid="classBMediaNode_1aef05bbf69f65cdfcb30aa26951df3195" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>ID</name></member>
      <member refid="classBMediaNode_1a90420755935f03aba3814a4055ffcff4" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>Kinds</name></member>
      <member refid="classBMediaNode_1aea8c326b2652bb51f23989c6827f536f" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>Name</name></member>
      <member refid="classBMediaNode_1a34e6e2796841b1f72098bb0148abe3d1" prot="protected" virt="non-virtual"><scope>BFileInterface</scope><name>NewChangeTag</name></member>
      <member refid="classBMediaNode_1a9dea97145e5736f26aea5155adc5b067" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>Node</name></member>
      <member refid="classBMediaNode_1a6ec1afb6ca969dabe912b55090f7507b" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>node_error</name></member>
      <member refid="classBMediaNode_1a108a3f8ca79ee17cc1bbfef6ed95b965" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>NodeRegistered</name></member>
      <member refid="classBMediaNode_1a4c7e3ff79948e54c18d1561c645f0685" prot="protected" virt="non-virtual"><scope>BFileInterface</scope><name>NodeStopped</name></member>
      <member refid="classBMediaNode_1ab7de1837c2bd8acd46f595010409f26d" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>operator delete</name></member>
      <member refid="classBMediaNode_1acceb2b1d83f73056a7db7bca38b23566" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>operator delete</name></member>
      <member refid="classBMediaNode_1a6ff8c34b27c2a84024e5c1c39bb6f6f5" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>operator new</name></member>
      <member refid="classBMediaNode_1a41f8f6423db4cfabb855499e1ab2fabf" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>operator new</name></member>
      <member refid="classBFileInterface_1adf7eb387cf7b9e44e16eafa3dccced76" prot="private" virt="non-virtual"><scope>BFileInterface</scope><name>operator=</name></member>
      <member refid="classBMediaNode_1a497a250d073d41ce75201db32a8e0125" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>Preroll</name></member>
      <member refid="classBMediaNode_1aff22551282ffa2eeb8b6119c4401e7b3" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>Release</name></member>
      <member refid="classBMediaNode_1ac44700b130d61c4645794e122ba848cc" prot="protected" virt="non-virtual"><scope>BFileInterface</scope><name>ReportError</name></member>
      <member refid="classBMediaNode_1a3c141af921190e33070c47fac0ea53dd" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>RequestCompleted</name></member>
      <member refid="classBMediaNode_1a0164ded56d6f66562134c70a5b5c10fa" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>run_mode</name></member>
      <member refid="classBMediaNode_1aa7a30dd62f4e67e68e847c60a9b40833" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>RunMode</name></member>
      <member refid="classBMediaNode_1a339fea8f2213e134385762963d5a8698" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>Seek</name></member>
      <member refid="classBFileInterface_1a95b3bf9e479102fe094c007cfdb8d7cd" prot="protected" virt="pure-virtual"><scope>BFileInterface</scope><name>SetRef</name></member>
      <member refid="classBMediaNode_1ab7c3d78f7c02aed7f95ed25cfe88e8e2" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>SetRunMode</name></member>
      <member refid="classBMediaNode_1a3f3ff4c9e9b440348a2d8c01b9afac34" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>SetTimeSource</name></member>
      <member refid="classBFileInterface_1a98d7947526061d8ee32474ecba68bc90" prot="protected" virt="pure-virtual"><scope>BFileInterface</scope><name>SniffRef</name></member>
      <member refid="classBMediaNode_1a9709f261325b9471c66a99d468fbbddf" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>Start</name></member>
      <member refid="classBMediaNode_1a2414120e97f847b0a5ff464cbcc2f2b8" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>Stop</name></member>
      <member refid="classBMediaNode_1a8cd74d3554a10f9d290241bc8196d782" prot="protected" virt="non-virtual"><scope>BFileInterface</scope><name>TimerExpired</name></member>
      <member refid="classBMediaNode_1aad220ea22e8989a0bf4965b35ebba9f7" prot="public" virt="non-virtual"><scope>BFileInterface</scope><name>TimeSource</name></member>
      <member refid="classBMediaNode_1a902334b78bc93a4d000411d6842f500d" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>TimeWarp</name></member>
      <member refid="classBMediaNode_1a1ce1a30cc7cc78a79ffde101306f3273" prot="protected" virt="non-virtual"><scope>BFileInterface</scope><name>WaitForMessage</name></member>
      <member refid="classBFileInterface_1a9f1355c5ffecbba9f882de0f61f9c778" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>~BFileInterface</name></member>
      <member refid="classBMediaNode_1a27b10b3b1186318f3be8f344b89f94a8" prot="protected" virt="virtual"><scope>BFileInterface</scope><name>~BMediaNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
