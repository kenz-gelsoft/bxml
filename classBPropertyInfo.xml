<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPropertyInfo" kind="class" language="C++" prot="public">
    <compoundname>BPropertyInfo</compoundname>
    <basecompoundref refid="classBFlattenable" prot="public" virt="non-virtual">BFlattenable</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPropertyInfo_1a12cb5d9c0b06bfc47a33bb72c8cde4ab" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BPropertyInfo::_reserved[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BPropertyInfo::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="101" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPropertyInfo_1a9b39fe574aa8e2ec92af8415324547ea" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BPropertyInfo::fInHeap</definition>
        <argsstring></argsstring>
        <name>fInHeap</name>
        <qualifiedname>BPropertyInfo::fInHeap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="99" column="5" bodyfile="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPropertyInfo_1ac4e39a762f858bb4674d63ff8c13b8bb" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BPropertyInfo::fPropCount</definition>
        <argsstring></argsstring>
        <name>fPropCount</name>
        <qualifiedname>BPropertyInfo::fPropCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="98" column="6" bodyfile="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPropertyInfo_1ac0ffee8a802db36efd56ed470e730756" prot="private" static="no" mutable="no">
        <type><ref refid="structproperty__info" kindref="compound">property_info</ref> *</type>
        <definition>property_info* BPropertyInfo::fPropInfo</definition>
        <argsstring></argsstring>
        <name>fPropInfo</name>
        <qualifiedname>BPropertyInfo::fPropInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="96" column="14" bodyfile="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPropertyInfo_1a07431fbe93ec7df8af07eb748d721dad" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BPropertyInfo::fValueCount</definition>
        <argsstring></argsstring>
        <name>fValueCount</name>
        <qualifiedname>BPropertyInfo::fValueCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="100" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPropertyInfo_1ad547f316980a31ad3254a0cd2dbd2a7f" prot="private" static="no" mutable="no">
        <type>value_info *</type>
        <definition>value_info* BPropertyInfo::fValueInfo</definition>
        <argsstring></argsstring>
        <name>fValueInfo</name>
        <qualifiedname>BPropertyInfo::fValueInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="97" column="11" bodyfile="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPropertyInfo_1ac125ac852be44e17bc30c60d62323ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPropertyInfo::BPropertyInfo</definition>
        <argsstring>(property_info *prop=NULL, value_info *value=NULL, bool freeOnDelete=false)</argsstring>
        <name>BPropertyInfo</name>
        <qualifiedname>BPropertyInfo::BPropertyInfo</qualifiedname>
        <param>
          <type><ref refid="structproperty__info" kindref="compound">property_info</ref> *</type>
          <declname>prop</declname>
          <defname>propertyInfo</defname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>value_info *</type>
          <declname>value</declname>
          <defname>valueInfo</defname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>freeOnDelete</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Initializes the object with the specified NULL-terminated arrays <emphasis>propertyInfo</emphasis> and <emphasis>valueInfo</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The arrays are not copied so do not modify or delete the arrays while they are in use by <ref refid="classBPropertyInfo" kindref="compound">BPropertyInfo</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>propertyInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>The NULL-terminated properties array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valueInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>The NULL-terminated values array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freeOnDelete</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, free the memory associated with <emphasis>propertyInfo</emphasis> and <emphasis>valueInfo</emphasis> when the object is destroyed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1aa551f86d3802a646b2facd070bb6eb66" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BPropertyInfo::~BPropertyInfo</definition>
        <argsstring>()</argsstring>
        <name>~BPropertyInfo</name>
        <qualifiedname>BPropertyInfo::~BPropertyInfo</qualifiedname>
        <briefdescription>
<para>Destructor method. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>freeOnDelete</emphasis> is set to <computeroutput>true</computeroutput> in the constructor this method frees all memory associated with <emphasis>propertyInfo</emphasis> and <emphasis>valueInfo</emphasis>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="60" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a52ef3962ccae6efe91780df25c2c043a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BPropertyInfo::AllowsTypeCode</definition>
        <argsstring>(type_code code) const</argsstring>
        <name>AllowsTypeCode</name>
        <qualifiedname>BPropertyInfo::AllowsTypeCode</qualifiedname>
        <reimplements refid="classBFlattenable_1a30165696bba76fed10e37508cc4f6925">AllowsTypeCode</reimplements>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if <emphasis>code</emphasis> is B_PROPERTY_INFO_TYPE, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBFlattenable_1a30165696bba76fed10e37508cc4f6925" kindref="member">BFlattenable::AllowsTypeCode()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="70" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a656448b6f78eb446875a6bf597369215" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BPropertyInfo::CountProperties</definition>
        <argsstring>() const</argsstring>
        <name>CountProperties</name>
        <qualifiedname>BPropertyInfo::CountProperties</qualifiedname>
        <briefdescription>
<para>Returns The number of properties specified as an int32. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="76" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a5b2742b582dacf23dd4557c2ad48ba68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BPropertyInfo::CountValues</definition>
        <argsstring>() const</argsstring>
        <name>CountValues</name>
        <qualifiedname>BPropertyInfo::CountValues</qualifiedname>
        <briefdescription>
<para>Returns The number of values specified as an int32. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="77" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1aeceb1f3e070b4b4604d0ec02af1bba23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BPropertyInfo::FindMatch</definition>
        <argsstring>(BMessage *msg, int32 index, BMessage *specifier, int32 form, const char *prop, void *data=NULL) const</argsstring>
        <name>FindMatch</name>
        <qualifiedname>BPropertyInfo::FindMatch</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>msg</declname>
          <defname>message</defname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>specifier</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>form</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prop</declname>
          <defname>property</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="62" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a141a4d054c98424d677af1aecdb8e176" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPropertyInfo::Flatten</definition>
        <argsstring>(void *buffer, ssize_t size) const</argsstring>
        <name>Flatten</name>
        <qualifiedname>BPropertyInfo::Flatten</qualifiedname>
        <reimplements refid="classBFlattenable_1ab934b64a8b218a4f9078ded191be6fbb">Flatten</reimplements>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
          <defname>numBytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBFlattenable_1ab934b64a8b218a4f9078ded191be6fbb" kindref="member">BFlattenable::Flatten()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="69" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a326574fe08e91224d95e1c4943396bb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BPropertyInfo::FlattenedSize</definition>
        <argsstring>() const</argsstring>
        <name>FlattenedSize</name>
        <qualifiedname>BPropertyInfo::FlattenedSize</qualifiedname>
        <reimplements refid="classBFlattenable_1a9b5885d4454326ca448438960ecff466">FlattenedSize</reimplements>
        <briefdescription>
<para>Returns the size of the flattened object in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBFlattenable_1a9b5885d4454326ca448438960ecff466" kindref="member">BFlattenable::FlattenedSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="68" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a33f147be78c14a2a0da3a45d21391bf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BPropertyInfo::IsFixedSize</definition>
        <argsstring>() const</argsstring>
        <name>IsFixedSize</name>
        <qualifiedname>BPropertyInfo::IsFixedSize</qualifiedname>
        <reimplements refid="classBFlattenable_1ac019f502749a0cc78082f5ec7c8f5b56">IsFixedSize</reimplements>
        <briefdescription>
<para>Always returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBFlattenable_1ac019f502749a0cc78082f5ec7c8f5b56" kindref="member">BFlattenable::IsFixedSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="66" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1acc46b72a11086c54337b6231d758cae0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPropertyInfo::PrintToStream</definition>
        <argsstring>() const</argsstring>
        <name>PrintToStream</name>
        <qualifiedname>BPropertyInfo::PrintToStream</qualifiedname>
        <briefdescription>
<para>Prints each property, command, type, and specifier to standard output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1ac08ebb5e8faefa538c19f6fdcf745d97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structproperty__info" kindref="compound">property_info</ref> *</type>
        <definition>const property_info * BPropertyInfo::Properties</definition>
        <argsstring>() const</argsstring>
        <name>Properties</name>
        <qualifiedname>BPropertyInfo::Properties</qualifiedname>
        <briefdescription>
<para>Returns the properties as a <computeroutput><ref refid="structproperty__info" kindref="compound">property_info</ref></computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the pointer directly, does not make copy.</para>
<para>Called PropertyInfo() in the BeBook.</para>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="74" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a9217a74cb2653b6f63472166c4373196" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
        <definition>type_code BPropertyInfo::TypeCode</definition>
        <argsstring>() const</argsstring>
        <name>TypeCode</name>
        <qualifiedname>BPropertyInfo::TypeCode</qualifiedname>
        <reimplements refid="classBFlattenable_1a819507fa1b0906f14299db15f6e990d1">TypeCode</reimplements>
        <briefdescription>
<para>Always returns <computeroutput>B_PROPERTY_INFO_TYPE</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBFlattenable_1a819507fa1b0906f14299db15f6e990d1" kindref="member">BFlattenable::TypeCode()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="67" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1af4ae06ccc8b9f93ab74ffdde0d1f93ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPropertyInfo::Unflatten</definition>
        <argsstring>(type_code code, const void *buffer, ssize_t size)</argsstring>
        <name>Unflatten</name>
        <qualifiedname>BPropertyInfo::Unflatten</qualifiedname>
        <reimplements refid="classBFlattenable_1a41e7168574912690be159991d2b07a97">Unflatten</reimplements>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
          <defname>numBytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBFlattenable_1a41e7168574912690be159991d2b07a97" kindref="member">BFlattenable::Unflatten()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="71" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a0f259398818fe100acd80c05a091ae81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const value_info *</type>
        <definition>const value_info * BPropertyInfo::Values</definition>
        <argsstring>() const</argsstring>
        <name>Values</name>
        <qualifiedname>BPropertyInfo::Values</qualifiedname>
        <briefdescription>
<para>Returns the values as a <computeroutput>value_info</computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the pointer directly, does not make copy.</para>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="75" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classBPropertyInfo_1a3dc32742ee4247ad4720de2314171e0f" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPropertyInfo::FindCommand</definition>
        <argsstring>(uint32 what, int32 index, property_info *info)</argsstring>
        <name>FindCommand</name>
        <qualifiedname>BPropertyInfo::FindCommand</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>what</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structproperty__info" kindref="compound">property_info</ref> *</type>
          <declname>info</declname>
          <defname>propertyInfo</defname>
        </param>
        <briefdescription>
<para>Find the command inside of <emphasis>propertyInfo</emphasis> matching <emphasis>what</emphasis> and <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>You may want to override this method in derived classes.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the command was found, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="82" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a4492fda22fe56b9ba2a8e30b6cce14d0" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPropertyInfo::FindSpecifier</definition>
        <argsstring>(uint32 form, property_info *info)</argsstring>
        <name>FindSpecifier</name>
        <qualifiedname>BPropertyInfo::FindSpecifier</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>form</declname>
        </param>
        <param>
          <type><ref refid="structproperty__info" kindref="compound">property_info</ref> *</type>
          <declname>info</declname>
          <defname>propertyInfo</defname>
        </param>
        <briefdescription>
<para>Find the specifier inside of <emphasis>propertyInfo</emphasis> matching <emphasis>form</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>You may want to override this method in derived classes.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the specifier was found, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="84" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBPropertyInfo_1ac5e2ed40bdeaf8c80bdc097bb8126952" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPropertyInfo::BPropertyInfo</definition>
        <argsstring>(const BPropertyInfo &amp;other)</argsstring>
        <name>BPropertyInfo</name>
        <qualifiedname>BPropertyInfo::BPropertyInfo</qualifiedname>
        <param>
          <type>const <ref refid="classBPropertyInfo" kindref="compound">BPropertyInfo</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a7e218fda3256b728c7df8ee8f249d763" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPropertyInfo::_ReservedPropertyInfo1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedPropertyInfo1</name>
        <qualifiedname>BPropertyInfo::_ReservedPropertyInfo1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="87" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a31f21f6b5c644216e15fe914080a03b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPropertyInfo::_ReservedPropertyInfo2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedPropertyInfo2</name>
        <qualifiedname>BPropertyInfo::_ReservedPropertyInfo2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="88" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a48a13c102bb35fad97c462bef343d42f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPropertyInfo::_ReservedPropertyInfo3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedPropertyInfo3</name>
        <qualifiedname>BPropertyInfo::_ReservedPropertyInfo3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="89" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a1b791808c8faa19838e9edafc00e4143" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BPropertyInfo::_ReservedPropertyInfo4</definition>
        <argsstring>()</argsstring>
        <name>_ReservedPropertyInfo4</name>
        <qualifiedname>BPropertyInfo::_ReservedPropertyInfo4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="90" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1ad8ab21e8d2f87c58f35d47e4f2c2dc7c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPropertyInfo::FreeMem</definition>
        <argsstring>()</argsstring>
        <name>FreeMem</name>
        <qualifiedname>BPropertyInfo::FreeMem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="94" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPropertyInfo_1a383ec7b8396b064c6c1a0e0a1cc5866a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPropertyInfo" kindref="compound">BPropertyInfo</ref> &amp;</type>
        <definition>BPropertyInfo &amp; BPropertyInfo::operator=</definition>
        <argsstring>(const BPropertyInfo &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BPropertyInfo::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPropertyInfo" kindref="compound">BPropertyInfo</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="93" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class used to manage scripting. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
      <node id="1">
        <label>BPropertyInfo</label>
        <link refid="classBPropertyInfo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
      <node id="1">
        <label>BPropertyInfo</label>
        <link refid="classBPropertyInfo"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" line="55" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/PropertyInfo.h" bodystart="55" bodyend="102"/>
    <listofallmembers>
      <member refid="classBPropertyInfo_1a12cb5d9c0b06bfc47a33bb72c8cde4ab" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>_reserved</name></member>
      <member refid="classBPropertyInfo_1a7e218fda3256b728c7df8ee8f249d763" prot="private" virt="virtual"><scope>BPropertyInfo</scope><name>_ReservedPropertyInfo1</name></member>
      <member refid="classBPropertyInfo_1a31f21f6b5c644216e15fe914080a03b3" prot="private" virt="virtual"><scope>BPropertyInfo</scope><name>_ReservedPropertyInfo2</name></member>
      <member refid="classBPropertyInfo_1a48a13c102bb35fad97c462bef343d42f" prot="private" virt="virtual"><scope>BPropertyInfo</scope><name>_ReservedPropertyInfo3</name></member>
      <member refid="classBPropertyInfo_1a1b791808c8faa19838e9edafc00e4143" prot="private" virt="virtual"><scope>BPropertyInfo</scope><name>_ReservedPropertyInfo4</name></member>
      <member refid="classBPropertyInfo_1a52ef3962ccae6efe91780df25c2c043a" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>AllowsTypeCode</name></member>
      <member refid="classBPropertyInfo_1ac125ac852be44e17bc30c60d62323ab0" prot="public" virt="non-virtual"><scope>BPropertyInfo</scope><name>BPropertyInfo</name></member>
      <member refid="classBPropertyInfo_1ac5e2ed40bdeaf8c80bdc097bb8126952" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>BPropertyInfo</name></member>
      <member refid="classBPropertyInfo_1a656448b6f78eb446875a6bf597369215" prot="public" virt="non-virtual"><scope>BPropertyInfo</scope><name>CountProperties</name></member>
      <member refid="classBPropertyInfo_1a5b2742b582dacf23dd4557c2ad48ba68" prot="public" virt="non-virtual"><scope>BPropertyInfo</scope><name>CountValues</name></member>
      <member refid="classBPropertyInfo_1a3dc32742ee4247ad4720de2314171e0f" prot="protected" virt="non-virtual"><scope>BPropertyInfo</scope><name>FindCommand</name></member>
      <member refid="classBPropertyInfo_1aeceb1f3e070b4b4604d0ec02af1bba23" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>FindMatch</name></member>
      <member refid="classBPropertyInfo_1a4492fda22fe56b9ba2a8e30b6cce14d0" prot="protected" virt="non-virtual"><scope>BPropertyInfo</scope><name>FindSpecifier</name></member>
      <member refid="classBPropertyInfo_1a9b39fe574aa8e2ec92af8415324547ea" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>fInHeap</name></member>
      <member refid="classBPropertyInfo_1a141a4d054c98424d677af1aecdb8e176" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>Flatten</name></member>
      <member refid="classBPropertyInfo_1a326574fe08e91224d95e1c4943396bb6" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>FlattenedSize</name></member>
      <member refid="classBPropertyInfo_1ac4e39a762f858bb4674d63ff8c13b8bb" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>fPropCount</name></member>
      <member refid="classBPropertyInfo_1ac0ffee8a802db36efd56ed470e730756" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>fPropInfo</name></member>
      <member refid="classBPropertyInfo_1ad8ab21e8d2f87c58f35d47e4f2c2dc7c" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>FreeMem</name></member>
      <member refid="classBPropertyInfo_1a07431fbe93ec7df8af07eb748d721dad" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>fValueCount</name></member>
      <member refid="classBPropertyInfo_1ad547f316980a31ad3254a0cd2dbd2a7f" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>fValueInfo</name></member>
      <member refid="classBPropertyInfo_1a33f147be78c14a2a0da3a45d21391bf2" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>IsFixedSize</name></member>
      <member refid="classBPropertyInfo_1a383ec7b8396b064c6c1a0e0a1cc5866a" prot="private" virt="non-virtual"><scope>BPropertyInfo</scope><name>operator=</name></member>
      <member refid="classBPropertyInfo_1acc46b72a11086c54337b6231d758cae0" prot="public" virt="non-virtual"><scope>BPropertyInfo</scope><name>PrintToStream</name></member>
      <member refid="classBPropertyInfo_1ac08ebb5e8faefa538c19f6fdcf745d97" prot="public" virt="non-virtual"><scope>BPropertyInfo</scope><name>Properties</name></member>
      <member refid="classBPropertyInfo_1a9217a74cb2653b6f63472166c4373196" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>TypeCode</name></member>
      <member refid="classBPropertyInfo_1af4ae06ccc8b9f93ab74ffdde0d1f93ce" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>Unflatten</name></member>
      <member refid="classBPropertyInfo_1a0f259398818fe100acd80c05a091ae81" prot="public" virt="non-virtual"><scope>BPropertyInfo</scope><name>Values</name></member>
      <member refid="classBFlattenable_1a884e130a5d27acc15b1e4e4c505157ff" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>~BFlattenable</name></member>
      <member refid="classBPropertyInfo_1aa551f86d3802a646b2facd070bb6eb66" prot="public" virt="virtual"><scope>BPropertyInfo</scope><name>~BPropertyInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
