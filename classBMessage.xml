<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMessage" kind="class" language="C++" prot="public">
    <compoundname>BMessage</compoundname>
    <derivedcompoundref refid="classBMailAddOnSettings" prot="public" virt="non-virtual">BMailAddOnSettings</derivedcompoundref>
      <sectiondef kind="user-defined">
      <header>Allocation Operators</header>
      <memberdef kind="function" id="classBMessage_1a1e1473dc796d132c5bfe00412aa84a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
        <definition>BMessage &amp; BMessage::operator=</definition>
        <argsstring>(const BMessage &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BMessage::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy one message into another. </para>
        </briefdescription>
        <detaileddescription>
<para>See the copy constructor, <ref refid="classBMessage_1a6ab8aaec65db99134ea76790884c3af7" kindref="member">BMessage(const BMessage&amp; other)</ref>, for details on what is copied, and what isn&apos;t.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="65" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a9f516c2831c6185460f0867cdb18ffec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * BMessage::operator new</definition>
        <argsstring>(size_t size)</argsstring>
        <name>operator new</name>
        <qualifiedname>BMessage::operator new</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates <emphasis>size</emphasis> bytes of memory for a <ref refid="classBMessage" kindref="compound">BMessage</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="380" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a74b2733acbeb02a5688fa76cd15811b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * BMessage::operator new</definition>
        <argsstring>(size_t, void *pointer)</argsstring>
        <name>operator new</name>
        <qualifiedname>BMessage::operator new</qualifiedname>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Allocates <emphasis>size</emphasis> bytes of memory for a <ref refid="classBMessage" kindref="compound">BMessage</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="381" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a28f0b7a5e132048e2966a99367342552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * BMessage::operator new</definition>
        <argsstring>(size_t, const std::nothrow_t &amp;noThrow)</argsstring>
        <name>operator new</name>
        <qualifiedname>BMessage::operator new</qualifiedname>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>const std::nothrow_t &amp;</type>
          <declname>noThrow</declname>
        </param>
        <briefdescription>
<para>Allocates <emphasis>size</emphasis> bytes of memory for a <ref refid="classBMessage" kindref="compound">BMessage</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="382" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1abab1f65386f27ad49ae8b767c69bbb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMessage::operator delete</definition>
        <argsstring>(void *pointer, size_t size)</argsstring>
        <name>operator delete</name>
        <qualifiedname>BMessage::operator delete</qualifiedname>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Frees memory allocated by new. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="384" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Statistics and Miscellaneous Information</header>
      <memberdef kind="function" id="classBMessage_1a48d11318915368351b481984af21baee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::GetInfo</definition>
        <argsstring>(type_code typeRequested, int32 index, char **nameFound, type_code *typeFound, int32 *countFound=NULL) const</argsstring>
        <name>GetInfo</name>
        <qualifiedname>BMessage::GetInfo</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>typeRequested</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>nameFound</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref> *</type>
          <declname>typeFound</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>countFound</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Retrieve the name, the type and the number of items in a message by an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">typeRequested</parametername>
</parameternamelist>
<parameterdescription>
<para>If you want to limit the search to only one type, pass that type code here. If you don&apos;t care which type the data has, you can pass <computeroutput>B_ANY_TYPE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the data you want to investigate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nameFound</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item if it is found. Haiku will fill in a pointer to the internal name buffer in the message. This means that you should not manipulate this name. If you are not interested in the name, you can safely pass <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">typeFound</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the item at <emphasis>index</emphasis>. If you are not interested in the type (because you specifically asked for a type), you can safely pass <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">countFound</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of items at <emphasis>index</emphasis>. If data items have the same name, they will be placed under the same index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the <emphasis>index</emphasis> is found, and matches the requested type, then the other parameters will be filled in. If this is not the case, the method will return with an error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>An match was found. The values have been filled in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> was out of range. None of the passed variables have been altered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The data field at <emphasis>index</emphasis> does not have the requested type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a525991f82f8574bd6eb68796568eb340" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::GetInfo</definition>
        <argsstring>(const char *name, type_code *typeFound, int32 *countFound=NULL) const</argsstring>
        <name>GetInfo</name>
        <qualifiedname>BMessage::GetInfo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref> *</type>
          <declname>typeFound</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>countFound</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Retrieve the type and the number of data items in this message that are associated with a <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the data member that you are looking for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">typeFound</parametername>
</parameternamelist>
<parameterdescription>
<para>In case of a match, the name of the data member will be put in this parameter. In case you are not interested, you can pass <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">countFound</parametername>
</parameternamelist>
<parameterdescription>
<para>In case of a match, the number of items at this label will be in this parameter. In case you are not interested, you can safely pass <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the message has data associated with the given <emphasis>name</emphasis>, the other parameters will contain information associated with the data, else, the method will return with an error. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>A match was found. The other parameters have been filled in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>You passed <computeroutput>NULL</computeroutput> as argument to <emphasis>name</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no data with the label <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="71" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6c8080ba2bdff134fd20e923145e4200" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::GetInfo</definition>
        <argsstring>(const char *name, type_code *typeFound, bool *fixedSize) const</argsstring>
        <name>GetInfo</name>
        <qualifiedname>BMessage::GetInfo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref> *</type>
          <declname>typeFound</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>fixedSize</declname>
        </param>
        <briefdescription>
<para>Retrieve the type and whether or not the size of the data is fixed associated with a <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is the same as <ref refid="classBMessage_1a525991f82f8574bd6eb68796568eb340" kindref="member">GetInfo(const char*, type_code*, int32*) const</ref>, with the difference that you can find out whether or not the size of the data associated with the <emphasis>name</emphasis> is fixed. You will get this value in the variable you passed as <emphasis>fixedSize</emphasis> parameter.</para>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="73" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a055eb9be666ebf7adad3880083606bb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::GetInfo</definition>
        <argsstring>(const char *name, type_code *typeFound, int32 *countFound, bool *fixedSize) const</argsstring>
        <name>GetInfo</name>
        <qualifiedname>BMessage::GetInfo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref> *</type>
          <declname>typeFound</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>countFound</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>fixedSize</declname>
        </param>
        <briefdescription>
<para>Retrieve the type and whether or not the size of the data is fixed associated with a <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is the same as <ref refid="classBMessage_1a525991f82f8574bd6eb68796568eb340" kindref="member">GetInfo(const char*, type_code*, int32*) const</ref>, with the difference that you can find out whether or not the size of the data associated with the <emphasis>name</emphasis> is fixed. You will get this value in the variable you passed as <emphasis>fixedSize</emphasis> parameter.</para>
<para><simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="75" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1abca8c45f6dffd0f8e95d61ce8527b50f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMessage::CountNames</definition>
        <argsstring>(type_code type) const</argsstring>
        <name>CountNames</name>
        <qualifiedname>BMessage::CountNames</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Count the number of names of a certain <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used to count the number of items of a certain type. It&apos;s practical use is limited to debugging purposes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type you want to find. If you pass <computeroutput>B_ANY_TYPE</computeroutput>, this method will return the total number of data items.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of data items in this message with the specified <emphasis>type</emphasis>, or <computeroutput>0</computeroutput> in case no items match the type.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="78" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a773590d77b8d751ce9249e6acf3a463b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>BMessage::IsEmpty</qualifiedname>
        <briefdescription>
<para>Check if the message has data members. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If this message contains data members, this method will return <computeroutput>true</computeroutput>, else it will return <computeroutput>false</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1abac76b537c88ce7f1a127fa6425c3279" kindref="member">MakeEmpty()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a74a596ec83515e50217ab478f302bd99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::IsSystem</definition>
        <argsstring>() const</argsstring>
        <name>IsSystem</name>
        <qualifiedname>BMessage::IsSystem</qualifiedname>
        <briefdescription>
<para>Check if the message is a system message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If this message is a system message, the method will return <computeroutput>true</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="80" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a01c7dd891b3b05eb7f458a621c5181d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::IsReply</definition>
        <argsstring>() const</argsstring>
        <name>IsReply</name>
        <qualifiedname>BMessage::IsReply</qualifiedname>
        <briefdescription>
<para>Check if the message is a reply to a (previous) message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If this message is a reply, this method will return <computeroutput>true</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="81" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6aa2006d1e5c6fcba3f5c6e8467a50a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMessage::PrintToStream</definition>
        <argsstring>() const</argsstring>
        <name>PrintToStream</name>
        <qualifiedname>BMessage::PrintToStream</qualifiedname>
        <briefdescription>
<para>Print the message to the standard output. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used to debug your application. It can be used to check if it creates the messages properly, by checking if all the required fields are present, and it can be used to debug your message handling routines, especially the handling of those that are sent by external applications, to see if you understand the semantics correctly.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="82" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a2191de782a8ccef0252007d87c8f379c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::Rename</definition>
        <argsstring>(const char *oldEntry, const char *newEntry)</argsstring>
        <name>Rename</name>
        <qualifiedname>BMessage::Rename</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>oldEntry</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newEntry</declname>
        </param>
        <briefdescription>
<para>Rename a data label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldEntry</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the label you want to rename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newEntry</parametername>
</parameternamelist>
<parameterdescription>
<para>The new name of the data entry.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Renaming succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Either the <emphasis>oldEntry</emphasis> or the <emphasis>newEntry</emphasis> pointers are <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no data associated with the label <emphasis>oldEntry</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="84" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Delivery Info</header>
      <memberdef kind="function" id="classBMessage_1aaddd7356ffcac4ab4d6a26e8d393e12a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::WasDelivered</definition>
        <argsstring>() const</argsstring>
        <name>WasDelivered</name>
        <qualifiedname>BMessage::WasDelivered</qualifiedname>
        <briefdescription>
<para>Check if this message was delivered through the delivery methods. </para>
        </briefdescription>
        <detaileddescription>
<para>If this message is passed via a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> or <ref refid="classBLooper_1a0de6737bfbf8a8b4913adc8c74bb544e" kindref="member">BLooper::PostMessage()</ref>, this method will return <computeroutput>true</computeroutput>.</para>
<para><simplesect kind="warning"><para>This method should not be abused by a thread that sends a message to track whether or not a message was delivered. This is because the ownership of the message goes to the receiving looper, which will delete the message as soon as it is done with it.</para>
</simplesect>
<simplesect kind="warning"><para>If you need to check whether a message is delivered, you should either ask for a reply, or use one of the synchronous <ref refid="classBMessenger_1aebe5aba546fa4a4696988b1bf6028f3c" kindref="member">BMessenger::SendMessage()</ref> methods.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="88" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acd51918e26e998067ee6412a55068abc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::IsSourceWaiting</definition>
        <argsstring>() const</argsstring>
        <name>IsSourceWaiting</name>
        <qualifiedname>BMessage::IsSourceWaiting</qualifiedname>
        <briefdescription>
<para>Check if the sender expects a reply. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will return <computeroutput>true</computeroutput>, if the sender flagged that it is waiting for a reply, and such a reply has not yet been sent.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="89" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3735f85fdf75af5309d0e61279d452c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::IsSourceRemote</definition>
        <argsstring>() const</argsstring>
        <name>IsSourceRemote</name>
        <qualifiedname>BMessage::IsSourceRemote</qualifiedname>
        <briefdescription>
<para>Check if the message is sent by another application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="90" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a50545f6ec66e4f1fdda026381bca0be4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
        <definition>BMessenger BMessage::ReturnAddress</definition>
        <argsstring>() const</argsstring>
        <name>ReturnAddress</name>
        <qualifiedname>BMessage::ReturnAddress</qualifiedname>
        <briefdescription>
<para>Get a messenger that points to the sender of the message. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this method, you can fetch a <ref refid="classBMessenger" kindref="compound">BMessenger</ref> that can be used to deliver replies to this message. This method works both for local and remote deliveries.</para>
<para>For remote deliveries, this approach is preferred over sending the reply using a standard <ref refid="classBMessenger" kindref="compound">BMessenger</ref> that is created with the signature of the application. A standard <ref refid="classBMessenger" kindref="compound">BMessenger</ref> sends the messages to the main <ref refid="classBLooper" kindref="compound">BLooper</ref> of the application, the <ref refid="classBApplication" kindref="compound">BApplication</ref> object. With the delivery data stored in the messages, the reply using this messenger will be directed at a specific looper that is able to handle the replies.</para>
<para>If this method is called on a message that has not been delivered (yet), it will return an empty <ref refid="classBMessenger" kindref="compound">BMessenger</ref> object.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="91" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a57c84d02e54ef19fd1516d9bf7e3fe45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>const BMessage * BMessage::Previous</definition>
        <argsstring>() const</argsstring>
        <name>Previous</name>
        <qualifiedname>BMessage::Previous</qualifiedname>
        <briefdescription>
<para>Get the message to which this message is a reply. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a new <ref refid="classBMessage" kindref="compound">BMessage</ref> with the same data stuctures as the message to which this message is a reply. The pointer is only valid as long as this message is still allocated, you do not get ownership. If this message isn&apos;t a reply to another message, this method will return <computeroutput>NULL</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="92" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac66a35a4ef389a02bc36ace2cddb073e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::WasDropped</definition>
        <argsstring>() const</argsstring>
        <name>WasDropped</name>
        <qualifiedname>BMessage::WasDropped</qualifiedname>
        <briefdescription>
<para>Check if the message was delivered through &apos;drag and drop&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This method returns <computeroutput>true</computeroutput> if the message has been delivered through drag and drop. It returns <computeroutput>false</computeroutput> if it has been delivered through the regular messaging functions, or if the message has not been delivered at all.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a6785e345338000b685a3b5b182cc993a" kindref="member">DropPoint()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="93" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6785e345338000b685a3b5b182cc993a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BMessage::DropPoint</definition>
        <argsstring>(BPoint *offset=NULL) const</argsstring>
        <name>DropPoint</name>
        <qualifiedname>BMessage::DropPoint</qualifiedname>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>offset</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Get the coordinates of the drop point of the message. </para>
        </briefdescription>
        <detaileddescription>
<para>If the message has been delivered because of drag and drop, which can be verified with the <ref refid="classBMessage_1ac66a35a4ef389a02bc36ace2cddb073e" kindref="member">WasDropped()</ref> method, this method will return a <ref refid="classBPoint" kindref="compound">BPoint</ref> to where exactly the drop off was made.</para>
<para>Because drop messages are delivered to the <ref refid="classBWindow" kindref="compound">BWindow</ref> in which they were dropped, and <ref refid="classBWindow" kindref="compound">BWindow</ref> is a subclass of <ref refid="classBLooper" kindref="compound">BLooper</ref>, you can use <ref refid="classBWindow" kindref="compound">BWindow</ref> to determine based on the location, how you should react to it.</para>
<para>If this message was not delivered through drag and drop, it will return a <computeroutput>NULL</computeroutput> pointer.</para>
<para><simplesect kind="see"><para><ref refid="classBMessage_1ac66a35a4ef389a02bc36ace2cddb073e" kindref="member">WasDropped()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="94" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Replying</header>
      <memberdef kind="function" id="classBMessage_1aad1eb085346e2c91133e372e7924637c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SendReply</definition>
        <argsstring>(uint32 command, BHandler *replyTo=NULL)</argsstring>
        <name>SendReply</name>
        <qualifiedname>BMessage::SendReply</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>replyTo</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Asynchronously send a reply to this message. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member of <ref refid="classBMessage_1a410113620d52a30f7622a96f8a7077c6" kindref="member">SendReply(BMessage*, BMessenger, bigtime_t)</ref>. Use this variant if you want to send a message without data members.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="97" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a08a2f161642de20dc483afb0ac4db167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SendReply</definition>
        <argsstring>(BMessage *reply, BHandler *replyTo=NULL, bigtime_t timeout=B_INFINITE_TIMEOUT)</argsstring>
        <name>SendReply</name>
        <qualifiedname>BMessage::SendReply</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>reply</declname>
        </param>
        <param>
          <type><ref refid="classBHandler" kindref="compound">BHandler</ref> *</type>
          <declname>replyTo</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>Asynchronously send a reply to this message. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member of <ref refid="classBMessage_1a410113620d52a30f7622a96f8a7077c6" kindref="member">SendReply(BMessage*, BMessenger, bigtime_t)</ref>. Use this variant if you want to send the message to a specific handler (instead of a complete messenger).</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="99" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a410113620d52a30f7622a96f8a7077c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SendReply</definition>
        <argsstring>(BMessage *reply, BMessenger replyTo, bigtime_t timeout=B_INFINITE_TIMEOUT)</argsstring>
        <name>SendReply</name>
        <qualifiedname>BMessage::SendReply</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>reply</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>replyTo</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>Asynchronously send a reply to this message. </para>
        </briefdescription>
        <detaileddescription>
<para>This method sends a reply to this message to the sender. On your turn, you specify a messenger that handles a reply back to the message you specify as the <emphasis>reply</emphasis> argument. You can set a timeout for the message to be delivered. This method blocks until the message has been received, or the <emphasis>timeout</emphasis> has been reached.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reply</parametername>
</parameternamelist>
<parameterdescription>
<para>The message that is in reply to this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTo</parametername>
</parameternamelist>
<parameterdescription>
<para>In case the receiver needs to reply to the message you are sending, you can specify the return address with this argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum time in microseconds this delivery may take. The <emphasis>timeout</emphasis> is a relative timeout. You can also use <computeroutput>B_INFINITE_TIMEOUT</computeroutput> if you want to wait infinitely for the message to be delivered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The message has been delivered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_DUPLICATE_REPLY</parametername>
</parameternamelist>
<parameterdescription>
<para>There already has been a reply to this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_PORT_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The reply address is not valid (anymore). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_WOULD_BLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>The delivery <emphasis>timeout</emphasis> was <computeroutput>B_INFINITE_TIMEOUT</computeroutput> (<computeroutput>0</computeroutput>) and the target port was full when trying to deliver the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_TIMED_OUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout expired while trying to deliver the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1aad1eb085346e2c91133e372e7924637c" kindref="member">SendReply(uint32 command, BHandler* replyTo)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="102" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a039a8ff8563bbc58c54a50ca417ac75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SendReply</definition>
        <argsstring>(uint32 command, BMessage *replyToReply)</argsstring>
        <name>SendReply</name>
        <qualifiedname>BMessage::SendReply</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>command</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>replyToReply</declname>
        </param>
        <briefdescription>
<para>Synchronously send a reply to this message, and wait for a reply back. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member of <ref refid="classBMessage_1a5461fc22f8bf044d21fd5429b7977213" kindref="member">SendReply(BMessage*, BMessage*, bigtime_t, bigtime_t)</ref> Use this variant if you want to send a message without data members.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="105" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a5461fc22f8bf044d21fd5429b7977213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SendReply</definition>
        <argsstring>(BMessage *reply, BMessage *replyToReply, bigtime_t sendTimeout=B_INFINITE_TIMEOUT, bigtime_t replyTimeout=B_INFINITE_TIMEOUT)</argsstring>
        <name>SendReply</name>
        <qualifiedname>BMessage::SendReply</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>reply</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>replyToReply</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>sendTimeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>replyTimeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>Synchronously send a reply to this message, and wait for a reply back. </para>
        </briefdescription>
        <detaileddescription>
<para>This method sends a reply to this message to the sender. The <emphasis>reply</emphasis> is delivered, and then the method waits for a reply from the receiver. If a reply is received, that reply is copied into the <emphasis>replyToReply</emphasis> argument. If the message was delivered properly, but the receiver did not reply within the specified <emphasis>replyTimeout</emphasis>, the <emphasis>what</emphasis> member of <emphasis>replyToReply</emphasis> will be set to <computeroutput>B_NO_REPLY</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reply</parametername>
</parameternamelist>
<parameterdescription>
<para>The message that is in reply to this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">replyToReply</parametername>
</parameternamelist>
<parameterdescription>
<para>The reply is copied into this argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sendTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum time in microseconds this delivery may take. The <emphasis>timeout</emphasis> is a relative timeout. You can also use <computeroutput>B_INFINITE_TIMEOUT</computeroutput> if you want to wait infinitely for the message to be delivered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replyTimeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum time in microseconds you want to wait for a reply. Note that the timer starts when the message has been delivered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The message has been delivered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_DUPLICATE_REPLY</parametername>
</parameternamelist>
<parameterdescription>
<para>There already has been a reply to this message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <emphasis>reply</emphasis> or <emphasis>replyToReply</emphasis> is <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_PORT_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>The reply address is not valid (anymore). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_WOULD_BLOCK</parametername>
</parameternamelist>
<parameterdescription>
<para>The delivery <emphasis>timeout</emphasis> was <computeroutput>B_INFINITE_TIMEOUT</computeroutput> (<computeroutput>0</computeroutput>) and the target port was full when trying to deliver the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_TIMED_OUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout expired while trying to deliver the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MORE_PORTS</parametername>
</parameternamelist>
<parameterdescription>
<para>All reply ports are in use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a039a8ff8563bbc58c54a50ca417ac75e" kindref="member">SendReply(uint32 command, BMessage* replyToReply)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="107" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Flattening</header>
      <description><para>Because of historical reasons and for binary compatibility, this class provides a flattening API without inheriting the <ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> class. The API is more or less the same, but you are inconvenienced when you want to use messages in methods that handle <ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> objects. </para>
</description>
      <memberdef kind="function" id="classBMessage_1a2e3967d45e2ab17e6ab05dc45989f8c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t BMessage::FlattenedSize</definition>
        <argsstring>() const</argsstring>
        <name>FlattenedSize</name>
        <qualifiedname>BMessage::FlattenedSize</qualifiedname>
        <briefdescription>
<para>Return the size in bytes required when you want to flatten this message to a stream of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="114" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a736092eded1a6846cba89cd43bca26d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::Flatten</definition>
        <argsstring>(char *buffer, ssize_t size) const</argsstring>
        <name>Flatten</name>
        <qualifiedname>BMessage::Flatten</qualifiedname>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Flatten the message to a <emphasis>buffer</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write the data to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> in case of success, or an error code in case something went awry.</para>
</simplesect>
<simplesect kind="warning"><para>Make sure the buffer is large enough to hold the message. This method does not double-check for you!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a2e3967d45e2ab17e6ab05dc45989f8c6" kindref="member">FlattenedSize()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ae0b47fbff10bc50153144b178fc1537d" kindref="member">Flatten(BDataIO* stream, ssize_t* size) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="115" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae0b47fbff10bc50153144b178fc1537d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::Flatten</definition>
        <argsstring>(BDataIO *stream, ssize_t *size=NULL) const</argsstring>
        <name>Flatten</name>
        <qualifiedname>BMessage::Flatten</qualifiedname>
        <param>
          <type><ref refid="classBDataIO" kindref="compound">BDataIO</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>ssize_t *</type>
          <declname>size</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Flatten the message to a <emphasis>stream</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to flatten the message to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The method writes the number of bytes actually written to this argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> in case of success, or an error code in case something went awry.</para>
</simplesect>
<simplesect kind="warning"><para>Make sure the subclass of the <ref refid="classBDataIO" kindref="compound">BDataIO</ref> interface either protects against buffer overwrites, or check if the number of bytes that is going to be written isn&apos;t larger than it can handle.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a2e3967d45e2ab17e6ab05dc45989f8c6" kindref="member">FlattenedSize()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a736092eded1a6846cba89cd43bca26d3" kindref="member">Flatten(char* buffer, ssize_t size) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="116" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6704fc8df822fc366b616c3abf36ae9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::Unflatten</definition>
        <argsstring>(const char *flatBuffer)</argsstring>
        <name>Unflatten</name>
        <qualifiedname>BMessage::Unflatten</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>flatBuffer</declname>
        </param>
        <briefdescription>
<para>Unflatten a message from a buffer and put it into the current object. </para>
        </briefdescription>
        <detaileddescription>
<para>This action clears the current contents of the message.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flatBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer that contains the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer has been unflattened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer does not contain a valid message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occured whilst allocating memory for the data members.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a736092eded1a6846cba89cd43bca26d3" kindref="member">Flatten(char* buffer, ssize_t size) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a7ded81e10fed9a25b1a22934e04928dc" kindref="member">Unflatten(BDataIO* stream)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="118" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a7ded81e10fed9a25b1a22934e04928dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::Unflatten</definition>
        <argsstring>(BDataIO *stream)</argsstring>
        <name>Unflatten</name>
        <qualifiedname>BMessage::Unflatten</qualifiedname>
        <param>
          <type><ref refid="classBDataIO" kindref="compound">BDataIO</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Unflatten a message from a stream and put it into the current object. </para>
        </briefdescription>
        <detaileddescription>
<para>This action clears the current contents of the message.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream that contains the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The message has been unflattened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream does not contain a valid message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occured whilst allocating memory for the data members.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ae0b47fbff10bc50153144b178fc1537d" kindref="member">Flatten(BDataIO* stream, ssize_t* size) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a6704fc8df822fc366b616c3abf36ae9f" kindref="member">Unflatten(const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="119" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Specifiers (Scripting)</header>
      <memberdef kind="function" id="classBMessage_1a8f6efbc2f8c4faf38d1a6dab304b8880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddSpecifier</definition>
        <argsstring>(const char *property)</argsstring>
        <name>AddSpecifier</name>
        <qualifiedname>BMessage::AddSpecifier</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="122" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1e904ab6672cd0b29007fa9859ffe685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddSpecifier</definition>
        <argsstring>(const char *property, int32 index)</argsstring>
        <name>AddSpecifier</name>
        <qualifiedname>BMessage::AddSpecifier</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>property</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="123" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1ae990808fff37361f1abe3688dbb181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddSpecifier</definition>
        <argsstring>(const char *property, int32 index, int32 range)</argsstring>
        <name>AddSpecifier</name>
        <qualifiedname>BMessage::AddSpecifier</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>property</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="124" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3ba4e7e99c78281226c2befb8912e327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddSpecifier</definition>
        <argsstring>(const char *property, const char *name)</argsstring>
        <name>AddSpecifier</name>
        <qualifiedname>BMessage::AddSpecifier</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="126" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a29406ecff2333e64d28850548a3b463c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddSpecifier</definition>
        <argsstring>(const BMessage *specifier)</argsstring>
        <name>AddSpecifier</name>
        <qualifiedname>BMessage::AddSpecifier</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>specifier</declname>
        </param>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="128" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa4bcec94162df7498208a1136c0f05ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetCurrentSpecifier</definition>
        <argsstring>(int32 index)</argsstring>
        <name>SetCurrentSpecifier</name>
        <qualifiedname>BMessage::SetCurrentSpecifier</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="130" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a641086c9321e56195843a3224bb0f11d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::GetCurrentSpecifier</definition>
        <argsstring>(int32 *index, BMessage *specifier=NULL, int32 *what=NULL, const char **property=NULL) const</argsstring>
        <name>GetCurrentSpecifier</name>
        <qualifiedname>BMessage::GetCurrentSpecifier</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>specifier</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>what</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const char **</type>
          <declname>property</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="131" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a70f59c7377d4d67f47feb212b73c8b25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasSpecifiers</definition>
        <argsstring>() const</argsstring>
        <name>HasSpecifiers</name>
        <qualifiedname>BMessage::HasSpecifiers</qualifiedname>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="135" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aeab6b578828566453d03152bfb446e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::PopSpecifier</definition>
        <argsstring>()</argsstring>
        <name>PopSpecifier</name>
        <qualifiedname>BMessage::PopSpecifier</qualifiedname>
        <briefdescription>
<para>Undocumented. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="136" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Adding Data</header>
      <memberdef kind="function" id="classBMessage_1a4fa4e6bcc354814dc17b61532480837d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddAlignment</definition>
        <argsstring>(const char *name, const BAlignment &amp;alignment)</argsstring>
        <name>AddAlignment</name>
        <qualifiedname>BMessage::AddAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBAlignment" kindref="compound">BAlignment</ref> &amp;</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Convenience method to add a <ref refid="classBAlignment" kindref="compound">BAlignment</ref> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_ALIGNMENT_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The alignment to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1abf81526338001abe288b5831fcb88874" kindref="member">FindAlignment()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1af7ad0b5467ac972bb5f400d48a37bec9" kindref="member">GetAlignment()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a7613f4cdd1154b3e70771fdc9a4e3e04" kindref="member">ReplaceAlignment()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="139" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a42d9e94fb88d457699d193eb5094a24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddRect</definition>
        <argsstring>(const char *name, BRect rect)</argsstring>
        <name>AddRect</name>
        <qualifiedname>BMessage::AddRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
          <defname>aRect</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <ref refid="classBRect" kindref="compound">BRect</ref> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_RECT_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a84e6020b903936f61538e33988792956" kindref="member">FindRect()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ac830b029ae38dce1f6a2f823f289f222" kindref="member">GetRect()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aa24fb4e8fbc39011d1b7fb55c7f752c1" kindref="member">ReplaceRect()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="141" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1afde5dc7d76c57e5d062de58954fb2548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddPoint</definition>
        <argsstring>(const char *name, BPoint point)</argsstring>
        <name>AddPoint</name>
        <qualifiedname>BMessage::AddPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>point</declname>
          <defname>aPoint</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <ref refid="classBPoint" kindref="compound">BPoint</ref> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_POINT_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a88507a5c41974ab5c13dd5da800a68d7" kindref="member">FindPoint()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a46167045bba07334db6acaa3c37e0498" kindref="member">GetPoint()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ac1b948f0c5867720173ef96450201859" kindref="member">ReplacePoint()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="142" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a37d4771d6d726a439e0c0f36943d9e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddSize</definition>
        <argsstring>(const char *name, BSize size)</argsstring>
        <name>AddSize</name>
        <qualifiedname>BMessage::AddSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Convenience method to add a <ref refid="classBSize" kindref="compound">BSize</ref> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_SIZE_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBSize" kindref="compound">BSize</ref> to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a463777b0384a8ee580709c62dfbfa2ca" kindref="member">FindSize()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ae88c4239718d5a5ad14162e03889db9f" kindref="member">GetSize()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a440d37083df7c8845d3337cc8c9d695a" kindref="member">ReplaceSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="143" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a342311ccdf68206c4b879bcd0f2d6e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddString</definition>
        <argsstring>(const char *name, const char *string)</argsstring>
        <name>AddString</name>
        <qualifiedname>BMessage::AddString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>aString</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a C-string to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_STRING_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aString</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to copy to the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ac2a5b50960210666f57952b3a050530d" kindref="member">FindString()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1acf98ba0c69ac6dd433153b6e3e06c64f" kindref="member">GetString()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a3a606679aa72f7530034994f9cf4ad32" kindref="member">ReplaceString()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="144" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a76d63dc8621996c05a8c2b8186b28efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddString</definition>
        <argsstring>(const char *name, const BString &amp;string)</argsstring>
        <name>AddString</name>
        <qualifiedname>BMessage::AddString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
          <defname>aString</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <ref refid="classBString" kindref="compound">BString</ref> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_STRING_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aString</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to copy to the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ac2a5b50960210666f57952b3a050530d" kindref="member">FindString()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1acf98ba0c69ac6dd433153b6e3e06c64f" kindref="member">GetString()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a3a606679aa72f7530034994f9cf4ad32" kindref="member">ReplaceString()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="145" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4b3643ef27b1a9edffceac01f9d2ae89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddStrings</definition>
        <argsstring>(const char *name, const BStringList &amp;list)</argsstring>
        <name>AddStrings</name>
        <qualifiedname>BMessage::AddStrings</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBStringList" kindref="compound">BStringList</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Convenience method to add list of strings to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_STRING_TYPE</computeroutput> <emphasis>type</emphasis> for each string in the <ref refid="classBStringList" kindref="compound">BStringList</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of strings to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a1a482768af8c3361ae84f5458d674175" kindref="member">FindStrings()</ref> </para>
</simplesect>
<simplesect kind="see"><para>GetStrings() </para>
</simplesect>
<simplesect kind="see"><para>ReplaceStrings()</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="147" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a224c55f626ae3a4552d06788539c7d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddInt8</definition>
        <argsstring>(const char *name, int8 value)</argsstring>
        <name>AddInt8</name>
        <qualifiedname>BMessage::AddInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>int8</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_INT8_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a757685e8e85ac38f882e28bd281e9f9d" kindref="member">FindInt8()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a822fcf4b8182566bfaebb8dd04cd2b97" kindref="member">GetInt8()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a55f909d237c7c1abfca5f918a8a5ffb9" kindref="member">ReplaceInt8()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="149" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a98bbc2ca6c4fcb26bcd162c06ea0f46f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddUInt8</definition>
        <argsstring>(const char *name, uint8 value)</argsstring>
        <name>AddUInt8</name>
        <qualifiedname>BMessage::AddUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>uint8</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_UINT8_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a37170512c52bac977fb81e7c9d44ef95" kindref="member">FindUInt8()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a146182cecba5ad8a802d0c60627b695a" kindref="member">GetUInt8()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aee573704ea412f6b53e1904e22e65454" kindref="member">ReplaceUInt8()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="150" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8e865679288281553721414aa17a7fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddInt16</definition>
        <argsstring>(const char *name, int16 value)</argsstring>
        <name>AddInt16</name>
        <qualifiedname>BMessage::AddInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>int16</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_INT16_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4dd27c3a8fc6e2e0366d77254b2095e6" kindref="member">FindInt16()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aafc68a78c8b550fec01c4129683520b2" kindref="member">GetInt16()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a525deaa699950007c8fdab78c82ada32" kindref="member">ReplaceInt16()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="151" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa43cedc7a1d6ecdc26041e6657c9288d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddUInt16</definition>
        <argsstring>(const char *name, uint16 value)</argsstring>
        <name>AddUInt16</name>
        <qualifiedname>BMessage::AddUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>uint16</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_UINT16_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a5653c46ede97ff7667d0e823674b5953" kindref="member">FindUInt16()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a20d02e3b2687cf4d884d5e308c5a55cb" kindref="member">GetUInt16()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a0029cb535e97ed753ee9529c646d763b" kindref="member">ReplaceUInt16()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="152" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa4d9d24d521c499aefd512b18d1e38c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddInt32</definition>
        <argsstring>(const char *name, int32 value)</argsstring>
        <name>AddInt32</name>
        <qualifiedname>BMessage::AddInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>int32</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_INT32_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1af6ee3d278ed11bdafb60047b03c18ab9" kindref="member">FindInt32()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a526ebda92481d1c0da2786b93253efd1" kindref="member">GetInt32()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ad7b41f02b8a298bcd6699e972b88c82e" kindref="member">ReplaceInt32()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="153" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acc2a562d501b88ce8fe55ae4017d3bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddUInt32</definition>
        <argsstring>(const char *name, uint32 value)</argsstring>
        <name>AddUInt32</name>
        <qualifiedname>BMessage::AddUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>uint32</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_UINT32_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a486a2138fb0edc7bf17b1a9676d5ecde" kindref="member">FindUInt32()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aa90efd88a6a15fef748c62c5c46f2f65" kindref="member">GetUInt32()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1afdfe554348e5e672a1a358f3b944d63e" kindref="member">ReplaceUInt32()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="154" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad172f4c606396d8457a686fb16d0be31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddInt64</definition>
        <argsstring>(const char *name, int64 value)</argsstring>
        <name>AddInt64</name>
        <qualifiedname>BMessage::AddInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>int64</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_INT64_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aedbef710d7c8e61cd4ff93efbb32889a" kindref="member">FindInt64()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a2bb8e387b504dfe4ff47b7860ead1be9" kindref="member">GetInt64()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a97220953786ff1cbb286e7e1113510ff" kindref="member">ReplaceInt64()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="155" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1c6b3d4ee371ccb4ddfc6c0fd1dc8e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddUInt64</definition>
        <argsstring>(const char *name, uint64 value)</argsstring>
        <name>AddUInt64</name>
        <qualifiedname>BMessage::AddUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput>uint64</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_UINT64_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a20f4b14c6c45c4a24a3cbeea4347f79a" kindref="member">FindUInt64()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4d8f178f02212949cdd497c392ff6f13" kindref="member">GetUInt64()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ad906dc7124f3dab9f41ca94f678c29d4" kindref="member">ReplaceUInt64()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="156" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a2976642c2259ebad33704d1b127bae60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddBool</definition>
        <argsstring>(const char *name, bool value)</argsstring>
        <name>AddBool</name>
        <qualifiedname>BMessage::AddBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defname>aBoolean</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <computeroutput>bool</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_BOOL_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aBoolean</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a886d79a7c580d3563940333cfa7f3870" kindref="member">FindBool()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aff0242cacf8613b9e58dde7871c4c21c" kindref="member">GetBool()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a64357e8743595d49dd53975e3f534a3f" kindref="member">ReplaceBool()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="157" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acdffd573b491074deef980df9f7f6e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddFloat</definition>
        <argsstring>(const char *name, float value)</argsstring>
        <name>AddFloat</name>
        <qualifiedname>BMessage::AddFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
          <defname>aFloat</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <computeroutput>float</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_FLOAT_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFloat</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ac26f15d78b69e330f9cb933db8c0500b" kindref="member">FindFloat()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a2f5426192ec8ca235dd9f936510c4e93" kindref="member">GetFloat()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ab0c54a885d2cf1826dcb2fa53cfd0175" kindref="member">ReplaceFloat()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="158" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a77a042d689d478572e23e87c3ad9982f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddDouble</definition>
        <argsstring>(const char *name, double value)</argsstring>
        <name>AddDouble</name>
        <qualifiedname>BMessage::AddDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
          <defname>aDouble</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <computeroutput>double</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_DOUBLE_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDouble</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a32672932ca24ee53b3642bf9d25f709d" kindref="member">FindDouble()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a018eed03b3b69e4248518e2a7c4a1c03" kindref="member">GetDouble()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a023f8e3aa932cd312acd5653ecebaca4" kindref="member">ReplaceDouble()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="159" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae6e41cb30d1fb757a264a38ca6c27224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddColor</definition>
        <argsstring>(const char *name, rgb_color value)</argsstring>
        <name>AddColor</name>
        <qualifiedname>BMessage::AddColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>value</declname>
          <defname>aColor</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <computeroutput><ref refid="structrgb__color" kindref="compound">rgb_color</ref></computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_RGB_32_BIT_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColor</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ae6e41cb30d1fb757a264a38ca6c27224" kindref="member">AddColor()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a8980e233e8afb3f302dc5218483a5456" kindref="member">FindColor()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a9471fc71d82ff91681ed35ee714041b8" kindref="member">GetColor()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1af712a6b0c6921803023c1314e39b09fd" kindref="member">ReplaceColor()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="160" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3dc68e69cb8da2ca0f7512e42c4393fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddPointer</definition>
        <argsstring>(const char *name, const void *pointer)</argsstring>
        <name>AddPointer</name>
        <qualifiedname>BMessage::AddPointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pointer</declname>
          <defname>aPointer</defname>
        </param>
        <briefdescription>
<para>Convenience method to add a <computeroutput>pointer</computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_POINTER_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><simplesect kind="warning"><para>If you want to share objects between applications, remember that each application has its own address space, and that it therefore is useless to try to pass around objects by sending pointers in messages. You should think about copying the entire object in the message, or you should consider using shared memory.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aee05fc5fe7053a1d85deb3169742e05a" kindref="member">FindPointer()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aaa543367787ed528566a4f629e78f60b" kindref="member">ReplacePointer()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="161" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac7f46a46a04dcbfd9fd2af6dfb2d3850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddMessenger</definition>
        <argsstring>(const char *name, BMessenger messenger)</argsstring>
        <name>AddMessenger</name>
        <qualifiedname>BMessage::AddMessenger</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>messenger</declname>
        </param>
        <briefdescription>
<para>Convenience method to add a messenger to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_MESSENGER_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>messenger</parametername>
</parameternamelist>
<parameterdescription>
<para>The messenger to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a1b01edbdb7740ad1a06b2e81366fd47d" kindref="member">FindMessenger()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ada775f0c198e3968eedd03a6ad2daa49" kindref="member">ReplaceMessenger()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="163" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8e67d1398ecbfc5c75ab90ee2e602af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddRef</definition>
        <argsstring>(const char *name, const entry_ref *ref)</argsstring>
        <name>AddRef</name>
        <qualifiedname>BMessage::AddRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Convenience method to add an <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_REF_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a85035f98a61911e973af9a8821b5e254" kindref="member">FindRef()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a44077e7618f42a388db207724075c0a6" kindref="member">ReplaceRef()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="165" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4e486773f6adca4610d01d96c0bd6d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddNodeRef</definition>
        <argsstring>(const char *name, const node_ref *ref)</argsstring>
        <name>AddNodeRef</name>
        <qualifiedname>BMessage::AddNodeRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Convenience method to add a <computeroutput><ref refid="structnode__ref" kindref="compound">node_ref</ref></computeroutput> with the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_NODE_REF_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The node reference to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1acfb1819b93db7eadd0cabcd1cf1d45ec" kindref="member">FindNodeRef()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a57fb9d5c2b6aafc45932e5a10f1747a7" kindref="member">ReplaceNodeRef()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="166" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a421a8dee0e636fe619e9ebf561aafa0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddMessage</definition>
        <argsstring>(const char *name, const BMessage *message)</argsstring>
        <name>AddMessage</name>
        <qualifiedname>BMessage::AddMessage</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Convenience method to add a message to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method calls <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> with the <computeroutput>B_MESSAGE_TYPE</computeroutput> <emphasis>type</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to store in this message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a8286c1590191f37641ac6916aaf6418b" kindref="member">FindMessage()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a7c9f522c31ffee206e1df06aa8246f30" kindref="member">ReplaceMessage()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="168" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1d1ea741ffa1841ef1667a3daa1ce7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddFlat</definition>
        <argsstring>(const char *name, BFlattenable *object, int32 count=1)</argsstring>
        <name>AddFlat</name>
        <qualifiedname>BMessage::AddFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Convenience method to add a flattenable to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="170" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac04c2914f73813a766c5644765a506a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddFlat</definition>
        <argsstring>(const char *name, const BFlattenable *object, int32 count=1)</argsstring>
        <name>AddFlat</name>
        <qualifiedname>BMessage::AddFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Convenience method to add a flattenable to the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method uses <ref refid="classBFlattenable_1a819507fa1b0906f14299db15f6e990d1" kindref="member">BFlattenable::TypeCode()</ref> to determine the type. It also uses <ref refid="classBFlattenable_1ac019f502749a0cc78082f5ec7c8f5b56" kindref="member">BFlattenable::IsFixedSize()</ref> to determine whether or not the size of the object is supposedly always the same. You can specify a <emphasis>count</emphasis>, to pre-allocate more entries if you are going to add more than one of this type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to associate the data with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to flatten into the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of items to pre-allocate associated with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref> for a more detailed overview of the inner workings. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ae910af356e0732edaa09260e47e1bbd0" kindref="member">FindFlat()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1aaa8c8f67ea3314d93f39e1618b19621e" kindref="member">ReplaceFlat()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="172" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::AddData</definition>
        <argsstring>(const char *name, type_code type, const void *data, ssize_t numBytes, bool isFixedSize=true, int32 count=1)</argsstring>
        <name>AddData</name>
        <qualifiedname>BMessage::AddData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>numBytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFixedSize</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Add <emphasis>data</emphasis> of a certain <emphasis>type</emphasis> to the message. </para>
        </briefdescription>
        <detaileddescription>
<para>The amount of <emphasis>numBytes</emphasis> is copied into the message. The data is stored at the label specified in <emphasis>name</emphasis>. You are responsible for specifying the correct <emphasis>type</emphasis>. The Haiku API already specifies many constants, such as <computeroutput>B_FLOAT_TYPE</computeroutput> or <computeroutput>B_RECT_TYPE</computeroutput>. See <ref refid="TypeConstants_8h" kindref="compound">TypeConstants.h</ref> for more information on the system-wide defined types.</para>
<para>If the field with the <emphasis>name</emphasis> already exists, the data is added in an array-like form. If you are adding a certain <emphasis>name</emphasis> for the first time, you are able to specify some properties of this array. You can fix the size of each data entry, and you can also instruct <ref refid="classBMessage" kindref="compound">BMessage</ref> to allocate a <emphasis>count</emphasis> of items. The latter does not mean that the number of items is fixed; the array will grow nonetheless. Also, note that every <emphasis>name</emphasis> can only be associated with one <emphasis>type</emphasis> of data.</para>
<para>If consecutive method calls specify a different <emphasis>type</emphasis> than the initial, these calls will fail.</para>
<para>There is no limit to the number of labels, or the amount of data, but note that searching of data members is linear, as well as that some messages will be copied whilst being passed around, so if the amount of data you need to pass is too big, find another way to pass it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which this data needs to be associated. If the <emphasis>name</emphasis> already exists, the new data will be added in an array-like style. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data. If you are adding data to the same <emphasis>name</emphasis>, make sure it is the same type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data buffer to copy the bytes from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to be copied. If this is the first call to this method for this type of data, and you set <emphasis>isFixedSize</emphasis> to <computeroutput>true</computeroutput>, this will specify the size of all consecutive calls to this method. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isFixedSize</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is the first call to this method with this <emphasis>name</emphasis>, you can specify the whether or not all items in this array should have the same fixed size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is the first call to this method with this <emphasis>name</emphasis>, you can instruct this message to allocate a number of items in advance. This does not limit the amount of items though. The array will grow if needed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>data</emphasis> is succesfully added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>numBytes</emphasis> is less than, or equal to <computeroutput>0</computeroutput>, or the size of this item is larger than the <emphasis>name</emphasis> allows, since it has been specified to have a fixed size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>There was an error whilst creating the label with your <emphasis>name</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>type</emphasis> you specified is different than the one already associated with <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="174" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac2441b6ef13598fb8289c392b6588882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::Append</definition>
        <argsstring>(const BMessage &amp;message)</argsstring>
        <name>Append</name>
        <qualifiedname>BMessage::Append</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Append the data of another <emphasis>message</emphasis> to this message. </para>
        </briefdescription>
        <detaileddescription>
<para>This copies all the data of the <emphasis>message</emphasis> to this message. If an item already exists with a given name, and the incoming data is of the same type, the new items will be added to that label. If the item exists but has a different type, then the call will fail. This might leave your message in an incomplete state, because data is processed field by field, so it could be that some data was copied succesfully. After encountering an incompatible data type, any data after that field will not be processed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message with the data you want to append. This message will not be modified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="178" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Removing Data</header>
      <memberdef kind="function" id="classBMessage_1a72ce9596ebe74ce6e995705304b7fc7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::RemoveData</definition>
        <argsstring>(const char *name, int32 index=0)</argsstring>
        <name>RemoveData</name>
        <qualifiedname>BMessage::RemoveData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Remove data associated with <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this is the only instance of the data, then the entire label will be removed. This means you can recreate it with another type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>name</emphasis> of which the associated data should be cleared. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> of the item that should be cleared.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The data has been removed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> is less than <computeroutput>0</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> is out of bounds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>name</emphasis> does not have any data associated with it.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a5db9b5a9ddc0b04173afb8dbc1c69e5c" kindref="member">RemoveName()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1abac76b537c88ce7f1a127fa6425c3279" kindref="member">MakeEmpty()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="181" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a5db9b5a9ddc0b04173afb8dbc1c69e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::RemoveName</definition>
        <argsstring>(const char *name)</argsstring>
        <name>RemoveName</name>
        <qualifiedname>BMessage::RemoveName</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Remove all data associated with a <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This also removes the label, so that you can recreate it with another type, if you want to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>name</emphasis> that refers to the data you want to clear out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>All the data is removed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>name</emphasis> pointer points to <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>name</emphasis> does not exist in this message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a72ce9596ebe74ce6e995705304b7fc7d" kindref="member">RemoveData()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1abac76b537c88ce7f1a127fa6425c3279" kindref="member">MakeEmpty()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="182" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1abac76b537c88ce7f1a127fa6425c3279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::MakeEmpty</definition>
        <argsstring>()</argsstring>
        <name>MakeEmpty</name>
        <qualifiedname>BMessage::MakeEmpty</qualifiedname>
        <briefdescription>
<para>Clear all data and metadata in this message. </para>
        </briefdescription>
        <detaileddescription>
<para>Everything is cleared out, all labels and all associated data, as well as metadata such as reply info.</para>
<para><simplesect kind="return"><para>This method always returns <computeroutput>B_OK</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a72ce9596ebe74ce6e995705304b7fc7d" kindref="member">RemoveData()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a5db9b5a9ddc0b04173afb8dbc1c69e5c" kindref="member">RemoveName()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="183" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Finding Data</header>
      <description><para>Look at <ref refid="classBMessage_1a1e896648ee668dd5d6c8a4311d6cfa94" kindref="member">FindData()</ref> for a general introduction to finding data. </para>
</description>
      <memberdef kind="function" id="classBMessage_1abf81526338001abe288b5831fcb88874" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindAlignment</definition>
        <argsstring>(const char *name, BAlignment *alignment) const</argsstring>
        <name>FindAlignment</name>
        <qualifiedname>BMessage::FindAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref> *</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Find an alignment at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1ac124217fb122b3e012ee431fb3cbd68f" kindref="member">FindAlignment(const char*, int32, BAlignment*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="186" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac124217fb122b3e012ee431fb3cbd68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindAlignment</definition>
        <argsstring>(const char *name, int32 index, BAlignment *alignment) const</argsstring>
        <name>FindAlignment</name>
        <qualifiedname>BMessage::FindAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref> *</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Find an alignment at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_ALIGNMENT_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1abf81526338001abe288b5831fcb88874" kindref="member">FindAlignment(const char*, BAlignment*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="188" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a84e6020b903936f61538e33988792956" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindRect</definition>
        <argsstring>(const char *name, BRect *rect) const</argsstring>
        <name>FindRect</name>
        <qualifiedname>BMessage::FindRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Find a rectangle at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1abc4398bca7420cc74c4d5cc76ccba018" kindref="member">FindRect(const char*, int32, BRect*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="191" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1abc4398bca7420cc74c4d5cc76ccba018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindRect</definition>
        <argsstring>(const char *name, int32 index, BRect *rect) const</argsstring>
        <name>FindRect</name>
        <qualifiedname>BMessage::FindRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Find a rectangle at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_RECT_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a84e6020b903936f61538e33988792956" kindref="member">FindRect(const char*, BRect*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="192" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a88507a5c41974ab5c13dd5da800a68d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindPoint</definition>
        <argsstring>(const char *name, BPoint *point) const</argsstring>
        <name>FindPoint</name>
        <qualifiedname>BMessage::FindPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Find a point at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a9a53e98aa4593529103051dbcd0186d4" kindref="member">FindPoint(const char*, int32, BPoint*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="194" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a9a53e98aa4593529103051dbcd0186d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindPoint</definition>
        <argsstring>(const char *name, int32 index, BPoint *point) const</argsstring>
        <name>FindPoint</name>
        <qualifiedname>BMessage::FindPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Find a point at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_POINT_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a88507a5c41974ab5c13dd5da800a68d7" kindref="member">FindPoint(const char*, BPoint*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="196" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a463777b0384a8ee580709c62dfbfa2ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindSize</definition>
        <argsstring>(const char *name, BSize *size) const</argsstring>
        <name>FindSize</name>
        <qualifiedname>BMessage::FindSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref> *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Find a size at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a769dcfc011f91c8372512f7396e6e59e" kindref="member">FindSize(const char*, int32, BSize*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="199" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a769dcfc011f91c8372512f7396e6e59e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindSize</definition>
        <argsstring>(const char *name, int32 index, BSize *size) const</argsstring>
        <name>FindSize</name>
        <qualifiedname>BMessage::FindSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref> *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Find a size at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_SIZE_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a463777b0384a8ee580709c62dfbfa2ca" kindref="member">FindSize(const char*, BSize*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="200" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac2a5b50960210666f57952b3a050530d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindString</definition>
        <argsstring>(const char *name, const char **string) const</argsstring>
        <name>FindString</name>
        <qualifiedname>BMessage::FindString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find a string at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a4370bfd828545100484adaf51a38df47" kindref="member">FindString(const char*, int32, const char**) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="203" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4370bfd828545100484adaf51a38df47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindString</definition>
        <argsstring>(const char *name, int32 index, const char **string) const</argsstring>
        <name>FindString</name>
        <qualifiedname>BMessage::FindString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find a string at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_STRING_TYPE</computeroutput>, and returns a pointer to the internal buffer of the message. Note that this pointer is valid, until the message is deleted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ac2a5b50960210666f57952b3a050530d" kindref="member">FindString(const char*, const char**) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a35f163b19ec1862a2f117d1d1ac3ef46" kindref="member">FindString(const char*, int32, BString*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="205" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a2930978f62db0238b780d67a1e74e69b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindString</definition>
        <argsstring>(const char *name, BString *string) const</argsstring>
        <name>FindString</name>
        <qualifiedname>BMessage::FindString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find a string at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a35f163b19ec1862a2f117d1d1ac3ef46" kindref="member">FindString(const char*, int32, BString*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="207" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a35f163b19ec1862a2f117d1d1ac3ef46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindString</definition>
        <argsstring>(const char *name, int32 index, BString *string) const</argsstring>
        <name>FindString</name>
        <qualifiedname>BMessage::FindString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Find a string at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_STRING_TYPE</computeroutput>, and copies it into the <emphasis>string</emphasis> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a2930978f62db0238b780d67a1e74e69b" kindref="member">FindString(const char*, BString*) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a4370bfd828545100484adaf51a38df47" kindref="member">FindString(const char*, int32, const char**) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="209" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1a482768af8c3361ae84f5458d674175" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindStrings</definition>
        <argsstring>(const char *name, BStringList *list) const</argsstring>
        <name>FindStrings</name>
        <qualifiedname>BMessage::FindStrings</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBStringList" kindref="compound">BStringList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Find all the strings at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method fetches all the strings that are stored at label <emphasis>name</emphasis>, and copies all the entries into the <emphasis>list</emphasis>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="211" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a757685e8e85ac38f882e28bd281e9f9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt8</definition>
        <argsstring>(const char *name, int8 *value) const</argsstring>
        <name>FindInt8</name>
        <qualifiedname>BMessage::FindInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1aed840d1a802546534eaa95e5f1247a53" kindref="member">FindInt8(const char*, int32, int8*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="213" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aed840d1a802546534eaa95e5f1247a53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt8</definition>
        <argsstring>(const char *name, int32 index, int8 *value) const</argsstring>
        <name>FindInt8</name>
        <qualifiedname>BMessage::FindInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_INT8_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a757685e8e85ac38f882e28bd281e9f9d" kindref="member">FindInt8(const char*, int8*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="214" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a37170512c52bac977fb81e7c9d44ef95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt8</definition>
        <argsstring>(const char *name, uint8 *value) const</argsstring>
        <name>FindUInt8</name>
        <qualifiedname>BMessage::FindUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1ab5ce6415eb074f94f1f8dc59f8c3985e" kindref="member">FindUInt8(const char*, int32, uint8*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="216" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ab5ce6415eb074f94f1f8dc59f8c3985e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt8</definition>
        <argsstring>(const char *name, int32 index, uint8 *value) const</argsstring>
        <name>FindUInt8</name>
        <qualifiedname>BMessage::FindUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_UINT8_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a37170512c52bac977fb81e7c9d44ef95" kindref="member">FindUInt8(const char*, uint8*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="217" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4dd27c3a8fc6e2e0366d77254b2095e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt16</definition>
        <argsstring>(const char *name, int16 *value) const</argsstring>
        <name>FindInt16</name>
        <qualifiedname>BMessage::FindInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1afedef75ac1e9c5a1d3f069b641975041" kindref="member">FindInt16(const char*, int32, int16*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="219" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1afedef75ac1e9c5a1d3f069b641975041" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt16</definition>
        <argsstring>(const char *name, int32 index, int16 *value) const</argsstring>
        <name>FindInt16</name>
        <qualifiedname>BMessage::FindInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_INT16_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a4dd27c3a8fc6e2e0366d77254b2095e6" kindref="member">FindInt16(const char*, int16*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="220" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a5653c46ede97ff7667d0e823674b5953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt16</definition>
        <argsstring>(const char *name, uint16 *value) const</argsstring>
        <name>FindUInt16</name>
        <qualifiedname>BMessage::FindUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a761a6bb39440a15176c5dc600d7b7041" kindref="member">FindUInt16(const char*, int32, uint16*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="222" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a761a6bb39440a15176c5dc600d7b7041" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt16</definition>
        <argsstring>(const char *name, int32 index, uint16 *value) const</argsstring>
        <name>FindUInt16</name>
        <qualifiedname>BMessage::FindUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_UINT16_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a5653c46ede97ff7667d0e823674b5953" kindref="member">FindUInt16(const char*, uint16*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="224" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af6ee3d278ed11bdafb60047b03c18ab9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt32</definition>
        <argsstring>(const char *name, int32 *value) const</argsstring>
        <name>FindInt32</name>
        <qualifiedname>BMessage::FindInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1afce55a9ef851c34fa07d21bcf9e2f1f2" kindref="member">FindInt32(const char*, int32, int32*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="226" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1afce55a9ef851c34fa07d21bcf9e2f1f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt32</definition>
        <argsstring>(const char *name, int32 index, int32 *value) const</argsstring>
        <name>FindInt32</name>
        <qualifiedname>BMessage::FindInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_INT32_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1af6ee3d278ed11bdafb60047b03c18ab9" kindref="member">FindInt32(const char*, int32*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="227" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a486a2138fb0edc7bf17b1a9676d5ecde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt32</definition>
        <argsstring>(const char *name, uint32 *value) const</argsstring>
        <name>FindUInt32</name>
        <qualifiedname>BMessage::FindUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a10e79ec598190c30d3d07c46c297eacf" kindref="member">FindUInt32(const char*, int32, uint32*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="229" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a10e79ec598190c30d3d07c46c297eacf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt32</definition>
        <argsstring>(const char *name, int32 index, uint32 *value) const</argsstring>
        <name>FindUInt32</name>
        <qualifiedname>BMessage::FindUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_UINT32_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a486a2138fb0edc7bf17b1a9676d5ecde" kindref="member">FindUInt32(const char*, uint32*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="231" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aedbef710d7c8e61cd4ff93efbb32889a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt64</definition>
        <argsstring>(const char *name, int64 *value) const</argsstring>
        <name>FindInt64</name>
        <qualifiedname>BMessage::FindInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1ab3eef33595e98a3df56d18ade5f41a98" kindref="member">FindInt64(const char*, int32, int64*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="233" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ab3eef33595e98a3df56d18ade5f41a98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindInt64</definition>
        <argsstring>(const char *name, int32 index, int64 *value) const</argsstring>
        <name>FindInt64</name>
        <qualifiedname>BMessage::FindInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_INT64_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1aedbef710d7c8e61cd4ff93efbb32889a" kindref="member">FindInt64(const char*, int64*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="234" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a20f4b14c6c45c4a24a3cbeea4347f79a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt64</definition>
        <argsstring>(const char *name, uint64 *value) const</argsstring>
        <name>FindUInt64</name>
        <qualifiedname>BMessage::FindUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1abd21bedb93952f87cd12bf50c89d8612" kindref="member">FindUInt64(const char*, int32, uint64*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="236" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1abd21bedb93952f87cd12bf50c89d8612" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindUInt64</definition>
        <argsstring>(const char *name, int32 index, uint64 *value) const</argsstring>
        <name>FindUInt64</name>
        <qualifiedname>BMessage::FindUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find an integer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_UINT64_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a20f4b14c6c45c4a24a3cbeea4347f79a" kindref="member">FindUInt64(const char*, uint64*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="238" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a886d79a7c580d3563940333cfa7f3870" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindBool</definition>
        <argsstring>(const char *name, bool *value) const</argsstring>
        <name>FindBool</name>
        <qualifiedname>BMessage::FindBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a boolean at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a99405de493bf7e49ce033ef8cac8825b" kindref="member">FindBool(const char*, int32, bool*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="240" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a99405de493bf7e49ce033ef8cac8825b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindBool</definition>
        <argsstring>(const char *name, int32 index, bool *value) const</argsstring>
        <name>FindBool</name>
        <qualifiedname>BMessage::FindBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a boolean at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_BOOL_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a886d79a7c580d3563940333cfa7f3870" kindref="member">FindBool(const char*, bool*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="241" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac26f15d78b69e330f9cb933db8c0500b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindFloat</definition>
        <argsstring>(const char *name, float *value) const</argsstring>
        <name>FindFloat</name>
        <qualifiedname>BMessage::FindFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a float at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1af5d62fe0dba7074556b877a52d1cecb2" kindref="member">FindFloat(const char*, int32, float*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="243" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af5d62fe0dba7074556b877a52d1cecb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindFloat</definition>
        <argsstring>(const char *name, int32 index, float *value) const</argsstring>
        <name>FindFloat</name>
        <qualifiedname>BMessage::FindFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a float at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_FLOAT_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ac26f15d78b69e330f9cb933db8c0500b" kindref="member">FindFloat(const char*, float*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="244" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a32672932ca24ee53b3642bf9d25f709d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindDouble</definition>
        <argsstring>(const char *name, double *value) const</argsstring>
        <name>FindDouble</name>
        <qualifiedname>BMessage::FindDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a double at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1ac332368de00ff51eb06097e134244e5a" kindref="member">FindDouble(const char*, int32, double*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="246" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac332368de00ff51eb06097e134244e5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindDouble</definition>
        <argsstring>(const char *name, int32 index, double *value) const</argsstring>
        <name>FindDouble</name>
        <qualifiedname>BMessage::FindDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a double at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_DOUBLE_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a32672932ca24ee53b3642bf9d25f709d" kindref="member">FindDouble(const char*, double*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="248" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8980e233e8afb3f302dc5218483a5456" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindColor</definition>
        <argsstring>(const char *name, rgb_color *value) const</argsstring>
        <name>FindColor</name>
        <qualifiedname>BMessage::FindColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a color with the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a6e05596bbf62217b061e54a18fa51a72" kindref="member">FindColor(const char*, int32, rgb_color*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="250" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6e05596bbf62217b061e54a18fa51a72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindColor</definition>
        <argsstring>(const char *name, int32 index, rgb_color *value) const</argsstring>
        <name>FindColor</name>
        <qualifiedname>BMessage::FindColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Find a color at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_RGB_32_BIT_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a8980e233e8afb3f302dc5218483a5456" kindref="member">FindColor(const char*, rgb_color*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="252" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aee05fc5fe7053a1d85deb3169742e05a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindPointer</definition>
        <argsstring>(const char *name, void **pointer) const</argsstring>
        <name>FindPointer</name>
        <qualifiedname>BMessage::FindPointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Find a pointer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of FindPointer(const char*, int32, void*) const where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="254" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4de3e5f0cb4d25da0e00b13e33d28a66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindPointer</definition>
        <argsstring>(const char *name, int32 index, void **pointer) const</argsstring>
        <name>FindPointer</name>
        <qualifiedname>BMessage::FindPointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Find a pointer at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_POINTER_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><simplesect kind="warning"><para>If you want to share objects between applications, remember that each application has its own address space, and that it therefore is useless to try to pass around objects by sending pointers in messages. You should think about copying the entire object in the message, or you should consider using shared memory.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>FindPointer(const char*, void*) const</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="256" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1b01edbdb7740ad1a06b2e81366fd47d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindMessenger</definition>
        <argsstring>(const char *name, BMessenger *messenger) const</argsstring>
        <name>FindMessenger</name>
        <qualifiedname>BMessage::FindMessenger</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref> *</type>
          <declname>messenger</declname>
        </param>
        <briefdescription>
<para>Find a messenger at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a87a4b0591e87332366a99d09462d9be8" kindref="member">FindMessenger(const char*, int32, BMessenger*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>messenger</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="258" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a87a4b0591e87332366a99d09462d9be8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindMessenger</definition>
        <argsstring>(const char *name, int32 index, BMessenger *messenger) const</argsstring>
        <name>FindMessenger</name>
        <qualifiedname>BMessage::FindMessenger</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref> *</type>
          <declname>messenger</declname>
        </param>
        <briefdescription>
<para>Find a messenger at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_MESSENGER_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>messenger</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a1b01edbdb7740ad1a06b2e81366fd47d" kindref="member">FindMessenger(const char*, BMessenger*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="260" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a85035f98a61911e973af9a8821b5e254" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindRef</definition>
        <argsstring>(const char *name, entry_ref *ref) const</argsstring>
        <name>FindRef</name>
        <qualifiedname>BMessage::FindRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Find a reference to a file at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a4b1c2190d9f3742c86edc72c3c49eeca" kindref="member">FindRef(const char*, int32, entry_ref*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="262" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4b1c2190d9f3742c86edc72c3c49eeca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindRef</definition>
        <argsstring>(const char *name, int32 index, entry_ref *ref) const</argsstring>
        <name>FindRef</name>
        <qualifiedname>BMessage::FindRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Find a reference to a file at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_REF_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a85035f98a61911e973af9a8821b5e254" kindref="member">FindRef(const char*, entry_ref*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="263" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acfb1819b93db7eadd0cabcd1cf1d45ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindNodeRef</definition>
        <argsstring>(const char *name, node_ref *ref) const</argsstring>
        <name>FindNodeRef</name>
        <qualifiedname>BMessage::FindNodeRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structnode__ref" kindref="compound">node_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Find a reference to a node at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a4a4b0e9e0a52151ec8d1df979925857a" kindref="member">FindNodeRef(const char*, int32, node_ref*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object into which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="265" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4a4b0e9e0a52151ec8d1df979925857a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindNodeRef</definition>
        <argsstring>(const char *name, int32 index, node_ref *ref) const</argsstring>
        <name>FindNodeRef</name>
        <qualifiedname>BMessage::FindNodeRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structnode__ref" kindref="compound">node_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Find a reference to a node at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_NODE_REF_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1acfb1819b93db7eadd0cabcd1cf1d45ec" kindref="member">FindNodeRef(const char*, node_ref*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="267" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8286c1590191f37641ac6916aaf6418b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindMessage</definition>
        <argsstring>(const char *name, BMessage *message) const</argsstring>
        <name>FindMessage</name>
        <qualifiedname>BMessage::FindMessage</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Find a message at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1aecdfe05be151ea5a978225152486d44a" kindref="member">FindMessage(const char*, int32, BMessage*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="269" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aecdfe05be151ea5a978225152486d44a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindMessage</definition>
        <argsstring>(const char *name, int32 index, BMessage *message) const</argsstring>
        <name>FindMessage</name>
        <qualifiedname>BMessage::FindMessage</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Find a message at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method looks for the data with the <computeroutput>B_MESSAGE_TYPE</computeroutput>, and copies it into a provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a8286c1590191f37641ac6916aaf6418b" kindref="member">FindMessage(const char*, BMessage*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="271" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae910af356e0732edaa09260e47e1bbd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindFlat</definition>
        <argsstring>(const char *name, BFlattenable *object) const</argsstring>
        <name>FindFlat</name>
        <qualifiedname>BMessage::FindFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Find a flattened object at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1a017c619934572443bf1ac5161dcdb2c2" kindref="member">FindFlat(const char*, int32, BFlattenable*) const</ref> where the data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be unflattened.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="273" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a017c619934572443bf1ac5161dcdb2c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindFlat</definition>
        <argsstring>(const char *name, int32 index, BFlattenable *object) const</argsstring>
        <name>FindFlat</name>
        <qualifiedname>BMessage::FindFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Find a flattened object at the label <emphasis>name</emphasis> at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The type is determined by the type of the passed object. If that type is available at the specified label, then the <ref refid="classBMessage_1a6704fc8df822fc366b616c3abf36ae9f" kindref="member">Unflatten()</ref> method of that object will be called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label to which the data is associated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index from which the data should be unflattened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object in which the data should be unflattened.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ae910af356e0732edaa09260e47e1bbd0" kindref="member">FindFlat(const char*, BFlattenable*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="275" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1e896648ee668dd5d6c8a4311d6cfa94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindData</definition>
        <argsstring>(const char *name, type_code type, const void **data, ssize_t *numBytes) const</argsstring>
        <name>FindData</name>
        <qualifiedname>BMessage::FindData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ssize_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Find <emphasis>data</emphasis> that is stored in this message. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded version of <ref refid="classBMessage_1aea11107bcd353be1dfde351850fe7ee0" kindref="member">FindData(const char*, type_code, int32, const void**, ssize_t*) const</ref> where data is sought at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="277" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aea11107bcd353be1dfde351850fe7ee0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::FindData</definition>
        <argsstring>(const char *name, type_code type, int32 index, const void **data, ssize_t *numBytes) const</argsstring>
        <name>FindData</name>
        <qualifiedname>BMessage::FindData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ssize_t *</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Find <emphasis>data</emphasis> that is stored in this message at an <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method matches the label <emphasis>name</emphasis> with the <emphasis>type</emphasis> you are asking for, and it looks for the data that is stored at a certain <emphasis>index</emphasis> number. If all these things match, you will get a pointer to the internal buffer, and the method will put the size of the item in <emphasis>numBytes</emphasis>.</para>
<para>Note that only this method, and FindString(const char*, const char**), pass a pointer to the internal buffer. The other more specific methods, such as <ref refid="classBMessage_1a886d79a7c580d3563940333cfa7f3870" kindref="member">FindBool()</ref> and <ref refid="classBMessage_1a84e6020b903936f61538e33988792956" kindref="member">FindRect()</ref> copy the data into a buffer you specify. This means that the data retrieved with this method is valid until the message is deleted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The label the data should be associated with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data you want to retrieve. You can pass <computeroutput>B_ANY_TYPE</computeroutput> if you don&apos;t mind which type the data is. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array of the data that you want to retrieve. Note that the array is zero-based. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pointer where the data can point to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data will be put in this parameter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>name</emphasis> was found, matches the type, and the data at <emphasis>index</emphasis> has been put in <emphasis>data</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the output arguments were <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> does not exist. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref> <ref refid="classBMessage_1aea11107bcd353be1dfde351850fe7ee0" kindref="member">FindData(const char*, type_code, int32,
	const void**, ssize_t*) const</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="279" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Replacing Data</header>
      <description><para>Look at <ref refid="classBMessage_1a79bc7d526090a5b1f4d8958d72e55d31" kindref="member">ReplaceData()</ref> for a general introduction to replacing data. </para>
</description>
      <memberdef kind="function" id="classBMessage_1a7613f4cdd1154b3e70771fdc9a4e3e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceAlignment</definition>
        <argsstring>(const char *name, const BAlignment &amp;alignment)</argsstring>
        <name>ReplaceAlignment</name>
        <qualifiedname>BMessage::ReplaceAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBAlignment" kindref="compound">BAlignment</ref> &amp;</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Replace an alignment at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1ae6f32ad46aa14db07c9d324656daf871" kindref="member">ReplaceAlignment(const char*, int32, const BAlignment&amp;)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="284" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae6f32ad46aa14db07c9d324656daf871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceAlignment</definition>
        <argsstring>(const char *name, int32 index, const BAlignment &amp;alignment)</argsstring>
        <name>ReplaceAlignment</name>
        <qualifiedname>BMessage::ReplaceAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classBAlignment" kindref="compound">BAlignment</ref> &amp;</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Replace an alignment at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_ALIGNMENT_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a7613f4cdd1154b3e70771fdc9a4e3e04" kindref="member">ReplaceAlignment(const char*, const BAlignment&amp;)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="286" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa24fb4e8fbc39011d1b7fb55c7f752c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceRect</definition>
        <argsstring>(const char *name, BRect rect)</argsstring>
        <name>ReplaceRect</name>
        <qualifiedname>BMessage::ReplaceRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
          <defname>aRect</defname>
        </param>
        <briefdescription>
<para>Replace a rectangle at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a2e38c3d43259b9157cc5c8647030dac0" kindref="member">ReplaceRect(const char*, int32, BRect)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="289" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a2e38c3d43259b9157cc5c8647030dac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceRect</definition>
        <argsstring>(const char *name, int32 index, BRect rect)</argsstring>
        <name>ReplaceRect</name>
        <qualifiedname>BMessage::ReplaceRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>rect</declname>
          <defname>aRect</defname>
        </param>
        <briefdescription>
<para>Replace a rectangle at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_RECT_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRect</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1aa24fb4e8fbc39011d1b7fb55c7f752c1" kindref="member">ReplaceRect(const char*, BRect)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="290" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac1b948f0c5867720173ef96450201859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplacePoint</definition>
        <argsstring>(const char *name, BPoint aPoint)</argsstring>
        <name>ReplacePoint</name>
        <qualifiedname>BMessage::ReplacePoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>aPoint</declname>
        </param>
        <briefdescription>
<para>Replace a point at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a4897600b32e200802cf7c5d397f7e8cf" kindref="member">ReplacePoint(const char*, int32, BPoint)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="293" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4897600b32e200802cf7c5d397f7e8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplacePoint</definition>
        <argsstring>(const char *name, int32 index, BPoint aPoint)</argsstring>
        <name>ReplacePoint</name>
        <qualifiedname>BMessage::ReplacePoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>aPoint</declname>
        </param>
        <briefdescription>
<para>Replace a point at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_POINT_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ac1b948f0c5867720173ef96450201859" kindref="member">ReplacePoint(const char*, BPoint)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="294" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a440d37083df7c8845d3337cc8c9d695a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceSize</definition>
        <argsstring>(const char *name, BSize aSize)</argsstring>
        <name>ReplaceSize</name>
        <qualifiedname>BMessage::ReplaceSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>aSize</declname>
        </param>
        <briefdescription>
<para>Replace a size at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a9ff6d6940725e22e2fab190bf42a1659" kindref="member">ReplaceSize(const char*, int32, BSize)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object now contains the requested data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="296" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a9ff6d6940725e22e2fab190bf42a1659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceSize</definition>
        <argsstring>(const char *name, int32 index, BSize aSize)</argsstring>
        <name>ReplaceSize</name>
        <qualifiedname>BMessage::ReplaceSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>aSize</declname>
        </param>
        <briefdescription>
<para>Replace a size at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_SIZE_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a440d37083df7c8845d3337cc8c9d695a" kindref="member">ReplaceSize(const char*, BSize)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="297" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3a606679aa72f7530034994f9cf4ad32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceString</definition>
        <argsstring>(const char *name, const char *string)</argsstring>
        <name>ReplaceString</name>
        <qualifiedname>BMessage::ReplaceString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>aString</defname>
        </param>
        <briefdescription>
<para>Replace a string at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1aceeabb6ee480223b56d58e42a87ba7f5" kindref="member">ReplaceString(const char*, int32, const char*)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aString</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="300" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aceeabb6ee480223b56d58e42a87ba7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceString</definition>
        <argsstring>(const char *name, int32 index, const char *string)</argsstring>
        <name>ReplaceString</name>
        <qualifiedname>BMessage::ReplaceString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
          <defname>aString</defname>
        </param>
        <briefdescription>
<para>Replace a string at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_STRING_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aString</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a3a606679aa72f7530034994f9cf4ad32" kindref="member">ReplaceString(const char*, const char*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="302" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a15b2ce4ff50f420a64422545079af452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceString</definition>
        <argsstring>(const char *name, const BString &amp;string)</argsstring>
        <name>ReplaceString</name>
        <qualifiedname>BMessage::ReplaceString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
          <defname>aString</defname>
        </param>
        <briefdescription>
<para>Replace a string at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of ReplaceString(const char*, int32, BString&amp;). It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aString</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="304" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a59a40f04a1fc5b0fe523a6e025d9860e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceString</definition>
        <argsstring>(const char *name, int32 index, const BString &amp;string)</argsstring>
        <name>ReplaceString</name>
        <qualifiedname>BMessage::ReplaceString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
          <defname>aString</defname>
        </param>
        <briefdescription>
<para>Replace a string at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_STRING_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aString</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>ReplaceString(const char*, BString&amp;)</para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="306" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a55f909d237c7c1abfca5f918a8a5ffb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt8</definition>
        <argsstring>(const char *name, int8 value)</argsstring>
        <name>ReplaceInt8</name>
        <qualifiedname>BMessage::ReplaceInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a8ae3786000645416e1911fe2b618c432" kindref="member">ReplaceInt8(const char*, int32, int8)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="308" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8ae3786000645416e1911fe2b618c432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt8</definition>
        <argsstring>(const char *name, int32 index, int8 value)</argsstring>
        <name>ReplaceInt8</name>
        <qualifiedname>BMessage::ReplaceInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_INT8_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a55f909d237c7c1abfca5f918a8a5ffb9" kindref="member">ReplaceInt8(const char*, int8)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="309" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aee573704ea412f6b53e1904e22e65454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt8</definition>
        <argsstring>(const char *name, uint8 value)</argsstring>
        <name>ReplaceUInt8</name>
        <qualifiedname>BMessage::ReplaceUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1aff3cffe95f04bf5576393f65bb378a1c" kindref="member">ReplaceUInt8(const char*, int32, uint8)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="311" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aff3cffe95f04bf5576393f65bb378a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt8</definition>
        <argsstring>(const char *name, int32 index, uint8 value)</argsstring>
        <name>ReplaceUInt8</name>
        <qualifiedname>BMessage::ReplaceUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_UINT8_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1aee573704ea412f6b53e1904e22e65454" kindref="member">ReplaceUInt8(const char*, uint8)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="312" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a525deaa699950007c8fdab78c82ada32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt16</definition>
        <argsstring>(const char *name, int16 value)</argsstring>
        <name>ReplaceInt16</name>
        <qualifiedname>BMessage::ReplaceInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a05b21498414818bc51e76451a26a143f" kindref="member">ReplaceInt16(const char*, int32, int16)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="314" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a05b21498414818bc51e76451a26a143f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt16</definition>
        <argsstring>(const char *name, int32 index, int16 value)</argsstring>
        <name>ReplaceInt16</name>
        <qualifiedname>BMessage::ReplaceInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_INT16_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a525deaa699950007c8fdab78c82ada32" kindref="member">ReplaceInt16(const char*, int16)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="315" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a0029cb535e97ed753ee9529c646d763b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt16</definition>
        <argsstring>(const char *name, uint16 value)</argsstring>
        <name>ReplaceUInt16</name>
        <qualifiedname>BMessage::ReplaceUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1ab5d7606278375f280ab402b9f7e388be" kindref="member">ReplaceUInt16(const char*, int32, uint16)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="317" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ab5d7606278375f280ab402b9f7e388be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt16</definition>
        <argsstring>(const char *name, int32 index, uint16 value)</argsstring>
        <name>ReplaceUInt16</name>
        <qualifiedname>BMessage::ReplaceUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_UINT16_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a0029cb535e97ed753ee9529c646d763b" kindref="member">ReplaceUInt16(const char*, uint16)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="318" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad7b41f02b8a298bcd6699e972b88c82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt32</definition>
        <argsstring>(const char *name, int32 value)</argsstring>
        <name>ReplaceInt32</name>
        <qualifiedname>BMessage::ReplaceInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1ae1fe7f9855edb57e186cac617569cb79" kindref="member">ReplaceInt32(const char*, int32, int32)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="320" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae1fe7f9855edb57e186cac617569cb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt32</definition>
        <argsstring>(const char *name, int32 index, int32 value)</argsstring>
        <name>ReplaceInt32</name>
        <qualifiedname>BMessage::ReplaceInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_INT32_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ad7b41f02b8a298bcd6699e972b88c82e" kindref="member">ReplaceInt32(const char*, int32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="321" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1afdfe554348e5e672a1a358f3b944d63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt32</definition>
        <argsstring>(const char *name, uint32 value)</argsstring>
        <name>ReplaceUInt32</name>
        <qualifiedname>BMessage::ReplaceUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a8bd5a2123e4097377f33d12aca43b615" kindref="member">ReplaceUInt32(const char*, int32, uint32)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="323" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8bd5a2123e4097377f33d12aca43b615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt32</definition>
        <argsstring>(const char *name, int32 index, uint32 value)</argsstring>
        <name>ReplaceUInt32</name>
        <qualifiedname>BMessage::ReplaceUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_UINT32_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1afdfe554348e5e672a1a358f3b944d63e" kindref="member">ReplaceUInt32(const char*, uint32)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="324" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a97220953786ff1cbb286e7e1113510ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt64</definition>
        <argsstring>(const char *name, int64 value)</argsstring>
        <name>ReplaceInt64</name>
        <qualifiedname>BMessage::ReplaceInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1ac92d2b43a1dbc3e6591e0ddb03880e9b" kindref="member">ReplaceInt64(const char*, int32, int64)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="326" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac92d2b43a1dbc3e6591e0ddb03880e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceInt64</definition>
        <argsstring>(const char *name, int32 index, int64 value)</argsstring>
        <name>ReplaceInt64</name>
        <qualifiedname>BMessage::ReplaceInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_INT64_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a97220953786ff1cbb286e7e1113510ff" kindref="member">ReplaceInt64(const char*, int64)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="327" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad906dc7124f3dab9f41ca94f678c29d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt64</definition>
        <argsstring>(const char *name, uint64 value)</argsstring>
        <name>ReplaceUInt64</name>
        <qualifiedname>BMessage::ReplaceUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a66c1638d29c7474762e7ce3799785ffa" kindref="member">ReplaceUInt64(const char*, int32, uint64)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="329" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a66c1638d29c7474762e7ce3799785ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceUInt64</definition>
        <argsstring>(const char *name, int32 index, uint64 value)</argsstring>
        <name>ReplaceUInt64</name>
        <qualifiedname>BMessage::ReplaceUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace an integer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_UINT64_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ad906dc7124f3dab9f41ca94f678c29d4" kindref="member">ReplaceUInt64(const char*, uint64)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="330" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a64357e8743595d49dd53975e3f534a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceBool</definition>
        <argsstring>(const char *name, bool aBoolean)</argsstring>
        <name>ReplaceBool</name>
        <qualifiedname>BMessage::ReplaceBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>aBoolean</declname>
        </param>
        <briefdescription>
<para>Replace a boolean at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1af6bfc87ac8fe3f470b8d73a01dca388a" kindref="member">ReplaceBool(const char*, int32, bool)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aBoolean</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="332" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af6bfc87ac8fe3f470b8d73a01dca388a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceBool</definition>
        <argsstring>(const char *name, int32 index, bool value)</argsstring>
        <name>ReplaceBool</name>
        <qualifiedname>BMessage::ReplaceBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defname>aBoolean</defname>
        </param>
        <briefdescription>
<para>Replace a boolean at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_BOOL_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aBoolean</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a64357e8743595d49dd53975e3f534a3f" kindref="member">ReplaceBool(const char*, bool)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="333" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ab0c54a885d2cf1826dcb2fa53cfd0175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceFloat</definition>
        <argsstring>(const char *name, float value)</argsstring>
        <name>ReplaceFloat</name>
        <qualifiedname>BMessage::ReplaceFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
          <defname>aFloat</defname>
        </param>
        <briefdescription>
<para>Replace a float at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1ad081e12c8b593d03c7fbee4ea61c8f34" kindref="member">ReplaceFloat(const char*, int32, float)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFloat</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="335" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad081e12c8b593d03c7fbee4ea61c8f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceFloat</definition>
        <argsstring>(const char *name, int32 index, float value)</argsstring>
        <name>ReplaceFloat</name>
        <qualifiedname>BMessage::ReplaceFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
          <defname>aFloat</defname>
        </param>
        <briefdescription>
<para>Replace a float at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_FLOAT_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFloat</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ab0c54a885d2cf1826dcb2fa53cfd0175" kindref="member">ReplaceFloat(const char*, float)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="336" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a023f8e3aa932cd312acd5653ecebaca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceDouble</definition>
        <argsstring>(const char *name, double value)</argsstring>
        <name>ReplaceDouble</name>
        <qualifiedname>BMessage::ReplaceDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
          <defname>aDouble</defname>
        </param>
        <briefdescription>
<para>Replace a double at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1aee50e26caa09886d0cdcbc753a91317f" kindref="member">ReplaceDouble(const char*, int32, double)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDouble</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="338" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aee50e26caa09886d0cdcbc753a91317f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceDouble</definition>
        <argsstring>(const char *name, int32 index, double value)</argsstring>
        <name>ReplaceDouble</name>
        <qualifiedname>BMessage::ReplaceDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
          <defname>aDouble</defname>
        </param>
        <briefdescription>
<para>Replace a double at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_DOUBLE_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDouble</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1a023f8e3aa932cd312acd5653ecebaca4" kindref="member">ReplaceDouble(const char*, double)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="339" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af712a6b0c6921803023c1314e39b09fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceColor</definition>
        <argsstring>(const char *name, rgb_color value)</argsstring>
        <name>ReplaceColor</name>
        <qualifiedname>BMessage::ReplaceColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>value</declname>
          <defname>aColor</defname>
        </param>
        <briefdescription>
<para>Replace a color at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1ae0e39566d16d42b40a55e9809a3e93f9" kindref="member">ReplaceColor(const char*, int32, rgb_color)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColor</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="341" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae0e39566d16d42b40a55e9809a3e93f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceColor</definition>
        <argsstring>(const char *name, int32 index, rgb_color value)</argsstring>
        <name>ReplaceColor</name>
        <qualifiedname>BMessage::ReplaceColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>value</declname>
          <defname>aColor</defname>
        </param>
        <briefdescription>
<para>Replace a <ref refid="structrgb__color" kindref="compound">rgb_color</ref> at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_RGB_32_BIT_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aColor</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1af712a6b0c6921803023c1314e39b09fd" kindref="member">ReplaceColor(const char*, rgb_color)</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="343" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aaa543367787ed528566a4f629e78f60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplacePointer</definition>
        <argsstring>(const char *name, const void *pointer)</argsstring>
        <name>ReplacePointer</name>
        <qualifiedname>BMessage::ReplacePointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Replace a pointer at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a77be90c4ecd92ca28cea4dbc46f8e8a2" kindref="member">ReplacePointer(const char*, int32, const void*)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="345" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a77be90c4ecd92ca28cea4dbc46f8e8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplacePointer</definition>
        <argsstring>(const char *name, int32 index, const void *pointer)</argsstring>
        <name>ReplacePointer</name>
        <qualifiedname>BMessage::ReplacePointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Replace a pointer at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_POINTER_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1aaa543367787ed528566a4f629e78f60b" kindref="member">ReplacePointer(const char*, const void*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="347" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ada775f0c198e3968eedd03a6ad2daa49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceMessenger</definition>
        <argsstring>(const char *name, BMessenger messenger)</argsstring>
        <name>ReplaceMessenger</name>
        <qualifiedname>BMessage::ReplaceMessenger</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>messenger</declname>
        </param>
        <briefdescription>
<para>Replace a messenger at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1ad21e673615ff361bb5facce2632b57c1" kindref="member">ReplaceMessenger(const char*, int32, BMessenger)</ref>. It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>messenger</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="349" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad21e673615ff361bb5facce2632b57c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceMessenger</definition>
        <argsstring>(const char *name, int32 index, BMessenger messenger)</argsstring>
        <name>ReplaceMessenger</name>
        <qualifiedname>BMessage::ReplaceMessenger</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>messenger</declname>
        </param>
        <briefdescription>
<para>Replace a messenger at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_MESSENGER_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>messenger</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1ada775f0c198e3968eedd03a6ad2daa49" kindref="member">ReplaceMessenger(const char*, BMessenger)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="351" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a44077e7618f42a388db207724075c0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceRef</definition>
        <argsstring>(const char *name, const entry_ref *ref)</argsstring>
        <name>ReplaceRef</name>
        <qualifiedname>BMessage::ReplaceRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Replace a reference to a file at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of ReplaceRef(const char*, int32, entry_ref*). It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="353" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acb93b69f6693499b1886173a4900b8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceRef</definition>
        <argsstring>(const char *name, int32 index, const entry_ref *ref)</argsstring>
        <name>ReplaceRef</name>
        <qualifiedname>BMessage::ReplaceRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Replace a reference to a file at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_REF_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>ReplaceRef(const char*, entry_ref*)</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="355" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a57fb9d5c2b6aafc45932e5a10f1747a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceNodeRef</definition>
        <argsstring>(const char *name, const node_ref *ref)</argsstring>
        <name>ReplaceNodeRef</name>
        <qualifiedname>BMessage::ReplaceNodeRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Replace a reference to a node at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of ReplaceNodeRef(const char*, int32, node_ref*). It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="357" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4749eff1c0bfe6a258570536033dd698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceNodeRef</definition>
        <argsstring>(const char *name, int32 index, const node_ref *ref)</argsstring>
        <name>ReplaceNodeRef</name>
        <qualifiedname>BMessage::ReplaceNodeRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Replace a reference to a node at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_NODE_REF_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>ReplaceNodeRef(const char*, node_ref*)</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="359" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a7c9f522c31ffee206e1df06aa8246f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceMessage</definition>
        <argsstring>(const char *name, const BMessage *message)</argsstring>
        <name>ReplaceMessage</name>
        <qualifiedname>BMessage::ReplaceMessage</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Replace a message at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of ReplaceMessage(const char*, int32, BMessage*). It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="361" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1afc72518025d6c772e82acafad8669bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceMessage</definition>
        <argsstring>(const char *name, int32 index, const BMessage *message)</argsstring>
        <name>ReplaceMessage</name>
        <qualifiedname>BMessage::ReplaceMessage</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Replace a message at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the <computeroutput>B_MESSAGE_TYPE</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>ReplaceMessage(const char*, BMessage*)</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="363" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aaa8c8f67ea3314d93f39e1618b19621e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceFlat</definition>
        <argsstring>(const char *name, BFlattenable *object)</argsstring>
        <name>ReplaceFlat</name>
        <qualifiedname>BMessage::ReplaceFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Replace a flattened object at the label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method of <ref refid="classBMessage_1a32f79d59881b7bf9df0f1ab819fd9390" kindref="member">ReplaceFlat(const char*, int32, BFlattenable*)</ref>.</para>
<para>It replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="365" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a32f79d59881b7bf9df0f1ab819fd9390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceFlat</definition>
        <argsstring>(const char *name, int32 index, BFlattenable *object)</argsstring>
        <name>ReplaceFlat</name>
        <qualifiedname>BMessage::ReplaceFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Replace a flattened object at the label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The data at the specified <emphasis>name</emphasis> and <emphasis>index</emphasis> will be replaced, if it matches the type returned by your object. This method uses <ref refid="classBFlattenable_1a819507fa1b0906f14299db15f6e990d1" kindref="member">BFlattenable::TypeCode()</ref> to determine the type of the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to store in the message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The index was out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no field with this <emphasis>name</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMessage_1aaa8c8f67ea3314d93f39e1618b19621e" kindref="member">ReplaceFlat(const char*, BFlattenable*)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="367" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a79bc7d526090a5b1f4d8958d72e55d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceData</definition>
        <argsstring>(const char *name, type_code type, const void *data, ssize_t numBytes)</argsstring>
        <name>ReplaceData</name>
        <qualifiedname>BMessage::ReplaceData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Replace the data at label <emphasis>name</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an overloaded method that replaces the data at <emphasis>index</emphasis> <computeroutput>0</computeroutput>. See <ref refid="classBMessage_1a8d5e1ec791c56202414c6c1c407163d4" kindref="member">ReplaceData(const char*, type_code, int32, const void*, ssize_t)</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the new data that needs to be copied into the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the new data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="369" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8d5e1ec791c56202414c6c1c407163d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::ReplaceData</definition>
        <argsstring>(const char *name, type_code type, int32 index, const void *data, ssize_t numBytes)</argsstring>
        <name>ReplaceData</name>
        <qualifiedname>BMessage::ReplaceData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>numBytes</declname>
        </param>
        <briefdescription>
<para>Replace the data at label <emphasis>name</emphasis> at a specified <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The conditions for replacing data are that the<emphasis>name</emphasis> is correct, the <emphasis>type</emphasis> matches and the data entry at <emphasis>index</emphasis> exists.</para>
<para>There is also a collection of convenience methods, that allow you to efficiently replace rectanges (<ref refid="classBMessage_1aa24fb4e8fbc39011d1b7fb55c7f752c1" kindref="member">ReplaceRect()</ref>), booleans (<ref refid="classBMessage_1a64357e8743595d49dd53975e3f534a3f" kindref="member">ReplaceBool()</ref>), and so on.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the data to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index in the array to replace. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the new data that needs to be copied into the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the new data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the input parameters are invalid. Check that you did not pass <computeroutput>NULL</computeroutput>, and in case the field has fixed sized data, check that <emphasis>numBytes</emphasis> is the same as the specified fixed size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_INDEX</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>index</emphasis> is out of range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="371" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Message comparison</header>
      <memberdef kind="function" id="classBMessage_1a6cfbd78a1801c5b199fd2b9c20f1edc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasSameData</definition>
        <argsstring>(const BMessage &amp;other, bool ignoreFieldOrder=true, bool deep=false) const</argsstring>
        <name>HasSameData</name>
        <qualifiedname>BMessage::HasSameData</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreFieldOrder</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>deep</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Experimental method to compare two messages. </para>
        </briefdescription>
        <detaileddescription>
<para>This helper method will compare the data of this message to another message. The name if the fields, and the contents of the fields are compared. Metadata (like the delivery status) and the <ref refid="classBMessage_1ad074faab0857f51fba778f0d8558df1e" kindref="member">BMessage::what</ref> field are not compared.</para>
<para>The order of the fields is determined by the order that the fields are added. You may use the <emphasis>ignoreFieldOrder</emphasis> argument to tweak whether you care that not only the data is identical, but also the ordering of the data.</para>
<para>When there are BMessages attached to this message, you might want to use this algorithm to compare them as well (as to ignore non-data fields of the <emphasis>other</emphasis> message or the ordering of fields during the comparison). Setting the <emphasis>deep</emphasis> parameter will cause any data of the <computeroutput>B_MESSAGE_TYPE</computeroutput> to be compared using this method, thus ignoring non-data differences. If you set <emphasis>deep</emphasis> to <computeroutput>false</computeroutput>, the data will be compared on a byte by byte basis and these differences in the non-data fields will not be ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other message to compare to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignoreFieldOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether you want to see if the field order is the same. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deep</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether you want to recursively inspect BMessages embedded in this message.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the data is the same, <computeroutput>false</computeroutput> otherwise</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="376" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Deprecated Methods</header>
      <description><para>These methods are likely to disappear as they have been replaced by safer and more powerful methods but are implemented for the purpose of binary compatibility. </para>
</description>
      <memberdef kind="function" id="classBMessage_1adda48b9629ff85f0b6f5c14de1fb3089" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasAlignment</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasAlignment</name>
        <qualifiedname>BMessage::HasAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="387" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4470bc9810d3157abf300958299b3a8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasRect</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasRect</name>
        <qualifiedname>BMessage::HasRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="389" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac273669ad82b047d7df59f5d96789b36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasPoint</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasPoint</name>
        <qualifiedname>BMessage::HasPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="390" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae196d8af4c0205d1a3f68b300fede30d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasSize</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasSize</name>
        <qualifiedname>BMessage::HasSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="391" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a21593fb0e2ba2d554f5e73aa69682509" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasString</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasString</name>
        <qualifiedname>BMessage::HasString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="392" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac4c6e7e0e7ccd94119ca7b1fb8a95ab0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasInt8</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasInt8</name>
        <qualifiedname>BMessage::HasInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="393" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6aa77ba54a0aeb5e368b1ae0b2ebcc0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasUInt8</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasUInt8</name>
        <qualifiedname>BMessage::HasUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="394" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1afc15a565ef75a9acc96b5e7fc5f8a99f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasInt16</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasInt16</name>
        <qualifiedname>BMessage::HasInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="395" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a375487bace52f5629d38a90ab82e3501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasUInt16</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasUInt16</name>
        <qualifiedname>BMessage::HasUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="396" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3b8dc2a6990cca27044c581e960c4815" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasInt32</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasInt32</name>
        <qualifiedname>BMessage::HasInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="397" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a61edd5753b91bef212a6d20618fc2115" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasUInt32</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasUInt32</name>
        <qualifiedname>BMessage::HasUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="398" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a5298eb19cf9387a592cf348804bbb543" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasInt64</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasInt64</name>
        <qualifiedname>BMessage::HasInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="399" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4718b00776b779d72f48cfcb044d09c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasUInt64</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasUInt64</name>
        <qualifiedname>BMessage::HasUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="400" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af83659da0a00c4652bc410868e10d3e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasBool</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasBool</name>
        <qualifiedname>BMessage::HasBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="401" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4ed1ab46d69555bed8656b88cfbedf80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasFloat</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasFloat</name>
        <qualifiedname>BMessage::HasFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="402" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a10cc5f06813d7d11df126e351b43c19e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasDouble</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasDouble</name>
        <qualifiedname>BMessage::HasDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="403" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa17b02befd19088e560ff218b69b4336" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasColor</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasColor</name>
        <qualifiedname>BMessage::HasColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="404" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa573c41ac9b8882a1f6c5ade73d6a090" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasPointer</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasPointer</name>
        <qualifiedname>BMessage::HasPointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="405" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aea46bfdce87d5de4344e3aa6f45aa7ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasMessenger</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasMessenger</name>
        <qualifiedname>BMessage::HasMessenger</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="406" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a963c126685bfc3e5f8e1240a024fedfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasRef</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasRef</name>
        <qualifiedname>BMessage::HasRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="408" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a0284024009482818cbc57970ab51ceff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasNodeRef</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasNodeRef</name>
        <qualifiedname>BMessage::HasNodeRef</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="409" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af9f8c20181a4f95e6a4fbadddb2d39c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasMessage</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>HasMessage</name>
        <qualifiedname>BMessage::HasMessage</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="410" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a74043f885d59434afca9368419f5608a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasFlat</definition>
        <argsstring>(const char *name, const BFlattenable *object) const</argsstring>
        <name>HasFlat</name>
        <qualifiedname>BMessage::HasFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="411" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8dfa876ddb1775a21f3cbfe92db599c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasFlat</definition>
        <argsstring>(const char *name, int32 n, const BFlattenable *object) const</argsstring>
        <name>HasFlat</name>
        <qualifiedname>BMessage::HasFlat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classBFlattenable" kindref="compound">BFlattenable</ref> *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="413" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae3d1dd24246884e316fd9587d4a28906" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::HasData</definition>
        <argsstring>(const char *name, type_code, int32 n=0) const</argsstring>
        <name>HasData</name>
        <qualifiedname>BMessage::HasData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="415" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a9713057fc44d53b1771ff071341482ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BMessage::FindRect</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindRect</name>
        <qualifiedname>BMessage::FindRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="417" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a813615a6d10f5ec02573a45f14c1241c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BMessage::FindPoint</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindPoint</name>
        <qualifiedname>BMessage::FindPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="418" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a36103667f4d215f1a06add5b381c2037" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BMessage::FindString</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindString</name>
        <qualifiedname>BMessage::FindString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="419" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a941d54ffe9d43bc4f06b0f51b05fc9a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
        <definition>int8 BMessage::FindInt8</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindInt8</name>
        <qualifiedname>BMessage::FindInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="420" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a7fb486ea27ffbf2711e2290bb65ab106" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
        <definition>int16 BMessage::FindInt16</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindInt16</name>
        <qualifiedname>BMessage::FindInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="421" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac3c3455d0b3b60fc8cabcf250ec45d86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMessage::FindInt32</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindInt32</name>
        <qualifiedname>BMessage::FindInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="422" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac098297494e5013484455204339a17d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
        <definition>int64 BMessage::FindInt64</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindInt64</name>
        <qualifiedname>BMessage::FindInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="423" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acbb4500a7a1118cd1ee554fbc726d19f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::FindBool</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindBool</name>
        <qualifiedname>BMessage::FindBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="424" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6d647b74485e51f9831b7e18e455b55a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BMessage::FindFloat</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindFloat</name>
        <qualifiedname>BMessage::FindFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="425" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa58f382932f2bfdcdb5f3a390c8312de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BMessage::FindDouble</definition>
        <argsstring>(const char *name, int32 n=0) const</argsstring>
        <name>FindDouble</name>
        <qualifiedname>BMessage::FindDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deprecated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is deprecated, do not use.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="426" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Finding Data Convenience Methods</header>
      <description><para>These methods may be used as alternatives to the Find data methods above which allow you to specify a default value to use if the value you are looking for is not found and return the result instead of filling out an out parameter and status code. If you are not interested in the status code these methods allow for some code simplification.</para>
<para>For example, instead of writing:</para>
<para><programlisting><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enabled;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBMessage_1a886d79a7c580d3563940333cfa7f3870" kindref="member">FindBool</ref>(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">,<sp/>&amp;enabled)<sp/>!=<sp/>B_OK)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>enabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para>you can write the following:</para>
<para><programlisting><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enabled<sp/>=<sp/><ref refid="classBMessage_1aff0242cacf8613b9e58dde7871c4c21c" kindref="member">GetBool</ref>(</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>reducing the example to a single line. </para>
</description>
      <memberdef kind="function" id="classBMessage_1aff0242cacf8613b9e58dde7871c4c21c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::GetBool</definition>
        <argsstring>(const char *name, bool defaultValue=false) const</argsstring>
        <name>GetBool</name>
        <qualifiedname>BMessage::GetBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>defaultValue</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return the boolean value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="429" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a7de758471bcc9e642064b350c32459c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMessage::GetBool</definition>
        <argsstring>(const char *name, int32 index, bool defaultValue) const</argsstring>
        <name>GetBool</name>
        <qualifiedname>BMessage::GetBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the boolean value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="431" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a822fcf4b8182566bfaebb8dd04cd2b97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
        <definition>int8 BMessage::GetInt8</definition>
        <argsstring>(const char *name, int8 defaultValue) const</argsstring>
        <name>GetInt8</name>
        <qualifiedname>BMessage::GetInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int8 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="433" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aad10c23206e76e694eb6d8ee90ae7710" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
        <definition>int8 BMessage::GetInt8</definition>
        <argsstring>(const char *name, int32 index, int8 defaultValue) const</argsstring>
        <name>GetInt8</name>
        <qualifiedname>BMessage::GetInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int8 value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="435" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a146182cecba5ad8a802d0c60627b695a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BMessage::GetUInt8</definition>
        <argsstring>(const char *name, uint8 defaultValue) const</argsstring>
        <name>GetUInt8</name>
        <qualifiedname>BMessage::GetUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint8 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="437" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af8f4251e140340b254a26f62fe3df880" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BMessage::GetUInt8</definition>
        <argsstring>(const char *name, int32 index, uint8 defaultValue) const</argsstring>
        <name>GetUInt8</name>
        <qualifiedname>BMessage::GetUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint8 message from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="439" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aafc68a78c8b550fec01c4129683520b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
        <definition>int16 BMessage::GetInt16</definition>
        <argsstring>(const char *name, int16 defaultValue) const</argsstring>
        <name>GetInt16</name>
        <qualifiedname>BMessage::GetInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int16 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="441" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1afd2db75cacae2f4b44f93c5ea3fb0e0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
        <definition>int16 BMessage::GetInt16</definition>
        <argsstring>(const char *name, int32 index, int16 defaultValue) const</argsstring>
        <name>GetInt16</name>
        <qualifiedname>BMessage::GetInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int16 value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="443" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a20d02e3b2687cf4d884d5e308c5a55cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BMessage::GetUInt16</definition>
        <argsstring>(const char *name, uint16 defaultValue) const</argsstring>
        <name>GetUInt16</name>
        <qualifiedname>BMessage::GetUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint16 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="445" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a9a3612c486e40bc08800f72e48d2b214" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BMessage::GetUInt16</definition>
        <argsstring>(const char *name, int32 index, uint16 defaultValue) const</argsstring>
        <name>GetUInt16</name>
        <qualifiedname>BMessage::GetUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint16 value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="447" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a526ebda92481d1c0da2786b93253efd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMessage::GetInt32</definition>
        <argsstring>(const char *name, int32 defaultValue) const</argsstring>
        <name>GetInt32</name>
        <qualifiedname>BMessage::GetInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int32 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="449" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1da13cf9b5913f1fcd6c8835f440b5f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMessage::GetInt32</definition>
        <argsstring>(const char *name, int32 index, int32 defaultValue) const</argsstring>
        <name>GetInt32</name>
        <qualifiedname>BMessage::GetInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int32 value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="451" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa90efd88a6a15fef748c62c5c46f2f65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMessage::GetUInt32</definition>
        <argsstring>(const char *name, uint32 defaultValue) const</argsstring>
        <name>GetUInt32</name>
        <qualifiedname>BMessage::GetUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint32 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="453" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a771c61eb89e5952e0fc890bb586365a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMessage::GetUInt32</definition>
        <argsstring>(const char *name, int32 index, uint32 defaultValue) const</argsstring>
        <name>GetUInt32</name>
        <qualifiedname>BMessage::GetUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint32 value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="455" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a2bb8e387b504dfe4ff47b7860ead1be9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
        <definition>int64 BMessage::GetInt64</definition>
        <argsstring>(const char *name, int64 defaultValue) const</argsstring>
        <name>GetInt64</name>
        <qualifiedname>BMessage::GetInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int64 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="457" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a00e136d7bdfa978b2376ae993b200e64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
        <definition>int64 BMessage::GetInt64</definition>
        <argsstring>(const char *name, int32 index, int64 defaultValue) const</argsstring>
        <name>GetInt64</name>
        <qualifiedname>BMessage::GetInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the int64 value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="459" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4d8f178f02212949cdd497c392ff6f13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
        <definition>uint64 BMessage::GetUInt64</definition>
        <argsstring>(const char *name, uint64 defaultValue) const</argsstring>
        <name>GetUInt64</name>
        <qualifiedname>BMessage::GetUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint64 value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="461" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a9dce5b9af2a32cc3b1f185b3521ee61a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
        <definition>uint64 BMessage::GetUInt64</definition>
        <argsstring>(const char *name, int32 index, uint64 defaultValue) const</argsstring>
        <name>GetUInt64</name>
        <qualifiedname>BMessage::GetUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the uint64 value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="463" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a2f5426192ec8ca235dd9f936510c4e93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BMessage::GetFloat</definition>
        <argsstring>(const char *name, float defaultValue) const</argsstring>
        <name>GetFloat</name>
        <qualifiedname>BMessage::GetFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the float value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="465" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad60572e86e9e605b27afcc50efcb1d24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BMessage::GetFloat</definition>
        <argsstring>(const char *name, int32 index, float defaultValue) const</argsstring>
        <name>GetFloat</name>
        <qualifiedname>BMessage::GetFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>float</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the float value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="467" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a018eed03b3b69e4248518e2a7c4a1c03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BMessage::GetDouble</definition>
        <argsstring>(const char *name, double defaultValue) const</argsstring>
        <name>GetDouble</name>
        <qualifiedname>BMessage::GetDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the double value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="469" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af0486856061e17452614c6ece2cfab64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double BMessage::GetDouble</definition>
        <argsstring>(const char *name, int32 index, double defaultValue) const</argsstring>
        <name>GetDouble</name>
        <qualifiedname>BMessage::GetDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the double value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="471" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a9471fc71d82ff91681ed35ee714041b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
        <definition>rgb_color BMessage::GetColor</definition>
        <argsstring>(const char *name, rgb_color defaultValue) const</argsstring>
        <name>GetColor</name>
        <qualifiedname>BMessage::GetColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="structrgb__color" kindref="compound">rgb_color</ref> value from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="473" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a30560420a899803f2ca07c395f3c3670" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
        <definition>rgb_color BMessage::GetColor</definition>
        <argsstring>(const char *name, int32 index, rgb_color defaultValue) const</argsstring>
        <name>GetColor</name>
        <qualifiedname>BMessage::GetColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="structrgb__color" kindref="compound">rgb_color</ref> value from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="475" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a817c8b7db104a1525ad15616bd06e284" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>rgb_color BMessage::GetPointer</definition>
        <argsstring>(const char *name, int32 index, const void *defaultValue=NULL) const</argsstring>
        <name>GetPointer</name>
        <qualifiedname>BMessage::GetPointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>defaultValue</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Return the pointer type from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="477" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1141c4e98a497041cd46e2fce31ff880" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * BMessage::GetPointer</definition>
        <argsstring>(const char *name, const void *defaultValue=NULL) const</argsstring>
        <name>GetPointer</name>
        <qualifiedname>BMessage::GetPointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>defaultValue</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Return the pointer type from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="479" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acf98ba0c69ac6dd433153b6e3e06c64f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BMessage::GetString</definition>
        <argsstring>(const char *name, const char *defaultValue=NULL) const</argsstring>
        <name>GetString</name>
        <qualifiedname>BMessage::GetString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>defaultValue</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Return the string from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="481" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6e65f922253e4ab511507e015ce023f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BMessage::GetString</definition>
        <argsstring>(const char *name, int32 index, const char *defaultValue) const</argsstring>
        <name>GetString</name>
        <qualifiedname>BMessage::GetString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the string from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="483" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af7ad0b5467ac972bb5f400d48a37bec9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
        <definition>BAlignment BMessage::GetAlignment</definition>
        <argsstring>(const char *name, int32 index, const BAlignment &amp;defaultValue) const</argsstring>
        <name>GetAlignment</name>
        <qualifiedname>BMessage::GetAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classBAlignment" kindref="compound">BAlignment</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBAlignment" kindref="compound">BAlignment</ref> object from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="485" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a03bf0cc134fec0cb12f4e1a8fe74d555" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
        <definition>BAlignment BMessage::GetAlignment</definition>
        <argsstring>(const char *name, const BAlignment &amp;defaultValue) const</argsstring>
        <name>GetAlignment</name>
        <qualifiedname>BMessage::GetAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBAlignment" kindref="compound">BAlignment</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBAlignment" kindref="compound">BAlignment</ref> object from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="487" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac830b029ae38dce1f6a2f823f289f222" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BMessage::GetRect</definition>
        <argsstring>(const char *name, int32 index, const BRect &amp;defaultValue) const</argsstring>
        <name>GetRect</name>
        <qualifiedname>BMessage::GetRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classBRect" kindref="compound">BRect</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBRect" kindref="compound">BRect</ref> object from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="489" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ab813849c1d23d484fff039204198e6f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BMessage::GetRect</definition>
        <argsstring>(const char *name, const BRect &amp;defaultValue) const</argsstring>
        <name>GetRect</name>
        <qualifiedname>BMessage::GetRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBRect" kindref="compound">BRect</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBRect" kindref="compound">BRect</ref> object from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="491" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a46167045bba07334db6acaa3c37e0498" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BMessage::GetPoint</definition>
        <argsstring>(const char *name, int32 index, const BPoint &amp;defaultValue) const</argsstring>
        <name>GetPoint</name>
        <qualifiedname>BMessage::GetPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBPoint" kindref="compound">BPoint</ref> object from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="493" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad68b28e3f6a38b8d832f2277c8be9372" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
        <definition>BPoint BMessage::GetPoint</definition>
        <argsstring>(const char *name, const BPoint &amp;defaultValue) const</argsstring>
        <name>GetPoint</name>
        <qualifiedname>BMessage::GetPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBPoint" kindref="compound">BPoint</ref> object from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="495" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae88c4239718d5a5ad14162e03889db9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BMessage::GetSize</definition>
        <argsstring>(const char *name, int32 index, const BSize &amp;defaultValue) const</argsstring>
        <name>GetSize</name>
        <qualifiedname>BMessage::GetSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classBSize" kindref="compound">BSize</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBSize" kindref="compound">BSize</ref> object from message with <emphasis>name</emphasis> and <emphasis>index</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the item to retrieve if there is more than one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="497" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8e61a348444f29b08027d99eb5042ac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BMessage::GetSize</definition>
        <argsstring>(const char *name, const BSize &amp;defaultValue) const</argsstring>
        <name>GetSize</name>
        <qualifiedname>BMessage::GetSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBSize" kindref="compound">BSize</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="classBSize" kindref="compound">BSize</ref> object from message with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to use if the item specified by <emphasis>name</emphasis> is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The item with <emphasis>name</emphasis>, or <emphasis>defaultValue</emphasis> if not found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="499" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting Data Convenience Methods</header>
      <description><para>These methods may be used as alternatives to the Add data methods above. Using them, will set the data stored at index 0 to the value that you pass to the method. If the data already exists, then it is overwritten.</para>
<para>For example, calling the <ref refid="classBMessage_1a60e079b535d604425d79d21f6c2ff331" kindref="member">SetBool(const char *, bool)</ref> method is like calling <ref refid="classBMessage_1a2976642c2259ebad33704d1b127bae60" kindref="member">AddBool(const char*, bool)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a64357e8743595d49dd53975e3f534a3f" kindref="member">ReplaceBool(const char*, bool)</ref> in case it does.</para>
<para>Note that this call will fail if there already is data for that label, with a different type. If that might be the case, you will be better of using a combination of <ref refid="classBMessage_1a5db9b5a9ddc0b04173afb8dbc1c69e5c" kindref="member">RemoveName(const char*)</ref> and the Add methods. Also note that this method will always work on the first element of the data (at index 0). In case there are more values stored, the other ones will not be altered. </para>
</description>
      <memberdef kind="function" id="classBMessage_1a60e079b535d604425d79d21f6c2ff331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetBool</definition>
        <argsstring>(const char *name, bool value)</argsstring>
        <name>SetBool</name>
        <qualifiedname>BMessage::SetBool</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a2976642c2259ebad33704d1b127bae60" kindref="member">AddBool(const char*, bool)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a64357e8743595d49dd53975e3f534a3f" kindref="member">ReplaceBool(const char*, bool)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="503" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a43dd2dd4ef948377bd1c208e8fb1397a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetInt8</definition>
        <argsstring>(const char *name, int8 value)</argsstring>
        <name>SetInt8</name>
        <qualifiedname>BMessage::SetInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac69a93dcc865c5e4aa2072cac9002aeb" kindref="member">int8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a224c55f626ae3a4552d06788539c7d60" kindref="member">AddInt8(const char*, int8)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a55f909d237c7c1abfca5f918a8a5ffb9" kindref="member">ReplaceInt8(const char*, int8)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="504" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a2b2c442855633f18d2575f081c426cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetUInt8</definition>
        <argsstring>(const char *name, uint8 value)</argsstring>
        <name>SetUInt8</name>
        <qualifiedname>BMessage::SetUInt8</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a98bbc2ca6c4fcb26bcd162c06ea0f46f" kindref="member">AddUInt8(const char*, uint8)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1aee573704ea412f6b53e1904e22e65454" kindref="member">ReplaceUInt8(const char*, uint8)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="505" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8572ce07a58fb1d08e21bf10aefd3f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetInt16</definition>
        <argsstring>(const char *name, int16 value)</argsstring>
        <name>SetInt16</name>
        <qualifiedname>BMessage::SetInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1acadaa1c2888dd031d14fed9b272333a7" kindref="member">int16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a8e865679288281553721414aa17a7fea" kindref="member">AddInt16(const char*, int16)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a525deaa699950007c8fdab78c82ada32" kindref="member">ReplaceInt16(const char*, int16)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="506" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1adc67eb8a3f7f7b25d0581bf839d8f994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetUInt16</definition>
        <argsstring>(const char *name, uint16 value)</argsstring>
        <name>SetUInt16</name>
        <qualifiedname>BMessage::SetUInt16</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1aa43cedc7a1d6ecdc26041e6657c9288d" kindref="member">AddUInt16(const char*, uint16)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a0029cb535e97ed753ee9529c646d763b" kindref="member">ReplaceUInt16(const char*, uint16)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="507" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ad3912ab5d568e4035ffb12aa74feda3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetInt32</definition>
        <argsstring>(const char *name, int32 value)</argsstring>
        <name>SetInt32</name>
        <qualifiedname>BMessage::SetInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1aa4d9d24d521c499aefd512b18d1e38c5" kindref="member">AddInt32(const char*, int32)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1ad7b41f02b8a298bcd6699e972b88c82e" kindref="member">ReplaceInt32(const char*, int32)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="508" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a036ff5c9b6a87427fc0682f0afe0fc2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetUInt32</definition>
        <argsstring>(const char *name, uint32 value)</argsstring>
        <name>SetUInt32</name>
        <qualifiedname>BMessage::SetUInt32</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1acc2a562d501b88ce8fe55ae4017d3bb6" kindref="member">AddUInt32(const char*, uint32)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1afdfe554348e5e672a1a358f3b944d63e" kindref="member">ReplaceUInt32(const char*, uint32)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="509" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a488e4670f9d00491385a5a85f42c67d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetInt64</definition>
        <argsstring>(const char *name, int64 value)</argsstring>
        <name>SetInt64</name>
        <qualifiedname>BMessage::SetInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1ad172f4c606396d8457a686fb16d0be31" kindref="member">AddInt64(const char*, int64)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a97220953786ff1cbb286e7e1113510ff" kindref="member">ReplaceInt64(const char*, int64)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="510" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a39ea15b60e3551cf3f81af7ff2e8a6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetUInt64</definition>
        <argsstring>(const char *name, uint64 value)</argsstring>
        <name>SetUInt64</name>
        <qualifiedname>BMessage::SetUInt64</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a31809f9e3be3ab0398318f669d00a181" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a1c6b3d4ee371ccb4ddfc6c0fd1dc8e58" kindref="member">AddUInt64(const char*, uint64)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1ad906dc7124f3dab9f41ca94f678c29d4" kindref="member">ReplaceUInt64(const char*, uint64)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="511" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aed1d0c3762ab5a8438b1a82a0d67c6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetColor</definition>
        <argsstring>(const char *name, rgb_color value)</argsstring>
        <name>SetColor</name>
        <qualifiedname>BMessage::SetColor</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structrgb__color" kindref="compound">rgb_color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1ae6e41cb30d1fb757a264a38ca6c27224" kindref="member">AddColor(const char*, rgb_color)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1af712a6b0c6921803023c1314e39b09fd" kindref="member">ReplaceColor(const char*, rgb_color)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="512" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a7d2a78283d63010daf55315eae6983da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetPointer</definition>
        <argsstring>(const char *name, const void *value)</argsstring>
        <name>SetPointer</name>
        <qualifiedname>BMessage::SetPointer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a3dc68e69cb8da2ca0f7512e42c4393fe" kindref="member">AddPointer(const char*, const void*)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1aaa543367787ed528566a4f629e78f60b" kindref="member">ReplacePointer(const char*, const void*)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="513" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a7bbb5edf6eaec7d8ead471063ba05720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetString</definition>
        <argsstring>(const char *name, const char *string)</argsstring>
        <name>SetString</name>
        <qualifiedname>BMessage::SetString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Set the string with at the label <emphasis>name</emphasis> to <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a342311ccdf68206c4b879bcd0f2d6e83" kindref="member">AddString(const char*, const char*)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a3a606679aa72f7530034994f9cf4ad32" kindref="member">ReplaceString(const char*, const char*)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="514" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3581bea5b303469e21c2dbc0c77d0682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetString</definition>
        <argsstring>(const char *name, const BString &amp;string)</argsstring>
        <name>SetString</name>
        <qualifiedname>BMessage::SetString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Set the string with at the label <emphasis>name</emphasis> to <emphasis>string</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a76d63dc8621996c05a8c2b8186b28efb" kindref="member">AddString(const char*, const BString&amp;)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a15b2ce4ff50f420a64422545079af452" kindref="member">ReplaceString(const char*, const BString&amp;)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="515" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a70bada6ab725e3c49d6be3f7b9cd32b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetFloat</definition>
        <argsstring>(const char *name, float value)</argsstring>
        <name>SetFloat</name>
        <qualifiedname>BMessage::SetFloat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1acdffd573b491074deef980df9f7f6e07" kindref="member">AddFloat(const char*, float)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1ab0c54a885d2cf1826dcb2fa53cfd0175" kindref="member">ReplaceFloat(const char*, float)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="517" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac63da648d43ba6f4ac4b6b78ce20fc14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetDouble</definition>
        <argsstring>(const char *name, double value)</argsstring>
        <name>SetDouble</name>
        <qualifiedname>BMessage::SetDouble</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a77a042d689d478572e23e87c3ad9982f" kindref="member">AddDouble(const char*, double)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a023f8e3aa932cd312acd5653ecebaca4" kindref="member">ReplaceDouble(const char*, double)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="518" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a68d1c8c3faf0425085dd4c7368115445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetAlignment</definition>
        <argsstring>(const char *name, const BAlignment &amp;value)</argsstring>
        <name>SetAlignment</name>
        <qualifiedname>BMessage::SetAlignment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBAlignment" kindref="compound">BAlignment</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls <ref refid="classBMessage_1a4fa4e6bcc354814dc17b61532480837d" kindref="member">AddAlignment(const char*, const BAlignment &amp;)</ref> in case the item does not exist yet, and <ref refid="classBMessage_1a7613f4cdd1154b3e70771fdc9a4e3e04" kindref="member">ReplaceAlignment(const char*, const BAlignment &amp;)</ref> in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="519" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a5c573737d146370197cbbac1d0b85a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetPoint</definition>
        <argsstring>(const char *name, const BPoint &amp;value)</argsstring>
        <name>SetPoint</name>
        <qualifiedname>BMessage::SetPoint</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBPoint" kindref="compound">BPoint</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls AddPoint(const char*, const BPoint &amp;) in case the item does not exist yet, and ReplacePoint(const char*, const BPoint &amp;) in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="521" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a1f6691ff69fe9d9027179d8f2a3c8165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetRect</definition>
        <argsstring>(const char *name, const BRect &amp;value)</argsstring>
        <name>SetRect</name>
        <qualifiedname>BMessage::SetRect</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBRect" kindref="compound">BRect</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls AddRect(const char*, const BRect &amp;) in case the item does not exist yet, and ReplaceRect(const char*, const BRect &amp;) in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="522" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6981d8f08fd09740c20d1ba96cd5b85f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetSize</definition>
        <argsstring>(const char *name, const BSize &amp;value)</argsstring>
        <name>SetSize</name>
        <qualifiedname>BMessage::SetSize</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classBSize" kindref="compound">BSize</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the data with at the label <emphasis>name</emphasis> to <emphasis>value</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the item to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function calls AddSize(const char*, const BSize &amp;) in case the item does not exist yet, and ReplaceSize(const char*, const BSize &amp;) in case it does.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="523" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1af5a3adafad9f0e26ae63c5ebe6fe1f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::SetData</definition>
        <argsstring>(const char *name, type_code type, const void *data, ssize_t numBytes, bool fixedSize=true, int count=1)</argsstring>
        <name>SetData</name>
        <qualifiedname>BMessage::SetData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>numBytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fixedSize</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Low level function to set data to a certain value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is used internally. Use the Set* methods above.</para>
<para><simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> in case of success and <computeroutput>B_BAD_TYPE</computeroutput> in case the item already exists with a different data type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="524" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classBMessage_1a964653ff45bbf556ae206fadb6ee1086" prot="private" static="no" strong="no">
        <type></type>
        <name>@4</name>
        <qualifiedname>BMessage::@4</qualifiedname>
        <enumvalue id="classBMessage_1a964653ff45bbf556ae206fadb6ee1086ad8caa16b218a9e1520a3de6811baff1d" prot="private">
          <name>sNumReplyPorts</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="602" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="602" bodyend="602"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classBMessage_1ad074faab0857f51fba778f0d8558df1e" prot="public" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>BMessage::what</definition>
        <argsstring></argsstring>
        <name>what</name>
        <qualifiedname>BMessage::what</qualifiedname>
        <briefdescription>
<para>A 4-byte constant that determines the type of message. </para>
        </briefdescription>
        <detaileddescription>
<para>You can directly manipulate this data member.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="58" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBMessage_1a2a9843a2a897eb1b306d4c8eb688f2fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMessageQueue</definition>
        <argsstring></argsstring>
        <name>BMessageQueue</name>
        <qualifiedname>BMessage::BMessageQueue</qualifiedname>
        <param>
          <type><ref refid="classBMessageQueue" kindref="compound">BMessageQueue</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="534" column="14" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMessage_1ac96b60d37bd806132da680e187dc2288" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Private</definition>
        <argsstring></argsstring>
        <name>Private</name>
        <qualifiedname>BMessage::Private</qualifiedname>
        <param>
          <type>Private</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="533" column="14" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMessage_1a2507153ab7ece065efe42705687cbe81" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* BMessage::fArchivingPointer</definition>
        <argsstring></argsstring>
        <name>fArchivingPointer</name>
        <qualifiedname>BMessage::fArchivingPointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="598" column="5" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1a706ee5e27bdf5904ea33c460fc8591a4" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
        <definition>uint8* BMessage::fData</definition>
        <argsstring></argsstring>
        <name>fData</name>
        <qualifiedname>BMessage::fData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="588" column="6" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1a93dfe2fa5568d3b773b773dd1aa3594a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BMessage::fDataAvailable</definition>
        <argsstring></argsstring>
        <name>fDataAvailable</name>
        <qualifiedname>BMessage::fDataAvailable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="591" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1ac7505ba0ecae60d29fa150dadd7a4e12" prot="private" static="no" mutable="no">
        <type>field_header *</type>
        <definition>field_header* BMessage::fFields</definition>
        <argsstring></argsstring>
        <name>fFields</name>
        <qualifiedname>BMessage::fFields</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="587" column="13" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1ab17f7e9af5e6f0f401155f08853f7ca4" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMessage::fFieldsAvailable</definition>
        <argsstring></argsstring>
        <name>fFieldsAvailable</name>
        <qualifiedname>BMessage::fFieldsAvailable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="590" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1a6252226e428bc31e6bc220ff282f0b3e" prot="private" static="no" mutable="no">
        <type>message_header *</type>
        <definition>message_header* BMessage::fHeader</definition>
        <argsstring></argsstring>
        <name>fHeader</name>
        <qualifiedname>BMessage::fHeader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="586" column="15" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1abe96a6af22aff089a684e8bc8590caa1" prot="private" static="no" mutable="yes">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>BMessage* BMessage::fOriginal</definition>
        <argsstring></argsstring>
        <name>fOriginal</name>
        <qualifiedname>BMessage::fOriginal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="593" column="16" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1ad49eb9f7fad1aeb297f9ed121b21f5be" prot="private" static="no" mutable="no">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>BMessage* BMessage::fQueueLink</definition>
        <argsstring></argsstring>
        <name>fQueueLink</name>
        <qualifiedname>BMessage::fQueueLink</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="595" column="9" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1a9b4ea2c0720ba916cb91ed9444c00bbb" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMessage::fReserved[8]</definition>
        <argsstring>[8]</argsstring>
        <name>fReserved</name>
        <qualifiedname>BMessage::fReserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="600" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classBMessage_1a448903cb68303eda6ac53b8a6a89bb1c" prot="private" static="yes" mutable="no">
        <type><ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> *</type>
        <definition>BBlockCache* BMessage::sMsgCache</definition>
        <argsstring></argsstring>
        <name>sMsgCache</name>
        <qualifiedname>BMessage::sMsgCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="607" column="18" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1af0d5c35e562986d3e26ccea2d2cdbfc9" prot="private" static="yes" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMessage::sReplyPortInUse[sNumReplyPorts]</definition>
        <argsstring>[sNumReplyPorts]</argsstring>
        <name>sReplyPortInUse</name>
        <qualifiedname>BMessage::sReplyPortInUse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="604" column="12" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMessage_1ab1303ada7467e79d34b0acb58411d395" prot="private" static="yes" mutable="no">
        <type>port_id</type>
        <definition>port_id BMessage::sReplyPorts[sNumReplyPorts]</definition>
        <argsstring>[sNumReplyPorts]</argsstring>
        <name>sReplyPorts</name>
        <qualifiedname>BMessage::sReplyPorts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="603" column="14" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMessage_1a2d0749c439c93a1ca938378b6c890d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessage::BMessage</definition>
        <argsstring>()</argsstring>
        <name>BMessage</name>
        <qualifiedname>BMessage::BMessage</qualifiedname>
        <briefdescription>
<para>Construct an empty message, without any data members and with a <emphasis>what</emphasis> constant set to <computeroutput>0</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMessage_1ae56247b7b613c0b1b626d1ea57f5beab" kindref="member">BMessage(uint32 what)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a6ab8aaec65db99134ea76790884c3af7" kindref="member">BMessage(const BMessage&amp; other)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6ab8aaec65db99134ea76790884c3af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessage::BMessage</definition>
        <argsstring>(const BMessage &amp;other)</argsstring>
        <name>BMessage</name>
        <qualifiedname>BMessage::BMessage</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct a new message that is a copy of another message. </para>
        </briefdescription>
        <detaileddescription>
<para>The <emphasis>what</emphasis> member and the data values are copied. The metadata, such as whether or not the message is a drop message or reply information is not copied. If the original message is a reply to a previous message this will make <ref refid="classBMessage_1a01c7dd891b3b05eb7f458a621c5181d4" kindref="member">IsReply()</ref> return <computeroutput>true</computeroutput>, while calling the same method on a copy of the message will return <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="remark"><para>BeOS kept the metadata of the message while Haiku deviates from this behavior. Use the Haiku implementation of message copying as the default behavior to keep your applications backwards compatible.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a2d0749c439c93a1ca938378b6c890d07" kindref="member">BMessage::BMessage()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1ae56247b7b613c0b1b626d1ea57f5beab" kindref="member">BMessage(uint32 what)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ae56247b7b613c0b1b626d1ea57f5beab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessage::BMessage</definition>
        <argsstring>(uint32 what)</argsstring>
        <name>BMessage</name>
        <qualifiedname>BMessage::BMessage</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Construct an empty message with the <emphasis>what</emphasis> member set to the specified value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMessage_1a2d0749c439c93a1ca938378b6c890d07" kindref="member">BMessage::BMessage()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMessage_1a6ab8aaec65db99134ea76790884c3af7" kindref="member">BMessage::BMessage(const BMessage&amp; other)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a264503e3c60e6ddbc5512ab69e4b336e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BMessage::~BMessage</definition>
        <argsstring>()</argsstring>
        <name>~BMessage</name>
        <qualifiedname>BMessage::~BMessage</qualifiedname>
        <briefdescription>
<para>Free the data members associated with the message. </para>
        </briefdescription>
        <detaileddescription>
<para>If there still is a sender waiting for a reply, the <computeroutput>B_NO_REPLY</computeroutput> message will be sent to inform them that there won&apos;t be a reply.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="63" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMessage_1a8c7649b9d7ded90ecc57f392640df522" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMessage::BMessage</definition>
        <argsstring>(BMessage *message)</argsstring>
        <name>BMessage</name>
        <qualifiedname>BMessage::BMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aac666a455d81bc503dea3885fe1bec50" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_AddField</definition>
        <argsstring>(const char *name, type_code type, bool isFixedSize, field_header **_result)</argsstring>
        <name>_AddField</name>
        <qualifiedname>BMessage::_AddField</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFixedSize</declname>
        </param>
        <param>
          <type>field_header **</type>
          <declname>_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="553" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a255101995ae5a399a31bd85bdb6a76b1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_Clear</definition>
        <argsstring>()</argsstring>
        <name>_Clear</name>
        <qualifiedname>BMessage::_Clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="538" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a65d069281a615228e999344187230c68" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_CopyForWrite</definition>
        <argsstring>()</argsstring>
        <name>_CopyForWrite</name>
        <qualifiedname>BMessage::_CopyForWrite</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="541" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aa9484bae3af85db9f3e98ba61c2e3c73" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_Dereference</definition>
        <argsstring>()</argsstring>
        <name>_Dereference</name>
        <qualifiedname>BMessage::_Dereference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="543" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a6b29ac6c0fd21da7bbe10358efc1f251" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_FindField</definition>
        <argsstring>(const char *name, type_code type, field_header **_result) const</argsstring>
        <name>_FindField</name>
        <qualifiedname>BMessage::_FindField</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>field_header **</type>
          <declname>_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="551" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8bc48b06730dbec91a8ed4c1e3209037" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_FlattenToArea</definition>
        <argsstring>(message_header **_header) const</argsstring>
        <name>_FlattenToArea</name>
        <qualifiedname>BMessage::_FlattenToArea</qualifiedname>
        <param>
          <type>message_header **</type>
          <declname>_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="540" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a4f148f6a14f1b41c82f726b7cd11a7cc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMessage::_HashName</definition>
        <argsstring>(const char *name) const</argsstring>
        <name>_HashName</name>
        <qualifiedname>BMessage::_HashName</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="550" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a07d4311974496de626dca43cf0a3c5a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_InitCommon</definition>
        <argsstring>(bool initHeader)</argsstring>
        <name>_InitCommon</name>
        <qualifiedname>BMessage::_InitCommon</qualifiedname>
        <param>
          <type>bool</type>
          <declname>initHeader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="536" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a95ae25ae81b1057add14e9779877f455" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_InitHeader</definition>
        <argsstring>()</argsstring>
        <name>_InitHeader</name>
        <qualifiedname>BMessage::_InitHeader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="537" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a56930ca87c720b756491942c27cd0b41" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMessage::_PrintToStream</definition>
        <argsstring>(const char *indent) const</argsstring>
        <name>_PrintToStream</name>
        <qualifiedname>BMessage::_PrintToStream</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="557" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a959a3e46bf092d1092226b391c82904f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_Reference</definition>
        <argsstring>()</argsstring>
        <name>_Reference</name>
        <qualifiedname>BMessage::_Reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="542" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3e122ebae6412c66468feca15c7774e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_RemoveField</definition>
        <argsstring>(field_header *field)</argsstring>
        <name>_RemoveField</name>
        <qualifiedname>BMessage::_RemoveField</qualifiedname>
        <param>
          <type>field_header *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="555" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a89f78fec384cd78fc968a2f0e775b558" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMessage::_ReservedMessage1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMessage1</name>
        <qualifiedname>BMessage::_ReservedMessage1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="563" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a17658a2b7383dd3a336e37b899cc3620" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMessage::_ReservedMessage2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMessage2</name>
        <qualifiedname>BMessage::_ReservedMessage2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="564" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aadbb885e7cf31b31152bcdf3e09853f7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMessage::_ReservedMessage3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMessage3</name>
        <qualifiedname>BMessage::_ReservedMessage3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="565" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1acd2d8f87be767c6e4ed089d120917806" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_ResizeData</definition>
        <argsstring>(uint32 offset, int32 change)</argsstring>
        <name>_ResizeData</name>
        <qualifiedname>BMessage::_ResizeData</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>change</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="548" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a3a6d0553b2142ca2494640326b5a5b1f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_SendMessage</definition>
        <argsstring>(port_id port, team_id portOwner, int32 token, bigtime_t timeout, bool replyRequired, BMessenger &amp;replyTo) const</argsstring>
        <name>_SendMessage</name>
        <qualifiedname>BMessage::_SendMessage</qualifiedname>
        <param>
          <type>port_id</type>
          <declname>port</declname>
        </param>
        <param>
          <type>team_id</type>
          <declname>portOwner</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>replyRequired</declname>
        </param>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref> &amp;</type>
          <declname>replyTo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="567" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a5007fee74b588a2d9d4efcb707e733c7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_SendMessage</definition>
        <argsstring>(port_id port, team_id portOwner, int32 token, BMessage *reply, bigtime_t sendTimeout, bigtime_t replyTimeout) const</argsstring>
        <name>_SendMessage</name>
        <qualifiedname>BMessage::_SendMessage</qualifiedname>
        <param>
          <type>port_id</type>
          <declname>port</declname>
        </param>
        <param>
          <type>team_id</type>
          <declname>portOwner</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>reply</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>sendTimeout</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>replyTimeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="571" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1ac10b93d40f4ebed2c92b7bc5fca911ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMessage::_UpdateOffsets</definition>
        <argsstring>(uint32 offset, int32 change)</argsstring>
        <name>_UpdateOffsets</name>
        <qualifiedname>BMessage::_UpdateOffsets</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>change</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="547" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1abadaf63bd1f76385f10c3f8ed1524e9d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMessage::_ValidateMessage</definition>
        <argsstring>()</argsstring>
        <name>_ValidateMessage</name>
        <qualifiedname>BMessage::_ValidateMessage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="545" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classBMessage_1ac92039a53c8de766d1f30237599181aa" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BMessage::_SendFlattenedMessage</definition>
        <argsstring>(void *data, int32 size, port_id port, int32 token, bigtime_t timeout)</argsstring>
        <name>_SendFlattenedMessage</name>
        <qualifiedname>BMessage::_SendFlattenedMessage</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>port_id</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="575" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a7e58b46324e0930eb911eb35172f6b2e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void BMessage::_StaticCacheCleanup</definition>
        <argsstring>()</argsstring>
        <name>_StaticCacheCleanup</name>
        <qualifiedname>BMessage::_StaticCacheCleanup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="582" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a852aa8d9d12dbe85ffd6529d3b1315d9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void BMessage::_StaticCleanup</definition>
        <argsstring>()</argsstring>
        <name>_StaticCleanup</name>
        <qualifiedname>BMessage::_StaticCleanup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="581" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aef58f6a9934e1796f25b00925873fcf0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>static int32 BMessage::_StaticGetCachedReplyPort</definition>
        <argsstring>()</argsstring>
        <name>_StaticGetCachedReplyPort</name>
        <qualifiedname>BMessage::_StaticGetCachedReplyPort</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="583" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a87d9c54b70faafe18008a88723ed90ae" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void BMessage::_StaticInit</definition>
        <argsstring>()</argsstring>
        <name>_StaticInit</name>
        <qualifiedname>BMessage::_StaticInit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="579" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1aeb7ba4c01f246127d734d931e3f14713" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void BMessage::_StaticReInitForkedChild</definition>
        <argsstring>()</argsstring>
        <name>_StaticReInitForkedChild</name>
        <qualifiedname>BMessage::_StaticReInitForkedChild</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="580" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMessage_1a8dfc406c3bd415eddc911b9f1c90fb83" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>static int32 BMessage::sGetCachedReplyPort</definition>
        <argsstring>()</argsstring>
        <name>sGetCachedReplyPort</name>
        <qualifiedname>BMessage::sGetCachedReplyPort</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="605" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A container that can be send and received using the Haiku messaging subsystem. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is at the center of the web of messaging classes, in the sense that it defines the actual structure of the messages. Messages have two <bold>important elements</bold>: the <ref refid="classBMessage_1ad074faab0857f51fba778f0d8558df1e" kindref="member">what</ref> identifier, and the data members. The first can be directly manipulated, the latter can be manipulated through <ref refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" kindref="member">AddData()</ref>, <ref refid="classBMessage_1a1e896648ee668dd5d6c8a4311d6cfa94" kindref="member">FindData()</ref> and <ref refid="classBMessage_1a79bc7d526090a5b1f4d8958d72e55d31" kindref="member">ReplaceData()</ref> and their derivatives. Neither of these elements are mandatory.</para>
<para>The second important role of <ref refid="classBMessage" kindref="compound">BMessage</ref> is that it stores <bold>meta data</bold>: who sent the message and with what intention? The methods of <ref refid="classBMessage" kindref="compound">BMessage</ref> will disclose if the message was a reply (<ref refid="classBMessage_1a01c7dd891b3b05eb7f458a621c5181d4" kindref="member">IsReply()</ref>), where it came from (<ref refid="classBMessage_1a3735f85fdf75af5309d0e61279d452c3" kindref="member">IsSourceRemote()</ref>), whether a reply is expected (<ref refid="classBMessage_1acd51918e26e998067ee6412a55068abc" kindref="member">IsSourceWaiting()</ref>), and in case the message is a reply, what it&apos;s a reply to (<ref refid="classBMessage_1a57c84d02e54ef19fd1516d9bf7e3fe45" kindref="member">Previous()</ref>).</para>
<para>Mostly, messages are used to pass information between the the objects in your application, but because messages are such flexible data containers, they are also often used for other <bold>data storage purposes</bold>. Many applications store their settings as messages. Because messages can be flattened to data streams (such as files), they provide an easy but powerful tool for data storage.</para>
<para>All methods can be classified in these areas:<itemizedlist>
<listitem><para>Adding, Finding, Replacing and Removing Data.</para>
</listitem><listitem><para>Statistics and Miscellaneous information.</para>
</listitem><listitem><para>Delivery information.</para>
</listitem><listitem><para>Utilities to reply to messages.</para>
</listitem></itemizedlist>
</para>
<para>To see how messages fit in with the greater picture, have a look at the <ref refid="app_messaging" kindref="compound">Messaging Introduction</ref>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/app/Message.h" line="56" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/Message.h" bodystart="56" bodyend="608"/>
    <listofallmembers>
      <member refid="classBMessage_1aac666a455d81bc503dea3885fe1bec50" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_AddField</name></member>
      <member refid="classBMessage_1a255101995ae5a399a31bd85bdb6a76b1" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_Clear</name></member>
      <member refid="classBMessage_1a65d069281a615228e999344187230c68" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_CopyForWrite</name></member>
      <member refid="classBMessage_1aa9484bae3af85db9f3e98ba61c2e3c73" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_Dereference</name></member>
      <member refid="classBMessage_1a6b29ac6c0fd21da7bbe10358efc1f251" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_FindField</name></member>
      <member refid="classBMessage_1a8bc48b06730dbec91a8ed4c1e3209037" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_FlattenToArea</name></member>
      <member refid="classBMessage_1a4f148f6a14f1b41c82f726b7cd11a7cc" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_HashName</name></member>
      <member refid="classBMessage_1a07d4311974496de626dca43cf0a3c5a0" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_InitCommon</name></member>
      <member refid="classBMessage_1a95ae25ae81b1057add14e9779877f455" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_InitHeader</name></member>
      <member refid="classBMessage_1a56930ca87c720b756491942c27cd0b41" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_PrintToStream</name></member>
      <member refid="classBMessage_1a959a3e46bf092d1092226b391c82904f" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_Reference</name></member>
      <member refid="classBMessage_1a3e122ebae6412c66468feca15c7774e2" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_RemoveField</name></member>
      <member refid="classBMessage_1a89f78fec384cd78fc968a2f0e775b558" prot="private" virt="virtual"><scope>BMessage</scope><name>_ReservedMessage1</name></member>
      <member refid="classBMessage_1a17658a2b7383dd3a336e37b899cc3620" prot="private" virt="virtual"><scope>BMessage</scope><name>_ReservedMessage2</name></member>
      <member refid="classBMessage_1aadbb885e7cf31b31152bcdf3e09853f7" prot="private" virt="virtual"><scope>BMessage</scope><name>_ReservedMessage3</name></member>
      <member refid="classBMessage_1acd2d8f87be767c6e4ed089d120917806" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_ResizeData</name></member>
      <member refid="classBMessage_1ac92039a53c8de766d1f30237599181aa" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_SendFlattenedMessage</name></member>
      <member refid="classBMessage_1a3a6d0553b2142ca2494640326b5a5b1f" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_SendMessage</name></member>
      <member refid="classBMessage_1a5007fee74b588a2d9d4efcb707e733c7" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_SendMessage</name></member>
      <member refid="classBMessage_1a7e58b46324e0930eb911eb35172f6b2e" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_StaticCacheCleanup</name></member>
      <member refid="classBMessage_1a852aa8d9d12dbe85ffd6529d3b1315d9" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_StaticCleanup</name></member>
      <member refid="classBMessage_1aef58f6a9934e1796f25b00925873fcf0" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_StaticGetCachedReplyPort</name></member>
      <member refid="classBMessage_1a87d9c54b70faafe18008a88723ed90ae" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_StaticInit</name></member>
      <member refid="classBMessage_1aeb7ba4c01f246127d734d931e3f14713" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_StaticReInitForkedChild</name></member>
      <member refid="classBMessage_1ac10b93d40f4ebed2c92b7bc5fca911ac" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_UpdateOffsets</name></member>
      <member refid="classBMessage_1abadaf63bd1f76385f10c3f8ed1524e9d" prot="private" virt="non-virtual"><scope>BMessage</scope><name>_ValidateMessage</name></member>
      <member refid="classBMessage_1a4fa4e6bcc354814dc17b61532480837d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddAlignment</name></member>
      <member refid="classBMessage_1a2976642c2259ebad33704d1b127bae60" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddBool</name></member>
      <member refid="classBMessage_1ae6e41cb30d1fb757a264a38ca6c27224" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddColor</name></member>
      <member refid="classBMessage_1a4b99de85becfb1058a893fc6e40c48ad" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddData</name></member>
      <member refid="classBMessage_1a77a042d689d478572e23e87c3ad9982f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddDouble</name></member>
      <member refid="classBMessage_1a1d1ea741ffa1841ef1667a3daa1ce7fd" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddFlat</name></member>
      <member refid="classBMessage_1ac04c2914f73813a766c5644765a506a4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddFlat</name></member>
      <member refid="classBMessage_1acdffd573b491074deef980df9f7f6e07" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddFloat</name></member>
      <member refid="classBMessage_1a8e865679288281553721414aa17a7fea" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddInt16</name></member>
      <member refid="classBMessage_1aa4d9d24d521c499aefd512b18d1e38c5" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddInt32</name></member>
      <member refid="classBMessage_1ad172f4c606396d8457a686fb16d0be31" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddInt64</name></member>
      <member refid="classBMessage_1a224c55f626ae3a4552d06788539c7d60" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddInt8</name></member>
      <member refid="classBMessage_1a421a8dee0e636fe619e9ebf561aafa0a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddMessage</name></member>
      <member refid="classBMessage_1ac7f46a46a04dcbfd9fd2af6dfb2d3850" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddMessenger</name></member>
      <member refid="classBMessage_1a4e486773f6adca4610d01d96c0bd6d23" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddNodeRef</name></member>
      <member refid="classBMessage_1afde5dc7d76c57e5d062de58954fb2548" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddPoint</name></member>
      <member refid="classBMessage_1a3dc68e69cb8da2ca0f7512e42c4393fe" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddPointer</name></member>
      <member refid="classBMessage_1a42d9e94fb88d457699d193eb5094a24c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddRect</name></member>
      <member refid="classBMessage_1a8e67d1398ecbfc5c75ab90ee2e602af5" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddRef</name></member>
      <member refid="classBMessage_1a37d4771d6d726a439e0c0f36943d9e52" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddSize</name></member>
      <member refid="classBMessage_1a8f6efbc2f8c4faf38d1a6dab304b8880" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddSpecifier</name></member>
      <member refid="classBMessage_1a1e904ab6672cd0b29007fa9859ffe685" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddSpecifier</name></member>
      <member refid="classBMessage_1a1ae990808fff37361f1abe3688dbb181" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddSpecifier</name></member>
      <member refid="classBMessage_1a3ba4e7e99c78281226c2befb8912e327" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddSpecifier</name></member>
      <member refid="classBMessage_1a29406ecff2333e64d28850548a3b463c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddSpecifier</name></member>
      <member refid="classBMessage_1a342311ccdf68206c4b879bcd0f2d6e83" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddString</name></member>
      <member refid="classBMessage_1a76d63dc8621996c05a8c2b8186b28efb" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddString</name></member>
      <member refid="classBMessage_1a4b3643ef27b1a9edffceac01f9d2ae89" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddStrings</name></member>
      <member refid="classBMessage_1aa43cedc7a1d6ecdc26041e6657c9288d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddUInt16</name></member>
      <member refid="classBMessage_1acc2a562d501b88ce8fe55ae4017d3bb6" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddUInt32</name></member>
      <member refid="classBMessage_1a1c6b3d4ee371ccb4ddfc6c0fd1dc8e58" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddUInt64</name></member>
      <member refid="classBMessage_1a98bbc2ca6c4fcb26bcd162c06ea0f46f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>AddUInt8</name></member>
      <member refid="classBMessage_1ac2441b6ef13598fb8289c392b6588882" prot="public" virt="non-virtual"><scope>BMessage</scope><name>Append</name></member>
      <member refid="classBMessage_1a2d0749c439c93a1ca938378b6c890d07" prot="public" virt="non-virtual"><scope>BMessage</scope><name>BMessage</name></member>
      <member refid="classBMessage_1ae56247b7b613c0b1b626d1ea57f5beab" prot="public" virt="non-virtual"><scope>BMessage</scope><name>BMessage</name></member>
      <member refid="classBMessage_1a6ab8aaec65db99134ea76790884c3af7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>BMessage</name></member>
      <member refid="classBMessage_1a8c7649b9d7ded90ecc57f392640df522" prot="private" virt="non-virtual"><scope>BMessage</scope><name>BMessage</name></member>
      <member refid="classBMessage_1abca8c45f6dffd0f8e95d61ce8527b50f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>CountNames</name></member>
      <member refid="classBMessage_1a6785e345338000b685a3b5b182cc993a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>DropPoint</name></member>
      <member refid="classBMessage_1a2507153ab7ece065efe42705687cbe81" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fArchivingPointer</name></member>
      <member refid="classBMessage_1a706ee5e27bdf5904ea33c460fc8591a4" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fData</name></member>
      <member refid="classBMessage_1a93dfe2fa5568d3b773b773dd1aa3594a" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fDataAvailable</name></member>
      <member refid="classBMessage_1ac7505ba0ecae60d29fa150dadd7a4e12" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fFields</name></member>
      <member refid="classBMessage_1ab17f7e9af5e6f0f401155f08853f7ca4" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fFieldsAvailable</name></member>
      <member refid="classBMessage_1a6252226e428bc31e6bc220ff282f0b3e" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fHeader</name></member>
      <member refid="classBMessage_1abf81526338001abe288b5831fcb88874" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindAlignment</name></member>
      <member refid="classBMessage_1ac124217fb122b3e012ee431fb3cbd68f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindAlignment</name></member>
      <member refid="classBMessage_1a886d79a7c580d3563940333cfa7f3870" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindBool</name></member>
      <member refid="classBMessage_1a99405de493bf7e49ce033ef8cac8825b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindBool</name></member>
      <member refid="classBMessage_1acbb4500a7a1118cd1ee554fbc726d19f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindBool</name></member>
      <member refid="classBMessage_1a8980e233e8afb3f302dc5218483a5456" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindColor</name></member>
      <member refid="classBMessage_1a6e05596bbf62217b061e54a18fa51a72" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindColor</name></member>
      <member refid="classBMessage_1a1e896648ee668dd5d6c8a4311d6cfa94" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindData</name></member>
      <member refid="classBMessage_1aea11107bcd353be1dfde351850fe7ee0" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindData</name></member>
      <member refid="classBMessage_1a32672932ca24ee53b3642bf9d25f709d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindDouble</name></member>
      <member refid="classBMessage_1ac332368de00ff51eb06097e134244e5a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindDouble</name></member>
      <member refid="classBMessage_1aa58f382932f2bfdcdb5f3a390c8312de" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindDouble</name></member>
      <member refid="classBMessage_1ae910af356e0732edaa09260e47e1bbd0" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindFlat</name></member>
      <member refid="classBMessage_1a017c619934572443bf1ac5161dcdb2c2" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindFlat</name></member>
      <member refid="classBMessage_1ac26f15d78b69e330f9cb933db8c0500b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindFloat</name></member>
      <member refid="classBMessage_1af5d62fe0dba7074556b877a52d1cecb2" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindFloat</name></member>
      <member refid="classBMessage_1a6d647b74485e51f9831b7e18e455b55a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindFloat</name></member>
      <member refid="classBMessage_1a4dd27c3a8fc6e2e0366d77254b2095e6" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt16</name></member>
      <member refid="classBMessage_1afedef75ac1e9c5a1d3f069b641975041" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt16</name></member>
      <member refid="classBMessage_1a7fb486ea27ffbf2711e2290bb65ab106" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt16</name></member>
      <member refid="classBMessage_1af6ee3d278ed11bdafb60047b03c18ab9" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt32</name></member>
      <member refid="classBMessage_1afce55a9ef851c34fa07d21bcf9e2f1f2" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt32</name></member>
      <member refid="classBMessage_1ac3c3455d0b3b60fc8cabcf250ec45d86" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt32</name></member>
      <member refid="classBMessage_1aedbef710d7c8e61cd4ff93efbb32889a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt64</name></member>
      <member refid="classBMessage_1ab3eef33595e98a3df56d18ade5f41a98" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt64</name></member>
      <member refid="classBMessage_1ac098297494e5013484455204339a17d7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt64</name></member>
      <member refid="classBMessage_1a757685e8e85ac38f882e28bd281e9f9d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt8</name></member>
      <member refid="classBMessage_1aed840d1a802546534eaa95e5f1247a53" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt8</name></member>
      <member refid="classBMessage_1a941d54ffe9d43bc4f06b0f51b05fc9a4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindInt8</name></member>
      <member refid="classBMessage_1a8286c1590191f37641ac6916aaf6418b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindMessage</name></member>
      <member refid="classBMessage_1aecdfe05be151ea5a978225152486d44a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindMessage</name></member>
      <member refid="classBMessage_1a1b01edbdb7740ad1a06b2e81366fd47d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindMessenger</name></member>
      <member refid="classBMessage_1a87a4b0591e87332366a99d09462d9be8" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindMessenger</name></member>
      <member refid="classBMessage_1acfb1819b93db7eadd0cabcd1cf1d45ec" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindNodeRef</name></member>
      <member refid="classBMessage_1a4a4b0e9e0a52151ec8d1df979925857a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindNodeRef</name></member>
      <member refid="classBMessage_1a88507a5c41974ab5c13dd5da800a68d7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindPoint</name></member>
      <member refid="classBMessage_1a9a53e98aa4593529103051dbcd0186d4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindPoint</name></member>
      <member refid="classBMessage_1a813615a6d10f5ec02573a45f14c1241c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindPoint</name></member>
      <member refid="classBMessage_1aee05fc5fe7053a1d85deb3169742e05a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindPointer</name></member>
      <member refid="classBMessage_1a4de3e5f0cb4d25da0e00b13e33d28a66" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindPointer</name></member>
      <member refid="classBMessage_1a84e6020b903936f61538e33988792956" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindRect</name></member>
      <member refid="classBMessage_1abc4398bca7420cc74c4d5cc76ccba018" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindRect</name></member>
      <member refid="classBMessage_1a9713057fc44d53b1771ff071341482ac" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindRect</name></member>
      <member refid="classBMessage_1a85035f98a61911e973af9a8821b5e254" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindRef</name></member>
      <member refid="classBMessage_1a4b1c2190d9f3742c86edc72c3c49eeca" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindRef</name></member>
      <member refid="classBMessage_1a463777b0384a8ee580709c62dfbfa2ca" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindSize</name></member>
      <member refid="classBMessage_1a769dcfc011f91c8372512f7396e6e59e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindSize</name></member>
      <member refid="classBMessage_1ac2a5b50960210666f57952b3a050530d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindString</name></member>
      <member refid="classBMessage_1a4370bfd828545100484adaf51a38df47" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindString</name></member>
      <member refid="classBMessage_1a2930978f62db0238b780d67a1e74e69b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindString</name></member>
      <member refid="classBMessage_1a35f163b19ec1862a2f117d1d1ac3ef46" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindString</name></member>
      <member refid="classBMessage_1a36103667f4d215f1a06add5b381c2037" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindString</name></member>
      <member refid="classBMessage_1a1a482768af8c3361ae84f5458d674175" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindStrings</name></member>
      <member refid="classBMessage_1a5653c46ede97ff7667d0e823674b5953" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt16</name></member>
      <member refid="classBMessage_1a761a6bb39440a15176c5dc600d7b7041" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt16</name></member>
      <member refid="classBMessage_1a486a2138fb0edc7bf17b1a9676d5ecde" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt32</name></member>
      <member refid="classBMessage_1a10e79ec598190c30d3d07c46c297eacf" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt32</name></member>
      <member refid="classBMessage_1a20f4b14c6c45c4a24a3cbeea4347f79a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt64</name></member>
      <member refid="classBMessage_1abd21bedb93952f87cd12bf50c89d8612" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt64</name></member>
      <member refid="classBMessage_1a37170512c52bac977fb81e7c9d44ef95" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt8</name></member>
      <member refid="classBMessage_1ab5ce6415eb074f94f1f8dc59f8c3985e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FindUInt8</name></member>
      <member refid="classBMessage_1a736092eded1a6846cba89cd43bca26d3" prot="public" virt="non-virtual"><scope>BMessage</scope><name>Flatten</name></member>
      <member refid="classBMessage_1ae0b47fbff10bc50153144b178fc1537d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>Flatten</name></member>
      <member refid="classBMessage_1a2e3967d45e2ab17e6ab05dc45989f8c6" prot="public" virt="non-virtual"><scope>BMessage</scope><name>FlattenedSize</name></member>
      <member refid="classBMessage_1abe96a6af22aff089a684e8bc8590caa1" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fOriginal</name></member>
      <member refid="classBMessage_1ad49eb9f7fad1aeb297f9ed121b21f5be" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fQueueLink</name></member>
      <member refid="classBMessage_1a9b4ea2c0720ba916cb91ed9444c00bbb" prot="private" virt="non-virtual"><scope>BMessage</scope><name>fReserved</name></member>
      <member refid="classBMessage_1af7ad0b5467ac972bb5f400d48a37bec9" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetAlignment</name></member>
      <member refid="classBMessage_1a03bf0cc134fec0cb12f4e1a8fe74d555" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetAlignment</name></member>
      <member refid="classBMessage_1aff0242cacf8613b9e58dde7871c4c21c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetBool</name></member>
      <member refid="classBMessage_1a7de758471bcc9e642064b350c32459c7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetBool</name></member>
      <member refid="classBMessage_1a9471fc71d82ff91681ed35ee714041b8" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetColor</name></member>
      <member refid="classBMessage_1a30560420a899803f2ca07c395f3c3670" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetColor</name></member>
      <member refid="classBMessage_1a641086c9321e56195843a3224bb0f11d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetCurrentSpecifier</name></member>
      <member refid="classBMessage_1a018eed03b3b69e4248518e2a7c4a1c03" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetDouble</name></member>
      <member refid="classBMessage_1af0486856061e17452614c6ece2cfab64" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetDouble</name></member>
      <member refid="classBMessage_1a2f5426192ec8ca235dd9f936510c4e93" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetFloat</name></member>
      <member refid="classBMessage_1ad60572e86e9e605b27afcc50efcb1d24" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetFloat</name></member>
      <member refid="classBMessage_1a48d11318915368351b481984af21baee" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInfo</name></member>
      <member refid="classBMessage_1a525991f82f8574bd6eb68796568eb340" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInfo</name></member>
      <member refid="classBMessage_1a6c8080ba2bdff134fd20e923145e4200" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInfo</name></member>
      <member refid="classBMessage_1a055eb9be666ebf7adad3880083606bb3" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInfo</name></member>
      <member refid="classBMessage_1aafc68a78c8b550fec01c4129683520b2" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt16</name></member>
      <member refid="classBMessage_1afd2db75cacae2f4b44f93c5ea3fb0e0f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt16</name></member>
      <member refid="classBMessage_1a526ebda92481d1c0da2786b93253efd1" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt32</name></member>
      <member refid="classBMessage_1a1da13cf9b5913f1fcd6c8835f440b5f6" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt32</name></member>
      <member refid="classBMessage_1a2bb8e387b504dfe4ff47b7860ead1be9" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt64</name></member>
      <member refid="classBMessage_1a00e136d7bdfa978b2376ae993b200e64" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt64</name></member>
      <member refid="classBMessage_1a822fcf4b8182566bfaebb8dd04cd2b97" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt8</name></member>
      <member refid="classBMessage_1aad10c23206e76e694eb6d8ee90ae7710" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetInt8</name></member>
      <member refid="classBMessage_1a46167045bba07334db6acaa3c37e0498" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetPoint</name></member>
      <member refid="classBMessage_1ad68b28e3f6a38b8d832f2277c8be9372" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetPoint</name></member>
      <member refid="classBMessage_1a817c8b7db104a1525ad15616bd06e284" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetPointer</name></member>
      <member refid="classBMessage_1a1141c4e98a497041cd46e2fce31ff880" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetPointer</name></member>
      <member refid="classBMessage_1ac830b029ae38dce1f6a2f823f289f222" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetRect</name></member>
      <member refid="classBMessage_1ab813849c1d23d484fff039204198e6f6" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetRect</name></member>
      <member refid="classBMessage_1ae88c4239718d5a5ad14162e03889db9f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetSize</name></member>
      <member refid="classBMessage_1a8e61a348444f29b08027d99eb5042ac8" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetSize</name></member>
      <member refid="classBMessage_1acf98ba0c69ac6dd433153b6e3e06c64f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetString</name></member>
      <member refid="classBMessage_1a6e65f922253e4ab511507e015ce023f8" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetString</name></member>
      <member refid="classBMessage_1a20d02e3b2687cf4d884d5e308c5a55cb" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt16</name></member>
      <member refid="classBMessage_1a9a3612c486e40bc08800f72e48d2b214" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt16</name></member>
      <member refid="classBMessage_1aa90efd88a6a15fef748c62c5c46f2f65" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt32</name></member>
      <member refid="classBMessage_1a771c61eb89e5952e0fc890bb586365a1" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt32</name></member>
      <member refid="classBMessage_1a4d8f178f02212949cdd497c392ff6f13" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt64</name></member>
      <member refid="classBMessage_1a9dce5b9af2a32cc3b1f185b3521ee61a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt64</name></member>
      <member refid="classBMessage_1a146182cecba5ad8a802d0c60627b695a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt8</name></member>
      <member refid="classBMessage_1af8f4251e140340b254a26f62fe3df880" prot="public" virt="non-virtual"><scope>BMessage</scope><name>GetUInt8</name></member>
      <member refid="classBMessage_1adda48b9629ff85f0b6f5c14de1fb3089" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasAlignment</name></member>
      <member refid="classBMessage_1af83659da0a00c4652bc410868e10d3e3" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasBool</name></member>
      <member refid="classBMessage_1aa17b02befd19088e560ff218b69b4336" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasColor</name></member>
      <member refid="classBMessage_1ae3d1dd24246884e316fd9587d4a28906" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasData</name></member>
      <member refid="classBMessage_1a10cc5f06813d7d11df126e351b43c19e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasDouble</name></member>
      <member refid="classBMessage_1a74043f885d59434afca9368419f5608a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasFlat</name></member>
      <member refid="classBMessage_1a8dfa876ddb1775a21f3cbfe92db599c2" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasFlat</name></member>
      <member refid="classBMessage_1a4ed1ab46d69555bed8656b88cfbedf80" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasFloat</name></member>
      <member refid="classBMessage_1afc15a565ef75a9acc96b5e7fc5f8a99f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasInt16</name></member>
      <member refid="classBMessage_1a3b8dc2a6990cca27044c581e960c4815" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasInt32</name></member>
      <member refid="classBMessage_1a5298eb19cf9387a592cf348804bbb543" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasInt64</name></member>
      <member refid="classBMessage_1ac4c6e7e0e7ccd94119ca7b1fb8a95ab0" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasInt8</name></member>
      <member refid="classBMessage_1af9f8c20181a4f95e6a4fbadddb2d39c7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasMessage</name></member>
      <member refid="classBMessage_1aea46bfdce87d5de4344e3aa6f45aa7ef" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasMessenger</name></member>
      <member refid="classBMessage_1a0284024009482818cbc57970ab51ceff" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasNodeRef</name></member>
      <member refid="classBMessage_1ac273669ad82b047d7df59f5d96789b36" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasPoint</name></member>
      <member refid="classBMessage_1aa573c41ac9b8882a1f6c5ade73d6a090" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasPointer</name></member>
      <member refid="classBMessage_1a4470bc9810d3157abf300958299b3a8e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasRect</name></member>
      <member refid="classBMessage_1a963c126685bfc3e5f8e1240a024fedfa" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasRef</name></member>
      <member refid="classBMessage_1a6cfbd78a1801c5b199fd2b9c20f1edc0" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasSameData</name></member>
      <member refid="classBMessage_1ae196d8af4c0205d1a3f68b300fede30d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasSize</name></member>
      <member refid="classBMessage_1a70f59c7377d4d67f47feb212b73c8b25" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasSpecifiers</name></member>
      <member refid="classBMessage_1a21593fb0e2ba2d554f5e73aa69682509" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasString</name></member>
      <member refid="classBMessage_1a375487bace52f5629d38a90ab82e3501" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasUInt16</name></member>
      <member refid="classBMessage_1a61edd5753b91bef212a6d20618fc2115" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasUInt32</name></member>
      <member refid="classBMessage_1a4718b00776b779d72f48cfcb044d09c7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasUInt64</name></member>
      <member refid="classBMessage_1a6aa77ba54a0aeb5e368b1ae0b2ebcc0e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>HasUInt8</name></member>
      <member refid="classBMessage_1a773590d77b8d751ce9249e6acf3a463b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>IsEmpty</name></member>
      <member refid="classBMessage_1a01c7dd891b3b05eb7f458a621c5181d4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>IsReply</name></member>
      <member refid="classBMessage_1a3735f85fdf75af5309d0e61279d452c3" prot="public" virt="non-virtual"><scope>BMessage</scope><name>IsSourceRemote</name></member>
      <member refid="classBMessage_1acd51918e26e998067ee6412a55068abc" prot="public" virt="non-virtual"><scope>BMessage</scope><name>IsSourceWaiting</name></member>
      <member refid="classBMessage_1a74a596ec83515e50217ab478f302bd99" prot="public" virt="non-virtual"><scope>BMessage</scope><name>IsSystem</name></member>
      <member refid="classBMessage_1abac76b537c88ce7f1a127fa6425c3279" prot="public" virt="non-virtual"><scope>BMessage</scope><name>MakeEmpty</name></member>
      <member refid="classBMessage_1abab1f65386f27ad49ae8b767c69bbb39" prot="public" virt="non-virtual"><scope>BMessage</scope><name>operator delete</name></member>
      <member refid="classBMessage_1a9f516c2831c6185460f0867cdb18ffec" prot="public" virt="non-virtual"><scope>BMessage</scope><name>operator new</name></member>
      <member refid="classBMessage_1a74b2733acbeb02a5688fa76cd15811b0" prot="public" virt="non-virtual"><scope>BMessage</scope><name>operator new</name></member>
      <member refid="classBMessage_1a28f0b7a5e132048e2966a99367342552" prot="public" virt="non-virtual"><scope>BMessage</scope><name>operator new</name></member>
      <member refid="classBMessage_1a1e1473dc796d132c5bfe00412aa84a12" prot="public" virt="non-virtual"><scope>BMessage</scope><name>operator=</name></member>
      <member refid="classBMessage_1aeab6b578828566453d03152bfb446e1a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>PopSpecifier</name></member>
      <member refid="classBMessage_1a57c84d02e54ef19fd1516d9bf7e3fe45" prot="public" virt="non-virtual"><scope>BMessage</scope><name>Previous</name></member>
      <member refid="classBMessage_1a6aa2006d1e5c6fcba3f5c6e8467a50a1" prot="public" virt="non-virtual"><scope>BMessage</scope><name>PrintToStream</name></member>
      <member refid="classBMessage_1a72ce9596ebe74ce6e995705304b7fc7d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>RemoveData</name></member>
      <member refid="classBMessage_1a5db9b5a9ddc0b04173afb8dbc1c69e5c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>RemoveName</name></member>
      <member refid="classBMessage_1a2191de782a8ccef0252007d87c8f379c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>Rename</name></member>
      <member refid="classBMessage_1a7613f4cdd1154b3e70771fdc9a4e3e04" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceAlignment</name></member>
      <member refid="classBMessage_1ae6f32ad46aa14db07c9d324656daf871" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceAlignment</name></member>
      <member refid="classBMessage_1a64357e8743595d49dd53975e3f534a3f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceBool</name></member>
      <member refid="classBMessage_1af6bfc87ac8fe3f470b8d73a01dca388a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceBool</name></member>
      <member refid="classBMessage_1af712a6b0c6921803023c1314e39b09fd" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceColor</name></member>
      <member refid="classBMessage_1ae0e39566d16d42b40a55e9809a3e93f9" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceColor</name></member>
      <member refid="classBMessage_1a79bc7d526090a5b1f4d8958d72e55d31" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceData</name></member>
      <member refid="classBMessage_1a8d5e1ec791c56202414c6c1c407163d4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceData</name></member>
      <member refid="classBMessage_1a023f8e3aa932cd312acd5653ecebaca4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceDouble</name></member>
      <member refid="classBMessage_1aee50e26caa09886d0cdcbc753a91317f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceDouble</name></member>
      <member refid="classBMessage_1aaa8c8f67ea3314d93f39e1618b19621e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceFlat</name></member>
      <member refid="classBMessage_1a32f79d59881b7bf9df0f1ab819fd9390" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceFlat</name></member>
      <member refid="classBMessage_1ab0c54a885d2cf1826dcb2fa53cfd0175" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceFloat</name></member>
      <member refid="classBMessage_1ad081e12c8b593d03c7fbee4ea61c8f34" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceFloat</name></member>
      <member refid="classBMessage_1a525deaa699950007c8fdab78c82ada32" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt16</name></member>
      <member refid="classBMessage_1a05b21498414818bc51e76451a26a143f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt16</name></member>
      <member refid="classBMessage_1ad7b41f02b8a298bcd6699e972b88c82e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt32</name></member>
      <member refid="classBMessage_1ae1fe7f9855edb57e186cac617569cb79" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt32</name></member>
      <member refid="classBMessage_1a97220953786ff1cbb286e7e1113510ff" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt64</name></member>
      <member refid="classBMessage_1ac92d2b43a1dbc3e6591e0ddb03880e9b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt64</name></member>
      <member refid="classBMessage_1a55f909d237c7c1abfca5f918a8a5ffb9" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt8</name></member>
      <member refid="classBMessage_1a8ae3786000645416e1911fe2b618c432" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceInt8</name></member>
      <member refid="classBMessage_1a7c9f522c31ffee206e1df06aa8246f30" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceMessage</name></member>
      <member refid="classBMessage_1afc72518025d6c772e82acafad8669bc3" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceMessage</name></member>
      <member refid="classBMessage_1ada775f0c198e3968eedd03a6ad2daa49" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceMessenger</name></member>
      <member refid="classBMessage_1ad21e673615ff361bb5facce2632b57c1" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceMessenger</name></member>
      <member refid="classBMessage_1a57fb9d5c2b6aafc45932e5a10f1747a7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceNodeRef</name></member>
      <member refid="classBMessage_1a4749eff1c0bfe6a258570536033dd698" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceNodeRef</name></member>
      <member refid="classBMessage_1ac1b948f0c5867720173ef96450201859" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplacePoint</name></member>
      <member refid="classBMessage_1a4897600b32e200802cf7c5d397f7e8cf" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplacePoint</name></member>
      <member refid="classBMessage_1aaa543367787ed528566a4f629e78f60b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplacePointer</name></member>
      <member refid="classBMessage_1a77be90c4ecd92ca28cea4dbc46f8e8a2" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplacePointer</name></member>
      <member refid="classBMessage_1aa24fb4e8fbc39011d1b7fb55c7f752c1" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceRect</name></member>
      <member refid="classBMessage_1a2e38c3d43259b9157cc5c8647030dac0" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceRect</name></member>
      <member refid="classBMessage_1a44077e7618f42a388db207724075c0a6" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceRef</name></member>
      <member refid="classBMessage_1acb93b69f6693499b1886173a4900b8c7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceRef</name></member>
      <member refid="classBMessage_1a440d37083df7c8845d3337cc8c9d695a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceSize</name></member>
      <member refid="classBMessage_1a9ff6d6940725e22e2fab190bf42a1659" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceSize</name></member>
      <member refid="classBMessage_1a3a606679aa72f7530034994f9cf4ad32" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceString</name></member>
      <member refid="classBMessage_1aceeabb6ee480223b56d58e42a87ba7f5" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceString</name></member>
      <member refid="classBMessage_1a15b2ce4ff50f420a64422545079af452" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceString</name></member>
      <member refid="classBMessage_1a59a40f04a1fc5b0fe523a6e025d9860e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceString</name></member>
      <member refid="classBMessage_1a0029cb535e97ed753ee9529c646d763b" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt16</name></member>
      <member refid="classBMessage_1ab5d7606278375f280ab402b9f7e388be" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt16</name></member>
      <member refid="classBMessage_1afdfe554348e5e672a1a358f3b944d63e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt32</name></member>
      <member refid="classBMessage_1a8bd5a2123e4097377f33d12aca43b615" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt32</name></member>
      <member refid="classBMessage_1ad906dc7124f3dab9f41ca94f678c29d4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt64</name></member>
      <member refid="classBMessage_1a66c1638d29c7474762e7ce3799785ffa" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt64</name></member>
      <member refid="classBMessage_1aee573704ea412f6b53e1904e22e65454" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt8</name></member>
      <member refid="classBMessage_1aff3cffe95f04bf5576393f65bb378a1c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReplaceUInt8</name></member>
      <member refid="classBMessage_1a50545f6ec66e4f1fdda026381bca0be4" prot="public" virt="non-virtual"><scope>BMessage</scope><name>ReturnAddress</name></member>
      <member refid="classBMessage_1aad1eb085346e2c91133e372e7924637c" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SendReply</name></member>
      <member refid="classBMessage_1a08a2f161642de20dc483afb0ac4db167" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SendReply</name></member>
      <member refid="classBMessage_1a410113620d52a30f7622a96f8a7077c6" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SendReply</name></member>
      <member refid="classBMessage_1a039a8ff8563bbc58c54a50ca417ac75e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SendReply</name></member>
      <member refid="classBMessage_1a5461fc22f8bf044d21fd5429b7977213" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SendReply</name></member>
      <member refid="classBMessage_1a68d1c8c3faf0425085dd4c7368115445" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetAlignment</name></member>
      <member refid="classBMessage_1a60e079b535d604425d79d21f6c2ff331" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetBool</name></member>
      <member refid="classBMessage_1aed1d0c3762ab5a8438b1a82a0d67c6c7" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetColor</name></member>
      <member refid="classBMessage_1aa4bcec94162df7498208a1136c0f05ba" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetCurrentSpecifier</name></member>
      <member refid="classBMessage_1af5a3adafad9f0e26ae63c5ebe6fe1f2a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetData</name></member>
      <member refid="classBMessage_1ac63da648d43ba6f4ac4b6b78ce20fc14" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetDouble</name></member>
      <member refid="classBMessage_1a70bada6ab725e3c49d6be3f7b9cd32b0" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetFloat</name></member>
      <member refid="classBMessage_1a8572ce07a58fb1d08e21bf10aefd3f61" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetInt16</name></member>
      <member refid="classBMessage_1ad3912ab5d568e4035ffb12aa74feda3f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetInt32</name></member>
      <member refid="classBMessage_1a488e4670f9d00491385a5a85f42c67d9" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetInt64</name></member>
      <member refid="classBMessage_1a43dd2dd4ef948377bd1c208e8fb1397a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetInt8</name></member>
      <member refid="classBMessage_1a5c573737d146370197cbbac1d0b85a12" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetPoint</name></member>
      <member refid="classBMessage_1a7d2a78283d63010daf55315eae6983da" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetPointer</name></member>
      <member refid="classBMessage_1a1f6691ff69fe9d9027179d8f2a3c8165" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetRect</name></member>
      <member refid="classBMessage_1a6981d8f08fd09740c20d1ba96cd5b85f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetSize</name></member>
      <member refid="classBMessage_1a7bbb5edf6eaec7d8ead471063ba05720" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetString</name></member>
      <member refid="classBMessage_1a3581bea5b303469e21c2dbc0c77d0682" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetString</name></member>
      <member refid="classBMessage_1adc67eb8a3f7f7b25d0581bf839d8f994" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetUInt16</name></member>
      <member refid="classBMessage_1a036ff5c9b6a87427fc0682f0afe0fc2d" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetUInt32</name></member>
      <member refid="classBMessage_1a39ea15b60e3551cf3f81af7ff2e8a6ee" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetUInt64</name></member>
      <member refid="classBMessage_1a2b2c442855633f18d2575f081c426cfb" prot="public" virt="non-virtual"><scope>BMessage</scope><name>SetUInt8</name></member>
      <member refid="classBMessage_1a8dfc406c3bd415eddc911b9f1c90fb83" prot="private" virt="non-virtual"><scope>BMessage</scope><name>sGetCachedReplyPort</name></member>
      <member refid="classBMessage_1a448903cb68303eda6ac53b8a6a89bb1c" prot="private" virt="non-virtual"><scope>BMessage</scope><name>sMsgCache</name></member>
      <member refid="classBMessage_1a964653ff45bbf556ae206fadb6ee1086ad8caa16b218a9e1520a3de6811baff1d" prot="private" virt="non-virtual"><scope>BMessage</scope><name>sNumReplyPorts</name></member>
      <member refid="classBMessage_1af0d5c35e562986d3e26ccea2d2cdbfc9" prot="private" virt="non-virtual"><scope>BMessage</scope><name>sReplyPortInUse</name></member>
      <member refid="classBMessage_1ab1303ada7467e79d34b0acb58411d395" prot="private" virt="non-virtual"><scope>BMessage</scope><name>sReplyPorts</name></member>
      <member refid="classBMessage_1a6704fc8df822fc366b616c3abf36ae9f" prot="public" virt="non-virtual"><scope>BMessage</scope><name>Unflatten</name></member>
      <member refid="classBMessage_1a7ded81e10fed9a25b1a22934e04928dc" prot="public" virt="non-virtual"><scope>BMessage</scope><name>Unflatten</name></member>
      <member refid="classBMessage_1aaddd7356ffcac4ab4d6a26e8d393e12a" prot="public" virt="non-virtual"><scope>BMessage</scope><name>WasDelivered</name></member>
      <member refid="classBMessage_1ac66a35a4ef389a02bc36ace2cddb073e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>WasDropped</name></member>
      <member refid="classBMessage_1ad074faab0857f51fba778f0d8558df1e" prot="public" virt="non-virtual"><scope>BMessage</scope><name>what</name></member>
      <member refid="classBMessage_1a264503e3c60e6ddbc5512ab69e4b336e" prot="public" virt="virtual"><scope>BMessage</scope><name>~BMessage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
