<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BSystemError" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BSystemError</compoundname>
    <basecompoundref refid="classBPrivate_1_1Network_1_1BError" prot="public" virt="non-virtual">BPrivate::Network::BError</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BSystemError_1a841c789b077f2cfff34c148b08bd4de1" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPrivate::Network::BSystemError::fErrorCode</definition>
        <argsstring></argsstring>
        <name>fErrorCode</name>
        <qualifiedname>BPrivate::Network::BSystemError::fErrorCode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="88" column="9" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1a1a853245bf93930f04ce77558dbaab02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BSystemError::BSystemError</definition>
        <argsstring>(BString origin, status_t error)</argsstring>
        <name>BSystemError</name>
        <qualifiedname>BPrivate::Network::BSystemError::BSystemError</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref></type>
          <declname>origin</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an object for <emphasis>error</emphasis> code with a specified <emphasis>origin</emphasis>.  </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing where this error occured. As this object usually wraps around a lower level API call, this should usually be the call that the error code originated from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1a9b8aa2aca2b7611a6604a92e78590530" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BSystemError::BSystemError</definition>
        <argsstring>(BSystemError &amp;&amp;other) noexcept</argsstring>
        <name>BSystemError</name>
        <qualifiedname>BPrivate::Network::BSystemError::BSystemError</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1a7c5ee29ff40fd1fb4ff6920123a938a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BSystemError::BSystemError</definition>
        <argsstring>(const BSystemError &amp;other)</argsstring>
        <name>BSystemError</name>
        <qualifiedname>BPrivate::Network::BSystemError::BSystemError</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1acced9d1ba62658f42b75ad859821dba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BSystemError::BSystemError</definition>
        <argsstring>(const char *origin, status_t error)</argsstring>
        <name>BSystemError</name>
        <qualifiedname>BPrivate::Network::BSystemError::BSystemError</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>origin</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Create an object for <emphasis>error</emphasis> code with a specified <emphasis>origin</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing where this error occured. As this object usually wraps around a lower level API call, this should usually be the call that the error code originated from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1a5ee62b6ae8191453274a93c3e9d00b36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BPrivate::Network::BSystemError::DebugMessage</definition>
        <argsstring>() const override</argsstring>
        <name>DebugMessage</name>
        <qualifiedname>BPrivate::Network::BSystemError::DebugMessage</qualifiedname>
        <reimplements refid="classBPrivate_1_1Network_1_1BError_1a93a2260671aad699aa8787fd74061f98">DebugMessage</reimplements>
        <briefdescription>
<para>Retrieve a debug message that contains all info in this error. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">[<ref refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" kindref="member">Origin</ref>]<sp/><ref refid="classBPrivate_1_1Network_1_1BSystemError_1ad4c1783170eebdd85479aaca28519565" kindref="member">Message</ref><sp/>of<sp/>error<sp/>(error<sp/>code)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>In the future this method may throw this exception when the memory for the debug message cannot be allocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classBString" kindref="compound">BString</ref> object that contains the debug message.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="84" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1aebbcce59d40e011f63c3373eda58c308" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPrivate::Network::BSystemError::Error</definition>
        <argsstring>() noexcept</argsstring>
        <name>Error</name>
        <qualifiedname>BPrivate::Network::BSystemError::Error</qualifiedname>
        <briefdescription>
<para>Get the error code for this error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="85" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1ad4c1783170eebdd85479aaca28519565" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>const char *</type>
        <definition>const char * BPrivate::Network::BSystemError::Message</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>Message</name>
        <qualifiedname>BPrivate::Network::BSystemError::Message</qualifiedname>
        <reimplements refid="classBPrivate_1_1Network_1_1BError_1a2c1b049e967387a289b1b0b8694eca28">Message</reimplements>
        <briefdescription>
<para>Access the string representation of the message. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns the value of <computeroutput>strerror()</computeroutput> for the error code.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="83" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1afbea1db67adc272ed7aec51f7894bd1a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref> &amp;</type>
        <definition>BSystemError &amp; BPrivate::Network::BSystemError::operator=</definition>
        <argsstring>(BSystemError &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BSystemError::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="81" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BSystemError_1a8b049f6e3e0683e0658f295a5176c604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref> &amp;</type>
        <definition>BSystemError &amp; BPrivate::Network::BSystemError::operator=</definition>
        <argsstring>(const BSystemError &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BSystemError::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="78" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Advanced error object that wrap low-level system errors. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classBPrivate_1_1Network_1_1BSystemError" kindref="compound">BSystemError</ref> is a concrete advanced error object that is used to wrap tradition errors that are usually returned as a <computeroutput>status_t</computeroutput>. This type takes the system error, and adds an <emphasis>origin</emphasis> specifier.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BPrivate::Network::BError</label>
        <link refid="classBPrivate_1_1Network_1_1BError"/>
      </node>
      <node id="1">
        <label>BPrivate::Network::BSystemError</label>
        <link refid="classBPrivate_1_1Network_1_1BSystemError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BPrivate::Network::BError</label>
        <link refid="classBPrivate_1_1Network_1_1BError"/>
      </node>
      <node id="1">
        <label>BPrivate::Network::BSystemError</label>
        <link refid="classBPrivate_1_1Network_1_1BSystemError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" line="71" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/ErrorsExt.h" bodystart="72" bodyend="89"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BError_1a98953038abdab68796b3bf373ead0540" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abbf80a044f5af02aac87a65a6aba703a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abf7e40af168fdcf53eb7a86e42c9141c" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a227208ede157ae501ea3acee188e46b7" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1acced9d1ba62658f42b75ad859821dba8" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BSystemError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1a1a853245bf93930f04ce77558dbaab02" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BSystemError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1a7c5ee29ff40fd1fb4ff6920123a938a5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BSystemError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1a9b8aa2aca2b7611a6604a92e78590530" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>BSystemError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1a5ee62b6ae8191453274a93c3e9d00b36" prot="public" virt="virtual"><scope>BPrivate::Network::BSystemError</scope><name>DebugMessage</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1aebbcce59d40e011f63c3373eda58c308" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>Error</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1a841c789b077f2cfff34c148b08bd4de1" prot="private" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>fErrorCode</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1ad4c1783170eebdd85479aaca28519565" prot="public" virt="virtual"><scope>BPrivate::Network::BSystemError</scope><name>Message</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1a8b049f6e3e0683e0658f295a5176c604" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BSystemError_1afbea1db67adc272ed7aec51f7894bd1a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1af4a889a39e9530458aeb649d2ba12d45" prot="public" virt="non-virtual" ambiguityscope="BPrivate::Network::BError::"><scope>BPrivate::Network::BSystemError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1ab80467e8f9af8142d4d7cfa311f04c68" prot="public" virt="non-virtual" ambiguityscope="BPrivate::Network::BError::"><scope>BPrivate::Network::BSystemError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" prot="public" virt="virtual"><scope>BPrivate::Network::BSystemError</scope><name>Origin</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a69a0b83a56c08e510e16aaba841f25e5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>WriteToOutput</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a2c7538bd21c2844cd1ee0c8ee0ba74ef" prot="public" virt="non-virtual"><scope>BPrivate::Network::BSystemError</scope><name>WriteToStream</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a0ffdd9cc030c188df03dd95e1de82bf4" prot="public" virt="virtual"><scope>BPrivate::Network::BSystemError</scope><name>~BError</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
