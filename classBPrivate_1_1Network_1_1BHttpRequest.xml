<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BHttpRequest" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BHttpRequest</compoundname>
    <innerclass refid="structBPrivate_1_1Network_1_1BHttpRequest_1_1Body" prot="public">BPrivate::Network::BHttpRequest::Body</innerclass>
      <sectiondef kind="user-defined">
      <header>Constructors and Destructor</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a32e3059501cecb9c77e92c89c2f7674e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpRequest::BHttpRequest</definition>
        <argsstring>()</argsstring>
        <name>BHttpRequest</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::BHttpRequest</qualifiedname>
        <briefdescription>
<para>Construct an empty HTTP request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1aa7773d8d1165f4f05c1a5265e60d24c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpRequest::BHttpRequest</definition>
        <argsstring>(const BUrl &amp;url)</argsstring>
        <name>BHttpRequest</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::BHttpRequest</qualifiedname>
        <param>
          <type>const <ref refid="classBUrl" kindref="compound">BUrl</ref> &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Construct a HTTP request for an <emphasis>url</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid URL with the <computeroutput>http</computeroutput> or <computeroutput>https</computeroutput> protocol.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BUnsupportedProtocol" kindref="compound">BUnsupportedProtocol</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the protocol of the URL cannot be handled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BInvalidUrl" kindref="compound">BInvalidUrl</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the <emphasis>url</emphasis> is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a55afcc4906f83a75370bc2f963047e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpRequest::BHttpRequest</definition>
        <argsstring>(const BHttpRequest &amp;other)=delete</argsstring>
        <name>BHttpRequest</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::BHttpRequest</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpRequest" kindref="compound">BHttpRequest</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copying is not allowed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a7e6af5e282a64319c35e5baf1f817ef6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpRequest::BHttpRequest</definition>
        <argsstring>(BHttpRequest &amp;&amp;other) noexcept</argsstring>
        <name>BHttpRequest</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::BHttpRequest</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpRequest" kindref="compound">BHttpRequest</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>After a move, the <emphasis>other</emphasis> object is left in an empty state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The request to move data from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a26e9ac3a43fe05eec0e8ac1b863012a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpRequest::~BHttpRequest</definition>
        <argsstring>()</argsstring>
        <name>~BHttpRequest</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::~BHttpRequest</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="93" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assignment operators</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1ae791ddb4bc341aa2439733563e4bf774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpRequest" kindref="compound">BHttpRequest</ref> &amp;</type>
        <definition>BHttpRequest &amp; BPrivate::Network::BHttpRequest::operator=</definition>
        <argsstring>(const BHttpRequest &amp;other)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpRequest" kindref="compound">BHttpRequest</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment is not allowed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="96" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a4cca69e9a02ab1db1b7a34a667b044e5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpRequest" kindref="compound">BHttpRequest</ref> &amp;</type>
        <definition>BHttpRequest &amp; BPrivate::Network::BHttpRequest::operator=</definition>
        <argsstring>(BHttpRequest &amp;&amp;) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpRequest" kindref="compound">BHttpRequest</ref> &amp;&amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
<para>After a move, the <emphasis>other</emphasis> object is left in an empty state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The request to move data from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="97" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Valid or empty</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a5b0464e2f3417b904bce245cf5faff3b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpRequest::IsEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::IsEmpty</qualifiedname>
        <briefdescription>
<para>Check if the request is valid or empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The request is empty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The request is valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="100" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Current Options</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1ac837488d86d25ef1f52e1f0631b84eee" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structBPrivate_1_1Network_1_1BHttpAuthentication" kindref="compound">BHttpAuthentication</ref> *</type>
        <definition>const BHttpAuthentication * BPrivate::Network::BHttpRequest::Authentication</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Authentication</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::Authentication</qualifiedname>
        <briefdescription>
<para>Get the credentials for the authentication for the request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>When no credentials are set for this request, the method returns a <computeroutput>nullptr</computeroutput>. Otherwise, it will return a pointer to the current <ref refid="structBPrivate_1_1Network_1_1BHttpAuthentication" kindref="compound">BHttpAuthentication</ref> data set for this request.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="101" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1aa2b4c16a1e5e8c59052b4f310f63dfb4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> &amp;</type>
        <definition>const BHttpFields &amp; BPrivate::Network::BHttpRequest::Fields</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Fields</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::Fields</qualifiedname>
        <briefdescription>
<para>Get the additional header fields set for the request. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned header fields may be empty if no additional header fields were set.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="102" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a171280deecf9e9222b42244b1a892e03" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BPrivate::Network::BHttpRequest::MaxRedirections</definition>
        <argsstring>() const noexcept</argsstring>
        <name>MaxRedirections</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::MaxRedirections</qualifiedname>
        <briefdescription>
<para>Get the current redirection options for this request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1afcc97e60fdf1b05592908e592e83665f" kindref="member">BHttpRequest::SetMaxRedirections()</ref> for details on the options.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="103" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a15ec1596ab365755cce3a93ef26f1cf5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;</type>
        <definition>const BHttpMethod &amp; BPrivate::Network::BHttpRequest::Method</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Method</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::Method</qualifiedname>
        <briefdescription>
<para>Get the current method for the request. </para>
        </briefdescription>
        <detaileddescription>
<para>This will either return the custom value set for this request, or the default as is listed in the overview documentation of this class.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="104" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a65dbf7dc1fa5e5ea26578c9c613b53d1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structBPrivate_1_1Network_1_1BHttpRequest_1_1Body" kindref="compound">Body</ref> *</type>
        <definition>const BHttpRequest::Body * BPrivate::Network::BHttpRequest::RequestBody</definition>
        <argsstring>() const noexcept</argsstring>
        <name>RequestBody</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::RequestBody</qualifiedname>
        <briefdescription>
<para>Get the details of the custom body set for the request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>When no body is set for this request, the method returns a <computeroutput>nullptr</computeroutput>. Otherwise, it will return a pointer to a struct that describes the current body.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="105" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a156aa59838ce4b782f18aef1a85525dc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpRequest::StopOnError</definition>
        <argsstring>() const noexcept</argsstring>
        <name>StopOnError</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::StopOnError</qualifiedname>
        <briefdescription>
<para>Is the request set to parse the full response on error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>When encountering a HTTP status of the client error class (4xx) or server error class (5xx), then the response will not be parsed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The full response will be parsed, even with an error status code.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="106" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a90a392bb5093f33dc7825c5d227cdf01" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BPrivate::Network::BHttpRequest::Timeout</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Timeout</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::Timeout</qualifiedname>
        <briefdescription>
<para>Get the current timeout for the server to respond. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="107" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a4ab0b01f3f6dbd94dedcddb2a0daf72c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classBUrl" kindref="compound">BUrl</ref> &amp;</type>
        <definition>const BUrl &amp; BPrivate::Network::BHttpRequest::Url</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Url</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::Url</qualifiedname>
        <briefdescription>
<para>Get the current Url for the request. </para>
        </briefdescription>
        <detaileddescription>
<para>This will either return the custom value set for this request, or the default as is listed in the overview documentation of this class.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="108" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting Options</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1ae334ac3d1f5408479d75814f7a28af26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetAuthentication</definition>
        <argsstring>(const BHttpAuthentication &amp;authentication)</argsstring>
        <name>SetAuthentication</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetAuthentication</qualifiedname>
        <param>
          <type>const <ref refid="structBPrivate_1_1Network_1_1BHttpAuthentication" kindref="compound">BHttpAuthentication</ref> &amp;</type>
          <declname>authentication</declname>
        </param>
        <briefdescription>
<para>Set the credentials to enable basic authentication for the request. </para>
        </briefdescription>
        <detaileddescription>
<para>The Basic authorization line is added to the request upon setting the request details. There is no support for other authentication schemes, like digest authentication.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>authentication</parametername>
</parameternamelist>
<parameterdescription>
<para>The credentials to apply to the request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="111" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1abb42d55a1b9296ee317091694852ba28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetFields</definition>
        <argsstring>(const BHttpFields &amp;fields)</argsstring>
        <name>SetFields</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetFields</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
<para>Set additional header <emphasis>fields</emphasis> for this request. </para>
        </briefdescription>
        <detaileddescription>
<para>There are a few reserved fields, which cannot be set as optional fields. These currently are: <computeroutput>Host</computeroutput> <computeroutput>Accept-Encoding</computeroutput> <computeroutput>Connection</computeroutput> <computeroutput>Content-Type</computeroutput> <computeroutput>Content-Length</computeroutput> </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional fields for the header of the request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BHttpFields::InvalidData</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the <emphasis>fields</emphasis> contain reserved fields.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="112" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1afcc97e60fdf1b05592908e592e83665f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetMaxRedirections</definition>
        <argsstring>(uint8 maxRedirections)</argsstring>
        <name>SetMaxRedirections</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetMaxRedirections</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>maxRedirections</declname>
        </param>
        <briefdescription>
<para>Set the redirection options for this request. </para>
        </briefdescription>
        <detaileddescription>
<para>The HTTP protocol allows the server to redirect requests if the resources have moved to a new location. For your convenience, you can instruct the network services kit to follow these redirections. You can set how many redirects should be followed. The maximum value is that of an unsigned 8 bit int, so maximum is 256 redirects. This prevents the request from staying stuck in a redirection loop.</para>
<para>If redirects are set to 0, or the maximum number of redirects have been processed, then the response will be set to the actual (last) received redirection response.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxRedirections</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of redirections to follow. Set to 0 to disable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="113" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a0b749d41f92f0102e279607f031055ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetMethod</definition>
        <argsstring>(const BHttpMethod &amp;method)</argsstring>
        <name>SetMethod</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetMethod</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <briefdescription>
<para>Set the <emphasis>method</emphasis> for this request. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that there currently is no additional validation done on any semantical incompatibilities. This means that it is currently allowed to do a <computeroutput>GET</computeroutput> or <computeroutput>HEAD</computeroutput> request with data, while that is forbidden by the standard.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>The method to use for the request.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="114" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a20ba3bb6bd91224a7207d56208add672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetRequestBody</definition>
        <argsstring>(std::unique_ptr&lt; BDataIO &gt; input, BString mimeType, std::optional&lt; off_t &gt; size)</argsstring>
        <name>SetRequestBody</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetRequestBody</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classBDataIO" kindref="compound">BDataIO</ref> &gt;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref></type>
          <declname>mimeType</declname>
        </param>
        <param>
          <type>std::optional&lt; off_t &gt;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set a body for this request. </para>
        </briefdescription>
        <detaileddescription>
<para>When the requests needs a body, this method can be used to set the contents of that body.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input is an owned pointer to an input. The lifetime of the input is guaranteed up to the point that the request is sent for execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid mimetype, with a class and a subtype. For example <computeroutput>text/plain</computeroutput> is a valid mime type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>When the content size is set, the request will have a <computeroutput>Content-Length</computeroutput> header field. If the <emphasis>input</emphasis> has less data in the buffer, this will cause the request to error out. However, if the input has more data, it is only read up to size. If the actual size of the data is unknown, this can be made optional. The request body will then be sent as a so-called chunked transfer, sending data until the input is at the end.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the <emphasis>mimeType</emphasis> is invalid or when <emphasis>input</emphasis> is a <computeroutput>nullptr</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="115" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1ac1b3d4ad8820991191ef12a3e9850ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetStopOnError</definition>
        <argsstring>(bool stopOnError)</argsstring>
        <name>SetStopOnError</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetStopOnError</qualifiedname>
        <param>
          <type>bool</type>
          <declname>stopOnError</declname>
        </param>
        <briefdescription>
<para>Set whether the entire response will be parsed on a client or server error. </para>
        </briefdescription>
        <detaileddescription>
<para>When the server encounters an error processing a request, it may respond with an error code. Error responses can be either an error with the request, like the 404 Not Found error, or errors on the server side, like a 500 Internal Server Error. Error responses may still have header fields and bodies.</para>
<para>If your application is not interested in the rest of the response in case a client error or a server error occurs, you can set this option to stop parsing. This will allow you to use the <ref refid="classBPrivate_1_1Network_1_1BHttpResult" kindref="compound">BHttpResult</ref> object as normal, but the response fields will be empty, and there will be no body data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stopOnError</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to <computeroutput>true</computeroutput> to stop parsing the HTTP response when a client error or server error occurs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="117" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a2d86edf07d6e9458493e8c274ab760ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetTimeout</definition>
        <argsstring>(bigtime_t timeout)</argsstring>
        <name>SetTimeout</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetTimeout</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Set the maximum time waiting for the server to respond. </para>
        </briefdescription>
        <detaileddescription>
<para>If the request times out, then the response will hold the <ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError" kindref="compound">BNetworkRequestError</ref> of the <computeroutput>NetworkError</computeroutput> type. By default, the request does not time out.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout in milliseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="118" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a6c095622eb7be3bec6d5a58b3de76b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SetUrl</definition>
        <argsstring>(const BUrl &amp;url)</argsstring>
        <name>SetUrl</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SetUrl</qualifiedname>
        <param>
          <type>const <ref refid="classBUrl" kindref="compound">BUrl</ref> &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Set the <emphasis>url</emphasis> for this request. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid URL with the <computeroutput>http</computeroutput> or <computeroutput>https</computeroutput> protocol.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>This exception may be raised if it is impossible to allocate memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BUnsupportedProtocol" kindref="compound">BUnsupportedProtocol</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the protocol of the URL cannot be handled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BInvalidUrl" kindref="compound">BInvalidUrl</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>This exception is raised when the <emphasis>url</emphasis> is invalid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="119" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Clearing options</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a4d93841151f1214139608df29013c66c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::ClearAuthentication</definition>
        <argsstring>() noexcept</argsstring>
        <name>ClearAuthentication</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::ClearAuthentication</qualifiedname>
        <briefdescription>
<para>Clear any authentication details previously set with <ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1ae334ac3d1f5408479d75814f7a28af26" kindref="member">SetAuthentication()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no authentication data set, this method does nothing.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="122" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a929a032b44ef5222877661aceeefe468" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classBDataIO" kindref="compound">BDataIO</ref> &gt;</type>
        <definition>std::unique_ptr&lt; BDataIO &gt; BPrivate::Network::BHttpRequest::ClearRequestBody</definition>
        <argsstring>() noexcept</argsstring>
        <name>ClearRequestBody</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::ClearRequestBody</qualifiedname>
        <briefdescription>
<para>Clear any request body previously set with <ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a20ba3bb6bd91224a7207d56208add672" kindref="member">SetRequestBody()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns the previously set input <ref refid="classBDataIO" kindref="compound">BDataIO</ref> object. If there is no request body set, this method returns <computeroutput>nullptr</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="123" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Serialization</header>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a99c6af9d109665f433c8270502d9aebf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BPrivate::Network::BHttpRequest::HeaderToString</definition>
        <argsstring>() const</argsstring>
        <name>HeaderToString</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::HeaderToString</qualifiedname>
        <briefdescription>
<para>Serialize the HTTP Header of this request to a string. </para>
        </briefdescription>
        <detaileddescription>
<para>The HTTP header consists of the request line, and the fields, serialized as text according to the HTTP specification.</para>
<para>This method can be used to debug requests.</para>
<para><simplesect kind="return"><para>A new string that represents the HTTP request.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>In case it is not possible to allocate memory for the output string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="126" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBPrivate_1_1Network_1_1BHttpRequest_1a67e2f931bcc4e7fbb93da82b73735316" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BHttpSession</definition>
        <argsstring></argsstring>
        <name>BHttpSession</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::BHttpSession</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpSession" kindref="compound">BHttpSession</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="129" column="14" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBPrivate_1_1Network_1_1BHttpRequest_1a79e133fd0feb82cedbadfc78685fb8db" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class HttpSerializer</definition>
        <argsstring></argsstring>
        <name>HttpSerializer</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::HttpSerializer</qualifiedname>
        <param>
          <type>HttpSerializer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="130" column="14" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpRequest_1af2d1b4c7050a27d95c31f7dec9089503" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Data &gt;</type>
        <definition>std::unique_ptr&lt;Data&gt; BPrivate::Network::BHttpRequest::fData</definition>
        <argsstring></argsstring>
        <name>fData</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::fData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="136" column="17" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1a08057fdb848346032c586001c24d9788" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpRequest::RewindBody</definition>
        <argsstring>() noexcept</argsstring>
        <name>RewindBody</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::RewindBody</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="133" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpRequest_1af6f0a6b62fef0f697b907a0e887df189" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BPrivate::Network::BHttpRequest::SerializeHeaderTo</definition>
        <argsstring>(HttpBuffer &amp;buffer) const</argsstring>
        <name>SerializeHeaderTo</name>
        <qualifiedname>BPrivate::Network::BHttpRequest::SerializeHeaderTo</qualifiedname>
        <param>
          <type>HttpBuffer &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="134" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represent a HTTP request. </para>
    </briefdescription>
    <detaileddescription>
<para>This class can be used to construct HTTP requests that can be executed by the <ref refid="namespaceBPrivate_1_1Network" kindref="compound">Network</ref> Services Kit. A request has two states, either it is is a valid request, or it is an empty request. The criterium is whether or not the request has a URL. This class has all kinds of convenience methods set and retrieve particular options. Most options are wrapped in specialized container classes that do some form of validation.</para>
<para>The default options are: <table rows="8" cols="4"><row>
<entry thead="yes"><para>Getter</para>
</entry><entry thead="yes"><para>Setter</para>
</entry><entry thead="yes"><para>Description</para>
</entry><entry thead="yes"><para>Default </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a4ab0b01f3f6dbd94dedcddb2a0daf72c" kindref="member">Url()</ref>  </para>
</entry><entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a6c095622eb7be3bec6d5a58b3de76b47" kindref="member">SetUrl()</ref>  </para>
</entry><entry thead="no"><para>The URL. This must start with http or https.  </para>
</entry><entry thead="no"><para>Defaults to an empty <ref refid="classBUrl" kindref="compound">BUrl</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1aa2b4c16a1e5e8c59052b4f310f63dfb4" kindref="member">Fields()</ref>  </para>
</entry><entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1abb42d55a1b9296ee317091694852ba28" kindref="member">SetFields()</ref>  </para>
</entry><entry thead="no"><para>Additional fields set in the request header.  </para>
</entry><entry thead="no"><para>Defaults with no additional fields   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a15ec1596ab365755cce3a93ef26f1cf5" kindref="member">Method()</ref>  </para>
</entry><entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a0b749d41f92f0102e279607f031055ad" kindref="member">SetMethod()</ref>  </para>
</entry><entry thead="no"><para>The HTTP method for the request  </para>
</entry><entry thead="no"><para>Defaults to <ref refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55eae16d94bfc1bdba38523d7d09648f314f" kindref="member">BHttpMethod::Get</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a171280deecf9e9222b42244b1a892e03" kindref="member">MaxRedirections()</ref>  </para>
</entry><entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1afcc97e60fdf1b05592908e592e83665f" kindref="member">SetMaxRedirections()</ref>  </para>
</entry><entry thead="no"><para>How many redirections should be followed. Set to 0 to disable.  </para>
</entry><entry thead="no"><para>Defaults to 8 redirections per request   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a65dbf7dc1fa5e5ea26578c9c613b53d1" kindref="member">RequestBody()</ref>  </para>
</entry><entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a20ba3bb6bd91224a7207d56208add672" kindref="member">SetRequestBody()</ref>  </para>
</entry><entry thead="no"><para><ref refid="structBPrivate_1_1Network_1_1BHttpRequest_1_1Body" kindref="compound">Body</ref> contents that is sent with the request.  </para>
</entry><entry thead="no"><para>Defaults to an empty body   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a156aa59838ce4b782f18aef1a85525dc" kindref="member">StopOnError()</ref>  </para>
</entry><entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1ac1b3d4ad8820991191ef12a3e9850ca7" kindref="member">SetStopOnError()</ref>  </para>
</entry><entry thead="no"><para>Stop parsing the server response when there is a client or server error.  </para>
</entry><entry thead="no"><para>Defaults to <emphasis>false</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a90a392bb5093f33dc7825c5d227cdf01" kindref="member">Timeout()</ref>  </para>
</entry><entry thead="no"><para><ref refid="classBPrivate_1_1Network_1_1BHttpRequest_1a2d86edf07d6e9458493e8c274ab760ff" kindref="member">SetTimeout()</ref>  </para>
</entry><entry thead="no"><para>The timeout determines how long is waited for the server to respond  </para>
</entry><entry thead="no"><para><computeroutput>B_INFINITE_TIMEOUT</computeroutput>   </para>
</entry></row>
</table>
</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="82" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="83" bodyend="137"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1ac837488d86d25ef1f52e1f0631b84eee" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>Authentication</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a32e3059501cecb9c77e92c89c2f7674e" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>BHttpRequest</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1aa7773d8d1165f4f05c1a5265e60d24c4" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>BHttpRequest</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a55afcc4906f83a75370bc2f963047e9b" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>BHttpRequest</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a7e6af5e282a64319c35e5baf1f817ef6" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>BHttpRequest</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a4d93841151f1214139608df29013c66c" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>ClearAuthentication</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a929a032b44ef5222877661aceeefe468" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>ClearRequestBody</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1af2d1b4c7050a27d95c31f7dec9089503" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>fData</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1aa2b4c16a1e5e8c59052b4f310f63dfb4" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>Fields</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a99c6af9d109665f433c8270502d9aebf" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>HeaderToString</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a5b0464e2f3417b904bce245cf5faff3b" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>IsEmpty</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a171280deecf9e9222b42244b1a892e03" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>MaxRedirections</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a15ec1596ab365755cce3a93ef26f1cf5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>Method</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1ae791ddb4bc341aa2439733563e4bf774" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a4cca69e9a02ab1db1b7a34a667b044e5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a65dbf7dc1fa5e5ea26578c9c613b53d1" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>RequestBody</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a08057fdb848346032c586001c24d9788" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>RewindBody</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1af6f0a6b62fef0f697b907a0e887df189" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SerializeHeaderTo</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1ae334ac3d1f5408479d75814f7a28af26" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetAuthentication</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1abb42d55a1b9296ee317091694852ba28" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetFields</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1afcc97e60fdf1b05592908e592e83665f" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetMaxRedirections</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a0b749d41f92f0102e279607f031055ad" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetMethod</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a20ba3bb6bd91224a7207d56208add672" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetRequestBody</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1ac1b3d4ad8820991191ef12a3e9850ca7" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetStopOnError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a2d86edf07d6e9458493e8c274ab760ff" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetTimeout</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a6c095622eb7be3bec6d5a58b3de76b47" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>SetUrl</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a156aa59838ce4b782f18aef1a85525dc" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>StopOnError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a90a392bb5093f33dc7825c5d227cdf01" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>Timeout</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a4ab0b01f3f6dbd94dedcddb2a0daf72c" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>Url</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpRequest_1a26e9ac3a43fe05eec0e8ac1b863012a7" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpRequest</scope><name>~BHttpRequest</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
