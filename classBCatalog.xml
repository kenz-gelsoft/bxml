<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBCatalog" kind="class" language="C++" prot="public">
    <compoundname>BCatalog</compoundname>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBCatalog_1ace138a95ef6dcc8c8457a42fb5b440b6" prot="protected" static="no" mutable="no">
        <type><ref refid="classBCatalogData" kindref="compound">BCatalogData</ref> *</type>
        <definition>BCatalogData* BCatalog::fCatalogData</definition>
        <argsstring></argsstring>
        <name>fCatalogData</name>
        <qualifiedname>BCatalog::fCatalogData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="58" column="13" bodyfile="/boot/home/src/haiku/headers/os/locale/Catalog.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBCatalog_1af76c1caa1d448eb7099b4508661fc3e2" prot="protected" static="no" mutable="yes">
        <type><ref refid="classBLocker" kindref="compound">BLocker</ref></type>
        <definition>BLocker BCatalog::fLock</definition>
        <argsstring></argsstring>
        <name>fLock</name>
        <qualifiedname>BCatalog::fLock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="59" column="15" bodyfile="/boot/home/src/haiku/headers/os/locale/Catalog.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBCatalog_1aa8746a3cdfcc1e95edae76054ad715a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BLocale</definition>
        <argsstring></argsstring>
        <name>BLocale</name>
        <qualifiedname>BCatalog::BLocale</qualifiedname>
        <param>
          <type><ref refid="classBLocale" kindref="compound">BLocale</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="62" column="13" bodyfile="/boot/home/src/haiku/headers/os/locale/Catalog.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBCatalog_1a28040119f33b82769839c21b55b445ba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t get_add_on_catalog</definition>
        <argsstring>(BCatalog *, const char *)</argsstring>
        <name>get_add_on_catalog</name>
        <qualifiedname>BCatalog::get_add_on_catalog</qualifiedname>
        <param>
          <type><ref refid="classBCatalog" kindref="compound">BCatalog</ref> *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="63" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBCatalog_1a45b0bd772e3aee626a65aba2e9e88a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCatalog::BCatalog</definition>
        <argsstring>()</argsstring>
        <name>BCatalog</name>
        <qualifiedname>BCatalog::BCatalog</qualifiedname>
        <briefdescription>
<para>Construct an empty <ref refid="classBCatalog" kindref="compound">BCatalog</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be followed by <ref refid="classBCatalog_1a029e8144be7b24bb4dce96e4b4a283fc" kindref="member">SetTo()</ref> method to set the catalog.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a95fcfcd9674c4a1c6875ea0ca318ded2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCatalog::BCatalog</definition>
        <argsstring>(const char *signature, const char *language=NULL)</argsstring>
        <name>BCatalog</name>
        <qualifiedname>BCatalog::BCatalog</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>language</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classBCatalog" kindref="compound">BCatalog</ref> object for the given application <emphasis>signature</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If you don&apos;t specify a language, the system default list will be used. The language is passed here as a 2 letter ISO code.</para>
<para>This constructor is used to load catalogs that are not related to an executable or library file (so there is no <ref refid="structentry__ref" kindref="compound">entry_ref</ref> usable to identify the catalog). As it uses only the MIME signature, it cannot load catalogs from application resources or a catalog file located next to the application. Only the catalogs in the standard system directories (data/locale/catalogs) are checked. Moreover, only the default catalog format is available, not custom formats from catalog add-ons.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>MIME signature for which to load a catalog. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language of the catalog to load. If <computeroutput>NULL</computeroutput>, the user settings will be used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a338e2e4c785310844ded2fe5840f5c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCatalog::BCatalog</definition>
        <argsstring>(const entry_ref &amp;catalogOwner, const char *language=NULL, uint32 fingerprint=0)</argsstring>
        <name>BCatalog</name>
        <qualifiedname>BCatalog::BCatalog</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>catalogOwner</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>language</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>fingerprint</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classBCatalog" kindref="compound">BCatalog</ref> object for the given <emphasis>catalogOwner</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If you don&apos;t specify a language, the system default list will be used. The language is passed here as a 2 letter ISO code.</para>
<para>The fingerprint is a way to check that the catalog that will be loaded matches the current version of the application. A catalog made for a different version of the application can be loaded if you set the fingerprint to <computeroutput>0</computeroutput>. This is usually not a problem, it only means that some strings may not be translated properly. But if you want to provide different versions of your application, it may be useful to separate their catalogs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>catalogOwner</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structentry__ref" kindref="compound">entry_ref</ref> or application, add-on or library for which to load a catalog. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language of the catalog to load. If <computeroutput>NULL</computeroutput>, the user settings will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fingerprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The fingerprint version-info for the catalog to load. If <computeroutput>0</computeroutput>, the fingerprint will not be checked,and any version of the catalog will be loaded.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a7ca1efd6e50d05caabcc24d294da25a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BCatalog::~BCatalog</definition>
        <argsstring>()</argsstring>
        <name>~BCatalog</name>
        <qualifiedname>BCatalog::~BCatalog</qualifiedname>
        <briefdescription>
<para>Destroys the <ref refid="classBCatalog" kindref="compound">BCatalog</ref> object freeing memory used by it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="30" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a418f04da03164887a5e3eba2f61e6bc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BCatalog::CountItems</definition>
        <argsstring>() const</argsstring>
        <name>CountItems</name>
        <qualifiedname>BCatalog::CountItems</qualifiedname>
        <briefdescription>
<para>Gets the number of items in the catalog. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of strings in the catalog or 0 on error.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="51" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a8b9181119a2971a214473dcc482a3415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::GetData</definition>
        <argsstring>(const char *name, BMessage *msg)</argsstring>
        <name>GetData</name>
        <qualifiedname>BCatalog::GetData</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get custom data from the catalog. </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows you to localize something else than raw text. This may include pictures, sounds, videos, or anything else. Note there is no support for generating a catalog with such data inside, and the current format may not support it. If you need to localize data that is not text, it is advised to handle it by yourself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the data to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBMessage" kindref="compound">BMessage</ref> to fill in with the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Unable to get an exclusive lock on data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Catalog is <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>catalog with the specified <emphasis>name</emphasis> could not be found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="37" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1ac5c03e634c4b07f14ae374e6ff3d67f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::GetData</definition>
        <argsstring>(uint32 id, BMessage *msg)</argsstring>
        <name>GetData</name>
        <qualifiedname>BCatalog::GetData</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get custom data from the catalog. </para>
        </briefdescription>
        <detaileddescription>
<para>As for GetString, the id-based version may be subject to hash-collisions, but is faster.</para>
<para>Note the current catalog format doesn&apos;t allow storing custom data in catalogs, so the only way to use this method is providing your own catalog add-on for storing the data.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a19269c5a3a23e28de3ccf5d96bcdbf90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::GetFingerprint</definition>
        <argsstring>(uint32 *fingerprint)</argsstring>
        <name>GetFingerprint</name>
        <qualifiedname>BCatalog::GetFingerprint</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> *</type>
          <declname>fingerprint</declname>
          <defname>fp</defname>
        </param>
        <briefdescription>
<para>Get the catalog fingerprint. </para>
        </briefdescription>
        <detaileddescription>
<para>This method setsfp to the fingerprint of the catalog. This allows you to check which version of the sourcecode this catalog was generated from.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer to set to the fingerprint value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went as expected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Could not get exclusive lock on catalog. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>fp</emphasis> is <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Catalog data is <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1af8ecfe730a02fe7dd03eb086545521ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::GetLanguage</definition>
        <argsstring>(BString *language)</argsstring>
        <name>GetLanguage</name>
        <qualifiedname>BCatalog::GetLanguage</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>language</declname>
          <defname>lang</defname>
        </param>
        <briefdescription>
<para>Get the catalog language. </para>
        </briefdescription>
        <detaileddescription>
<para>This method fills the lang string with the language name for the catalog.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lang</parametername>
</parameternamelist>
<parameterdescription>
<para>The string where to copy the language.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went as expected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Could not get exclusive lock on catalog. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>lang</emphasis> is <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Catalog data is <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="41" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1aaa4c2bf292dbd2dad5938177eafffced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::GetSignature</definition>
        <argsstring>(BString *signature)</argsstring>
        <name>GetSignature</name>
        <qualifiedname>BCatalog::GetSignature</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>signature</declname>
          <defname>sig</defname>
        </param>
        <briefdescription>
<para>Get the catalog mime-signature. </para>
        </briefdescription>
        <detaileddescription>
<para>This method fills the sig string with the mime-signature associated to the catalog.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The string where to copy the signature.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An error code.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="40" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a151e295bda9c5411fa0e2781f9f0653a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BCatalog::GetString</definition>
        <argsstring>(const char *string, const char *context=NULL, const char *comment=NULL)</argsstring>
        <name>GetString</name>
        <qualifiedname>BCatalog::GetString</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>context</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Get a string from the catalog. </para>
        </briefdescription>
        <detaileddescription>
<para>This method access the data of the catalog and returns you the translated version of the string. You must pass it the context where the string is, as the same string may appear somewhere else and need a different translation. The comment is optional. It is meant as an help to translators, when the string alone is not helpful enough or there are special things to note. The comment is also used as a way to uniquely identify a string, so if two identical strings share the same context, it is still possible to provide different translations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to translate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>The context where the string is located. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comment</parametername>
</parameternamelist>
<parameterdescription>
<para>Supplementary comment for translators.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The translated string, or the one passed as a parameter if no translation was found.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="32" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1ac6caaefe60ec06d0aa901e0dcc46fb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BCatalog::GetString</definition>
        <argsstring>(uint32 id)</argsstring>
        <name>GetString</name>
        <qualifiedname>BCatalog::GetString</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a string by id from the catalog. </para>
        </briefdescription>
        <detaileddescription>
<para>The id based version of this method is slightly faster, as it doesn&apos;t have to compute the hash from the 3 parameters. However, it will fail if there is an hash collision, so you should still fallback to the first one in case of problems. Also note that the hash value may be different from one catalog to another, depending on the file format they are stored in, so you shouldn&apos;t rely on this method unless you are sure you can keep all the catalog files under control.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The translated string if found, or an empty string.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="35" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a6cab9f7d71eec3cee2c19ba4a4153761" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BCatalog::InitCheck</qualifiedname>
        <briefdescription>
<para>Check if the catalog is in a valid and usable state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The catalog is initialized properly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Could not get exclusive lock on catalog. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>Catalog data is <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="50" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a1736341fa377b305e27ff4ea0f77c139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::SetTo</definition>
        <argsstring>(const char *signature, const char *language=NULL)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BCatalog::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>language</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Reload the string data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method reloads the data for the given signature and language.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME signature identifying the catalog to load. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language of the catalog to load. If <computeroutput>NULL</computeroutput>, the user settings will be used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success, <computeroutput>B_ERROR</computeroutput> on error.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="47" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a029e8144be7b24bb4dce96e4b4a283fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCatalog::SetTo</definition>
        <argsstring>(const entry_ref &amp;catalogOwner, const char *language=NULL, uint32 fingerprint=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BCatalog::SetTo</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> &amp;</type>
          <declname>catalogOwner</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>language</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>fingerprint</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Reload the string data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method reloads the data for the given file, language and fingerprint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>catalogOwner</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> of the application, add-on or library for which you want to load a catalog. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language of the catalog to load. If <computeroutput>NULL</computeroutput>, the user settings will be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fingerprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The fingerprint of the catalog you want to load.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success, <computeroutput>B_ERROR</computeroutput> on error.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="44" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBCatalog_1a93b6a0ae9be16aa8fc8e946833627575" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCatalog::BCatalog</definition>
        <argsstring>(const BCatalog &amp;)</argsstring>
        <name>BCatalog</name>
        <qualifiedname>BCatalog::BCatalog</qualifiedname>
        <param>
          <type>const <ref refid="classBCatalog" kindref="compound">BCatalog</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBCatalog_1a2edf481c475619bd6561d64d494e89d6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBCatalog" kindref="compound">BCatalog</ref> &amp;</type>
        <definition>const BCatalog &amp; BCatalog::operator=</definition>
        <argsstring>(const BCatalog &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BCatalog::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBCatalog" kindref="compound">BCatalog</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="55" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>String localization handling. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBCatalog" kindref="compound">BCatalog</ref> is the class that allows you to perform string localization. This means you give it a string in english, and it automatically returns the translation of this string in the user&apos;s specified language, if available.</para>
<para>Most of the time, you don&apos;t have to deal with <ref refid="classBCatalog" kindref="compound">BCatalog</ref> directly. You use the translation macros instead. However, there are some cases where you will have to use catalogs directly. These include :<itemizedlist>
<listitem><para>Tools for managing catalogs : if you want to add, remove or edit entries in a catalog, you need to do it using the <ref refid="classBCatalog" kindref="compound">BCatalog</ref> class.</para>
</listitem><listitem><para>Accessing catalogs other than your own : the macros only grant you access to the catalog linked with your application. To access other catalogs (for example if you create a script interpreter and want to localize the scripts), you will have to open a catalog associated with your script.</para>
</listitem></itemizedlist>
</para>
<sect1 id="classBCatalog_1macros">
<title>Using the macros</title>
<para>You don&apos;t have to do much in your program to handle catalogs. You must first set the B_TRANSLATION_CONTEXT define to a string that identifies which part of the application the strings you will translate are in. This allows the translators to keep track of the strings in the catalog more easily, and find where they are visible in the application. then, all you have to do, is enclose any string you want to make translatable in the B_TRANSLATE() macro. This macro has two uses, it will allow your text to be replaced at run-time by the proper localized one, but it will also allow to build the base catalog, the one that you will send to the translator team, from your sourcecode.</para>
<para>Note that each image (application, library or add-on) using these macros must be linked with liblocalestub.a. This allows the Locale Kit to identify it and locate the matching string catalogs for translation.</para>
</sect1>
<sect1 id="classBCatalog_1chaining">
<title>Chaining of catalogs</title>
<para>The catalogs you get from the locale kit are designed to use a fallback system so that the user get strings in the language he&apos;s the most fluent with, depending on what catalogs are available.</para>
<para>For example, if the user sets his language preferences as French(France), spanish, english, when an application loads a catalog, the following rules are used:<itemizedlist>
<listitem><para>Try to load a French(France) catalog. If it is found, this catalog will automatically include strings from the generic french catalog.</para>
</listitem><listitem><para>Try to load a generic french catalog.</para>
</listitem><listitem><para>Try to load a generic spanish catalog.</para>
</listitem><listitem><para>Try to load a generic english catalog.</para>
</listitem><listitem><para>If all of them failed, use the strings that are in the source code.</para>
</listitem></itemizedlist>
</para>
<para>Note that French(France) will failback to French, but then directly to the language in the source code. This avoids mixing 3 or more languages in the same application if the catalogs are incomplete and avoids confusion.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>BCatalog</label>
        <link refid="classBCatalog"/>
        <childnode refid="2" relation="usage">
          <edgelabel>fCatalogData</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>fLock</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>BCatalogData</label>
        <link refid="classBCatalogData"/>
        <childnode refid="3" relation="usage">
          <edgelabel>fLanguageName</edgelabel>
          <edgelabel>fSignature</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>fNext</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BLocker</label>
        <link refid="classBLocker"/>
      </node>
      <node id="3">
        <label>BString</label>
        <link refid="classBString"/>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/locale/Catalog.h" line="21" column="1" bodyfile="/boot/home/src/haiku/headers/os/locale/Catalog.h" bodystart="21" bodyend="64"/>
    <listofallmembers>
      <member refid="classBCatalog_1a45b0bd772e3aee626a65aba2e9e88a6e" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>BCatalog</name></member>
      <member refid="classBCatalog_1a338e2e4c785310844ded2fe5840f5c32" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>BCatalog</name></member>
      <member refid="classBCatalog_1a95fcfcd9674c4a1c6875ea0ca318ded2" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>BCatalog</name></member>
      <member refid="classBCatalog_1a93b6a0ae9be16aa8fc8e946833627575" prot="protected" virt="non-virtual"><scope>BCatalog</scope><name>BCatalog</name></member>
      <member refid="classBCatalog_1a418f04da03164887a5e3eba2f61e6bc2" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>CountItems</name></member>
      <member refid="classBCatalog_1ace138a95ef6dcc8c8457a42fb5b440b6" prot="protected" virt="non-virtual"><scope>BCatalog</scope><name>fCatalogData</name></member>
      <member refid="classBCatalog_1af76c1caa1d448eb7099b4508661fc3e2" prot="protected" virt="non-virtual"><scope>BCatalog</scope><name>fLock</name></member>
      <member refid="classBCatalog_1a28040119f33b82769839c21b55b445ba" prot="private" virt="non-virtual"><scope>BCatalog</scope><name>get_add_on_catalog</name></member>
      <member refid="classBCatalog_1a8b9181119a2971a214473dcc482a3415" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>GetData</name></member>
      <member refid="classBCatalog_1ac5c03e634c4b07f14ae374e6ff3d67f4" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>GetData</name></member>
      <member refid="classBCatalog_1a19269c5a3a23e28de3ccf5d96bcdbf90" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>GetFingerprint</name></member>
      <member refid="classBCatalog_1af8ecfe730a02fe7dd03eb086545521ec" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>GetLanguage</name></member>
      <member refid="classBCatalog_1aaa4c2bf292dbd2dad5938177eafffced" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>GetSignature</name></member>
      <member refid="classBCatalog_1a151e295bda9c5411fa0e2781f9f0653a" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>GetString</name></member>
      <member refid="classBCatalog_1ac6caaefe60ec06d0aa901e0dcc46fb37" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>GetString</name></member>
      <member refid="classBCatalog_1a6cab9f7d71eec3cee2c19ba4a4153761" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>InitCheck</name></member>
      <member refid="classBCatalog_1a2edf481c475619bd6561d64d494e89d6" prot="protected" virt="non-virtual"><scope>BCatalog</scope><name>operator=</name></member>
      <member refid="classBCatalog_1a029e8144be7b24bb4dce96e4b4a283fc" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>SetTo</name></member>
      <member refid="classBCatalog_1a1736341fa377b305e27ff4ea0f77c139" prot="public" virt="non-virtual"><scope>BCatalog</scope><name>SetTo</name></member>
      <member refid="classBCatalog_1a7ca1efd6e50d05caabcc24d294da25a5" prot="public" virt="virtual"><scope>BCatalog</scope><name>~BCatalog</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
