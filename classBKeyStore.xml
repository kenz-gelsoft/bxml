<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBKeyStore" kind="class" language="C++" prot="public">
    <compoundname>BKeyStore</compoundname>
      <sectiondef kind="user-defined">
      <header>Key Management</header>
      <memberdef kind="function" id="classBKeyStore_1a1512f697b5398543f7668cd5358f4fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetKey</definition>
        <argsstring>(BKeyType type, const char *identifier, BKey &amp;key)</argsstring>
        <name>GetKey</name>
        <qualifiedname>BKeyStore::GetKey</qualifiedname>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Query the Master keyring for for specific key. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1afd7ab0096a5cb8877930523ed5ab9b3a" kindref="member">GetKey(const char* keyring, BKeyType type, const char* identifier, const char* secondaryIdentifier, bool secondaryIdentifierOptional, BKey&amp; key)</ref>.</para>
<para>It works on the Master <emphasis>keyring</emphasis>, and assumes an empty <emphasis>secondaryIdentifier</emphasis>, <emphasis>secondaryIdentifierOptional</emphasis> set to <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="17" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a09219e0fefeff7f875717eb980aaa6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetKey</definition>
        <argsstring>(BKeyType type, const char *identifier, const char *secondaryIdentifier, BKey &amp;key)</argsstring>
        <name>GetKey</name>
        <qualifiedname>BKeyStore::GetKey</qualifiedname>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Query the Master keyring for for specific key. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1afd7ab0096a5cb8877930523ed5ab9b3a" kindref="member">GetKey(const char* keyring, BKeyType type, const char* identifier, const char* secondaryIdentifier, bool secondaryIdentifierOptional, BKey&amp; key)</ref>.</para>
<para>It works on the Master <emphasis>keyring</emphasis>, it sets <emphasis>secondaryIdentifierOptional</emphasis> to <computeroutput>false</computeroutput>, meaning it both identifiers are required to match.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="19" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a00f53c4eec45515821cb2e362c258909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetKey</definition>
        <argsstring>(BKeyType type, const char *identifier, const char *secondaryIdentifier, bool secondaryIdentifierOptional, BKey &amp;key)</argsstring>
        <name>GetKey</name>
        <qualifiedname>BKeyStore::GetKey</qualifiedname>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secondaryIdentifierOptional</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Query the Master keyring for for specific key. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1afd7ab0096a5cb8877930523ed5ab9b3a" kindref="member">GetKey(const char* keyring, BKeyType type, const char* identifier, const char* secondaryIdentifier, bool secondaryIdentifierOptional, BKey&amp; key)</ref>.</para>
<para>It works on the Master <emphasis>keyring</emphasis>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="21" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a56cf7a18c18a5af9b29f04c3dc6c426b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetKey</definition>
        <argsstring>(const char *keyring, BKeyType type, const char *identifier, BKey &amp;key)</argsstring>
        <name>GetKey</name>
        <qualifiedname>BKeyStore::GetKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Query a certain <emphasis>keyring</emphasis> for for specific key. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1afd7ab0096a5cb8877930523ed5ab9b3a" kindref="member">GetKey(const char* keyring, BKeyType type, const char* identifier, const char* secondaryIdentifier, bool secondaryIdentifierOptional, BKey&amp; key)</ref>.</para>
<para>The call assumes an empty <emphasis>secondaryIdentifier</emphasis>, and sets <emphasis>secondaryIdentifierOptional</emphasis> to <computeroutput>false</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="26" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a860415deade3c8192e1790d6971b5b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetKey</definition>
        <argsstring>(const char *keyring, BKeyType type, const char *identifier, const char *secondaryIdentifier, BKey &amp;key)</argsstring>
        <name>GetKey</name>
        <qualifiedname>BKeyStore::GetKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Query a certain <emphasis>keyring</emphasis> for for specific key. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1afd7ab0096a5cb8877930523ed5ab9b3a" kindref="member">GetKey(const char* keyring, BKeyType type, const char* identifier, const char* secondaryIdentifier, bool secondaryIdentifierOptional, BKey&amp; key)</ref>.</para>
<para>It sets <emphasis>secondaryIdentifierOptional</emphasis> to <computeroutput>false</computeroutput>, meaning it both identifiers are required to match.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="29" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1afd7ab0096a5cb8877930523ed5ab9b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetKey</definition>
        <argsstring>(const char *keyring, BKeyType type, const char *identifier, const char *secondaryIdentifier, bool secondaryIdentifierOptional, BKey &amp;key)</argsstring>
        <name>GetKey</name>
        <qualifiedname>BKeyStore::GetKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secondaryIdentifierOptional</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Query a certain <emphasis>keyring</emphasis> for for specific key. </para>
        </briefdescription>
        <detaileddescription>
<para>This variation of the query function is useful when you know that a key has a secondary identifier, but you may not know it, or care about what it is.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>A string that identifies the keyring get the key from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of key to match. The type parameter is currently ignored and therefore does not need to match the actual type of the key that is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The string with the primary identifier of the key that you are looking for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">secondaryIdentifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The string with the secondary identifier of the key that you are looking for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">secondaryIdentifierOptional</parametername>
</parameternamelist>
<parameterdescription>
<para>Use this query parameter to indicate if the secondary identifier has to match. When set to <emphasis>false</emphasis>, a result will be returned, even if the <emphasis>secondaryIdentifier</emphasis> does not match. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBKey" kindref="compound">BKey</ref> object to copy the found data to. Any existing data in the key will be overwritten in case there is a match.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> in case the key was found and stored in <emphasis>key</emphasis>.</para>
</listitem><listitem><para><computeroutput>B_BAD_VALUE</computeroutput> in case the <emphasis>keyring</emphasis> does not exist.</para>
</listitem><listitem><para><computeroutput>B_NOT_ALLOWED</computeroutput> in case the user did not grant you access right to this <emphasis>keyring</emphasis>.</para>
</listitem><listitem><para><computeroutput>B_ENTRY_NOT_FOUND</computeroutput> in case there is no key that matches the given identifier(s).</para>
</listitem><listitem><para>Any other error that indicates that there was a problem communicating with the <computeroutput>keystore_server</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="32" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a758592b27bbd551b3c67452eb73f7f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::AddKey</definition>
        <argsstring>(const BKey &amp;key)</argsstring>
        <name>AddKey</name>
        <qualifiedname>BKeyStore::AddKey</qualifiedname>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Add a <emphasis>key</emphasis> to the Master keyring. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1aaa80a2acbb55d9e6a65454b407dd4188" kindref="member">AddKey(const char *, const BKey&amp;)</ref> for the <computeroutput>Master</computeroutput> keyring.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1aaa80a2acbb55d9e6a65454b407dd4188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::AddKey</definition>
        <argsstring>(const char *keyring, const BKey &amp;key)</argsstring>
        <name>AddKey</name>
        <qualifiedname>BKeyStore::AddKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Add a <emphasis>key</emphasis> to a <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will send the key to the <computeroutput>keystore_server</computeroutput> and request it to be stored in the database.</para>
<para>A key needs to have a unique primary and secondary identifier within the Master keyring.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>A string that identifies the keyring you want to add the key to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key you want to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> in case the <emphasis>key</emphasis> was succesfully added.</para>
</listitem><listitem><para><computeroutput>B_BAD_VALUE</computeroutput> in case the <emphasis>keyring</emphasis> does not exist.</para>
</listitem><listitem><para><computeroutput>B_NOT_ALLOWED</computeroutput> in case the user did not grant you access right to this <emphasis>keyring</emphasis>.</para>
</listitem><listitem><para><computeroutput>B_NAME_IN_USE</computeroutput> in case there already is another key with the same primary and secondary identifiers.</para>
</listitem><listitem><para>Any other error that indicates that there was a problem communicating with the <computeroutput>keystore_server</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="39" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1af509aae99028fc2c828b25df258fe17d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveKey</definition>
        <argsstring>(const BKey &amp;key)</argsstring>
        <name>RemoveKey</name>
        <qualifiedname>BKeyStore::RemoveKey</qualifiedname>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Remove a <emphasis>key</emphasis> from the Master keyring. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1a2fae39a5ac3ccb3caff10563abb3ba26" kindref="member">RemoveKey(const char *, const BKey&amp;)</ref> for the <computeroutput>Master</computeroutput> keyring.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="40" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a2fae39a5ac3ccb3caff10563abb3ba26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveKey</definition>
        <argsstring>(const char *keyring, const BKey &amp;key)</argsstring>
        <name>RemoveKey</name>
        <qualifiedname>BKeyStore::RemoveKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Remove a <emphasis>key</emphasis> from a <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will remove a <emphasis>key</emphasis> from a <emphasis>keyring</emphasis>. The <emphasis>key</emphasis> needs to match exactly with the key that is in the database of <computeroutput>keystore_server</computeroutput>. The easiest way to guarantee this, is to use the exact key you find using <ref refid="classBKeyStore_1a1512f697b5398543f7668cd5358f4fb4" kindref="member">GetKey()</ref> without making any alterations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>A string that identifies the keyring you want to remove the key from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key you want to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> in case the <emphasis>key</emphasis> was succesfully removed.</para>
</listitem><listitem><para><computeroutput>B_BAD_VALUE</computeroutput> in case the <emphasis>keyring</emphasis> does not exist.</para>
</listitem><listitem><para><computeroutput>B_NOT_ALLOWED</computeroutput> in case the user did not grant you access right to this <emphasis>keyring</emphasis>.</para>
</listitem><listitem><para><computeroutput>B_ENTRY_NOT_FOUND</computeroutput> in case there is no key that matches the given identifier(s).</para>
</listitem><listitem><para>Any other error that indicates that there was a problem communicating with the <computeroutput>keystore_server</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="41" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a2b19dd024340ae18fdcbdc2e9feb69ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextKey</definition>
        <argsstring>(uint32 &amp;cookie, BKey &amp;key)</argsstring>
        <name>GetNextKey</name>
        <qualifiedname>BKeyStore::GetNextKey</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Iterate through the keys of the Master keyring. </para>
        </briefdescription>
        <detaileddescription>
<para>This convenience method that calls <ref refid="classBKeyStore_1a5c3667e7021aa20fa2455b8d39c8463f" kindref="member">GetNextKey(const char*, BKeyType, BKeyPurpose, uint32&amp;, BKey&amp;)</ref> for the Master keyring, with the arguments BKeyType::B_KEY_TYPE_ANY for the type and BKeyPurpose::B_KEY_PURPOSE_ANY for the purpose.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="43" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a0ec659c6898e11801c98882de90641c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextKey</definition>
        <argsstring>(BKeyType type, BKeyPurpose purpose, uint32 &amp;cookie, BKey &amp;key)</argsstring>
        <name>GetNextKey</name>
        <qualifiedname>BKeyStore::GetNextKey</qualifiedname>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
          <declname>purpose</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Iterate through the keys of the Master keyring. </para>
        </briefdescription>
        <detaileddescription>
<para>This convenience method calls <ref refid="classBKeyStore_1a5c3667e7021aa20fa2455b8d39c8463f" kindref="member">GetNextKey(const char*, BKeyType, BKeyPurpose, uint32&amp;, BKey&amp;)</ref> for the Master keyring.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="44" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a32d03049f56892650d33118d0de97012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextKey</definition>
        <argsstring>(const char *keyring, uint32 &amp;cookie, BKey &amp;key)</argsstring>
        <name>GetNextKey</name>
        <qualifiedname>BKeyStore::GetNextKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Iterate through the keys of a <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This convenience method calls <ref refid="classBKeyStore_1a5c3667e7021aa20fa2455b8d39c8463f" kindref="member">GetNextKey(const char*, BKeyType, BKeyPurpose, uint32&amp;, BKey&amp;)</ref> with the arguments BKeyType::B_KEY_TYPE_ANY for the type and BKeyPurpose::B_KEY_PURPOSE_ANY for the purpose.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="46" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a5c3667e7021aa20fa2455b8d39c8463f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextKey</definition>
        <argsstring>(const char *keyring, BKeyType type, BKeyPurpose purpose, uint32 &amp;cookie, BKey &amp;key)</argsstring>
        <name>GetNextKey</name>
        <qualifiedname>BKeyStore::GetNextKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
          <declname>purpose</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Iterate through keys of a <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows you to query through the key store, and iterate through a list of results of keys that match your query.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>An UTF-8 string that identifies the keyring </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The BKeyType that identifies the type of key you are looking for. This may be BKeyType::B_KEY_TYPE_ANY if it may be a key of any type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">purpose</parametername>
</parameternamelist>
<parameterdescription>
<para>The BKeyPurpose that indicates the purpose of the key. This may be BKeyPurpose::B_KEY_PURPOSE_ANY if it may be a key with any purpose. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>A cookie that the <computeroutput>keystore_server</computeroutput> uses to keep track of where you are in the list of keys. When you start the query, set the initial value to <computeroutput>0</computeroutput>. After that, pass the cookie to each subsequent call to progress the iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key that holds the data. Any existing data in the key will be overwritten, when a key is found that matches the criteria.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> in case the next <emphasis>key</emphasis> was found.</para>
</listitem><listitem><para><computeroutput>B_BAD_VALUE</computeroutput> in case the <emphasis>keyring</emphasis> does not exist.</para>
</listitem><listitem><para><computeroutput>B_NOT_ALLOWED</computeroutput> in case the user did not grant you access right to this <emphasis>keyring</emphasis>.</para>
</listitem><listitem><para><computeroutput>B_ENTRY_NOT_FOUND</computeroutput> in case there is no key that matches the given identifier(s), or if you retrieved the last key.</para>
</listitem><listitem><para>Any other error that indicates that there was a problem communicating with the <computeroutput>keystore_server</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="48" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Keyrings</header>
      <memberdef kind="function" id="classBKeyStore_1a21196565a98779d7f453b34a83defffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::AddKeyring</definition>
        <argsstring>(const char *keyring)</argsstring>
        <name>AddKeyring</name>
        <qualifiedname>BKeyStore::AddKeyring</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Create a new <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>An UTF-8 string that identifies the keyring you want to create.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the keyring was succesfully added.</para>
</listitem><listitem><para><computeroutput>B_NAME_IN_USE</computeroutput> if the <emphasis>keyring</emphasis> already exists.</para>
</listitem><listitem><para>Any other error in case there was an unknown error in the <computeroutput>keystore_server</computeroutput>, or while communicating to it.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="54" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1adcbf50f1b4407c419ddf3df895f7c454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveKeyring</definition>
        <argsstring>(const char *keyring)</argsstring>
        <name>RemoveKeyring</name>
        <qualifiedname>BKeyStore::RemoveKeyring</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Remove a <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>An UTF-8 string that identifies the keyring you want to remove.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the keyring was sucessfully removed.</para>
</listitem><listitem><para><computeroutput>B_ENTRY_NOT_FOUND</computeroutput> if the keyring does not exist</para>
</listitem><listitem><para><computeroutput>B_NOT_ALLOWED</computeroutput> when you try to remove the Master keyring.</para>
</listitem><listitem><para>Any other error in case there was an unknown error in the <computeroutput>keystore_server</computeroutput>, or while communicating to it.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="55" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a6e383f92d6b016acc46ea3d7a7dbee94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextKeyring</definition>
        <argsstring>(uint32 &amp;cookie, BString &amp;keyring)</argsstring>
        <name>GetNextKeyring</name>
        <qualifiedname>BKeyStore::GetNextKeyring</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Iterate through the keyrings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>A cookie that the <computeroutput>keystore_server</computeroutput> uses to keep track of where you are in the list of keyrings. When you start the query, set the initial value to <computeroutput>0</computeroutput>. After that, pass the cookie to each subsequent call to progress the iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBString" kindref="compound">BString</ref> that holds the current name of the keyring. For each succesful iteration, the existing contents is overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the iteration was succesful.</para>
</listitem><listitem><para><computeroutput>B_ENTRY_NOT_FOUND</computeroutput> if there are no more keyrings left to iterate</para>
</listitem><listitem><para>Any other error in case there was an unknown error in the <computeroutput>keystore_server</computeroutput>, or while communicating to it.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="57" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1aafe09eb784e5ef120ab40bf62663197b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::SetUnlockKey</definition>
        <argsstring>(const char *keyring, const BKey &amp;key)</argsstring>
        <name>SetUnlockKey</name>
        <qualifiedname>BKeyStore::SetUnlockKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="60" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a8afb38ec314d18af3c51036d97b053b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveUnlockKey</definition>
        <argsstring>(const char *keyring)</argsstring>
        <name>RemoveUnlockKey</name>
        <qualifiedname>BKeyStore::RemoveUnlockKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="62" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Master keyring (future API)</header>
      <memberdef kind="function" id="classBKeyStore_1a44b7f9f78c28c16502e586556c497560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::SetMasterUnlockKey</definition>
        <argsstring>(const BKey &amp;key)</argsstring>
        <name>SetMasterUnlockKey</name>
        <qualifiedname>BKeyStore::SetMasterUnlockKey</qualifiedname>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="66" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a7829451ada875e5ec8997326fe40fb6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveMasterUnlockKey</definition>
        <argsstring>()</argsstring>
        <name>RemoveMasterUnlockKey</name>
        <qualifiedname>BKeyStore::RemoveMasterUnlockKey</qualifiedname>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="67" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a14c38ee17ef5154b586eb4d868163a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::AddKeyringToMaster</definition>
        <argsstring>(const char *keyring)</argsstring>
        <name>AddKeyringToMaster</name>
        <qualifiedname>BKeyStore::AddKeyringToMaster</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku.</para>
<para><simplesect kind="see"><para><ref refid="classBKeyStore_1a21196565a98779d7f453b34a83defffc" kindref="member">AddKeyring(const char* keyring)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="69" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1aefa08ee4b2b53cecdab266c6799cd404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveKeyringFromMaster</definition>
        <argsstring>(const char *keyring)</argsstring>
        <name>RemoveKeyringFromMaster</name>
        <qualifiedname>BKeyStore::RemoveKeyringFromMaster</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku.</para>
<para><simplesect kind="see"><para><ref refid="classBKeyStore_1adcbf50f1b4407c419ddf3df895f7c454" kindref="member">RemoveKeyring(const char* keyring)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="70" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a18518e740545ba785f62d30ef1c8db0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextMasterKeyring</definition>
        <argsstring>(uint32 &amp;cookie, BString &amp;keyring)</argsstring>
        <name>GetNextMasterKeyring</name>
        <qualifiedname>BKeyStore::GetNextMasterKeyring</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku.</para>
<para><simplesect kind="see"><para><ref refid="classBKeyStore_1a6e383f92d6b016acc46ea3d7a7dbee94" kindref="member">GetNextKeyring(uint32&amp; cookie, BString&amp; keyring)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="72" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Locking (future API)</header>
      <description><para>In the future, locking is part of encrypting and decrypting keyrings.</para>
<para><simplesect kind="note"><para>If you are looking at this section because you assume you need to check that users have the correct permissions, you are in the wrong place. There is no particular way to determine whether a user has access granted. Instead, each method of this API will return the error code <computeroutput>B_NOT_ALLOWED</computeroutput> if the user has not granted access. Use that in your control flow to determine if you have access. </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classBKeyStore_1a2304e4edab4b11d81d33722abef33905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BKeyStore::IsKeyringUnlocked</definition>
        <argsstring>(const char *keyring)</argsstring>
        <name>IsKeyringUnlocked</name>
        <qualifiedname>BKeyStore::IsKeyringUnlocked</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a1c2bab7d0a7f71e73e35ff394049034f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::LockKeyring</definition>
        <argsstring>(const char *keyring)</argsstring>
        <name>LockKeyring</name>
        <qualifiedname>BKeyStore::LockKeyring</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="78" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1aa8236dcace3de6a2c9591c34c7471543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::LockMasterKeyring</definition>
        <argsstring>()</argsstring>
        <name>LockMasterKeyring</name>
        <qualifiedname>BKeyStore::LockMasterKeyring</qualifiedname>
        <briefdescription>
<para>Not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This feature is not available in the current release of Haiku. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="79" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Applications</header>
      <memberdef kind="function" id="classBKeyStore_1afc5dcda17cd81a5655c4fb53c17f355b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextApplication</definition>
        <argsstring>(uint32 &amp;cookie, BString &amp;signature) const</argsstring>
        <name>GetNextApplication</name>
        <qualifiedname>BKeyStore::GetNextApplication</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>signature</declname>
        </param>
        <briefdescription>
<para>Iterate through applications that currently have been granted access to the Master keyring. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls GetNextApplication(const char* keyring, uint32&amp; cookie,
BString&amp; signature) for the Master <emphasis>keyring</emphasis>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="83" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1aa25e51e43046e1182d7da255b87e8c84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GetNextApplication</definition>
        <argsstring>(const char *keyring, uint32 &amp;cookie, BString &amp;signature) const</argsstring>
        <name>GetNextApplication</name>
        <qualifiedname>BKeyStore::GetNextApplication</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref> &amp;</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>signature</declname>
        </param>
        <briefdescription>
<para>Iterate through applications that currently have been granted access to the specified <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows you to iterate through all applications that the user has granted access to the <emphasis>keyring</emphasis>, whether it is temporarily, or on a more permanent basis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>A UTF-8 string that identifies the keyring that you want to inspect granted access to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>A cookie that the <computeroutput>keystore_server</computeroutput> uses to keep track of where you are in the list of keys. When you start the query, set the initial value to <computeroutput>0</computeroutput>. After that, pass the cookie to each subsequent call to progress the iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">signature</parametername>
</parameternamelist>
<parameterdescription>
<para>If a next application is found, the signature will be stored in this parameter. Any existing string will be overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the next signature was found succesfully.</para>
</listitem><listitem><para><computeroutput>B_BAD_VALUE</computeroutput> if the keyring does not exist.</para>
</listitem><listitem><para><computeroutput>B_NOT_ALLOWED</computeroutput> in case the user did not grant you access right to this <emphasis>keyring</emphasis>.</para>
</listitem><listitem><para><computeroutput>B_ENTRY_NOT_FOUND</computeroutput> if there are no more applications to iterate through.</para>
</listitem><listitem><para>Any other error in case there was an unknown error in the <computeroutput>keystore_server</computeroutput>, or while communicating to it.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="85" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a3a366f827bc86231c5980b35235f4005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveApplication</definition>
        <argsstring>(const char *signature)</argsstring>
        <name>RemoveApplication</name>
        <qualifiedname>BKeyStore::RemoveApplication</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <briefdescription>
<para>Remove access for an application to the Master keyring. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method that calls <ref refid="classBKeyStore_1a6b597f86b5ada490cf18e621ee8bb7d4" kindref="member">RemoveApplication(const char *, const char*)</ref> for the Master <emphasis>keyring</emphasis>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="87" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a6b597f86b5ada490cf18e621ee8bb7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::RemoveApplication</definition>
        <argsstring>(const char *keyring, const char *signature)</argsstring>
        <name>RemoveApplication</name>
        <qualifiedname>BKeyStore::RemoveApplication</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>keyring</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <briefdescription>
<para>Remove access for an application to a <emphasis>keyring</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyring</parametername>
</parameternamelist>
<parameterdescription>
<para>A UTF-8 string that identifies the keyring that you want to inspect granted access to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature of the application that you want to revoke permissions to access the keyring.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the application&apos;s access has been revoked.</para>
</listitem><listitem><para><computeroutput>B_NOT_ALLOWED</computeroutput> in case the user did not grant you access right to this <emphasis>keyring</emphasis>.</para>
</listitem><listitem><para><computeroutput>B_ENTRY_NOT_FOUND</computeroutput> if the application did not have access to this keyring.</para>
</listitem><listitem><para>Any other error in case there was an unknown error in the <computeroutput>keystore_server</computeroutput>, or while communicating to it.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="88" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Service Functions (future API)</header>
      <description><para>This feature is not available in the current release of Haiku. </para>
</description>
      <memberdef kind="function" id="classBKeyStore_1a42d144264431359d4c866e49d1a59e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::GeneratePassword</definition>
        <argsstring>(BPasswordKey &amp;password, size_t length, uint32 flags)</argsstring>
        <name>GeneratePassword</name>
        <qualifiedname>BKeyStore::GeneratePassword</qualifiedname>
        <param>
          <type><ref refid="classBPasswordKey" kindref="compound">BPasswordKey</ref> &amp;</type>
          <declname>password</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Unimplemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is currently not implemented. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="93" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a3b48121eec2387ca02f6d744d30bbbb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BKeyStore::PasswordStrength</definition>
        <argsstring>(const char *password)</argsstring>
        <name>PasswordStrength</name>
        <qualifiedname>BKeyStore::PasswordStrength</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Unimplemented. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is currently not implemented </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="95" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBKeyStore_1af8f574a3730645d3127e7adbc78bc757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BKeyStore::BKeyStore</definition>
        <argsstring>()</argsstring>
        <name>BKeyStore</name>
        <qualifiedname>BKeyStore::BKeyStore</qualifiedname>
        <briefdescription>
<para>Create a new <ref refid="classBKeyStore" kindref="compound">BKeyStore</ref> object that you can use to query, retrieve and store keys in the system&apos;s key store. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a cheap object to make, as it has no data associated with it. The recommended use is to create an instance on the stack whenever you want to interact with the API.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBKeyStore_1a43442117cd22e25371191eec17c0973a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BKeyStore::~BKeyStore</definition>
        <argsstring>()</argsstring>
        <name>~BKeyStore</name>
        <qualifiedname>BKeyStore::~BKeyStore</qualifiedname>
        <briefdescription>
<para>Free all resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="15" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBKeyStore_1a110ad7d74e8766f74311d7158ba55114" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKeyStore::_SendKeyMessage</definition>
        <argsstring>(BMessage &amp;message, BMessage *reply) const</argsstring>
        <name>_SendKeyMessage</name>
        <qualifiedname>BKeyStore::_SendKeyMessage</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>reply</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="98" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classBKeyStore" kindref="compound">BKeyStore</ref> lets you query, retrieve and store keys in the system&apos;s key store. </para>
    </briefdescription>
    <detaileddescription>
<para>Instances of this object give you an easy API to interact with the system&apos;s <computeroutput>keystore_server</computeroutput>. This is the central service that manages storing and retrieving keys, as well as managing the authorizations that a user grants to individual applications.</para>
<para>It is important to note that all calls on this object operate <bold>synchronously</bold>. This means that it should not be used during the event loop of a visible <ref refid="classBWindow" kindref="compound">BWindow</ref>, as this may cause drawing and interaction issues.</para>
<para>All operations are performed in the context of a keyring. All systems have at least the <bold>Master</bold> <bold>keyring</bold>. Many of the methods take the name of the keyring as its first argument. Most of the methods in this class have an overloaded variant that operate on the Master keyring. If you want to access this keyring through the normal methods, pass an empty string as the identifier to the method.</para>
<para>See the <ref refid="app_keystore" kindref="compound">overview to the Password and Key Storage API </ref> for an introduction to the API.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/app/KeyStore.h" line="12" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/KeyStore.h" bodystart="12" bodyend="100"/>
    <listofallmembers>
      <member refid="classBKeyStore_1a110ad7d74e8766f74311d7158ba55114" prot="private" virt="non-virtual"><scope>BKeyStore</scope><name>_SendKeyMessage</name></member>
      <member refid="classBKeyStore_1a758592b27bbd551b3c67452eb73f7f61" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>AddKey</name></member>
      <member refid="classBKeyStore_1aaa80a2acbb55d9e6a65454b407dd4188" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>AddKey</name></member>
      <member refid="classBKeyStore_1a21196565a98779d7f453b34a83defffc" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>AddKeyring</name></member>
      <member refid="classBKeyStore_1a14c38ee17ef5154b586eb4d868163a2d" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>AddKeyringToMaster</name></member>
      <member refid="classBKeyStore_1af8f574a3730645d3127e7adbc78bc757" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>BKeyStore</name></member>
      <member refid="classBKeyStore_1a42d144264431359d4c866e49d1a59e43" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GeneratePassword</name></member>
      <member refid="classBKeyStore_1a1512f697b5398543f7668cd5358f4fb4" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetKey</name></member>
      <member refid="classBKeyStore_1a09219e0fefeff7f875717eb980aaa6c3" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetKey</name></member>
      <member refid="classBKeyStore_1a00f53c4eec45515821cb2e362c258909" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetKey</name></member>
      <member refid="classBKeyStore_1a56cf7a18c18a5af9b29f04c3dc6c426b" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetKey</name></member>
      <member refid="classBKeyStore_1a860415deade3c8192e1790d6971b5b71" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetKey</name></member>
      <member refid="classBKeyStore_1afd7ab0096a5cb8877930523ed5ab9b3a" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetKey</name></member>
      <member refid="classBKeyStore_1afc5dcda17cd81a5655c4fb53c17f355b" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextApplication</name></member>
      <member refid="classBKeyStore_1aa25e51e43046e1182d7da255b87e8c84" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextApplication</name></member>
      <member refid="classBKeyStore_1a2b19dd024340ae18fdcbdc2e9feb69ce" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextKey</name></member>
      <member refid="classBKeyStore_1a0ec659c6898e11801c98882de90641c6" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextKey</name></member>
      <member refid="classBKeyStore_1a32d03049f56892650d33118d0de97012" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextKey</name></member>
      <member refid="classBKeyStore_1a5c3667e7021aa20fa2455b8d39c8463f" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextKey</name></member>
      <member refid="classBKeyStore_1a6e383f92d6b016acc46ea3d7a7dbee94" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextKeyring</name></member>
      <member refid="classBKeyStore_1a18518e740545ba785f62d30ef1c8db0d" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>GetNextMasterKeyring</name></member>
      <member refid="classBKeyStore_1a2304e4edab4b11d81d33722abef33905" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>IsKeyringUnlocked</name></member>
      <member refid="classBKeyStore_1a1c2bab7d0a7f71e73e35ff394049034f" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>LockKeyring</name></member>
      <member refid="classBKeyStore_1aa8236dcace3de6a2c9591c34c7471543" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>LockMasterKeyring</name></member>
      <member refid="classBKeyStore_1a3b48121eec2387ca02f6d744d30bbbb7" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>PasswordStrength</name></member>
      <member refid="classBKeyStore_1a3a366f827bc86231c5980b35235f4005" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveApplication</name></member>
      <member refid="classBKeyStore_1a6b597f86b5ada490cf18e621ee8bb7d4" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveApplication</name></member>
      <member refid="classBKeyStore_1af509aae99028fc2c828b25df258fe17d" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveKey</name></member>
      <member refid="classBKeyStore_1a2fae39a5ac3ccb3caff10563abb3ba26" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveKey</name></member>
      <member refid="classBKeyStore_1adcbf50f1b4407c419ddf3df895f7c454" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveKeyring</name></member>
      <member refid="classBKeyStore_1aefa08ee4b2b53cecdab266c6799cd404" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveKeyringFromMaster</name></member>
      <member refid="classBKeyStore_1a7829451ada875e5ec8997326fe40fb6c" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveMasterUnlockKey</name></member>
      <member refid="classBKeyStore_1a8afb38ec314d18af3c51036d97b053b9" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>RemoveUnlockKey</name></member>
      <member refid="classBKeyStore_1a44b7f9f78c28c16502e586556c497560" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>SetMasterUnlockKey</name></member>
      <member refid="classBKeyStore_1aafe09eb784e5ef120ab40bf62663197b" prot="public" virt="non-virtual"><scope>BKeyStore</scope><name>SetUnlockKey</name></member>
      <member refid="classBKeyStore_1a43442117cd22e25371191eec17c0973a" prot="public" virt="virtual"><scope>BKeyStore</scope><name>~BKeyStore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
