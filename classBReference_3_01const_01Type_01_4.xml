<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBReference_3_01const_01Type_01_4" kind="class" language="C++" prot="public">
    <compoundname>BReference&lt; const Type &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>typename Type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBReference_3_01const_01Type_01_4_1a96063020585e5bda0950ebd437a56847" prot="private" static="no" mutable="no">
        <type><ref refid="classBReference" kindref="compound">BReference</ref>&lt; Type &gt;</type>
        <definition>BReference&lt;Type&gt; BReference&lt; const Type &gt;::fReference</definition>
        <argsstring></argsstring>
        <name>fReference</name>
        <qualifiedname>BReference&lt; const Type &gt;::fReference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="275" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1aeec7a746fdb27eaa0a4221be3fa8a00e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BReference&lt; const Type &gt;::BReference</definition>
        <argsstring>(const BReference&lt; const Type &gt; &amp;other)</argsstring>
        <name>BReference</name>
        <qualifiedname>BReference&lt; const Type &gt;::BReference</qualifiedname>
        <param>
          <type>const <ref refid="classBReference" kindref="compound">BReference</ref>&lt; const Type &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="182" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1ac76728e4d3f27d9fb1bb62633495ce11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>BReference&lt; const Type &gt;::BReference</definition>
        <argsstring>(const BReference&lt; OtherType &gt; &amp;other)</argsstring>
        <name>BReference</name>
        <qualifiedname>BReference&lt; const Type &gt;::BReference</qualifiedname>
        <param>
          <type>const <ref refid="classBReference" kindref="compound">BReference</ref>&lt; OtherType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="189" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1ae5baef5aa2fc70489396a2deec6ab75c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BReference&lt; const Type &gt;::BReference</definition>
        <argsstring>(Type *object, bool alreadyHasReference=false)</argsstring>
        <name>BReference</name>
        <qualifiedname>BReference&lt; const Type &gt;::BReference</qualifiedname>
        <param>
          <type>Type *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alreadyHasReference</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="176" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a67b0388aa9894fd6ff7c878093b4fcb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type * BReference&lt; const Type &gt;::Detach</definition>
        <argsstring>()</argsstring>
        <name>Detach</name>
        <qualifiedname>BReference&lt; const Type &gt;::Detach</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="215" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a7a57098c8aa99e67b778f23bde8b86f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type * BReference&lt; const Type &gt;::Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <qualifiedname>BReference&lt; const Type &gt;::Get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="210" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a26d4b3a03f8cfcdf42396fc7a1c93680" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BReference&lt; const Type &gt;::IsSet</definition>
        <argsstring>() const</argsstring>
        <name>IsSet</name>
        <qualifiedname>BReference&lt; const Type &gt;::IsSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="205" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1ae4450377d5cdeec1f2426b7b7fe69f15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BReference&lt; const Type &gt;::operator const Type *</definition>
        <argsstring>() const</argsstring>
        <name>operator const Type *</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator const Type *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="230" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a91ba196b08906cd652da16ea3efd597b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BReference&lt; const Type &gt;::operator!=</definition>
        <argsstring>(const BReference&lt; const Type &gt; &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classBReference" kindref="compound">BReference</ref>&lt; const Type &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="264" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a8e6cad948e9d90ef7c78344a317fc384" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BReference&lt; const Type &gt;::operator!=</definition>
        <argsstring>(const Type *other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator!=</qualifiedname>
        <param>
          <type>const Type *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="269" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a37958278b056af2917a7df7f7db8a65f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type &amp;</type>
        <definition>const Type &amp; BReference&lt; const Type &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="220" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a04f8ed8109c65502b9e127a7b08d82c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type * BReference&lt; const Type &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="225" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a642b3847a5b10b03b15e671d62589666" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBReference" kindref="compound">BReference</ref> &amp;</type>
        <definition>BReference &amp; BReference&lt; const Type &gt;::operator=</definition>
        <argsstring>(const BReference&lt; const Type &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBReference" kindref="compound">BReference</ref>&lt; const Type &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="235" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1af8ad0706a4286c9a56f671c4cd5aea0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classBReference" kindref="compound">BReference</ref> &amp;</type>
        <definition>BReference &amp; BReference&lt; const Type &gt;::operator=</definition>
        <argsstring>(const BReference&lt; OtherType &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBReference" kindref="compound">BReference</ref>&lt; OtherType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="248" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="248" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1aa3bfc07495346e36d2518de1ccf47407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBReference" kindref="compound">BReference</ref> &amp;</type>
        <definition>BReference &amp; BReference&lt; const Type &gt;::operator=</definition>
        <argsstring>(Type *other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator=</qualifiedname>
        <param>
          <type>Type *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="241" column="12" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a7ba1c89a9eb5833fba40e2177145eb93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BReference&lt; const Type &gt;::operator==</definition>
        <argsstring>(const BReference&lt; const Type &gt; &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBReference" kindref="compound">BReference</ref>&lt; const Type &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="254" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1a8b955a802985bbaf338b557d6dbc0022" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BReference&lt; const Type &gt;::operator==</definition>
        <argsstring>(const Type *other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BReference&lt; const Type &gt;::operator==</qualifiedname>
        <param>
          <type>const Type *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="259" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1afbb0358add769eaf70a904e1be4c53c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BReference&lt; const Type &gt;::SetTo</definition>
        <argsstring>(Type *object, bool alreadyHasReference=false)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BReference&lt; const Type &gt;::SetTo</qualifiedname>
        <param>
          <type>Type *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alreadyHasReference</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="195" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classBReference_3_01const_01Type_01_4_1ab74bbb9b12ad06765a2912378bf57989" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BReference&lt; const Type &gt;::Unset</definition>
        <argsstring>()</argsstring>
        <name>Unset</name>
        <qualifiedname>BReference&lt; const Type &gt;::Unset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="200" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="200" bodyend="203"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/support/Referenceable.h" line="174" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Referenceable.h" bodystart="174" bodyend="276"/>
    <listofallmembers>
      <member refid="classBReference_3_01const_01Type_01_4_1ae5baef5aa2fc70489396a2deec6ab75c" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>BReference</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1aeec7a746fdb27eaa0a4221be3fa8a00e" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>BReference</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1ac76728e4d3f27d9fb1bb62633495ce11" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>BReference</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a67b0388aa9894fd6ff7c878093b4fcb4" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>Detach</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a96063020585e5bda0950ebd437a56847" prot="private" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>fReference</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a7a57098c8aa99e67b778f23bde8b86f9" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>Get</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a26d4b3a03f8cfcdf42396fc7a1c93680" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>IsSet</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1ae4450377d5cdeec1f2426b7b7fe69f15" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator const Type *</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a91ba196b08906cd652da16ea3efd597b" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator!=</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a8e6cad948e9d90ef7c78344a317fc384" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator!=</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a37958278b056af2917a7df7f7db8a65f" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator*</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a04f8ed8109c65502b9e127a7b08d82c1" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator-&gt;</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a642b3847a5b10b03b15e671d62589666" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator=</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1aa3bfc07495346e36d2518de1ccf47407" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator=</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1af8ad0706a4286c9a56f671c4cd5aea0b" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator=</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a7ba1c89a9eb5833fba40e2177145eb93" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator==</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1a8b955a802985bbaf338b557d6dbc0022" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>operator==</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1afbb0358add769eaf70a904e1be4c53c7" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>SetTo</name></member>
      <member refid="classBReference_3_01const_01Type_01_4_1ab74bbb9b12ad06765a2912378bf57989" prot="public" virt="non-virtual"><scope>BReference&lt; const Type &gt;</scope><name>Unset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
