<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBBitmapStream" kind="class" language="C++" prot="public">
    <compoundname>BBitmapStream</compoundname>
    <basecompoundref refid="classBPositionIO" prot="public" virt="non-virtual">BPositionIO</basecompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBBitmapStream_1a05c07d20450a540cd53163a3da21e86a" prot="protected" static="no" mutable="no">
        <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
        <definition>BBitmap* BBitmapStream::fBitmap</definition>
        <argsstring></argsstring>
        <name>fBitmap</name>
        <qualifiedname>BBitmapStream::fBitmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="39" column="8" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBitmapStream_1a256e49bf3b3bdc27e0e5d1871bcdae73" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BBitmapStream::fDetached</definition>
        <argsstring></argsstring>
        <name>fDetached</name>
        <qualifiedname>BBitmapStream::fDetached</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="42" column="5" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBitmapStream_1ac0a37b9877c5457f1745a5f2369b9430" prot="protected" static="no" mutable="no">
        <type>TranslatorBitmap</type>
        <definition>TranslatorBitmap BBitmapStream::fHeader</definition>
        <argsstring></argsstring>
        <name>fHeader</name>
        <qualifiedname>BBitmapStream::fHeader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="38" column="17" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBitmapStream_1a54c51e106540eff672506ddf6ce1edf9" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BBitmapStream::fPosition</definition>
        <argsstring></argsstring>
        <name>fPosition</name>
        <qualifiedname>BBitmapStream::fPosition</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="40" column="7" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBitmapStream_1a65cdd826d4cd318da0a486b4eacdd42e" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BBitmapStream::fSize</definition>
        <argsstring></argsstring>
        <name>fSize</name>
        <qualifiedname>BBitmapStream::fSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="41" column="7" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBBitmapStream_1a534677ad3d13190308e935147f6673a4" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long BBitmapStream::_reserved[5]</definition>
        <argsstring>[5]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BBitmapStream::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="50" column="5" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBitmapStream_1a44aa0e55ebdf2a850cae6f27c8abb330" prot="private" static="no" mutable="no">
        <type>TranslatorBitmap *</type>
        <definition>TranslatorBitmap* BBitmapStream::fBigEndianHeader</definition>
        <argsstring></argsstring>
        <name>fBigEndianHeader</name>
        <qualifiedname>BBitmapStream::fBigEndianHeader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="49" column="17" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBBitmapStream_1a2ff1f2f2d88371f96d8cb118acd63707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BBitmapStream::BBitmapStream</definition>
        <argsstring>(BBitmap *bitmap=NULL)</argsstring>
        <name>BBitmapStream</name>
        <qualifiedname>BBitmapStream::BBitmapStream</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>bitmap</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Initializes this object to either use the <ref refid="classBBitmap" kindref="compound">BBitmap</ref> passed to it as the object to read/write to or to create a <ref refid="classBBitmap" kindref="compound">BBitmap</ref> when data is written to this object. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>bitmap</emphasis> is <computeroutput>NULL</computeroutput>, a new <ref refid="classBBitmap" kindref="compound">BBitmap</ref> object is created when this object is written to.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap object to read from/write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1a7aaf8df03aae881a130909d965e24355" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>void BBitmapStream::~BBitmapStream</definition>
        <argsstring>()</argsstring>
        <name>~BBitmapStream</name>
        <qualifiedname>BBitmapStream::~BBitmapStream</qualifiedname>
        <briefdescription>
<para>Destroys the object and the <ref refid="classBBitmap" kindref="compound">BBitmap</ref> object if attached. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="21" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1aa42001694aef557857f3dc1879a1869c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BBitmapStream::DetachBitmap</definition>
        <argsstring>(BBitmap **_bitmap)</argsstring>
        <name>DetachBitmap</name>
        <qualifiedname>BBitmapStream::DetachBitmap</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> **</type>
          <declname>_bitmap</declname>
        </param>
        <briefdescription>
<para>Sets <emphasis>_bitmap</emphasis> to point to the internal bitmap object. </para>
        </briefdescription>
        <detaileddescription>
<para>The bitmap is not deleted when the <ref refid="classBBitmapStream" kindref="compound">BBitmapStream</ref> is deleted. After the bitmap has been detached it is still used by the stream, but it is never deleted by the stream.</para>
<para>Once you have called <ref refid="classBBitmapStream_1aa42001694aef557857f3dc1879a1869c" kindref="member">DetachBitmap()</ref> no further operations should be performed on the <ref refid="classBBitmapStream" kindref="compound">BBitmapStream</ref> except to destroy the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBBitmap" kindref="compound">BBitmap</ref> pointer that will be set to point to the internal bitmap object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap was detached. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>_bitmap is <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal bitmap object is <computeroutput>NULL</computeroutput> or has already been detached. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="31" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1aa172a68e7325680c9d3210714e5330c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BBitmapStream::Position</definition>
        <argsstring>() const</argsstring>
        <name>Position</name>
        <qualifiedname>BBitmapStream::Position</qualifiedname>
        <reimplements refid="classBPositionIO_1a4ebc2cd7a7493767e79fa6d88657a84a">Position</reimplements>
        <briefdescription>
<para>Gets the current stream position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current stream position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="27" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1a22bc134d272bac2f1979951f6d00140a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BBitmapStream::ReadAt</definition>
        <argsstring>(off_t offset, void *buffer, size_t size)</argsstring>
        <name>ReadAt</name>
        <qualifiedname>BBitmapStream::ReadAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a6eb7aff1d69bf3049b2b421da52fdf8f">ReadAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
          <defname>pos</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reads data from the stream into <emphasis>buffer</emphasis> at a specific position and size. </para>
        </briefdescription>
        <detaileddescription>
<para>The first sizeof(TranslatorBitmap) bytes are the bitmap header. The header is always written out and read in as big endian byte order.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in the stream to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the data will be read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of data to be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The amount of data written if the result is &gt;= 0 or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>buffer</emphasis> is <computeroutput>NULL</computeroutput> or <emphasis>pos</emphasis> is invalid or the amount read if the result &gt;= 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no bitmap stored by the stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="23" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1af17115c38e1f19e8bbfbba3880850223" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BBitmapStream::Seek</definition>
        <argsstring>(off_t position, uint32 seekMode)</argsstring>
        <name>Seek</name>
        <qualifiedname>BBitmapStream::Seek</qualifiedname>
        <reimplements refid="classBPositionIO_1af8296875d9711dd498b0fbcace028abc">Seek</reimplements>
        <param>
          <type>off_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>seekMode</declname>
        </param>
        <briefdescription>
<para>Changes the current stream position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seekMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Decides how the position offset is used:<itemizedlist>
<listitem><para><computeroutput>SEEK_CUR</computeroutput> Position is added to current stream position.</para>
</listitem><listitem><para><computeroutput>SEEK_END</computeroutput> Position is added to the end stream position.</para>
</listitem><listitem><para><computeroutput>SEEK_SET</computeroutput> The stream position is set to position.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new position offset if the result &gt;= 0. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>position</emphasis> was bad. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="26" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1a47ce4b957cbde849427f8aa937d0f716" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BBitmapStream::SetSize</definition>
        <argsstring>(off_t size)</argsstring>
        <name>SetSize</name>
        <qualifiedname>BBitmapStream::SetSize</qualifiedname>
        <reimplements refid="classBPositionIO_1a35613c7ee06c7c9583ca2505e1fdff28">SetSize</reimplements>
        <param>
          <type>off_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the size of the data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size to set the stream size to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_NO_ERROR</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_NO_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>(or <computeroutput>B_OK</computeroutput>) Size is a valid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>size</emphasis> is NOT a valid value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="29" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1a68025a63cbfbb87eaa1dda7edf188589" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>off_t</type>
        <definition>off_t BBitmapStream::Size</definition>
        <argsstring>() const</argsstring>
        <name>Size</name>
        <qualifiedname>BBitmapStream::Size</qualifiedname>
        <briefdescription>
<para>Gets the current stream size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current stream size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="28" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1af48762a7326aebc52aed25315e04ef6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>ssize_t BBitmapStream::WriteAt</definition>
        <argsstring>(off_t offset, const void *buffer, size_t size)</argsstring>
        <name>WriteAt</name>
        <qualifiedname>BBitmapStream::WriteAt</qualifiedname>
        <reimplements refid="classBPositionIO_1a0efce1a07d1d6509e8ec00598244ace1">WriteAt</reimplements>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
          <defname>pos</defname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
          <defname>data</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes data to the bitmap starting at a specific position and size. </para>
        </briefdescription>
        <detaileddescription>
<para>The first sizeof(TranslatorBitmap) bytes of data must be the TranslatorBitmap header in big endian byte order or the data will not be written.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in the stream to write to <emphasis>data</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to write to the stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data to write to the stream.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The amount of data written if the result is &gt;= 0 or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Size is bad or data is <computeroutput>NULL</computeroutput> or <emphasis>pos</emphasis> is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_MISMATCHED_VALUES</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap header is bad. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Error allocating memory or setting up big endian header, </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="24" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBBitmapStream_1a1787243e990879d262c26dca64535a40" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BBitmapStream::SwapHeader</definition>
        <argsstring>(const TranslatorBitmap *source, TranslatorBitmap *destination)</argsstring>
        <name>SwapHeader</name>
        <qualifiedname>BBitmapStream::SwapHeader</qualifiedname>
        <param>
          <type>const TranslatorBitmap *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>TranslatorBitmap *</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Swaps the byte order of <emphasis>source</emphasis>, no matter the byte order, and copies the result to <emphasis>destination</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be swapped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the swapped data will be copied to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="34" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBBitmapStream_1af280a3f50951acba503f783a15e2583d" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BBitmapStream::_ReservedBitmapStream1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedBitmapStream1</name>
        <qualifiedname>BBitmapStream::_ReservedBitmapStream1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="45" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBitmapStream_1a6633c83663528b743e4f676946312e24" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BBitmapStream::_ReservedBitmapStream2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedBitmapStream2</name>
        <qualifiedname>BBitmapStream::_ReservedBitmapStream2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="46" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides for the conversion of a Translation Kit bitmap object to a <ref refid="classBBitmap" kindref="compound">BBitmap</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBBitmapStream" kindref="compound">BBitmapStream</ref> is limited subclass of <ref refid="classBPositionIO" kindref="compound">BPositionIO</ref> that is good at reading and writing Translation Kit bitmaps. The <ref refid="classBBitmapStream_1aa42001694aef557857f3dc1879a1869c" kindref="member">DetachBitmap()</ref> method is the main method of this class as it returns the contents of the Translation Kit bitmap object into a <ref refid="classBBitmap" kindref="compound">BBitmap</ref>.</para>
<para>In most cases you shouldn&apos;t have to use this class directly as BTranslationUtils contains methods to load images from files and resources. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BBitmapStream</label>
        <link refid="classBBitmapStream"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="4">
        <label>BBitmap</label>
        <link refid="classBBitmap"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BBitmapStream</label>
        <link refid="classBBitmapStream"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>fBitmap</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="2">
        <label>BPositionIO</label>
        <link refid="classBPositionIO"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" line="18" column="1" bodyfile="/boot/home/src/haiku/headers/os/translation/BitmapStream.h" bodystart="18" bodyend="51"/>
    <listofallmembers>
      <member refid="classBBitmapStream_1a534677ad3d13190308e935147f6673a4" prot="private" virt="non-virtual"><scope>BBitmapStream</scope><name>_reserved</name></member>
      <member refid="classBBitmapStream_1af280a3f50951acba503f783a15e2583d" prot="private" virt="virtual"><scope>BBitmapStream</scope><name>_ReservedBitmapStream1</name></member>
      <member refid="classBBitmapStream_1a6633c83663528b743e4f676946312e24" prot="private" virt="virtual"><scope>BBitmapStream</scope><name>_ReservedBitmapStream2</name></member>
      <member refid="classBBitmapStream_1a2ff1f2f2d88371f96d8cb118acd63707" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>BBitmapStream</name></member>
      <member refid="classBDataIO_1a67891b7afe78d6a77845dd0352218801" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>BDataIO</name></member>
      <member refid="classBPositionIO_1a08051e865cd2623fab56c3733ecbf099" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>BPositionIO</name></member>
      <member refid="classBBitmapStream_1aa42001694aef557857f3dc1879a1869c" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>DetachBitmap</name></member>
      <member refid="classBBitmapStream_1a44aa0e55ebdf2a850cae6f27c8abb330" prot="private" virt="non-virtual"><scope>BBitmapStream</scope><name>fBigEndianHeader</name></member>
      <member refid="classBBitmapStream_1a05c07d20450a540cd53163a3da21e86a" prot="protected" virt="non-virtual"><scope>BBitmapStream</scope><name>fBitmap</name></member>
      <member refid="classBBitmapStream_1a256e49bf3b3bdc27e0e5d1871bcdae73" prot="protected" virt="non-virtual"><scope>BBitmapStream</scope><name>fDetached</name></member>
      <member refid="classBBitmapStream_1ac0a37b9877c5457f1745a5f2369b9430" prot="protected" virt="non-virtual"><scope>BBitmapStream</scope><name>fHeader</name></member>
      <member refid="classBDataIO_1a38a8df63b367585fe5e6b6a85c406d05" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>Flush</name></member>
      <member refid="classBBitmapStream_1a54c51e106540eff672506ddf6ce1edf9" prot="protected" virt="non-virtual"><scope>BBitmapStream</scope><name>fPosition</name></member>
      <member refid="classBBitmapStream_1a65cdd826d4cd318da0a486b4eacdd42e" prot="protected" virt="non-virtual"><scope>BBitmapStream</scope><name>fSize</name></member>
      <member refid="classBPositionIO_1a5be704340522f36f80697c6bc883a00d" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>GetSize</name></member>
      <member refid="classBBitmapStream_1aa172a68e7325680c9d3210714e5330c4" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>Position</name></member>
      <member refid="classBPositionIO_1abce66c314f7cbd5ab6de0e6480bd7a00" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>Read</name></member>
      <member refid="classBBitmapStream_1a22bc134d272bac2f1979951f6d00140a" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>ReadAt</name></member>
      <member refid="classBPositionIO_1a91bab7ae60926dbe3726bc73734318b6" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>ReadAtExactly</name></member>
      <member refid="classBDataIO_1a3a0b0fc36232531a1d8c1144a7d75741" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>ReadExactly</name></member>
      <member refid="classBBitmapStream_1af17115c38e1f19e8bbfbba3880850223" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>Seek</name></member>
      <member refid="classBBitmapStream_1a47ce4b957cbde849427f8aa937d0f716" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>SetSize</name></member>
      <member refid="classBBitmapStream_1a68025a63cbfbb87eaa1dda7edf188589" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>Size</name></member>
      <member refid="classBBitmapStream_1a1787243e990879d262c26dca64535a40" prot="protected" virt="non-virtual"><scope>BBitmapStream</scope><name>SwapHeader</name></member>
      <member refid="classBPositionIO_1a50ec7f6b834893a153d46c0f3c0e09c4" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>Write</name></member>
      <member refid="classBBitmapStream_1af48762a7326aebc52aed25315e04ef6d" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>WriteAt</name></member>
      <member refid="classBPositionIO_1a18100db340087226321c332182816d27" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>WriteAtExactly</name></member>
      <member refid="classBDataIO_1a0095cfffa454a82eac3dedda2e187ab7" prot="public" virt="non-virtual"><scope>BBitmapStream</scope><name>WriteExactly</name></member>
      <member refid="classBBitmapStream_1a7aaf8df03aae881a130909d965e24355" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>~BBitmapStream</name></member>
      <member refid="classBDataIO_1a45daa9db670dd2e5b83efcefcf8dbaed" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>~BDataIO</name></member>
      <member refid="classBPositionIO_1a505defae83a1a6937c77b9acac2aaafe" prot="public" virt="virtual"><scope>BBitmapStream</scope><name>~BPositionIO</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
