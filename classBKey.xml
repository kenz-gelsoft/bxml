<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBKey" kind="class" language="C++" prot="public">
    <compoundname>BKey</compoundname>
    <derivedcompoundref refid="classBPasswordKey" prot="public" virt="non-virtual">BPasswordKey</derivedcompoundref>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBKey_1a43ed637ba32b8f046987425927f70567" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BKeyStore</definition>
        <argsstring></argsstring>
        <name>BKeyStore</name>
        <qualifiedname>BKey::BKeyStore</qualifiedname>
        <param>
          <type><ref refid="classBKeyStore" kindref="compound">BKeyStore</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="82" column="14" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBKey_1a59a738df936f256dd771ad75f34e15b1" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BKey::fCreationTime</definition>
        <argsstring></argsstring>
        <name>fCreationTime</name>
        <qualifiedname>BKey::fCreationTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="88" column="10" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBKey_1ac6e0b832ead5893914cbcccffc16afc2" prot="private" static="no" mutable="yes">
        <type><ref refid="classBMallocIO" kindref="compound">BMallocIO</ref></type>
        <definition>BMallocIO BKey::fData</definition>
        <argsstring></argsstring>
        <name>fData</name>
        <qualifiedname>BKey::fData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="89" column="17" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBKey_1a3e2a0ea0b56621e0a0dc580060427e53" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BKey::fIdentifier</definition>
        <argsstring></argsstring>
        <name>fIdentifier</name>
        <qualifiedname>BKey::fIdentifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="85" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBKey_1ae6dd24d34066a2c90502587f40c05fc1" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BKey::fOwner</definition>
        <argsstring></argsstring>
        <name>fOwner</name>
        <qualifiedname>BKey::fOwner</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="87" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBKey_1a693de4b2cb1af6a34914c9cd9061116d" prot="private" static="no" mutable="no">
        <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
        <definition>BKeyPurpose BKey::fPurpose</definition>
        <argsstring></argsstring>
        <name>fPurpose</name>
        <qualifiedname>BKey::fPurpose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="84" column="12" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBKey_1ad27ada468b41b067fd49a4582115464d" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BKey::fSecondaryIdentifier</definition>
        <argsstring></argsstring>
        <name>fSecondaryIdentifier</name>
        <qualifiedname>BKey::fSecondaryIdentifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="86" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBKey_1a77809839d879a1c07eddd64d8ff88b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BKey::BKey</definition>
        <argsstring>()</argsstring>
        <name>BKey</name>
        <qualifiedname>BKey::BKey</qualifiedname>
        <briefdescription>
<para>Constructor for an empty generic key. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty key has no data associated with it, other than that it has a generic purpose and a generic key type.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1ab797b11dcd56baefc46b298fc0b8a718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BKey::BKey</definition>
        <argsstring>(BKey &amp;other)</argsstring>
        <name>BKey</name>
        <qualifiedname>BKey::BKey</qualifiedname>
        <param>
          <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor that makes a copy of an <emphasis>other</emphasis> <ref refid="classBKey" kindref="compound">BKey</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a25764fe6ea6418ea5a3f10d903f80aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BKey::BKey</definition>
        <argsstring>(BKeyPurpose purpose, const char *identifier, const char *secondaryIdentifier=NULL, const uint8 *data=NULL, size_t length=0)</argsstring>
        <name>BKey</name>
        <qualifiedname>BKey::BKey</qualifiedname>
        <param>
          <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
          <declname>purpose</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>data</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor for a generic key with the provided data. </para>
        </briefdescription>
        <detaileddescription>
<para>See the class introduction for more information about the properties of a key. As you can see, the only required parameters are the <emphasis>purpose</emphasis> and the <emphasis>identifier</emphasis>. Any data you provide will be copied into the <ref refid="classBKey" kindref="compound">BKey</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>purpose</parametername>
</parameternamelist>
<parameterdescription>
<para>The purpose of this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique identifier for this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondaryIdentifier</parametername>
</parameternamelist>
<parameterdescription>
<para>An (optional) secondary identifier for this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer that contains the value of the key, such as the password or the certificate data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the data in bytes that should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a2dfdbc566ae1f2643db4c46bbd4942c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BKey::~BKey</definition>
        <argsstring>()</argsstring>
        <name>~BKey</name>
        <qualifiedname>BKey::~BKey</qualifiedname>
        <briefdescription>
<para>Free all resources associated with this key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="42" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1af14a6300c8eccb77040c3d06fa7c9933" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BKey::CreationTime</definition>
        <argsstring>() const</argsstring>
        <name>CreationTime</name>
        <qualifiedname>BKey::CreationTime</qualifiedname>
        <briefdescription>
<para>Get the creation time of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="69" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a55f2daba99a80eacfae784ec5b681c65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
        <definition>const uint8 * BKey::Data</definition>
        <argsstring>() const</argsstring>
        <name>Data</name>
        <qualifiedname>BKey::Data</qualifiedname>
        <briefdescription>
<para>Get a pointer to the data of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="65" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a8691803a6b74f8e27ae9cbc89ab6eb21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BKey::DataLength</definition>
        <argsstring>() const</argsstring>
        <name>DataLength</name>
        <qualifiedname>BKey::DataLength</qualifiedname>
        <briefdescription>
<para>Get the size of the key in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="64" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a054a1fea3c3a71393589ff6f45d873f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKey::Flatten</definition>
        <argsstring>(BMessage &amp;message) const</argsstring>
        <name>Flatten</name>
        <qualifiedname>BKey::Flatten</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Flatten the key into a <emphasis>message</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="71" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1ae129138c6f94b3e6b796122c07c80f94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKey::GetData</definition>
        <argsstring>(uint8 *buffer, size_t bufferSize) const</argsstring>
        <name>GetData</name>
        <qualifiedname>BKey::GetData</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufferSize</declname>
        </param>
        <briefdescription>
<para>Copy the key into the <emphasis>buffer</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is up to you to make sure the size of the buffer is the actual size of the key&apos;s data. If the provided buffer is smaller, only the <emphasis>bufferSize</emphasis> will be copied. If the buffer is larger, the key is copied, but the rest of the buffer will not be touched.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to copy the key to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the provided <emphasis>buffer</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the data is sucessfully copied.</para>
</listitem><listitem><para>An other error code if there was an issue copying the data.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="66" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a519fb286f9b9bf340c45ab42ade87257" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BKey::Identifier</definition>
        <argsstring>() const</argsstring>
        <name>Identifier</name>
        <qualifiedname>BKey::Identifier</qualifiedname>
        <briefdescription>
<para>Get the identifier of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="58" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1ae67824b7f83adf295a47b9cb31edac81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BKey::operator!=</definition>
        <argsstring>(const BKey &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BKey::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this key to an <emphasis>other</emphasis> key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if any of the properties in this key differ from <emphasis>other</emphasis>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a9ffb98b62e2f1d1f2bbadbc9e917ee69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
        <definition>BKey &amp; BKey::operator=</definition>
        <argsstring>(const BKey &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BKey::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy the data from the <emphasis>other</emphasis> key into this key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="74" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1abec7406e9dbf876d9102ee08642f663d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BKey::operator==</definition>
        <argsstring>(const BKey &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BKey::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBKey" kindref="compound">BKey</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this key to an <emphasis>other</emphasis> key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if all the properties in both keys are identical.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="76" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1aea174803d7f63f94dd9de82bdf7b70b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BKey::Owner</definition>
        <argsstring>() const</argsstring>
        <name>Owner</name>
        <qualifiedname>BKey::Owner</qualifiedname>
        <briefdescription>
<para>Get the owner of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="68" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1ac7cd25324b948b012a6e0cf16f940658" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BKey::PrintToStream</definition>
        <argsstring>()</argsstring>
        <name>PrintToStream</name>
        <qualifiedname>BKey::PrintToStream</qualifiedname>
        <reimplementedby refid="classBPasswordKey_1a64ff92b5e0fde95eef53112a99f868dc">PrintToStream</reimplementedby>
        <briefdescription>
<para>Dump the contents of the key to standard output. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a debug function that helps you read the contents of the key. All properties, except for the actual <computeroutput>data</computeroutput> of the key, will be printed to <computeroutput>stdout</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="79" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a3545ab4336657b23ce9f062e4d2eb831" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
        <definition>BKeyPurpose BKey::Purpose</definition>
        <argsstring>() const</argsstring>
        <name>Purpose</name>
        <qualifiedname>BKey::Purpose</qualifiedname>
        <briefdescription>
<para>Get the purpose of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="55" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a8f31e4a4b0eb8ccce2e4a9214d7651a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BKey::SecondaryIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>SecondaryIdentifier</name>
        <qualifiedname>BKey::SecondaryIdentifier</qualifiedname>
        <briefdescription>
<para>Get the secondary identifier of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="61" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1adaf416afe5767fcc27bd79caa990e488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKey::SetData</definition>
        <argsstring>(const uint8 *data, size_t length)</argsstring>
        <name>SetData</name>
        <qualifiedname>BKey::SetData</qualifiedname>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the data for the key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer that contains the data of the key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in bytes of the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the key data was updated.</para>
</listitem><listitem><para><computeroutput>B_NO_MEMORY</computeroutput> in case it fails to allocate memory. </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="63" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1aaf927007ee39004f99acebd9741ba621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BKey::SetIdentifier</definition>
        <argsstring>(const char *identifier)</argsstring>
        <name>SetIdentifier</name>
        <qualifiedname>BKey::SetIdentifier</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Set the identifier of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid UTF-8 string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1adba48733f398dd45a12c5ac15a4ce938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BKey::SetPurpose</definition>
        <argsstring>(BKeyPurpose purpose)</argsstring>
        <name>SetPurpose</name>
        <qualifiedname>BKey::SetPurpose</qualifiedname>
        <param>
          <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
          <declname>purpose</declname>
        </param>
        <briefdescription>
<para>Set the purpose of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a7d7f282241d38ba79da68cc2aa2c5785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BKey::SetSecondaryIdentifier</definition>
        <argsstring>(const char *identifier)</argsstring>
        <name>SetSecondaryIdentifier</name>
        <qualifiedname>BKey::SetSecondaryIdentifier</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Set the secondary identifier of the key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a valid UTF-8 string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="60" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a753f3fd6c65c9abf4fe7957a653d9685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKey::SetTo</definition>
        <argsstring>(BKeyPurpose purpose, const char *identifier, const char *secondaryIdentifier=NULL, const uint8 *data=NULL, size_t length=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BKey::SetTo</qualifiedname>
        <param>
          <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
          <declname>purpose</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>data</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the key to the specified values. </para>
        </briefdescription>
        <detaileddescription>
<para>All properties of the key will be set to the parameters. If the key had a creation time set, it will be cleared. If there was an owner set, this piece of information will <emphasis>not</emphasis> be cleared.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>purpose</parametername>
</parameternamelist>
<parameterdescription>
<para>The purpose of this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique identifier for this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondaryIdentifier</parametername>
</parameternamelist>
<parameterdescription>
<para>An (optional) secondary identifier for this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer that contains the value of the key, such as the password or the certificate data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the data in bytes that should be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the changes were successful.</para>
</listitem><listitem><para><computeroutput>B_NO_MEMORY</computeroutput> in case it fails to allocate memory.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="48" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a7971f210c7d6805a415ec19dbae3038d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
        <definition>virtual BKeyType BKey::Type</definition>
        <argsstring>() const</argsstring>
        <name>Type</name>
        <qualifiedname>BKey::Type</qualifiedname>
        <reimplementedby refid="classBPasswordKey_1a8c53e208ace43023a7ed026bdf0938b6">Type</reimplementedby>
        <briefdescription>
<para>Returns the type of key. </para>
        </briefdescription>
        <detaileddescription>
<para>For a generic <ref refid="classBKey" kindref="compound">BKey</ref>, this will always be BKeyType::B_KEY_TYPE_GENERIC</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="44" column="16" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="44" bodyend="44"/>
        <references refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444abda8bc3c6de747daab1b1b8468c4690e" compoundref="Key_8h" startline="27">B_KEY_TYPE_GENERIC</references>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a0a59826da2f3a2da218f846e1e2aa216" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BKey::Unflatten</definition>
        <argsstring>(const BMessage &amp;message)</argsstring>
        <name>Unflatten</name>
        <qualifiedname>BKey::Unflatten</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Unflatten the key from a <emphasis>message</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="72" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBKey_1a7c001778a01edb880e215b5851c7254b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BKey::Unset</definition>
        <argsstring>()</argsstring>
        <name>Unset</name>
        <qualifiedname>BKey::Unset</qualifiedname>
        <briefdescription>
<para>Reset the values of the key. </para>
        </briefdescription>
        <detaileddescription>
<para>All properties of the key will be reset, except for the identifying owner.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="46" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that represents a generic key for or from the Haiku key store. </para>
    </briefdescription>
    <detaileddescription>
<para>A key has the following properties:<itemizedlist>
<listitem><para>A key <bold>type</bold> of <ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref>, which identifies the type. For a generic key (like this key), it will be set to BKeyType::B_KEY_TYPE_GENERIC.</para>
</listitem><listitem><para>A key <bold>purpose</bold> of <ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref>, which identifies the purpose of the key. This is a hint for your (or other) applications on how and where the key may be used.</para>
</listitem><listitem><para>A <bold>primary</bold> <bold>identifier</bold> that identifies a specific key. As an example, for WPA passwords, this is set to the network name. This should be a valid UTF-8 string.</para>
</listitem><listitem><para>A <bold>secondary</bold> <bold>identifier</bold> that can be used as additional metadata.</para>
</listitem><listitem><para>The <bold>data</bold>, the actual value of the key (such as a password or a certificate). This should be a valid UTF-8 string.</para>
</listitem><listitem><para>Not in use: the <bold>owner</bold> identifies who created and/or owns the key. This feature is not yet enabled. It will always be set to an empty string.</para>
</listitem><listitem><para>Not in use: the <bold>creation</bold> <bold>time</bold> will indicate when a key was stored in the central database. This feature is not yet enabled, and the value will always be 0.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BKey</label>
        <link refid="classBKey"/>
      </node>
      <node id="2">
        <label>BPasswordKey</label>
        <link refid="classBPasswordKey"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="33" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="33" bodyend="90"/>
    <listofallmembers>
      <member refid="classBKey_1a77809839d879a1c07eddd64d8ff88b1a" prot="public" virt="non-virtual"><scope>BKey</scope><name>BKey</name></member>
      <member refid="classBKey_1a25764fe6ea6418ea5a3f10d903f80aa4" prot="public" virt="non-virtual"><scope>BKey</scope><name>BKey</name></member>
      <member refid="classBKey_1ab797b11dcd56baefc46b298fc0b8a718" prot="public" virt="non-virtual"><scope>BKey</scope><name>BKey</name></member>
      <member refid="classBKey_1af14a6300c8eccb77040c3d06fa7c9933" prot="public" virt="non-virtual"><scope>BKey</scope><name>CreationTime</name></member>
      <member refid="classBKey_1a55f2daba99a80eacfae784ec5b681c65" prot="public" virt="non-virtual"><scope>BKey</scope><name>Data</name></member>
      <member refid="classBKey_1a8691803a6b74f8e27ae9cbc89ab6eb21" prot="public" virt="non-virtual"><scope>BKey</scope><name>DataLength</name></member>
      <member refid="classBKey_1a59a738df936f256dd771ad75f34e15b1" prot="private" virt="non-virtual"><scope>BKey</scope><name>fCreationTime</name></member>
      <member refid="classBKey_1ac6e0b832ead5893914cbcccffc16afc2" prot="private" virt="non-virtual"><scope>BKey</scope><name>fData</name></member>
      <member refid="classBKey_1a3e2a0ea0b56621e0a0dc580060427e53" prot="private" virt="non-virtual"><scope>BKey</scope><name>fIdentifier</name></member>
      <member refid="classBKey_1a054a1fea3c3a71393589ff6f45d873f2" prot="public" virt="virtual"><scope>BKey</scope><name>Flatten</name></member>
      <member refid="classBKey_1ae6dd24d34066a2c90502587f40c05fc1" prot="private" virt="non-virtual"><scope>BKey</scope><name>fOwner</name></member>
      <member refid="classBKey_1a693de4b2cb1af6a34914c9cd9061116d" prot="private" virt="non-virtual"><scope>BKey</scope><name>fPurpose</name></member>
      <member refid="classBKey_1ad27ada468b41b067fd49a4582115464d" prot="private" virt="non-virtual"><scope>BKey</scope><name>fSecondaryIdentifier</name></member>
      <member refid="classBKey_1ae129138c6f94b3e6b796122c07c80f94" prot="public" virt="non-virtual"><scope>BKey</scope><name>GetData</name></member>
      <member refid="classBKey_1a519fb286f9b9bf340c45ab42ade87257" prot="public" virt="non-virtual"><scope>BKey</scope><name>Identifier</name></member>
      <member refid="classBKey_1ae67824b7f83adf295a47b9cb31edac81" prot="public" virt="non-virtual"><scope>BKey</scope><name>operator!=</name></member>
      <member refid="classBKey_1a9ffb98b62e2f1d1f2bbadbc9e917ee69" prot="public" virt="non-virtual"><scope>BKey</scope><name>operator=</name></member>
      <member refid="classBKey_1abec7406e9dbf876d9102ee08642f663d" prot="public" virt="non-virtual"><scope>BKey</scope><name>operator==</name></member>
      <member refid="classBKey_1aea174803d7f63f94dd9de82bdf7b70b4" prot="public" virt="non-virtual"><scope>BKey</scope><name>Owner</name></member>
      <member refid="classBKey_1ac7cd25324b948b012a6e0cf16f940658" prot="public" virt="virtual"><scope>BKey</scope><name>PrintToStream</name></member>
      <member refid="classBKey_1a3545ab4336657b23ce9f062e4d2eb831" prot="public" virt="non-virtual"><scope>BKey</scope><name>Purpose</name></member>
      <member refid="classBKey_1a8f31e4a4b0eb8ccce2e4a9214d7651a6" prot="public" virt="non-virtual"><scope>BKey</scope><name>SecondaryIdentifier</name></member>
      <member refid="classBKey_1adaf416afe5767fcc27bd79caa990e488" prot="public" virt="non-virtual"><scope>BKey</scope><name>SetData</name></member>
      <member refid="classBKey_1aaf927007ee39004f99acebd9741ba621" prot="public" virt="non-virtual"><scope>BKey</scope><name>SetIdentifier</name></member>
      <member refid="classBKey_1adba48733f398dd45a12c5ac15a4ce938" prot="public" virt="non-virtual"><scope>BKey</scope><name>SetPurpose</name></member>
      <member refid="classBKey_1a7d7f282241d38ba79da68cc2aa2c5785" prot="public" virt="non-virtual"><scope>BKey</scope><name>SetSecondaryIdentifier</name></member>
      <member refid="classBKey_1a753f3fd6c65c9abf4fe7957a653d9685" prot="public" virt="non-virtual"><scope>BKey</scope><name>SetTo</name></member>
      <member refid="classBKey_1a7971f210c7d6805a415ec19dbae3038d" prot="public" virt="virtual"><scope>BKey</scope><name>Type</name></member>
      <member refid="classBKey_1a0a59826da2f3a2da218f846e1e2aa216" prot="public" virt="virtual"><scope>BKey</scope><name>Unflatten</name></member>
      <member refid="classBKey_1a7c001778a01edb880e215b5851c7254b" prot="public" virt="non-virtual"><scope>BKey</scope><name>Unset</name></member>
      <member refid="classBKey_1a2dfdbc566ae1f2643db4c46bbd4942c0" prot="public" virt="virtual"><scope>BKey</scope><name>~BKey</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
