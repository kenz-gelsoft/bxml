<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BNetworkRequestError" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BNetworkRequestError</compoundname>
    <basecompoundref refid="classBPrivate_1_1Network_1_1BError" prot="public" virt="non-virtual">BPrivate::Network::BError</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" prot="public" static="no" strong="no">
        <type></type>
        <name>ErrorType</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::ErrorType</qualifiedname>
        <enumvalue id="group__netservices_1ga03cb239064102cab8aaecb6a730ff736a3787e9cb68d992b37d4aeb04b2b476ea" prot="public">
          <name>HostnameError</name>
          <briefdescription>
<para>Error resolving the hostname. </para>
          </briefdescription>
          <detaileddescription>
<para><ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ab16d8aa51743e78602ff42f37149d94b" kindref="member">ErrorCode()</ref> will be set to contain the underlying error code.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga03cb239064102cab8aaecb6a730ff736aa9fe0e62779d786b8aefe38387ec82b9" prot="public">
          <name>NetworkError</name>
          <briefdescription>
<para>The request was interrupted due to a network error. </para>
          </briefdescription>
          <detaileddescription>
<para>This may occur when reading or writing fails due to an underlying network error, like an unexpected closed connection.</para>
<para><ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ab16d8aa51743e78602ff42f37149d94b" kindref="member">ErrorCode()</ref> will be set to contain the underlying error code.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga03cb239064102cab8aaecb6a730ff736afb028d61508f4535d8cbc05b47519750" prot="public">
          <name>ProtocolError</name>
          <briefdescription>
<para>The request did not complete because the response did not conform to the protocol. </para>
          </briefdescription>
          <detaileddescription>
<para>The server gave an unexpected or incorrect response. The network request could not complete because of this.</para>
<para>There will not be any <ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ab16d8aa51743e78602ff42f37149d94b" kindref="member">ErrorCode()</ref> set.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga03cb239064102cab8aaecb6a730ff736a01827aa7fdb3d63955725ee85aaaf652" prot="public">
          <name>SystemError</name>
          <briefdescription>
<para>Other internal error while handling the request. </para>
          </briefdescription>
          <detaileddescription>
<para>There could have been issues initializing buffers or decompression engines.</para>
<para><ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ab16d8aa51743e78602ff42f37149d94b" kindref="member">ErrorCode()</ref> will be set to contain the underlying error code.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga03cb239064102cab8aaecb6a730ff736a6598e147fd8932546944adc78feb1200" prot="public">
          <name>Canceled</name>
          <briefdescription>
<para>The request was canceled before it was completed. </para>
          </briefdescription>
          <detaileddescription>
<para>This could either have been done through the API, or because the session that schedules and executes the requests was destroyed.</para>
<para>There will not be any <ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ab16d8aa51743e78602ff42f37149d94b" kindref="member">ErrorCode()</ref> set.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A list of errors that can occur while executing a network request. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="58" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" bodystart="58" bodyend="58"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1a8c929b9e04bff0c3e7a210926e214675" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BPrivate::Network::BNetworkRequestError::fCustomMessage</definition>
        <argsstring></argsstring>
        <name>fCustomMessage</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::fCustomMessage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="76" column="8" bodyfile="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1a1574c6704110cfecc3a04225987b9c24" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPrivate::Network::BNetworkRequestError::fErrorCode</definition>
        <argsstring></argsstring>
        <name>fErrorCode</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::fErrorCode</qualifiedname>
        <initializer>= B_OK</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="75" column="9" bodyfile="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1a07a65c4e7121d138339d09ea293ee90c" prot="private" static="no" mutable="no">
        <type><ref refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" kindref="member">ErrorType</ref></type>
        <definition>ErrorType BPrivate::Network::BNetworkRequestError::fErrorType</definition>
        <argsstring></argsstring>
        <name>fErrorType</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::fErrorType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="74" column="10" bodyfile="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1a90f16a87c95785dfdf2944c0f0a607b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BNetworkRequestError::BNetworkRequestError</definition>
        <argsstring>(const char *origin, ErrorType type, const BString &amp;customMessage=BString())</argsstring>
        <name>BNetworkRequestError</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::BNetworkRequestError</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>origin</declname>
        </param>
        <param>
          <type><ref refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" kindref="member">ErrorType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>customMessage</declname>
          <defval><ref refid="classBString" kindref="compound">BString</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a new network request error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing where this error occured. It is advised to initialize it to <computeroutput>__PRETTY_FUNCTION__</computeroutput> by default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The error type that describes what the issue was that prevented the completion of the request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>customMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional custom message describing the reason or cause for the error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1a148d5c6515b415f0ed6d8734af96210f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BNetworkRequestError::BNetworkRequestError</definition>
        <argsstring>(const char *origin, ErrorType type, status_t errorCode, const BString &amp;customMessage=BString())</argsstring>
        <name>BNetworkRequestError</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::BNetworkRequestError</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>origin</declname>
        </param>
        <param>
          <type><ref refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" kindref="member">ErrorType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
          <declname>errorCode</declname>
        </param>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>customMessage</declname>
          <defval><ref refid="classBString" kindref="compound">BString</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a new network request error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing where this error occured. It is advised to initialize it to <computeroutput>__PRETTY_FUNCTION__</computeroutput> by default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The error type that describes what the issue was that prevented the completion of the request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errorCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying system error. See the <ref refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" kindref="member">BNetworkRequestError::ErrorType</ref> documentation on which error types expect a system error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>customMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional custom message describing the reason or cause for the error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1a1b11eec92e14ff4ad4a1fe434245e9c5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BPrivate::Network::BNetworkRequestError::CustomMessage</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CustomMessage</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::CustomMessage</qualifiedname>
        <briefdescription>
<para>Get the custom error message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Get the custom error message. This may be an empty string if it was not set.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="71" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1a038e30d1d5fcaac6a48c6b8281b5b110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>virtual BString BPrivate::Network::BNetworkRequestError::DebugMessage</definition>
        <argsstring>() const override</argsstring>
        <name>DebugMessage</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::DebugMessage</qualifiedname>
        <reimplements refid="classBPrivate_1_1Network_1_1BError_1a93a2260671aad699aa8787fd74061f98">DebugMessage</reimplements>
        <briefdescription>
<para>Retrieve a debug message that contains all info in this error. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">[<ref refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" kindref="member">Origin</ref>]<sp/><ref refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1aca0ab9afcc80043409a087da5a784508" kindref="member">Message</ref><sp/>of<sp/>error</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>In the future this method may throw this exception when the memory for the debug message cannot be allocated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classBString" kindref="compound">BString</ref> object that contains the debug message.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="66" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1ab16d8aa51743e78602ff42f37149d94b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPrivate::Network::BNetworkRequestError::ErrorCode</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ErrorCode</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::ErrorCode</qualifiedname>
        <briefdescription>
<para>Get the underlying system error code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>status_t</computeroutput> error code when the associated <ref refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" kindref="member">BNetworkRequestError::ErrorType</ref> sets the system error, or <computeroutput>B_OK</computeroutput> if there is no additional error code available.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="69" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1aca0ab9afcc80043409a087da5a784508" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char * BPrivate::Network::BNetworkRequestError::Message</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>Message</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::Message</qualifiedname>
        <reimplements refid="classBPrivate_1_1Network_1_1BError_1a2c1b049e967387a289b1b0b8694eca28">Message</reimplements>
        <briefdescription>
<para>Access the string representation of the message. </para>
        </briefdescription>
        <detaileddescription>
<para>Implementations should return a meaningful description of the error that occured. The primary target audience of these messages are developers, who (hopefully) see them during development, testing or in bug reports. However, if it makes sense to have the error messages be instructive to users too, then do not hesitate to do so.</para>
<para>Implementations of this function should never return <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="65" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BNetworkRequestError_1aa2d064311bd62e50719c267bdf53661c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" kindref="member">ErrorType</ref></type>
        <definition>ErrorType BPrivate::Network::BNetworkRequestError::Type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Type</name>
        <qualifiedname>BPrivate::Network::BNetworkRequestError::Type</qualifiedname>
        <briefdescription>
<para>Get the error type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Get the <ref refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" kindref="member">BNetworkRequestError::ErrorType</ref> that describes the cause for the request to fail.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="68" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Error that indicates there was an issue executing the network request. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BPrivate::Network::BError</label>
        <link refid="classBPrivate_1_1Network_1_1BError"/>
      </node>
      <node id="1">
        <label>BPrivate::Network::BNetworkRequestError</label>
        <link refid="classBPrivate_1_1Network_1_1BNetworkRequestError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BPrivate::Network::BError</label>
        <link refid="classBPrivate_1_1Network_1_1BError"/>
      </node>
      <node id="1">
        <label>BPrivate::Network::BNetworkRequestError</label>
        <link refid="classBPrivate_1_1Network_1_1BNetworkRequestError"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" line="55" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/NetServicesDefs.h" bodystart="56" bodyend="77"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BError_1a98953038abdab68796b3bf373ead0540" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abbf80a044f5af02aac87a65a6aba703a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1abf7e40af168fdcf53eb7a86e42c9141c" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a227208ede157ae501ea3acee188e46b7" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>BError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a148d5c6515b415f0ed6d8734af96210f" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>BNetworkRequestError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a90f16a87c95785dfdf2944c0f0a607b9" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>BNetworkRequestError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ga03cb239064102cab8aaecb6a730ff736a6598e147fd8932546944adc78feb1200" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>Canceled</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a1b11eec92e14ff4ad4a1fe434245e9c5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>CustomMessage</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a038e30d1d5fcaac6a48c6b8281b5b110" prot="public" virt="virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>DebugMessage</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ab16d8aa51743e78602ff42f37149d94b" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>ErrorCode</name></member>
      <member refid="group__netservices_1ga03cb239064102cab8aaecb6a730ff736" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>ErrorType</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a8c929b9e04bff0c3e7a210926e214675" prot="private" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>fCustomMessage</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a1574c6704110cfecc3a04225987b9c24" prot="private" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>fErrorCode</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1a07a65c4e7121d138339d09ea293ee90c" prot="private" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>fErrorType</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ga03cb239064102cab8aaecb6a730ff736a3787e9cb68d992b37d4aeb04b2b476ea" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>HostnameError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1aca0ab9afcc80043409a087da5a784508" prot="public" virt="virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>Message</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ga03cb239064102cab8aaecb6a730ff736aa9fe0e62779d786b8aefe38387ec82b9" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>NetworkError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1af4a889a39e9530458aeb649d2ba12d45" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1ab80467e8f9af8142d4d7cfa311f04c68" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a63dedfb711a141621fa266fb25bff2d8" prot="public" virt="virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>Origin</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ga03cb239064102cab8aaecb6a730ff736afb028d61508f4535d8cbc05b47519750" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>ProtocolError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1ga03cb239064102cab8aaecb6a730ff736a01827aa7fdb3d63955725ee85aaaf652" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>SystemError</name></member>
      <member refid="classBPrivate_1_1Network_1_1BNetworkRequestError_1aa2d064311bd62e50719c267bdf53661c" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>Type</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a69a0b83a56c08e510e16aaba841f25e5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>WriteToOutput</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a2c7538bd21c2844cd1ee0c8ee0ba74ef" prot="public" virt="non-virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>WriteToStream</name></member>
      <member refid="classBPrivate_1_1Network_1_1BError_1a0ffdd9cc030c188df03dd95e1de82bf4" prot="public" virt="virtual"><scope>BPrivate::Network::BNetworkRequestError</scope><name>~BError</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
