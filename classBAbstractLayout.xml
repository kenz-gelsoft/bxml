<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBAbstractLayout" kind="class" language="C++" prot="public">
    <compoundname>BAbstractLayout</compoundname>
    <basecompoundref refid="classBLayout" prot="public" virt="non-virtual">BLayout</basecompoundref>
    <derivedcompoundref refid="classBCardLayout" prot="public" virt="non-virtual">BCardLayout</derivedcompoundref>
    <derivedcompoundref refid="classBTwoDimensionalLayout" prot="public" virt="non-virtual">BTwoDimensionalLayout</derivedcompoundref>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="classBAbstractLayout_1ac31ae4b204f6731fec17f7af2ed25859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAbstractLayout::BAbstractLayout</definition>
        <argsstring>()</argsstring>
        <name>BAbstractLayout</name>
        <qualifiedname>BAbstractLayout::BAbstractLayout</qualifiedname>
        <briefdescription>
<para>Construct a <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1ae7eea1f1b57d19981c210085953cae76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAbstractLayout::BAbstractLayout</definition>
        <argsstring>(BMessage *from)</argsstring>
        <name>BAbstractLayout</name>
        <qualifiedname>BAbstractLayout::BAbstractLayout</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Archive constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="15" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Hook Methods</header>
      <memberdef kind="function" id="classBAbstractLayout_1a71018d789f5374ecf4b5acc82ea0d9a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BAbstractLayout::BaseMinSize</definition>
        <argsstring>()</argsstring>
        <name>BaseMinSize</name>
        <qualifiedname>BAbstractLayout::BaseMinSize</qualifiedname>
        <reimplementedby refid="classBCardLayout_1aedec5db8dfdb7dbc8035308cdc38d5bf">BaseMinSize</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1ad56f8b3d3ffb022153d9a06bc5f1f8b4">BaseMinSize</reimplementedby>
        <briefdescription>
<para>Method to be implemented in derived classes return the minimum size constraint for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="28" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a7e6be2609135ea8b87a370bbc49d454c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BAbstractLayout::BaseMaxSize</definition>
        <argsstring>()</argsstring>
        <name>BaseMaxSize</name>
        <qualifiedname>BAbstractLayout::BaseMaxSize</qualifiedname>
        <reimplementedby refid="classBCardLayout_1a8a081d05a58a6dec0e00859ee9bbfc63">BaseMaxSize</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1a9cba96eda27d17e4d7c8c5b3046a1164">BaseMaxSize</reimplementedby>
        <briefdescription>
<para>Method to be implemented in derived classes return the maximum size constraint for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="29" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1afdc5353db27d60c86c2e723a846446a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BAbstractLayout::BasePreferredSize</definition>
        <argsstring>()</argsstring>
        <name>BasePreferredSize</name>
        <qualifiedname>BAbstractLayout::BasePreferredSize</qualifiedname>
        <reimplementedby refid="classBCardLayout_1a80ade79f9bfda23a54dcac1cff06e5b2">BasePreferredSize</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1a03bcab80b28f949927ce42ccc428e52f">BasePreferredSize</reimplementedby>
        <briefdescription>
<para>Method to be implemented in derived classes return the preferred size constraint for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="30" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a4f637a263f6b087334d946bf97e307ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
        <definition>BAlignment BAbstractLayout::BaseAlignment</definition>
        <argsstring>()</argsstring>
        <name>BaseAlignment</name>
        <qualifiedname>BAbstractLayout::BaseAlignment</qualifiedname>
        <reimplementedby refid="classBCardLayout_1aaeca998a3a94cdd7026df33390d9aa07">BaseAlignment</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1a02f5827bf18fdfc50b2aef94733a97a0">BaseAlignment</reimplementedby>
        <briefdescription>
<para>Method to be implemented in derived classes return the preferred alignment for this <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="31" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBAbstractLayout_1a91e153d2625280411d3419cca7047ef3" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BAbstractLayout::_reserved[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BAbstractLayout::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="84" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAbstractLayout_1abcad4dd5451f8fa87cad86c278332981" prot="private" static="no" mutable="no">
        <type>Proxy *</type>
        <definition>Proxy* BAbstractLayout::fExplicitData</definition>
        <argsstring></argsstring>
        <name>fExplicitData</name>
        <qualifiedname>BAbstractLayout::fExplicitData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="83" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBAbstractLayout_1ad838535e6e51bb5b22b5dc7b05bbf5af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BAbstractLayout::~BAbstractLayout</definition>
        <argsstring>()</argsstring>
        <name>~BAbstractLayout</name>
        <qualifiedname>BAbstractLayout::~BAbstractLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="16" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a218c3772949ac855126f461162fc1ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
        <definition>BAlignment BAbstractLayout::Alignment</definition>
        <argsstring>()</argsstring>
        <name>Alignment</name>
        <qualifiedname>BAbstractLayout::Alignment</qualifiedname>
        <reimplements refid="classBLayoutItem_1a3f34ad935970e7d941dafe7ca5290d26">Alignment</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the requested alignment for this item.  </para>
<para>The value returned from this method is used in <ref refid="classBLayoutItem_1a3b5b23daa375b3333fc58c9c22ce62fa" kindref="member">BLayoutItem::AlignInFrame()</ref>, which BLayouts use to position and resize items. In a vertical <ref refid="classBGroupLayout" kindref="compound">BGroupLayout</ref>, for example, although each item recieves the same horizontal area, each item can use that area differently, aligning to the left, right or center for example.</para>
<para><simplesect kind="since"><para>Haiku R1  </para>
</simplesect>
The return value for this method is composed (using BLayoutUtils::ComposeAlignment()) from the values returned by <ref refid="classBAbstractLayout_1a4f637a263f6b087334d946bf97e307ca" kindref="member">BaseAlignment()</ref> and ExplicitAlignment()</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="21" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a76c6e663adb27a10972dafe22c898bf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractLayout::Archive</definition>
        <argsstring>(BMessage *into, bool deep=true) const</argsstring>
        <name>Archive</name>
        <qualifiedname>BAbstractLayout::Archive</qualifiedname>
        <reimplements refid="classBLayout_1a0d5f0b0a3ca81f5f7d54dae6ab7a099f">Archive</reimplements>
        <reimplementedby refid="classBCardLayout_1a0cfce7f1c906b28d8e3abaca74bcda56">Archive</reimplementedby>
        <reimplementedby refid="classBGridLayout_1aab5e2df95091bb76bb93628dcd01013e">Archive</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1aae43bdb3a725755664e55f13a054b510">Archive</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1a405b207a3fa1770d5349de6d66705390">Archive</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>into</declname>
          <defname>archive</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Archives this layout into <emphasis>archive</emphasis>. If deep is true, also archives the items in this layout, calling <ref refid="classBAbstractLayout_1a8f3461939aac1452b9e34ff707b38684" kindref="member">ItemArchived()</ref> for each one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="39" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a931bce77912316857d2e8d2a557e4241" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>virtual BRect BAbstractLayout::Frame</definition>
        <argsstring>()</argsstring>
        <name>Frame</name>
        <qualifiedname>BAbstractLayout::Frame</qualifiedname>
        <reimplements refid="classBLayoutItem_1a6bc751e914fc3b31dfaa072674972124">Frame</reimplements>
        <briefdescription>
<para>Return the bounding frame of this item. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="classBRect" kindref="compound">BRect</ref> is in the coordinate system of the target view of the <ref refid="classBLayout" kindref="compound">BLayout</ref> this item belongs to.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="33" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1aac40eebbdd9c0fa7e594e5d1d9201a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BAbstractLayout::IsVisible</definition>
        <argsstring>()</argsstring>
        <name>IsVisible</name>
        <qualifiedname>BAbstractLayout::IsVisible</qualifiedname>
        <reimplements refid="classBLayoutItem_1ad83886b5bef773a870e6668dd008a88a">IsVisible</reimplements>
        <briefdescription>
<para>Return the current local visibility of this item. If an item is not visible, it will not be given space by the <ref refid="classBLayout" kindref="compound">BLayout</ref> it resides in. </para>
        </briefdescription>
        <detaileddescription>
<para>A simple implementation would return the last thing passed to <ref refid="classBAbstractLayout_1ae40de089e697c7ecb8466ec3e8bd87e8" kindref="member">SetVisible()</ref>. A more complex implementation may deal with a <ref refid="classBView" kindref="compound">BView</ref> that could be hidden in any number of ways.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="36" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1ad1ea5d04a5c8028f8295efde7106a66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BAbstractLayout::MaxSize</definition>
        <argsstring>()</argsstring>
        <name>MaxSize</name>
        <qualifiedname>BAbstractLayout::MaxSize</qualifiedname>
        <reimplements refid="classBLayoutItem_1ac8279364e37b84f2b152fd052200f158">MaxSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum desirable size for this item.  </para>
<para><simplesect kind="since"><para>Haiku R1  </para>
</simplesect>
The return value for this method is composed (using BLayoutUtils::ComposeSize()) from the values returned by <ref refid="classBAbstractLayout_1a7e6be2609135ea8b87a370bbc49d454c" kindref="member">BaseMaxSize()</ref> and ExplicitMaxSize().</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="19" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a3f692cb3306ce726e3cc6d2771824cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BAbstractLayout::MinSize</definition>
        <argsstring>()</argsstring>
        <name>MinSize</name>
        <qualifiedname>BAbstractLayout::MinSize</qualifiedname>
        <reimplements refid="classBLayoutItem_1aa6b24064b472cf72f98dbfd11198f067">MinSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum desirable size for this item.  </para>
<para><simplesect kind="since"><para>Haiku R1   </para>
</simplesect>
<simplesect kind="since"><para>Haiku R1</para>
</simplesect>
The return value for this method is composed (using BLayoutUtils::ComposeSize()) from the values returned by <ref refid="classBAbstractLayout_1a71018d789f5374ecf4b5acc82ea0d9a6" kindref="member">BaseMinSize()</ref> and ExplicitMinSize(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="18" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1aa4d7d592de1e566f73f440576d1c2cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractLayout::Perform</definition>
        <argsstring>(perform_code d, void *arg)</argsstring>
        <name>Perform</name>
        <qualifiedname>BAbstractLayout::Perform</qualifiedname>
        <reimplements refid="classBLayout_1adb8e95073f7626f04fe78337ca7114f8">Perform</reimplements>
        <reimplementedby refid="classBCardLayout_1a7b75708b091f51e8dce826477f28e33a">Perform</reimplementedby>
        <reimplementedby refid="classBGridLayout_1a0ab603b381b9ba4d7efb3efbeae4940f">Perform</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a31d82f6cd2fdecdc0a04d60d6e3943f7">Perform</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1aac851d9c86397296d0e7e69716c01926">Perform</reimplementedby>
        <param>
          <type><ref refid="SupportDefs_8h_1ad2237b0064c91c237159edc020989bab" kindref="member">perform_code</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Perform some action (Internal method defined for binary compatibility purposes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="41" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1af5f21d9900c85ca053dba3938bef3fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
        <definition>BSize BAbstractLayout::PreferredSize</definition>
        <argsstring>()</argsstring>
        <name>PreferredSize</name>
        <qualifiedname>BAbstractLayout::PreferredSize</qualifiedname>
        <reimplements refid="classBLayoutItem_1a7311fd45380396ae3840179f9b63fae3">PreferredSize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the preferred size for this item.  </para>
<para><simplesect kind="since"><para>Haiku R1  </para>
</simplesect>
The return value for this method is composed (using BLayoutUtils::ComposeSize()) from the values returned by <ref refid="classBAbstractLayout_1afdc5353db27d60c86c2e723a846446a4" kindref="member">BasePreferredSize()</ref> and ExplicitPreferredSize().</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="20" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a3e7f4071b63452d77210f852cb92604d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::SetExplicitAlignment</definition>
        <argsstring>(BAlignment alignment)</argsstring>
        <name>SetExplicitAlignment</name>
        <qualifiedname>BAbstractLayout::SetExplicitAlignment</qualifiedname>
        <reimplements refid="classBLayoutItem_1a78604c5055ac0aca561f196d879d762d">SetExplicitAlignment</reimplements>
        <param>
          <type><ref refid="classBAlignment" kindref="compound">BAlignment</ref></type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Set this item&apos;s explicit alignment, to be used in <ref refid="classBAbstractLayout_1a218c3772949ac855126f461162fc1ee9" kindref="member">Alignment()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="26" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1aeb41b2e1e0b6414d0de4eeb4e5fb93e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::SetExplicitMaxSize</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SetExplicitMaxSize</name>
        <qualifiedname>BAbstractLayout::SetExplicitMaxSize</qualifiedname>
        <reimplements refid="classBLayoutItem_1ad91aa5d8c83270f33ec4503dbc8e438e">SetExplicitMaxSize</reimplements>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set this item&apos;s explicit max size, to be used in <ref refid="classBAbstractLayout_1ad1ea5d04a5c8028f8295efde7106a66c" kindref="member">MaxSize()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="24" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1af63e5777fabfb9be1f29286bf6931fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::SetExplicitMinSize</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SetExplicitMinSize</name>
        <qualifiedname>BAbstractLayout::SetExplicitMinSize</qualifiedname>
        <reimplements refid="classBLayoutItem_1ab5bfb3d6541b1e3097c77577be279346">SetExplicitMinSize</reimplements>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set this item&apos;s explicit min size, to be used in <ref refid="classBAbstractLayout_1a3f692cb3306ce726e3cc6d2771824cd5" kindref="member">MinSize()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This forces the minimal size for the item and overrides any constraints that would normally be used to compute it. Most importantly, the minimal size of children is ignored, so setting this can lead to the children not fitting the view.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="23" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a577b9839ac8e726bbecc7f3e40bb01a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::SetExplicitPreferredSize</definition>
        <argsstring>(BSize size)</argsstring>
        <name>SetExplicitPreferredSize</name>
        <qualifiedname>BAbstractLayout::SetExplicitPreferredSize</qualifiedname>
        <reimplements refid="classBLayoutItem_1afa1c729ac363fc0296c9aca68eca4ddc">SetExplicitPreferredSize</reimplements>
        <param>
          <type><ref refid="classBSize" kindref="compound">BSize</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set this item&apos;s explicit preferred size, to be used in <ref refid="classBAbstractLayout_1af5f21d9900c85ca053dba3938bef3fd3" kindref="member">PreferredSize()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="25" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a879dd41748f05cab421789930e7bd7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::SetFrame</definition>
        <argsstring>(BRect frame)</argsstring>
        <name>SetFrame</name>
        <qualifiedname>BAbstractLayout::SetFrame</qualifiedname>
        <reimplements refid="classBLayoutItem_1ad6e6d52145cb3007e54b5eafe454caed">SetFrame</reimplements>
        <reimplementedby refid="classBTwoDimensionalLayout_1a8a4f4e152b4f6106cbc88fc0bb1f32d8">SetFrame</reimplementedby>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>Set the bounding frame of this item. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>frame</emphasis> is in the coordinate system of the target view of the <ref refid="classBLayout" kindref="compound">BLayout</ref> that this item belongs to.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="34" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1ae40de089e697c7ecb8466ec3e8bd87e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::SetVisible</definition>
        <argsstring>(bool visible)</argsstring>
        <name>SetVisible</name>
        <qualifiedname>BAbstractLayout::SetVisible</qualifiedname>
        <reimplements refid="classBLayoutItem_1a51d14ca920b9f302662a619fa8b79957">SetVisible</reimplements>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
<para>Set the local visibility of this item. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="37" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBAbstractLayout_1a73b50e5ee03b980b4e8f08c875528162" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractLayout::AllArchived</definition>
        <argsstring>(BMessage *archive) const</argsstring>
        <name>AllArchived</name>
        <qualifiedname>BAbstractLayout::AllArchived</qualifiedname>
        <reimplements refid="classBLayout_1ab9747436e251333693d54d29d472e2f9">AllArchived</reimplements>
        <reimplementedby refid="classBCardLayout_1ac561655882cd31e4f8a8b214de846fb6">AllArchived</reimplementedby>
        <reimplementedby refid="classBGridLayout_1adddbabf3f060e0e3d20af12cf3f3dab1">AllArchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a62670753e05e05601592d49f0b5f438f">AllArchived</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1adb001699008fe0cb2eff51661da175e6">AllArchived</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>into</defname>
        </param>
        <briefdescription>
<para>Method relating to the use of <computeroutput><ref refid="classBArchiver" kindref="compound">BArchiver</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This hook function is called once the first <ref refid="classBArchiver" kindref="compound">BArchiver</ref> that was created in an archiving session is either destroyed, or has its Finish() method called. Implementations of this method can be used, in conjunction with <ref refid="classBArchiver_1a77f099b123416c719be2cd78eb999d19" kindref="member">BArchiver::IsArchived()</ref>, to reference objects in your archive that you do not own, depending on whether or not those objects were archived by their owners. Implementations of this method should call the implementation of their parent class, the same as for the <ref refid="classBAbstractLayout_1a76c6e663adb27a10972dafe22c898bf7" kindref="member">Archive()</ref> method.</para>
<para><simplesect kind="warning"><para>To guarantee that your <ref refid="classBAbstractLayout_1a73b50e5ee03b980b4e8f08c875528162" kindref="member">AllArchived()</ref> method will be called during archival, you must create a <ref refid="classBArchiver" kindref="compound">BArchiver</ref> object in your <ref refid="classBAbstractLayout_1a76c6e663adb27a10972dafe22c898bf7" kindref="member">Archive()</ref> implementation.</para>
</simplesect>
<simplesect kind="warning"><para>You should archive any objects you own in your <ref refid="classBAbstractLayout_1a76c6e663adb27a10972dafe22c898bf7" kindref="member">Archive()</ref> method implementation, and <bold>NOT</bold> your <ref refid="classBAbstractLayout_1a73b50e5ee03b980b4e8f08c875528162" kindref="member">AllArchived()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBArchiver" kindref="compound">BArchiver</ref> <ref refid="classBArchiver_1a7c82dbc0fb42795c575ac2c6a5405297" kindref="member">BArchiver::Finish()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="45" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a2664ac14ab5dbe33a18cee88d420aa22" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractLayout::AllUnarchived</definition>
        <argsstring>(const BMessage *from)</argsstring>
        <name>AllUnarchived</name>
        <qualifiedname>BAbstractLayout::AllUnarchived</qualifiedname>
        <reimplements refid="classBLayout_1a3517e73d524672645425f80ebd4f53c7">AllUnarchived</reimplements>
        <reimplementedby refid="classBCardLayout_1a30c68436cd5efd9708c1cfd75655647a">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBGridLayout_1a2cd9bd9915c14ac32c0081234e12a5fb">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a25bd4f838e672aa3eb611a616c5ec5e0">AllUnarchived</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1a67ba660a95e7cf8647be8835184b6cc3">AllUnarchived</reimplementedby>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Unarchives the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>&apos;s for this layout, calling <ref refid="classBAbstractLayout_1a9c3fd4aa60076e9869fa937d37f55ad3" kindref="member">ItemUnarchived()</ref> for each one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="46" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a5e36e0a2cb89ef4f45905c20159ef371" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::AncestorVisibilityChanged</definition>
        <argsstring>(bool shown)</argsstring>
        <name>AncestorVisibilityChanged</name>
        <qualifiedname>BAbstractLayout::AncestorVisibilityChanged</qualifiedname>
        <reimplements refid="classBLayout_1a9fe7eaa534d51bbfc807b9aca444176f">AncestorVisibilityChanged</reimplements>
        <param>
          <type>bool</type>
          <declname>shown</declname>
        </param>
        <briefdescription>
<para>Hook method inherited from <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>, classes derived from <ref refid="classBLayout" kindref="compound">BLayout</ref> must include the <ref refid="classBLayout" kindref="compound">BLayout</ref> version of this method in their implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="61" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a0eb40b1488e9b5f524cbc263106e7f3b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::AttachedToLayout</definition>
        <argsstring>()</argsstring>
        <name>AttachedToLayout</name>
        <qualifiedname>BAbstractLayout::AttachedToLayout</qualifiedname>
        <reimplements refid="classBLayout_1a18f9f855b86a1a517249288672adf680">AttachedToLayout</reimplements>
        <briefdescription>
<para>Hook method inherited from <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>, classes derived from <ref refid="classBLayout" kindref="compound">BLayout</ref> must include the <ref refid="classBLayout" kindref="compound">BLayout</ref> version of this method in their implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="59" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a4535f6de7c5193ba20038b891944864b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::DetachedFromLayout</definition>
        <argsstring>(BLayout *layout)</argsstring>
        <name>DetachedFromLayout</name>
        <qualifiedname>BAbstractLayout::DetachedFromLayout</qualifiedname>
        <reimplements refid="classBLayout_1a1339f65fb6907b6944d24b2f37e6f738">DetachedFromLayout</reimplements>
        <param>
          <type><ref refid="classBLayout" kindref="compound">BLayout</ref> *</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
<para>Hook method inherited from <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>, classes derived from <ref refid="classBLayout" kindref="compound">BLayout</ref> must include the <ref refid="classBLayout" kindref="compound">BLayout</ref> version of this method in their implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBLayout" kindref="compound">BLayout</ref> that this <ref refid="classBLayout" kindref="compound">BLayout</ref> was detached from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="60" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a842b424b62039753db229d3deafd0d10" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BAbstractLayout::ItemAdded</definition>
        <argsstring>(BLayoutItem *item, int32 atIndex)</argsstring>
        <name>ItemAdded</name>
        <qualifiedname>BAbstractLayout::ItemAdded</qualifiedname>
        <reimplements refid="classBLayout_1a139763bba67c7e68cf0311eb6fd5a19d">ItemAdded</reimplements>
        <reimplementedby refid="classBCardLayout_1a44ea0d7a577626d6992e292bd93556bc">ItemAdded</reimplementedby>
        <reimplementedby refid="classBGridLayout_1a5edc94b8a647debd21f7303a225c0bfe">ItemAdded</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1ab7222b8afc2e96f1396d226117fbbc34">ItemAdded</reimplementedby>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>atIndex</declname>
        </param>
        <briefdescription>
<para>Hook method called when <emphasis>item</emphasis> is added to this layout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> that is being added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on succcess, false if <emphasis>item</emphasis> will not be added.</para>
</simplesect>
<simplesect kind="note"><para>This is a good time to allocate data for a <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> and attach it to <emphasis>item</emphasis> via <ref refid="classBLayoutItem_1abffd9c09f9951f25b4a752a06e4040c3" kindref="member">BLayoutItem::SetLayoutData()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="53" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a8f3461939aac1452b9e34ff707b38684" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractLayout::ItemArchived</definition>
        <argsstring>(BMessage *into, BLayoutItem *item, int32 index) const</argsstring>
        <name>ItemArchived</name>
        <qualifiedname>BAbstractLayout::ItemArchived</qualifiedname>
        <reimplements refid="classBLayout_1a7b342780ed464d0074a63fe8fac67003">ItemArchived</reimplements>
        <reimplementedby refid="classBCardLayout_1a8190101471e608007ca0b1864056512c">ItemArchived</reimplementedby>
        <reimplementedby refid="classBGridLayout_1aa78c81cd57baacbdb8890b0de281f720">ItemArchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1ab7a1143b436b800e42c76de98534dbc7">ItemArchived</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1af70e3bd455f4dafa684ac6352223fcc4">ItemArchived</reimplementedby>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Hook for derived classes to add data specific to <emphasis>item</emphasis> to the <emphasis>into</emphasis> <ref refid="classBMessage" kindref="compound">BMessage</ref>. <emphasis>item</emphasis> resides at <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The same archive is passed to <ref refid="classBLayout_1a7b342780ed464d0074a63fe8fac67003" kindref="member">BLayout::ItemArchived()</ref> for all items, so any data added for each item will be stored in an array.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="48" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a4df45f148af285d521bc5d6a491dac7b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::ItemRemoved</definition>
        <argsstring>(BLayoutItem *item, int32 fromIndex)</argsstring>
        <name>ItemRemoved</name>
        <qualifiedname>BAbstractLayout::ItemRemoved</qualifiedname>
        <reimplements refid="classBLayout_1af17a219d364b091425a28759a4d684f8">ItemRemoved</reimplements>
        <reimplementedby refid="classBCardLayout_1ab1b92790589cc18c25c9c5ec9521fd62">ItemRemoved</reimplementedby>
        <reimplementedby refid="classBGridLayout_1a69ef1fdfffae399d06a09fe99b72fda0">ItemRemoved</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1ac347c539f60e59dee72e7038bcb83ff6">ItemRemoved</reimplementedby>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>fromIndex</declname>
        </param>
        <briefdescription>
<para>Hook method called when <emphasis>item</emphasis> is removed from this layout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> being removed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fromIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index where <emphasis>item</emphasis> used to reside.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
When this hook is called, <emphasis>item</emphasis> is not yet completely removed. It can no longer be accessed with LayoutItemAt(), nor does it contribute to the value of <ref refid="classBLayout_1ab7d1b881e91213047412abdcb10eae4f" kindref="member">CountItems()</ref>, but the item has not yet had its ItemDetached() hook called.</para>
<para><simplesect kind="note"><para>This is a good time to delete the data you&apos;ve attached to <emphasis>item</emphasis> via <ref refid="classBLayoutItem_1abffd9c09f9951f25b4a752a06e4040c3" kindref="member">BLayoutItem::SetLayoutData()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="54" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a9c3fd4aa60076e9869fa937d37f55ad3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractLayout::ItemUnarchived</definition>
        <argsstring>(const BMessage *from, BLayoutItem *item, int32 index)</argsstring>
        <name>ItemUnarchived</name>
        <qualifiedname>BAbstractLayout::ItemUnarchived</qualifiedname>
        <reimplements refid="classBLayout_1a6cf3d79228879f9a6e2c29d238a2a1cf">ItemUnarchived</reimplements>
        <reimplementedby refid="classBCardLayout_1a54cbd1654003320469e93c258091f840">ItemUnarchived</reimplementedby>
        <reimplementedby refid="classBGridLayout_1ad7bda5e11e67558de88b0ccaeccd3949">ItemUnarchived</reimplementedby>
        <reimplementedby refid="classBGroupLayout_1a3fee09f7df25a5d730a888fc88360f09">ItemUnarchived</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1a7e98a6fb9b41e0856e353f6c0baaee12">ItemUnarchived</reimplementedby>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="classBLayoutItem" kindref="compound">BLayoutItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Hook for derived classes to retrieve data specific to <emphasis>item</emphasis> from the <emphasis>from</emphasis> <ref refid="classBMessage" kindref="compound">BMessage</ref>. <emphasis>item</emphasis> resides at <emphasis>index</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The same archive is passed to <ref refid="classBLayout_1a7b342780ed464d0074a63fe8fac67003" kindref="member">BLayout::ItemArchived()</ref> for all items, so any data added for each item will be stored in an array. You should pass <emphasis>index</emphasis> to the <ref refid="classBMessage" kindref="compound">BMessage</ref> methods you will be using in this method.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="50" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1aa8d37f3c77c4fa240c0c18f800e7c64a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::LayoutInvalidated</definition>
        <argsstring>(bool children)</argsstring>
        <name>LayoutInvalidated</name>
        <qualifiedname>BAbstractLayout::LayoutInvalidated</qualifiedname>
        <reimplements refid="classBLayout_1a76c0a3aee65267a10187e4081b6d240d">LayoutInvalidated</reimplements>
        <reimplementedby refid="classBCardLayout_1a98304460f6a41f4e3aa387d914310cf8">LayoutInvalidated</reimplementedby>
        <reimplementedby refid="classBTwoDimensionalLayout_1a213da2d0c283091e48562e8fbb448c5f">LayoutInvalidated</reimplementedby>
        <param>
          <type>bool</type>
          <declname>children</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hook method called when this layout becomes invalid. This is a good place to clear any caches your object might hold.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>children</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not child layouts have also been invalidated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="55" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a3aca5334eed301df4013fb2a3fdfd5ac" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::OwnerChanged</definition>
        <argsstring>(BView *was)</argsstring>
        <name>OwnerChanged</name>
        <qualifiedname>BAbstractLayout::OwnerChanged</qualifiedname>
        <reimplements refid="classBLayout_1a58f983930686b554fd70e7aacafe1817">OwnerChanged</reimplements>
        <param>
          <type><ref refid="classBView" kindref="compound">BView</ref> *</type>
          <declname>was</declname>
        </param>
        <briefdescription>
<para>Hook method called when this layout is attached to a <ref refid="classBView" kindref="compound">BView</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>was</parametername>
</parameternamelist>
<parameterdescription>
<para>The previous owner of this <ref refid="classBLayout" kindref="compound">BLayout</ref>, for new <ref refid="classBLayout" kindref="compound">BLayout</ref> s, this will be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="56" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBAbstractLayout_1a125842def11e14ced9228c63b3adf15b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAbstractLayout::BAbstractLayout</definition>
        <argsstring>(const BAbstractLayout &amp;)</argsstring>
        <name>BAbstractLayout</name>
        <qualifiedname>BAbstractLayout::BAbstractLayout</qualifiedname>
        <param>
          <type>const <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a3aa15d89cc169126c94095f781d7d9e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout1</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="64" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a51fd821cfe8345eecc5848b4ea5c10f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout10</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout10</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout10</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="73" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a457fa69980fb733d48f3c42c95c36291" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout2</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="65" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1afb20b12ab541aa39b105d052a5d4edbc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout3</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="66" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1ab968082ac090d20d4452c8ca3028cb8e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout4</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout4</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="67" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a1241c4674ef9ec285273a60602c01196" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout5</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout5</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="68" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a3090018e77bcc0835f9d6744da62e6dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout6</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout6</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="69" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1ab17ebaedf4a60b19452453f1848509db" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout7</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout7</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="70" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a9c947338acb8ef756de0ec1969f86a84" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout8</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout8</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="71" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1a3cfd4d73883e2a16c35f299039652fec" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BAbstractLayout::_ReservedAbstractLayout9</definition>
        <argsstring>()</argsstring>
        <name>_ReservedAbstractLayout9</name>
        <qualifiedname>BAbstractLayout::_ReservedAbstractLayout9</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="72" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractLayout_1acc04c6bfc526a7dd0d01a371948b0036" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BAbstractLayout::operator=</definition>
        <argsstring>(const BAbstractLayout &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BAbstractLayout::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="77" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBLayout" kindref="compound">BLayout</ref> subclass providing convenience methods for derived implementations. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1</para>
</simplesect>
This class is designed to reduce the amount of boilerplate code required to write a <ref refid="classBLayout" kindref="compound">BLayout</ref> subclass. In most cases, you classes should derive from <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref> rather than <ref refid="classBLayout" kindref="compound">BLayout</ref>.</para>
<para>When a <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref> is attached to a <ref refid="classBView" kindref="compound">BView</ref>, many of the methods provided by the <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref> class are forwarded to the <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref>&apos;s owner <ref refid="classBView" kindref="compound">BView</ref>. When a <ref refid="classBAbstractLayout" kindref="compound">BAbstractLayout</ref> is viewless, these methods are handled locally.</para>
<para><simplesect kind="warning"><para>This class is not yet finalized, if you use it in your software assume that it will break some time in the future. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BAbstractLayout</label>
        <link refid="classBAbstractLayout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="5">
        <label>BCardLayout</label>
        <link refid="classBCardLayout"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BGridLayout</label>
        <link refid="classBGridLayout"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BGroupLayout</label>
        <link refid="classBGroupLayout"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BLayout</label>
        <link refid="classBLayout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BLayoutItem</label>
        <link refid="classBLayoutItem"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BTwoDimensionalLayout</label>
        <link refid="classBTwoDimensionalLayout"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BAbstractLayout</label>
        <link refid="classBAbstractLayout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="2">
        <label>BLayout</label>
        <link refid="classBLayout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BLayoutItem</label>
        <link refid="classBLayoutItem"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" line="12" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/AbstractLayout.h" bodystart="12" bodyend="85"/>
    <listofallmembers>
      <member refid="classBAbstractLayout_1a91e153d2625280411d3419cca7047ef3" prot="private" virt="non-virtual"><scope>BAbstractLayout</scope><name>_reserved</name></member>
      <member refid="classBAbstractLayout_1a3aa15d89cc169126c94095f781d7d9e2" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout1</name></member>
      <member refid="classBAbstractLayout_1a51fd821cfe8345eecc5848b4ea5c10f6" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout10</name></member>
      <member refid="classBAbstractLayout_1a457fa69980fb733d48f3c42c95c36291" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout2</name></member>
      <member refid="classBAbstractLayout_1afb20b12ab541aa39b105d052a5d4edbc" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout3</name></member>
      <member refid="classBAbstractLayout_1ab968082ac090d20d4452c8ca3028cb8e" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout4</name></member>
      <member refid="classBAbstractLayout_1a1241c4674ef9ec285273a60602c01196" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout5</name></member>
      <member refid="classBAbstractLayout_1a3090018e77bcc0835f9d6744da62e6dc" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout6</name></member>
      <member refid="classBAbstractLayout_1ab17ebaedf4a60b19452453f1848509db" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout7</name></member>
      <member refid="classBAbstractLayout_1a9c947338acb8ef756de0ec1969f86a84" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout8</name></member>
      <member refid="classBAbstractLayout_1a3cfd4d73883e2a16c35f299039652fec" prot="private" virt="virtual"><scope>BAbstractLayout</scope><name>_ReservedAbstractLayout9</name></member>
      <member refid="classBLayout_1a61bab6592bb26173d12488526b203ead" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>AddItem</name></member>
      <member refid="classBLayout_1a1b9a50f6a573a777afc2b27bac65c7f6" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>AddItem</name></member>
      <member refid="classBLayout_1a83f286f504a1a735f07304c7647ba7f9" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>AddView</name></member>
      <member refid="classBLayout_1ad7ff945dc53e94a34954da6eaf9e2268" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>AddView</name></member>
      <member refid="classBLayoutItem_1a3b5b23daa375b3333fc58c9c22ce62fa" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>AlignInFrame</name></member>
      <member refid="classBAbstractLayout_1a218c3772949ac855126f461162fc1ee9" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>Alignment</name></member>
      <member refid="classBAbstractLayout_1a73b50e5ee03b980b4e8f08c875528162" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>AllArchived</name></member>
      <member refid="classBAbstractLayout_1a2664ac14ab5dbe33a18cee88d420aa22" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>AllUnarchived</name></member>
      <member refid="classBLayout_1a4f2ff9362ef1e84d7c886c58881d2be9" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>AncestorsVisible</name></member>
      <member refid="classBAbstractLayout_1a5e36e0a2cb89ef4f45905c20159ef371" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>AncestorVisibilityChanged</name></member>
      <member refid="classBAbstractLayout_1a76c6e663adb27a10972dafe22c898bf7" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>Archive</name></member>
      <member refid="classBAbstractLayout_1a0eb40b1488e9b5f524cbc263106e7f3b" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>AttachedToLayout</name></member>
      <member refid="classBAbstractLayout_1ac31ae4b204f6731fec17f7af2ed25859" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BAbstractLayout</name></member>
      <member refid="classBAbstractLayout_1ae7eea1f1b57d19981c210085953cae76" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BAbstractLayout</name></member>
      <member refid="classBAbstractLayout_1a125842def11e14ced9228c63b3adf15b" prot="private" virt="non-virtual"><scope>BAbstractLayout</scope><name>BAbstractLayout</name></member>
      <member refid="classBArchivable_1aed4f0566f9659b03912a859077c27c89" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BArchivable</name></member>
      <member refid="classBArchivable_1a66e6b947f092d32f287913a8c253290f" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BArchivable</name></member>
      <member refid="classBAbstractLayout_1a4f637a263f6b087334d946bf97e307ca" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>BaseAlignment</name></member>
      <member refid="classBAbstractLayout_1a7e6be2609135ea8b87a370bbc49d454c" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>BaseMaxSize</name></member>
      <member refid="classBAbstractLayout_1a71018d789f5374ecf4b5acc82ea0d9a6" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>BaseMinSize</name></member>
      <member refid="classBAbstractLayout_1afdc5353db27d60c86c2e723a846446a4" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>BasePreferredSize</name></member>
      <member refid="classBLayout_1a95bf53912a8c34a70e63f74b155b42cb" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BLayout</name></member>
      <member refid="classBLayout_1a972a6ece042bd46710f6b945d9d87763" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BLayout</name></member>
      <member refid="classBLayoutItem_1ae147b703a6d2583545407d5f48809bac" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BLayoutItem</name></member>
      <member refid="classBLayoutItem_1ac639d9cfa9b8124106ef2d8bc5badb2e" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>BLayoutItem</name></member>
      <member refid="classBLayout_1ab7d1b881e91213047412abdcb10eae4f" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>CountItems</name></member>
      <member refid="classBAbstractLayout_1a4535f6de7c5193ba20038b891944864b" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>DetachedFromLayout</name></member>
      <member refid="classBLayout_1a509ff18ffa060bd9aab042c4ee6af245" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>DisableLayoutInvalidation</name></member>
      <member refid="classBLayout_1a972a7f273fc24f7665f5918e99989658" prot="protected" virt="pure-virtual"><scope>BAbstractLayout</scope><name>DoLayout</name></member>
      <member refid="classBLayout_1a7f369cb77173c3922dddbb38db893a6c" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>EnableLayoutInvalidation</name></member>
      <member refid="classBAbstractLayout_1abcad4dd5451f8fa87cad86c278332981" prot="private" virt="non-virtual"><scope>BAbstractLayout</scope><name>fExplicitData</name></member>
      <member refid="classBAbstractLayout_1a931bce77912316857d2e8d2a557e4241" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>Frame</name></member>
      <member refid="classBLayoutItem_1addd90adf76c9caad200f6f465c06e0bf" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>GetHeightForWidth</name></member>
      <member refid="classBLayoutItem_1a3186c8eec495915c5b074fe7d10dc94c" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>HasHeightForWidth</name></member>
      <member refid="classBLayout_1a1d3746cfb977dce44b052e7d58bd481c" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>IndexOfItem</name></member>
      <member refid="classBLayout_1ade2afbfa0bd50c01a1ce3db6654eaa0c" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>IndexOfView</name></member>
      <member refid="classBArchivable_1a04efcb17fa2a64a776923cc12303efcd" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>Instantiate</name></member>
      <member refid="classBLayout_1a2b775de411ef6e9ecb4f7c412a26bf31" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>InvalidateLayout</name></member>
      <member refid="classBLayout_1a9b5b6b764433dee59ed4d1f01aaada04" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>IsValid</name></member>
      <member refid="classBAbstractLayout_1aac40eebbdd9c0fa7e594e5d1d9201a87" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>IsVisible</name></member>
      <member refid="classBAbstractLayout_1a842b424b62039753db229d3deafd0d10" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>ItemAdded</name></member>
      <member refid="classBAbstractLayout_1a8f3461939aac1452b9e34ff707b38684" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>ItemArchived</name></member>
      <member refid="classBLayout_1ad47d881e6008578d2f8cc0e3c6ea467a" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>ItemAt</name></member>
      <member refid="classBAbstractLayout_1a4df45f148af285d521bc5d6a491dac7b" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>ItemRemoved</name></member>
      <member refid="classBAbstractLayout_1a9c3fd4aa60076e9869fa937d37f55ad3" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>ItemUnarchived</name></member>
      <member refid="classBLayoutItem_1ab760ea9f0eb6bb25063b5bac7a52ec3d" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>Layout</name></member>
      <member refid="classBLayout_1a25735d4b3149817ab91b2f4cff0a2fed" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>LayoutArea</name></member>
      <member refid="classBLayout_1a7d2db371223df3a53cd7a1c5f19f309a" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>LayoutContext</name></member>
      <member refid="classBLayoutItem_1a82ba24d424129d989855b74eb3a86627" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>LayoutData</name></member>
      <member refid="classBAbstractLayout_1aa8d37f3c77c4fa240c0c18f800e7c64a" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>LayoutInvalidated</name></member>
      <member refid="classBLayout_1a683aba3445c345b47c7fa38a2b6c3c1a" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>LayoutItems</name></member>
      <member refid="classBAbstractLayout_1ad1ea5d04a5c8028f8295efde7106a66c" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>MaxSize</name></member>
      <member refid="classBAbstractLayout_1a3f692cb3306ce726e3cc6d2771824cd5" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>MinSize</name></member>
      <member refid="classBAbstractLayout_1acc04c6bfc526a7dd0d01a371948b0036" prot="private" virt="non-virtual"><scope>BAbstractLayout</scope><name>operator=</name></member>
      <member refid="classBLayout_1adb34c16c239813c45d8159d3f18d96d9" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>Owner</name></member>
      <member refid="classBAbstractLayout_1a3aca5334eed301df4013fb2a3fdfd5ac" prot="protected" virt="virtual"><scope>BAbstractLayout</scope><name>OwnerChanged</name></member>
      <member refid="classBAbstractLayout_1aa4d7d592de1e566f73f440576d1c2cac" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>Perform</name></member>
      <member refid="classBAbstractLayout_1af5f21d9900c85ca053dba3938bef3fd3" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>PreferredSize</name></member>
      <member refid="classBLayout_1a2a168d993feaf8fc58b53ded8243e7b7" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>Relayout</name></member>
      <member refid="classBLayout_1abf0b19d4203e1a41292137fd8a2038d0" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>RemoveItem</name></member>
      <member refid="classBLayout_1a34a299447961069bdd54d19ae7a5176a" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>RemoveItem</name></member>
      <member refid="classBLayoutItem_1af4059e73a30336f0ae6bbbc04c70dd6a" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>RemoveSelf</name></member>
      <member refid="classBLayout_1a3120e95dc34ab57ab276c324ec94654c" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>RemoveView</name></member>
      <member refid="classBLayout_1a1983a8770e7cd89c3f1afc4d961230d5" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>RequireLayout</name></member>
      <member refid="classBLayout_1aacf1392bbef13efc20277e15595bb329" prot="protected" virt="non-virtual"><scope>BAbstractLayout</scope><name>ResetLayoutInvalidation</name></member>
      <member refid="classBAbstractLayout_1a3e7f4071b63452d77210f852cb92604d" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>SetExplicitAlignment</name></member>
      <member refid="classBAbstractLayout_1aeb41b2e1e0b6414d0de4eeb4e5fb93e4" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>SetExplicitMaxSize</name></member>
      <member refid="classBAbstractLayout_1af63e5777fabfb9be1f29286bf6931fe6" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>SetExplicitMinSize</name></member>
      <member refid="classBAbstractLayout_1a577b9839ac8e726bbecc7f3e40bb01a3" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>SetExplicitPreferredSize</name></member>
      <member refid="classBLayoutItem_1ac630c7ab0e98d5da0225792e31f596f1" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>SetExplicitSize</name></member>
      <member refid="classBAbstractLayout_1a879dd41748f05cab421789930e7bd7af" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>SetFrame</name></member>
      <member refid="classBLayoutItem_1abffd9c09f9951f25b4a752a06e4040c3" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>SetLayoutData</name></member>
      <member refid="classBAbstractLayout_1ae40de089e697c7ecb8466ec3e8bd87e8" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>SetVisible</name></member>
      <member refid="classBLayout_1a14639db95758a7b1b9604473e8f3a7c9" prot="public" virt="non-virtual"><scope>BAbstractLayout</scope><name>TargetView</name></member>
      <member refid="classBLayout_1aefd7bf5546d6b69d1561e7baebf15387" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>View</name></member>
      <member refid="classBLayout_1a7df37ec98c2d29dca5ce4f2246c5665a" prot="protected" virt="non-virtual"><scope>BAbstractLayout</scope><name>VisibilityChanged</name></member>
      <member refid="classBAbstractLayout_1ad838535e6e51bb5b22b5dc7b05bbf5af" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>~BAbstractLayout</name></member>
      <member refid="classBArchivable_1af1a37be4b953423787b0d0be0b345ff3" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>~BArchivable</name></member>
      <member refid="classBLayout_1aa3250586083f6cbd106051efaa6982d9" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>~BLayout</name></member>
      <member refid="classBLayoutItem_1ab2ab08ac19615c24d09f3461926acce2" prot="public" virt="virtual"><scope>BAbstractLayout</scope><name>~BLayoutItem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
