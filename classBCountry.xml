<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBCountry" kind="class" language="C++" prot="public">
    <compoundname>BCountry</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBCountry_1ac96b60d37bd806132da680e187dc2288" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Private</definition>
        <argsstring></argsstring>
        <name>Private</name>
        <qualifiedname>BCountry::Private</qualifiedname>
        <param>
          <type>Private</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="53" column="13" bodyfile="/boot/home/src/haiku/headers/os/locale/Country.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBCountry_1af1c85e5c7b02bc170d567d9c55c09caa" prot="private" static="no" mutable="no">
        <type>U_ICU_NAMESPACE::Locale *</type>
        <definition>U_ICU_NAMESPACE::Locale* BCountry::fICULocale</definition>
        <argsstring></argsstring>
        <name>fICULocale</name>
        <qualifiedname>BCountry::fICULocale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="55" column="24" bodyfile="/boot/home/src/haiku/headers/os/locale/Country.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBCountry_1a1cc78037ab1ac3f7c7fc294666a60b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCountry::BCountry</definition>
        <argsstring>(const BCountry &amp;other)</argsstring>
        <name>BCountry</name>
        <qualifiedname>BCountry::BCountry</qualifiedname>
        <param>
          <type>const <ref refid="classBCountry" kindref="compound">BCountry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classBCountry" kindref="compound">BCountry</ref> from another <ref refid="classBCountry" kindref="compound">BCountry</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBCountry" kindref="compound">BCountry</ref> object to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a290207a5b58c8160bf1f4d7dc767cefb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCountry::BCountry</definition>
        <argsstring>(const char *countryCode=NULL)</argsstring>
        <name>BCountry</name>
        <qualifiedname>BCountry::BCountry</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>countryCode</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classBCountry" kindref="compound">BCountry</ref> from a country code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>countryCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The country code to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a2a01929a0ca287b74463ff981e228a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCountry::~BCountry</definition>
        <argsstring>()</argsstring>
        <name>~BCountry</name>
        <qualifiedname>BCountry::~BCountry</qualifiedname>
        <briefdescription>
<para>Destructor method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a9c13a56f8ff4b13eae2cb9eb667fda32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BCountry::Code</definition>
        <argsstring>() const</argsstring>
        <name>Code</name>
        <qualifiedname>BCountry::Code</qualifiedname>
        <briefdescription>
<para>Gets the ISO country code for the country. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The ISO country code for the country.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="44" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a3255fb8cb4d0cb3044774be082b55e4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCountry::GetAvailableTimeZones</definition>
        <argsstring>(BMessage *timeZones) const</argsstring>
        <name>GetAvailableTimeZones</name>
        <qualifiedname>BCountry::GetAvailableTimeZones</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>timeZones</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="48" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a56bf64fc40d482e07b7a882b1cadb318" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCountry::GetIcon</definition>
        <argsstring>(BBitmap *result) const</argsstring>
        <name>GetIcon</name>
        <qualifiedname>BCountry::GetIcon</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Render the country&apos;s flag to the given <ref refid="classBBitmap" kindref="compound">BBitmap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function renders the country&apos;s flag to the given <ref refid="classBBitmap" kindref="compound">BBitmap</ref>. The bitmap should already be set to the pixel format and size you want to use.</para>
<para>The flag is stored in HVIF format so it can be rendered at any size and color depth.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBBitmap" kindref="compound">BBitmap</ref> object to draw the flag into.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if the drawing was successful.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="46" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a3c3c64cd01d7371e1be172eea7a72a85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCountry::GetName</definition>
        <argsstring>(BString &amp;name, const BLanguage *displayLanguage=NULL) const</argsstring>
        <name>GetName</name>
        <qualifiedname>BCountry::GetName</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const BLanguage *</type>
          <declname>displayLanguage</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Writes the country&apos;s name into the supplied <ref refid="classBString" kindref="compound">BString</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a <ref refid="classBString" kindref="compound">BString</ref> to write the country name to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>displayLanguage</parametername>
</parameternamelist>
<parameterdescription>
<para>The language to use when writing the name. Can be <computeroutput>NULL</computeroutput> to use the language set by the user&apos;s locale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, B_OK if everything went fine, or an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="39" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1ad38c2f544a91cc4034db3047752c1ee9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCountry::GetNativeName</definition>
        <argsstring>(BString &amp;name) const</argsstring>
        <name>GetNativeName</name>
        <qualifiedname>BCountry::GetNativeName</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a63a919b79114ab9e50afc2a3bf168951" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCountry::GetPreferredLanguage</definition>
        <argsstring>(BLanguage &amp;) const</argsstring>
        <name>GetPreferredLanguage</name>
        <qualifiedname>BCountry::GetPreferredLanguage</qualifiedname>
        <param>
          <type>BLanguage &amp;</type>
          <defname>language</defname>
        </param>
        <briefdescription>
<para>Get the most likely language to use in that country. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a BLanguage to set to the preferred language.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, B_OK if everything went fine, or an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1aeb619b42fa62733dcca1e4e58697c506" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCountry::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BCountry::InitCheck</qualifiedname>
        <briefdescription>
<para>Check validity of the <ref refid="classBCountry" kindref="compound">BCountry</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>B_OK if everything went fine, B_BAD_DATA if the specified country code is not valid, B_NO_MEMORY if the object could not be allocated properly.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1a3f5228d4016eaed9465b61843a3d628a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBCountry" kindref="compound">BCountry</ref> &amp;</type>
        <definition>BCountry &amp; BCountry::operator=</definition>
        <argsstring>(const BCountry &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BCountry::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBCountry" kindref="compound">BCountry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classBCountry" kindref="compound">BCountry</ref> from another <ref refid="classBCountry" kindref="compound">BCountry</ref> object by overloading the = operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBCountry" kindref="compound">BCountry</ref> object to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="32" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBCountry_1ac682ea0490fe9d3171e040cd570b1b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BCountry::SetTo</definition>
        <argsstring>(const char *countryCode)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BCountry::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>countryCode</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classBCountry" kindref="compound">BCountry</ref> from a country code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>countryCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The country code to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Same value as InitCheck.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="35" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class representing a country. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBCountry" kindref="compound">BCountry</ref> provides information about a particular country including the countries flag (as an HVIF icon), the localized name of the country, and the ISO country code.</para>
<para>Date, time, and number formatting also depends to some extent on the language used so they are found in the <ref refid="classBLocale" kindref="compound">BLocale</ref> class instead.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/locale/Country.h" line="28" column="1" bodyfile="/boot/home/src/haiku/headers/os/locale/Country.h" bodystart="28" bodyend="56"/>
    <listofallmembers>
      <member refid="classBCountry_1a290207a5b58c8160bf1f4d7dc767cefb" prot="public" virt="non-virtual"><scope>BCountry</scope><name>BCountry</name></member>
      <member refid="classBCountry_1a1cc78037ab1ac3f7c7fc294666a60b67" prot="public" virt="non-virtual"><scope>BCountry</scope><name>BCountry</name></member>
      <member refid="classBCountry_1a9c13a56f8ff4b13eae2cb9eb667fda32" prot="public" virt="non-virtual"><scope>BCountry</scope><name>Code</name></member>
      <member refid="classBCountry_1af1c85e5c7b02bc170d567d9c55c09caa" prot="private" virt="non-virtual"><scope>BCountry</scope><name>fICULocale</name></member>
      <member refid="classBCountry_1a3255fb8cb4d0cb3044774be082b55e4c" prot="public" virt="non-virtual"><scope>BCountry</scope><name>GetAvailableTimeZones</name></member>
      <member refid="classBCountry_1a56bf64fc40d482e07b7a882b1cadb318" prot="public" virt="non-virtual"><scope>BCountry</scope><name>GetIcon</name></member>
      <member refid="classBCountry_1a3c3c64cd01d7371e1be172eea7a72a85" prot="public" virt="non-virtual"><scope>BCountry</scope><name>GetName</name></member>
      <member refid="classBCountry_1ad38c2f544a91cc4034db3047752c1ee9" prot="public" virt="non-virtual"><scope>BCountry</scope><name>GetNativeName</name></member>
      <member refid="classBCountry_1a63a919b79114ab9e50afc2a3bf168951" prot="public" virt="non-virtual"><scope>BCountry</scope><name>GetPreferredLanguage</name></member>
      <member refid="classBCountry_1aeb619b42fa62733dcca1e4e58697c506" prot="public" virt="non-virtual"><scope>BCountry</scope><name>InitCheck</name></member>
      <member refid="classBCountry_1a3f5228d4016eaed9465b61843a3d628a" prot="public" virt="non-virtual"><scope>BCountry</scope><name>operator=</name></member>
      <member refid="classBCountry_1ac682ea0490fe9d3171e040cd570b1b90" prot="public" virt="non-virtual"><scope>BCountry</scope><name>SetTo</name></member>
      <member refid="classBCountry_1a2a01929a0ca287b74463ff981e228a44" prot="public" virt="non-virtual"><scope>BCountry</scope><name>~BCountry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
