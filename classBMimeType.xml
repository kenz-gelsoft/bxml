<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMimeType" kind="class" language="C++" prot="public">
    <compoundname>BMimeType</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBMimeType_1a96531599aed77b6140abaf31d0b45e21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BAppFileInfo</definition>
        <argsstring></argsstring>
        <name>BAppFileInfo</name>
        <qualifiedname>BMimeType::BAppFileInfo</qualifiedname>
        <param>
          <type><ref refid="classBAppFileInfo" kindref="compound">BAppFileInfo</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="161" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMimeType_1ad1746101ae2be23630212df2e25e1c29" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MimeTypeTest</definition>
        <argsstring></argsstring>
        <name>MimeTypeTest</name>
        <qualifiedname>BMimeType::MimeTypeTest</qualifiedname>
        <param>
          <type>MimeTypeTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="158" column="14" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMimeType_1ab9006b4613d3b54c5a3685bd37cdac50" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMimeType::_reserved[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMimeType::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="181" column="7" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMimeType_1ae0a73dcf2040f903dbbf807f7afc4960" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* BMimeType::_unused</definition>
        <argsstring></argsstring>
        <name>_unused</name>
        <qualifiedname>BMimeType::_unused</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="178" column="5" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMimeType_1abbf60ec22e09ff526c989fda134977f4" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::fCStatus</definition>
        <argsstring></argsstring>
        <name>fCStatus</name>
        <qualifiedname>BMimeType::fCStatus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="180" column="9" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMimeType_1aab7631ec44094dc0a4f563f04efed76e" prot="private" static="no" mutable="no">
        <type><ref refid="classBFile" kindref="compound">BFile</ref> *</type>
        <definition>BFile* BMimeType::fMeta</definition>
        <argsstring></argsstring>
        <name>fMeta</name>
        <qualifiedname>BMimeType::fMeta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="177" column="6" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMimeType_1a3f8a57c32476ddfa865a77e672898877" prot="private" static="no" mutable="no">
        <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref></type>
        <definition>entry_ref BMimeType::fRef</definition>
        <argsstring></argsstring>
        <name>fRef</name>
        <qualifiedname>BMimeType::fRef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="179" column="10" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMimeType_1a398fbd3e1697aa025c5bb4c128e83675" prot="private" static="no" mutable="no">
        <type>char *</type>
        <definition>char* BMimeType::fType</definition>
        <argsstring></argsstring>
        <name>fType</name>
        <qualifiedname>BMimeType::fType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="176" column="5" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMimeType_1a1fdf3459c8af726c9846770d7aea5e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMimeType::BMimeType</definition>
        <argsstring>()</argsstring>
        <name>BMimeType</name>
        <qualifiedname>BMimeType::BMimeType</qualifiedname>
        <briefdescription>
<para>Creates an uninitialized <ref refid="classBMimeType" kindref="compound">BMimeType</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a9a0f254e32643872f7c2379bb20b634a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMimeType::BMimeType</definition>
        <argsstring>(const char *mimeType)</argsstring>
        <name>BMimeType</name>
        <qualifiedname>BMimeType::BMimeType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>mimeType</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classBMimeType" kindref="compound">BMimeType</ref> object and initializes it to the supplied MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The supplied string must specify a valid MIME type or supertype.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMimeType_1ab4eb64b2e47f111b796e641ffa624046" kindref="member">SetTo()</ref> for further information.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a6a3cc1a25aa82d1bad7e10b25f169991" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BMimeType::~BMimeType</definition>
        <argsstring>()</argsstring>
        <name>~BMimeType</name>
        <qualifiedname>BMimeType::~BMimeType</qualifiedname>
        <briefdescription>
<para>Frees all resources associated with this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="78" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a1f5de6e7f1349432a061664e4764a101" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMimeType::Contains</definition>
        <argsstring>(const BMimeType *type) const</argsstring>
        <name>Contains</name>
        <qualifiedname>BMimeType::Contains</qualifiedname>
        <param>
          <type>const <ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns whether this MIME type is a supertype of or equals the supplied one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if this MIME type is a supertype of or equals the supplied one, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="93" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a928153d3227956971ee5e0d7ad23bbfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::Delete</definition>
        <argsstring>()</argsstring>
        <name>Delete</name>
        <qualifiedname>BMimeType::Delete</qualifiedname>
        <briefdescription>
<para>Removes the MIME type from the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>To check if the MIME type is already installed, call <computeroutput><ref refid="classBMimeType_1aa6988f049900d2c19c333da3a9fb0428" kindref="member">IsInstalled()</ref></computeroutput>. To add the MIME type to the database, call <computeroutput><ref refid="classBMimeType_1a79f20914ab176d2b7a6b3e41a3387dc4" kindref="member">Install()</ref></computeroutput>.</para>
<para><simplesect kind="note"><para>Calling <computeroutput><ref refid="classBMimeType_1a928153d3227956971ee5e0d7ad23bbfd" kindref="member">BMimeType::Delete()</ref></computeroutput> does not uninitialize or otherwise deallocate the <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object; it simply removes the type from the database.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="97" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ab2768b8a9e6254791cd6628a58675115" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetAppHint</definition>
        <argsstring>(entry_ref *ref) const</argsstring>
        <name>GetAppHint</name>
        <qualifiedname>BMimeType::GetAppHint</qualifiedname>
        <param>
          <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Fetches an <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> that serves as a hint as to where the MIME type&apos;s preferred application might live. </para>
        </briefdescription>
        <detaileddescription>
<para>The app hint is a path that identifies the executable that should be used when launching an application that has this signature. For example, when Tracker needs to launch an app of type <computeroutput>&quot;application/YourAppHere&quot;</computeroutput>, it asks the database for the application hint. This hint is converted to an <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> before it is passed to the caller. Of course, the path may not point to an application, or it might point to an application with the wrong signature (and so on); that&apos;s why this is merely a hint.</para>
<para>The <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> pointed to by <computeroutput>ref</computeroutput> must be pre-allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> into which the location of the app hint is copied. If the function fails, the contents of the <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> are undefined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, B_OK on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The ref was retrieved successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No app hint existed for the given <emphasis>ref</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="123" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a9018ca198dd5ca710326f6601fc58fb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetAttrInfo</definition>
        <argsstring>(BMessage *info) const</argsstring>
        <name>GetAttrInfo</name>
        <qualifiedname>BMimeType::GetAttrInfo</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Fetches from the MIME database a <ref refid="classBMessage" kindref="compound">BMessage</ref> describing the attributes typically associated with files of the given MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute information is returned in a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> pointed to by the <computeroutput>info</computeroutput> parameter (note that the any prior contents of the message will be destroyed). If the method succeeds, the format of the <ref refid="classBMessage" kindref="compound">BMessage</ref> pointed to by <computeroutput>info</computeroutput> will be the following:</para>
<para><table rows="6" cols="3"><row>
<entry thead="no"><para><bold>field name</bold> </para>
</entry><entry thead="no"><para><bold>type</bold> </para>
</entry><entry thead="no"><para><bold>element[0..n]</bold>  </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:name&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_STRING_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The name of each attribute   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:public_name&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_STRING_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The human-readable name of each attribute   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:type&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_INT32_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The type code for each attribute   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:viewable&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_BOOL_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>For each attribute: <computeroutput>true</computeroutput> if the attribute is public, <computeroutput>false</computeroutput> if it&apos;s private   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:editable&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_BOOL_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>For each attribute: <computeroutput>true</computeroutput> if the attribute should be user editable, <computeroutput>false</computeroutput> if not   </para>
</entry></row>
</table>
</para>
<para>The <computeroutput><ref refid="classBMessage_1ad074faab0857f51fba778f0d8558df1e" kindref="member">BMessage::what</ref></computeroutput> value is set to decimal <computeroutput>233</computeroutput>, but is otherwise meaningless.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> into which information about the MIME type&apos;s associated file attributes is stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMimeType_1ac95cc9cea6b036d9b7baec668cf32822" kindref="member">SetAttrInfo()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="102" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a353aea2c7e048f66912b67e1c29a852d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetFileExtensions</definition>
        <argsstring>(BMessage *extensions) const</argsstring>
        <name>GetFileExtensions</name>
        <qualifiedname>BMimeType::GetFileExtensions</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
<para>Fetches the MIME type&apos;s associated filename extensions from the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>The MIME database associates a list of filename extensions (a character string following the rightmost dot, <computeroutput>&quot;.&quot;</computeroutput>, character in the filename) with each type. These extensions can then be used to help determine the type of any untyped files that may be encountered.</para>
<para>The list of extensions is returned in a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> pointed to by the <computeroutput>extensions</computeroutput> parameter (note that the any prior contents of the message will be destroyed). If the method succeeds, the format of the <ref refid="classBMessage" kindref="compound">BMessage</ref> pointed to by <computeroutput>extensions</computeroutput> will be the following:</para>
<para><itemizedlist>
<listitem><para>The message&apos;s <computeroutput>&quot;extensions&quot;</computeroutput> field will contain an indexed array of strings, one for each extension. The extensions are given without the preceding <computeroutput>&quot;.&quot;</computeroutput> character by convention.</para>
</listitem><listitem><para>The message&apos;s <computeroutput>&quot;type&quot;</computeroutput> field will be a string containing the MIME type whose associated file extensions you are fetching.</para>
</listitem><listitem><para>The <computeroutput>what</computeroutput> member of the <ref refid="classBMessage" kindref="compound">BMessage</ref> will be set to <computeroutput>234</computeroutput>, but is otherwise irrelevant.</para>
</listitem></itemizedlist>
</para>
<para>Note that any other fields present in the <ref refid="classBMessage" kindref="compound">BMessage</ref> passed to the most recent <computeroutput><ref refid="classBMimeType_1a0a4dc7205fa52a36a84b9c0b6ed1d904" kindref="member">SetFileExtensions()</ref></computeroutput> call will also be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>extensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> into which the MIME type&apos;s associated file extensions will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMimeType_1a0a4dc7205fa52a36a84b9c0b6ed1d904" kindref="member">SetFileExtensions()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="103" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1af549bda9abf4470f838333a4c99d541c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetIcon</definition>
        <argsstring>(BBitmap *icon, icon_size size) const</argsstring>
        <name>GetIcon</name>
        <qualifiedname>BMimeType::GetIcon</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Fetches the large or mini icon associated with the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The icon is copied into the <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> pointed to by <computeroutput>icon</computeroutput>. The bitmap must be the proper size: <computeroutput>32x32</computeroutput> for the large icon, <computeroutput>16x16</computeroutput> for the mini icon. Additionally, the bitmap must be in the <computeroutput>B_CMAP8</computeroutput> color space (8-bit color).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> of proper size and colorspace into which the icon is copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that specifies which icon to return. Currently <computeroutput>B_LARGE_ICON</computeroutput> and <computeroutput>B_MINI_ICON</computeroutput> are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No icon of the given size exists for the given type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="99" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a3e787905dd154ab589f80f805ed01ef1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetIcon</definition>
        <argsstring>(uint8 **_data, size_t *_size) const</argsstring>
        <name>GetIcon</name>
        <qualifiedname>BMimeType::GetIcon</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> **</type>
          <declname>_data</declname>
          <defname>data</defname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>_size</declname>
          <defname>size</defname>
        </param>
        <briefdescription>
<para>Fetches the vector icon associated with the MIME type The icon data is returned in <computeroutput>data</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer in which the allocated icon data is returned. You need to delete the buffer when you are done with it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer in which the size of the allocated icon data is returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No icon of the given size found for the given type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ad1f67fec0e6ca8c244c10c0ab41e9d34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetIconForType</definition>
        <argsstring>(const char *type, BBitmap *icon, icon_size which) const</argsstring>
        <name>GetIconForType</name>
        <qualifiedname>BMimeType::GetIconForType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Fetches the large or mini icon used by an application of this type for files of the given type. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be confusing, so here&apos;s how this function is intended to be used:<itemizedlist>
<listitem><para>The actual <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object should be set to the MIME signature of an application for whom you want to look up custom icons for custom MIME types.</para>
</listitem><listitem><para>The <computeroutput>type</computeroutput> parameter specifies the file type whose custom icon you are fetching.</para>
</listitem></itemizedlist>
</para>
<para>The type of the <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object is not required to actually be a subtype of <computeroutput>&quot;application/&quot;</computeroutput>; that is the intended use however, and calling <computeroutput><ref refid="classBMimeType_1ad1f67fec0e6ca8c244c10c0ab41e9d34" kindref="member">GetIconForType()</ref></computeroutput> on a non-application type will likely return <computeroutput>B_ENTRY_NOT_FOUND</computeroutput>.</para>
<para>The icon is copied into the <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> pointed to by <computeroutput>icon</computeroutput>. The bitmap must be the proper size: <computeroutput>32x32</computeroutput> for the large icon, <computeroutput>16x16</computeroutput> for the mini icon. Additionally, the bitmap must be in the <computeroutput>B_CMAP8</computeroutput> color space (8-bit color).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string containing the MIME type whose custom icon you wish to fetch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> of proper size and colorspace into which the icon is copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that specifies which icon to return. Currently <computeroutput>B_LARGE_ICON</computeroutput> and <computeroutput>B_MINI_ICON</computeroutput> are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No icon of the given size exists for the given type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1aa10038e1db9d8669320c2d8690db8cad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetIconForType</definition>
        <argsstring>(const char *type, uint8 **_data, size_t *_size) const</argsstring>
        <name>GetIconForType</name>
        <qualifiedname>BMimeType::GetIconForType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> **</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
<para>Fetches the vector icon used by an application of this type for files of the given type. </para>
        </briefdescription>
        <detaileddescription>
<para>The icon data is returned in <computeroutput>data</computeroutput>. See the other <ref refid="classBMimeType_1ad1f67fec0e6ca8c244c10c0ab41e9d34" kindref="member">GetIconForType()</ref> for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string containing the MIME type whose custom icon you wish to fetch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer in which the allocated icon data is returned. You need to delete the buffer when you are done with it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer in which the size of the allocated icon data is filled out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code otherwise. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No icon of the given size exists for the given type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="129" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a8f0f647361c5f2873e8d4b474a96cf62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetLongDescription</definition>
        <argsstring>(char *description) const</argsstring>
        <name>GetLongDescription</name>
        <qualifiedname>BMimeType::GetLongDescription</qualifiedname>
        <param>
          <type>char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Fetches the MIME type&apos;s long description from the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>The string pointed to by <computeroutput>description</computeroutput> must be long enough to hold the long description; a length of <computeroutput>B_MIME_TYPE_LENGTH</computeroutput> is recommended.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string into which the long description is copied. If the function fails, the contents of the string are undefined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No long description exists for the given type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMimeType_1ad976818e62d2f12542f05fc6ca49b49d" kindref="member">SetLongDescription()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="105" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ac2b36e26d733f92749823a78c800a416" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetPreferredApp</definition>
        <argsstring>(char *signature, app_verb verb=B_OPEN) const</argsstring>
        <name>GetPreferredApp</name>
        <qualifiedname>BMimeType::GetPreferredApp</qualifiedname>
        <param>
          <type>char *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>app_verb</type>
          <declname>verb</declname>
          <defval>B_OPEN</defval>
        </param>
        <briefdescription>
<para>Fetches the signature of the preferred application from the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>The preferred app is the application that&apos;s used to access a file when, for example, the user double-clicks the file in a Tracker window. Unless the file identifies in its attributes a &quot;custom&quot; preferred app, Tracker will ask the file type database for the preferred app that&apos;s associated with the file&apos;s type.</para>
<para>The string pointed to by <computeroutput>signature</computeroutput> must be long enough to hold the preferred applications signature; a length of <computeroutput>B_MIME_TYPE_LENGTH</computeroutput> is recommended.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string into which the signature of the preferred app is copied. If the function fails, the contents of the string are undefined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>app_verb</computeroutput> value that specifies the type of access for which you are requesting the preferred app. Currently, the only supported app verb is <computeroutput>B_OPEN</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No preferred app exists for the given type and app_verb. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMimeType_1aa4ec5c9f0e4bd29872bd525b7ce5dbd0" kindref="member">SetPreferredApp()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a35f404ae1c8942d91ef901c81f5d3392" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetShortDescription</definition>
        <argsstring>(char *description) const</argsstring>
        <name>GetShortDescription</name>
        <qualifiedname>BMimeType::GetShortDescription</qualifiedname>
        <param>
          <type>char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Fetches the MIME type&apos;s short description from the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>The string pointed to by <computeroutput>description</computeroutput> must be long enough to hold the short description; a length of <computeroutput>B_MIME_TYPE_LENGTH</computeroutput> is recommended.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string into which the long description is copied. If the function fails, the contents of the string are undefined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Success </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>No short description exists for the given type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMimeType_1a5d46d51dd1665d49f2c91e46721c6bb4" kindref="member">SetShortDescription()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ad6294a567022c4fb4b22f797d3fae6aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetSnifferRule</definition>
        <argsstring>(BString *result) const</argsstring>
        <name>GetSnifferRule</name>
        <qualifiedname>BMimeType::GetSnifferRule</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Retrieves the MIME type&apos;s sniffer rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBString" kindref="compound">BString</ref> into which the value is copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>result</emphasis> or uninitialized <ref refid="classBMimeType" kindref="compound">BMimeType</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_ENTRY_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME type is not installed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMimeType_1ab9da3155010b5f6d1a0868ca202b1ab9" kindref="member">SetSnifferRule()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="137" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1aae9ee70db2704a737a05ff073d97a850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetSupertype</definition>
        <argsstring>(BMimeType *supertype) const</argsstring>
        <name>GetSupertype</name>
        <qualifiedname>BMimeType::GetSupertype</qualifiedname>
        <param>
          <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>supertype</declname>
        </param>
        <briefdescription>
<para>Gets the <emphasis>supertype</emphasis> of the MIME type represented by this object. </para>
        </briefdescription>
        <detaileddescription>
<para>The supplied object is initialized to this object&apos;s <emphasis>supertype</emphasis>. If this <ref refid="classBMimeType" kindref="compound">BMimeType</ref> is not properly initialized, the supplied object will be <ref refid="classBMimeType_1a24cc52aecc8310fdc109b7afa827040b" kindref="member">Unset()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>supertype</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="classBMimeType" kindref="compound">BMimeType</ref> object that shall be initialized to this object&apos;s <emphasis>supertype</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>superType</emphasis>, this object is not initialized, or this object is a supertype only. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="88" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a32e1d909b97c84d943ac50467e56fc3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetSupportingApps</definition>
        <argsstring>(BMessage *signatures) const</argsstring>
        <name>GetSupportingApps</name>
        <qualifiedname>BMimeType::GetSupportingApps</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>signatures</declname>
        </param>
        <briefdescription>
<para>Fetches a <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> containing a list of MIME signatures of applications that are able to handle files of this MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>If successful, the <ref refid="classBMessage" kindref="compound">BMessage</ref> containing the MIME signatures will be of the following format:</para>
<para><table rows="4" cols="3"><row>
<entry thead="no"><para><bold>field name</bold> </para>
</entry><entry thead="no"><para><bold>type</bold> </para>
</entry><entry thead="no"><para><bold>contains</bold>  </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;applications&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_STRING_TYPE</computeroutput>[]  </para>
</entry><entry thead="no"><para>An array of MIME signatures. The first <emphasis> n </emphasis> signatures (where <emphasis> n </emphasis> is the value in the <computeroutput>&quot;be:sub&quot;</computeroutput> field of the message) are able to handle the full type (supertype <emphasis> and </emphasis> subtype). The remaining signatures are of applications that handle the supertype only.   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;be:sub&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_INT32_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The number of applications in the <computeroutput>&quot;applications&quot;</computeroutput> array that can handle the object&apos;s full MIME type. These applications are listed first in the array. This field is omitted if the object represents a supertype only.   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;be:super&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_INT32_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The number of applications in the &quot;applications&quot; array that can handle the object&apos;s supertype (not counting those that can handle the full type). These applications are listed after the full-MIME-type supporters. By definition, the <computeroutput><ref refid="classBMimeType_1a21419efb577f0a7bdae84c1b700bf12f" kindref="member">GetWildcardApps()</ref></computeroutput> function never returns supertype-only apps.   </para>
</entry></row>
</table>
</para>
<para>The <computeroutput><ref refid="classBMessage_1ad074faab0857f51fba778f0d8558df1e" kindref="member">BMessage::what</ref></computeroutput> value is meaningless and should be ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signatures</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> into which the signatures of the supporting applications will be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or an error code on failure.</para>
</simplesect>
<simplesect kind="see"><para>SetSupportingApps()</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="106" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a5a1c59c7ad858324d50a3f419bc285d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BMimeType::InitCheck</qualifiedname>
        <briefdescription>
<para>Returns the result of the most recent constructor or <ref refid="classBMimeType_1ab4eb64b2e47f111b796e641ffa624046" kindref="member">SetTo()</ref> call. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>B_OK</computeroutput> If the object is properly initialized, a specific error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="82" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a79f20914ab176d2b7a6b3e41a3387dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::Install</definition>
        <argsstring>()</argsstring>
        <name>Install</name>
        <qualifiedname>BMimeType::Install</qualifiedname>
        <briefdescription>
<para>Adds the MIME type to the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>To check if the MIME type is already installed, call <computeroutput><ref refid="classBMimeType_1aa6988f049900d2c19c333da3a9fb0428" kindref="member">IsInstalled()</ref></computeroutput>. To remove the MIME type from the database, call <computeroutput><ref refid="classBMimeType_1a928153d3227956971ee5e0d7ad23bbfd" kindref="member">Delete()</ref></computeroutput>.</para>
<para><simplesect kind="note"><para>The R5 implementation returns random values if the type is already installed, so be sure to check <computeroutput><ref refid="classBMimeType_1aa6988f049900d2c19c333da3a9fb0428" kindref="member">IsInstalled()</ref></computeroutput> first.</para>
</simplesect>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMimeType_1a928153d3227956971ee5e0d7ad23bbfd" kindref="member">Delete()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="96" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1aa6988f049900d2c19c333da3a9fb0428" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMimeType::IsInstalled</definition>
        <argsstring>() const</argsstring>
        <name>IsInstalled</name>
        <qualifiedname>BMimeType::IsInstalled</qualifiedname>
        <briefdescription>
<para>Returns whether or not this type is currently installed in the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>To add the MIME type to the database, call <computeroutput><ref refid="classBMimeType_1a79f20914ab176d2b7a6b3e41a3387dc4" kindref="member">Install()</ref></computeroutput>. To remove the MIME type from the database, call <computeroutput><ref refid="classBMimeType_1a928153d3227956971ee5e0d7ad23bbfd" kindref="member">Delete()</ref></computeroutput>.</para>
<para><simplesect kind="return"><para>A <computeroutput>bool</computeroutput> indicating whether or not this type is currently installed in the MIME database. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME type is currently installed in the database. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME type is not currently installed in the database.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="98" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1aa952ebae10a18465f89bdf22a6b32762" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMimeType::IsSupertypeOnly</definition>
        <argsstring>() const</argsstring>
        <name>IsSupertypeOnly</name>
        <qualifiedname>BMimeType::IsSupertypeOnly</qualifiedname>
        <briefdescription>
<para>Returns whether this objects represents a supertype. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput>, if the object is properly initialized and represents a supertype, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="87" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a12c9b6d8c40c1f505d0d7c04a299914b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMimeType::IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <qualifiedname>BMimeType::IsValid</qualifiedname>
        <briefdescription>
<para>Returns whether the object represents a valid MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput>, if the object is properly initialized, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMimeType_1ab4eb64b2e47f111b796e641ffa624046" kindref="member">SetTo()</ref> for further information.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="86" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a670f3b9ab71f46c85315c83fe3e2aa78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMimeType::operator==</definition>
        <argsstring>(const BMimeType &amp;type) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BMimeType::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBMimeType" kindref="compound">BMimeType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns whether this and the supplied MIME type are equal. </para>
        </briefdescription>
        <detaileddescription>
<para>Two <ref refid="classBMimeType" kindref="compound">BMimeType</ref> objects are said to be equal if they represent the same MIME string, ignoring case, or if both are not initialized.</para>
<para><simplesect kind="warning"><para>In BeOS R5 two uninitialized <ref refid="classBMimeType" kindref="compound">BMimeType</ref> objects were not considered to be equal, in Haiku they are.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBMimeType" kindref="compound">BMimeType</ref> to be compared with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the objects are equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="90" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a303623e252ecf9932ae2c735d6774add" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMimeType::operator==</definition>
        <argsstring>(const char *type) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BMimeType::operator==</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns whether this and the supplied MIME type are equal. </para>
        </briefdescription>
        <detaileddescription>
<para>A <ref refid="classBMimeType" kindref="compound">BMimeType</ref> objects equals a MIME string, if its MIME string equals the latter one, ignoring case, or if it is uninitialized and the MIME string is <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="warning"><para>In BeOS R5 an uninitialized <ref refid="classBMimeType" kindref="compound">BMimeType</ref> object was not considered to be equal to <computeroutput>NULL</computeroutput>, in Haiku it is.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME string to be compared with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the MIME types are equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="91" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a3308b9ea259de72cc79d5a3a84c9aa13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetAppHint</definition>
        <argsstring>(const entry_ref *ref)</argsstring>
        <name>SetAppHint</name>
        <qualifiedname>BMimeType::SetAppHint</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Sets the app hint field for the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The app hint is a path that identifies the executable that should be used when launching an application that has this signature. For example, when Tracker needs to launch an app of type <computeroutput>&quot;application/YourAppHere&quot;</computeroutput>, it asks the database for the application hint. This hint is converted to an <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> before it is passed to the caller. Of course, the path may not point to an application, or it might point to an application with the wrong signature (and so on); that&apos;s why this is merely a hint.</para>
<para>The <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> pointed to by <computeroutput>ref</computeroutput> must be pre-allocated. It must be a valid <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> (i.e. <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref>(-1, -1, &quot;some_file&quot;)</computeroutput> will trigger an error), but it need not point to an existing file, nor need it actually point to an application. That&apos;s not to say that it shouldn&apos;t; such an <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> would render the app hint useless.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="structentry__ref" kindref="compound">entry_ref</ref></computeroutput> containting the location of the new app hint</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The ref was retrieved successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>ref</emphasis> was <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="124" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ac95cc9cea6b036d9b7baec668cf32822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>since BeOS R3 *status_t BMimeType::SetAttrInfo</definition>
        <argsstring>(const BMessage *info)</argsstring>
        <name>SetAttrInfo</name>
        <qualifiedname>BMimeType::SetAttrInfo</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Sets the description of the attributes typically associated with files of the given MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute information is technically arbitrary, but the expected format of the <ref refid="classBMessage" kindref="compound">BMessage</ref> pointed to by the <computeroutput>info</computeroutput> parameter is as follows:</para>
<para><table rows="6" cols="3"><row>
<entry thead="no"><para><bold>field name</bold> </para>
</entry><entry thead="no"><para><bold>type</bold> </para>
</entry><entry thead="no"><para><bold>element[0..n]</bold>  </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:name&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_STRING_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The name of each attribute   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:public_name&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_STRING_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The human-readable name of each attribute   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:type&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_INT32_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>The type code for each attribute   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:viewable&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_BOOL_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>For each attribute: <computeroutput>true</computeroutput> if the attribute is public, <computeroutput>false</computeroutput> if it&apos;s private   </para>
</entry></row>
<row>
<entry thead="no"><para>&quot;attr:editable&quot; </para>
</entry><entry thead="no"><para><computeroutput>B_BOOL_TYPE</computeroutput>  </para>
</entry><entry thead="no"><para>For each attribute: <computeroutput>true</computeroutput> if the attribute should be user editable, <computeroutput>false</computeroutput> if not   </para>
</entry></row>
</table>
</para>
<para>The <computeroutput><ref refid="classBMessage_1ad074faab0857f51fba778f0d8558df1e" kindref="member">BMessage::what</ref></computeroutput> value is ignored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated and properly formatted <ref refid="classBMessage" kindref="compound">BMessage</ref> containing information about the file attributes typically associated with the MIME type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="111" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a0a4dc7205fa52a36a84b9c0b6ed1d904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetFileExtensions</definition>
        <argsstring>(const BMessage *extensions)</argsstring>
        <name>SetFileExtensions</name>
        <qualifiedname>BMimeType::SetFileExtensions</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
<para>Sets the list of filename extensions associated with the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The MIME database associates a list of filename extensions (a character string following the rightmost dot, <computeroutput>&quot;.&quot;</computeroutput>, character in the filename) with each type. These extensions can then be used to help determine the type of any untyped files that may be encountered.</para>
<para>The list of extensions is given in a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> pointed to by the <computeroutput>extensions</computeroutput> parameter. The format of the message should be as follows:<itemizedlist>
<listitem><para>The message&apos;s <computeroutput>&quot;extensions&quot;</computeroutput> field should contain an indexed array of strings, one for each extension. The extensions are to be given without the preceding <computeroutput>&quot;.&quot;</computeroutput> character (i.e. <computeroutput>&quot;html&quot;</computeroutput> or <computeroutput>&quot;mp3&quot;</computeroutput>, not <computeroutput>&quot;.html&quot;</computeroutput> or <computeroutput>&quot;.mp3&quot;</computeroutput> ).</para>
</listitem><listitem><para>The <computeroutput>what</computeroutput> member of the <ref refid="classBMessage" kindref="compound">BMessage</ref> is ignored.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Any other fields present in the <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> will currently be retained and returned by calls to <computeroutput><ref refid="classBMimeType_1a353aea2c7e048f66912b67e1c29a852d" kindref="member">GetFileExtensions()</ref></computeroutput>; however, this may change in the future, so it is recommended that you not rely on this behavior, and that no other fields be present. Also, note that no checking is performed to verify the <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> is properly formatted; it&apos;s up to you to do things right.</para>
</simplesect>
Finally, bear in mind that <computeroutput><ref refid="classBMimeType_1a0a4dc7205fa52a36a84b9c0b6ed1d904" kindref="member">SetFileExtensions()</ref></computeroutput> clobbers the existing set of extensions. If you want to augment a type&apos;s extensions, you should retrieve the existing set, add the new ones, and then call <computeroutput><ref refid="classBMimeType_1a0a4dc7205fa52a36a84b9c0b6ed1d904" kindref="member">SetFileExtensions()</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>extensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated, properly formatted <ref refid="classBMessage" kindref="compound">BMessage</ref> containing the new list of file extensions to associate with this MIME type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="112" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a44b252859ffae8b70bf9c8e70b0d9d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetIcon</definition>
        <argsstring>(const BBitmap *icon, icon_size size)</argsstring>
        <name>SetIcon</name>
        <qualifiedname>BMimeType::SetIcon</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>size</declname>
          <defname>which</defname>
        </param>
        <briefdescription>
<para>Sets the large or mini icon for the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The icon is copied from the <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> pointed to by <computeroutput>icon</computeroutput>. The bitmap must be the proper size: <computeroutput>32x32</computeroutput> for the large icon, <computeroutput>16x16</computeroutput> for the mini icon. Additionally, the bitmap must be in the <computeroutput>B_CMAP8</computeroutput> color space (8-bit color).</para>
<para>If you want to erase the current icon, pass <computeroutput>NULL</computeroutput> as the <computeroutput>icon</computeroutput> argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> of proper size and colorspace containing the new icon, or <computeroutput>NULL</computeroutput> to clear the current icon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that specifies which icon to update. Currently <computeroutput>B_LARGE_ICON</computeroutput> and <computeroutput>B_MINI_ICON</computeroutput> are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="108" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a9f75552ced0097078921f6be0730787d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetIcon</definition>
        <argsstring>(const uint8 *data, size_t size)</argsstring>
        <name>SetIcon</name>
        <qualifiedname>BMimeType::SetIcon</qualifiedname>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the vector icon for the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The icon is copied from the provided <emphasis>data</emphasis> which must contain <emphasis>size</emphasis> bytes.</para>
<para>If you want to erase the current icon, pass <computeroutput>NULL</computeroutput> as the <emphasis>data</emphasis> argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer containing the new icon, or <computeroutput>NULL</computeroutput> to clear the current icon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the provided buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1af4f299f8d833c42c693e5650c18c46b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetIconForType</definition>
        <argsstring>(const char *type, const BBitmap *icon, icon_size which)</argsstring>
        <name>SetIconForType</name>
        <qualifiedname>BMimeType::SetIconForType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>which</declname>
        </param>
        <briefdescription>
<para>Sets the large or mini icon used by an application of this type for files of the given <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be confusing, so here&apos;s how this function is intended to be used:<itemizedlist>
<listitem><para>The actual <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object should be set to the MIME signature of an application to whom you want to assign custom icons for custom MIME types.</para>
</listitem><listitem><para>The <computeroutput>type</computeroutput> parameter specifies the file type whose custom icon you are setting.</para>
</listitem></itemizedlist>
</para>
<para>The type of the <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object is not required to actually be a subtype of <computeroutput>&quot;application/&quot;</computeroutput>; that is the intended use however, and application-specific icons are not expected to be present for non-application types.</para>
<para>The icon is copied from the <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> pointed to by <computeroutput>icon</computeroutput>. The bitmap must be the proper size: <computeroutput>32x32</computeroutput> for the large icon, <computeroutput>16x16</computeroutput> for the mini icon.</para>
<para>If you want to erase the current icon, pass <computeroutput>NULL</computeroutput> as the <computeroutput>icon</computeroutput> argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string containing the MIME type whose custom icon you wish to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> of proper size and colorspace containing the new icon, or <computeroutput>NULL</computeroutput> to clear the current icon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para>Value that specifies which icon to update. Currently <computeroutput>B_LARGE_ICON</computeroutput> and <computeroutput>B_MINI_ICON</computeroutput> are supported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="131" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a7101fe71a0c72127edd4b80ccce9f4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetIconForType</definition>
        <argsstring>(const char *type, const uint8 *data, size_t size)</argsstring>
        <name>SetIconForType</name>
        <qualifiedname>BMimeType::SetIconForType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defname>dataSize</defname>
        </param>
        <briefdescription>
<para>Sets the icon used by an application of this type for files of the given <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be confusing, so here&apos;s how this function is intended to be used:<itemizedlist>
<listitem><para>The actual <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object should be set to the MIME signature of an application to whom you want to assign custom icons for custom MIME types.</para>
</listitem><listitem><para>The <computeroutput>type</computeroutput> parameter specifies the file type whose custom icon you are setting.</para>
</listitem></itemizedlist>
</para>
<para>The type of the <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object is not required to actually be a subtype of <computeroutput>&quot;application/&quot;</computeroutput>; that is the intended use however, and application-specific icons are not expected to be present for non-application types.</para>
<para>The icon is copied from the <computeroutput><ref refid="classBBitmap" kindref="compound">BBitmap</ref></computeroutput> pointed to by <computeroutput>icon</computeroutput>. The bitmap must be the proper size: <computeroutput>32x32</computeroutput> for the large icon, <computeroutput>16x16</computeroutput> for the mini icon.</para>
<para>If you want to erase the current icon, pass <computeroutput>NULL</computeroutput> as the <computeroutput>icon</computeroutput> argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string containing the MIME type whose custom icon you wish to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated uint8 array of the proper size to contain the new icon, or <computeroutput>NULL</computeroutput> to clear the current icon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of <emphasis>data</emphasis> in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="133" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ad976818e62d2f12542f05fc6ca49b49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetLongDescription</definition>
        <argsstring>(const char *description)</argsstring>
        <name>SetLongDescription</name>
        <qualifiedname>BMimeType::SetLongDescription</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Sets the long description field for the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The string pointed to by <computeroutput>description</computeroutput> must be of length less than <computeroutput>B_MIME_TYPE_LENGTH</computeroutput> characters.</para>
<para><simplesect kind="note"><para>If the MIME type is not installed, it will first be installed, and then the long description will be set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string containing the new long description</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="114" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1aa4ec5c9f0e4bd29872bd525b7ce5dbd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetPreferredApp</definition>
        <argsstring>(const char *signature, app_verb verb=B_OPEN)</argsstring>
        <name>SetPreferredApp</name>
        <qualifiedname>BMimeType::SetPreferredApp</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>app_verb</type>
          <declname>verb</declname>
          <defval>B_OPEN</defval>
        </param>
        <briefdescription>
<para>Sets the preferred application for the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The preferred app is the application that&apos;s used to access a file when, for example, the user double-clicks the file in a Tracker window. Unless the file identifies in its attributes a &quot;custom&quot; preferred app, Tracker will ask the file type database for the preferred app that&apos;s associated with the file&apos;s type.</para>
<para>The string pointed to by <computeroutput>signature</computeroutput> must be of length less than <computeroutput>B_MIME_TYPE_LENGTH</computeroutput> characters.</para>
<para><simplesect kind="note"><para>If the MIME type is not installed, it will first be installed, and then the preferred app will be set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string containing the signature of the new preferred app. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>app_verb</computeroutput> value that specifies the type of access for which you are setting the preferred app. Currently, the only supported app verb is <computeroutput>B_OPEN</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="110" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a5d46d51dd1665d49f2c91e46721c6bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetShortDescription</definition>
        <argsstring>(const char *description)</argsstring>
        <name>SetShortDescription</name>
        <qualifiedname>BMimeType::SetShortDescription</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Sets the short description field for the MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The string pointed to by <computeroutput>description</computeroutput> must be of length less than <computeroutput>B_MIME_TYPE_LENGTH</computeroutput> characters.</para>
<para><simplesect kind="note"><para>If the MIME type is not installed, it will first be installed, and then the short description will be set.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated string containing the new short description.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="113" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ab9da3155010b5f6d1a0868ca202b1ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetSnifferRule</definition>
        <argsstring>(const char *)</argsstring>
        <name>SetSnifferRule</name>
        <qualifiedname>BMimeType::SetSnifferRule</qualifiedname>
        <param>
          <type>const char *</type>
          <defname>rule</defname>
        </param>
        <briefdescription>
<para>Sets the MIME type&apos;s sniffer rule. </para>
        </briefdescription>
        <detaileddescription>
<para>If the supplied <emphasis>rule</emphasis> is <computeroutput>NULL</computeroutput>, the MIME type&apos;s sniffer rule is unset.</para>
<para><ref refid="classBMimeType_1ab9da3155010b5f6d1a0868ca202b1ab9" kindref="member">SetSnifferRule()</ref> does also return <computeroutput>B_OK</computeroutput>, if the type is not installed, but the call will have no effect in this case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>The rule string, may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Uninitialized <ref refid="classBMimeType" kindref="compound">BMimeType</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_MIME_SNIFFER_RULE</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied sniffer rule is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBMimeType_1a7e1d370ef1e52b167ac7cee93ca1410e" kindref="member">CheckSnifferRule()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="138" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ab4eb64b2e47f111b796e641ffa624046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetTo</definition>
        <argsstring>(const char *mimeType)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BMimeType::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>mimeType</declname>
        </param>
        <briefdescription>
<para>Initializes this object to the supplied MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para>The supplied string must specify a valid MIME type or supertype. Valid MIME types are given by the following grammar:</para>
<para>MIMEType ::= Supertype &quot;/&quot; [ Subtype ] Supertype ::= &quot;application&quot; | &quot;audio&quot; | &quot;image&quot; | &quot;message&quot; | &quot;multipart&quot; | &quot;text&quot; | &quot;video&quot; Subtype ::= MIMEChar MIMEChar* MIMEChar ::= any character except white spaces, CTLs and &apos;/&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, &apos;@&apos;,, &apos;,&apos;, &apos;;&apos;, &apos;:&apos;, &apos;&quot;&apos;, &apos;(&apos;, &apos;)&apos;, &apos;[&apos;, &apos;]&apos;, &apos;?&apos;, &apos;=&apos;, &apos;\&apos; (Note: RFC1341 also forbits &apos;.&apos;, but it is allowed here.)</para>
<para>Currently the supertype is not restricted to one of the seven types given, but can be an arbitrary string (obeying the same rule as the subtype). Nevertheless it is a very bad idea to use another supertype. The supplied MIME string is copied; the caller retains the ownership.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid <emphasis>mimeType</emphasis> string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>Insufficient memory to copy the MIME string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="80" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a8c7dec5efadd37df42cbc2679777f980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetType</definition>
        <argsstring>(const char *mimeType)</argsstring>
        <name>SetType</name>
        <qualifiedname>BMimeType::SetType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>mimeType</declname>
        </param>
        <briefdescription>
<para>Initializes this object to the supplied MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="152" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a9b1e232d61a088a8197fdee7db580071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BMimeType::Type</definition>
        <argsstring>() const</argsstring>
        <name>Type</name>
        <qualifiedname>BMimeType::Type</qualifiedname>
        <briefdescription>
<para>Returns the MIME string represented by this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The MIME string, if the object is properly initialized, <computeroutput>NULL</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="85" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a24cc52aecc8310fdc109b7afa827040b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMimeType::Unset</definition>
        <argsstring>()</argsstring>
        <name>Unset</name>
        <qualifiedname>BMimeType::Unset</qualifiedname>
        <briefdescription>
<para>Returns the object to an uninitialized state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="81" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBMimeType_1a7e1d370ef1e52b167ac7cee93ca1410e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::CheckSnifferRule</definition>
        <argsstring>(const char *rule, BString *parseError)</argsstring>
        <name>CheckSnifferRule</name>
        <qualifiedname>BMimeType::CheckSnifferRule</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>parseError</declname>
        </param>
        <briefdescription>
<para>Checks whether a MIME sniffer rule is valid or not. </para>
        </briefdescription>
        <detaileddescription>
<para>A MIME sniffer rule is valid, if it is well-formed with respect to the following grammar and fulfills some further conditions listed thereafter:</para>
<para><verbatim>	Rule			::= LWS Priority LWS ExprList LWS
	ExprList		::= Expression (LWS Expression)*
	Expression		::= &quot;(&quot; LWS (PatternList | RPatternList) LWS &quot;)&quot;
						| Range LWS &quot;(&quot; LWS PatternList LWS &quot;)&quot;
	RPatternList	::= RPattern (LWS &quot;|&quot; LWS RPattern)*
	PatternList		::= Pattern (LWS &quot;|&quot; LWS Pattern)*
	RPattern		::= Range LWS Pattern
	Pattern			::= PString [ LWS &quot;&amp;&quot; LWS Mask ]
	Range			::=	&quot;[&quot; LWS SDecimal [LWS &quot;:&quot; LWS SDecimal] LWS &quot;]&quot;

	Priority		::= Float
	Mask			::= PString
	PString			::= HexString | QuotedString | Octal [UnquotedString]
						EscapedChar [UnquotedString]
	HexString		::= &quot;0x&quot; HexPair HexPair*
	HexPair			::= HexChar HexChar
	QuotedString	::= &apos;&quot;&apos; QChar QChar* &apos;&quot;&apos; | &quot;&apos;&quot; QChar QChar* &quot;&apos;&quot;
	Octal			::= &quot;\&quot; OctChar [OctChar [OctChar]]
	SDecimal		::= [&quot;+&quot; | &quot;-&quot;] Decimal
	Decimal			::= DecChar DecChar*
	Float			::= Fixed [(&quot;E&quot; | &quot;e&quot;) Decimal]
	Fixed			::= SDecimal [&quot;.&quot; [Decimal]] | [SDecimal] &quot;.&quot; Decimal
	UnquotedString	::= UChar UChar*
	LWS				::= LWSChar*

	LWSChar			::= LF | &quot; &quot; | TAB
	OctChar			::= &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot;
	DecChar			::= OctChar | &quot;8&quot; | &quot;9&quot;
	HexChar			::= DecChar | &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;A&quot; | &quot;B&quot; | &quot;C&quot;
						| &quot;D&quot; | &quot;E&quot;
	Char			:: &lt;any character&gt;
	QChar			::= &lt;Char except &quot;\&quot;, &quot;&amp;&quot;, &quot;&apos;&quot; and &apos;&quot;&apos;&gt; | EscapedChar
	EscapedChar		::= &quot;\&quot; Char
	UChar			::= &lt;QChar except LWSChar&gt;

	Conditions:
	(checked)
	- If a mask is specified for a pattern, this mask must have the same
	  length as the pattern string.
	(not checked)
	- 0 &lt;= Priority &lt;= 1
	- 0 &lt;= Range begin &lt;= Range end
	- Rules of the form &quot;() | () | ...&quot; are invalid.

	Examples:
	- 1.0 (&apos;ABCD&apos;)
	  The file must start with the string &quot;ABCD&quot;. The priority of the rule
	  is 1.0 (maximal).
	- 0.8 [0:3] (&apos;ABCD&apos; | &apos;abcd&apos;)
	  The file must contain the string &quot;ABCD&quot; or &quot;abcd&quot; starting somewhere in
	  the first four bytes. The rule priority is 0.8.
	- 0.5 ([0:3] &apos;ABCD&apos; | [0:3] &apos;abcd&apos; | [13] &apos;EFGH&apos;)
	  The file must contain the string &quot;ABCD&quot; or &quot;abcd&quot; starting somewhere in
	  the first four bytes or the string &quot;EFGH&quot; at position 13. The rule
	  priority is 0.5.
	- 0.8 [0:3] (&apos;ABCD&apos; &amp; 0xff00ffff | &apos;abcd&apos; &amp; 0xffff00ff)
	  The file must contain the string &quot;A.CD&quot; or &quot;ab.d&quot; (whereas &quot;.&quot; is an
	  arbitrary character) starting somewhere in the first four bytes. The
	  rule priority is 0.8.

	Real examples:
	- 0.20 ([0]&quot;//&quot; | [0]&quot;/\*&quot; | [0:32]&quot;#include&quot; | [0:32]&quot;#ifndef&quot;
	        | [0:32]&quot;#ifdef&quot;)
	  text/x-source-code
	- 0.70 (&quot;8BPS  \000\000\000\000&quot; &amp; 0xffffffff0000ffffffff )
	  image/x-photoshop
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rule</parametername>
</parameternamelist>
<parameterdescription>
<para>The rule string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parseError</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBString" kindref="compound">BString</ref> into which a description of the parse error is written (if any), may be <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied sniffer rule is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>rule</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_MIME_SNIFFER_RULE</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied sniffer rule is not valid. A description of the error is written to <emphasis>parseError</emphasis>, if supplied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="139" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a3e829715b115ef4c9ffdcd244655f637" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetInstalledSupertypes</definition>
        <argsstring>(BMessage *supertypes)</argsstring>
        <name>GetInstalledSupertypes</name>
        <qualifiedname>BMimeType::GetInstalledSupertypes</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>supertypes</declname>
        </param>
        <briefdescription>
<para>Fetches a <ref refid="classBMessage" kindref="compound">BMessage</ref> listing all the MIME <emphasis>supertypes</emphasis> currently installed in the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>The types are copied into the <computeroutput>&quot;super_types&quot;</computeroutput> field of the passed-in <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput>. The <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> must be pre-allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>supertypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> into which the MIME <emphasis>supertypes</emphasis> will be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="116" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ab7c36a18387907085d2135960af41551" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetInstalledTypes</definition>
        <argsstring>(BMessage *types)</argsstring>
        <name>GetInstalledTypes</name>
        <qualifiedname>BMimeType::GetInstalledTypes</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>types</declname>
        </param>
        <briefdescription>
<para>Fetches a <ref refid="classBMessage" kindref="compound">BMessage</ref> listing all the MIME types currently installed in the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>The types are copied into the <computeroutput>&quot;types&quot;</computeroutput> field of the passed-in <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput>. The <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> must be pre-allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>types</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> into which the MIME types will be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="117" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a6d6c8d8478e87d16965e52c5776f13ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetInstalledTypes</definition>
        <argsstring>(const char *supertype, BMessage *subtypes)</argsstring>
        <name>GetInstalledTypes</name>
        <qualifiedname>BMimeType::GetInstalledTypes</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>supertype</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>subtypes</declname>
          <defname>types</defname>
        </param>
        <briefdescription>
<para>Fetches a <ref refid="classBMessage" kindref="compound">BMessage</ref> listing all the MIME subtypes of the given <emphasis>supertype</emphasis> currently installed in the MIME database. </para>
        </briefdescription>
        <detaileddescription>
<para>The types are copied into the <computeroutput>&quot;types&quot;</computeroutput> field of the passed-in <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput>. The <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> must be pre-allocated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>supertype</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a string containing the MIME <emphasis>supertype</emphasis> whose subtypes you wish to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>types</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> into which the appropriate MIME subtypes will be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="118" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a21419efb577f0a7bdae84c1b700bf12f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetWildcardApps</definition>
        <argsstring>(BMessage *wildcardApps)</argsstring>
        <name>GetWildcardApps</name>
        <qualifiedname>BMimeType::GetWildcardApps</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>wildcardApps</declname>
          <defname>wild_ones</defname>
        </param>
        <briefdescription>
<para>Fetches a <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> containing a list of MIME signatures of applications that are able to handle files of any type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the same as calling <computeroutput><ref refid="classBMimeType_1a32e1d909b97c84d943ac50467e56fc3d" kindref="member">GetSupportingApps()</ref></computeroutput> on a <computeroutput><ref refid="classBMimeType" kindref="compound">BMimeType</ref></computeroutput> object initialized to a MIME type of] <computeroutput>&quot;application/octet-stream&quot;</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wild_ones</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBMessage" kindref="compound">BMessage</ref> into which signatures of applications supporting files of any type are copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMimeType_1a32e1d909b97c84d943ac50467e56fc3d" kindref="member">GetSupportingApps()</ref> for details on the format of the data returned in the <computeroutput><ref refid="classBMessage" kindref="compound">BMessage</ref></computeroutput> pointed to by <computeroutput>wild_ones</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="120" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a9c7f383db42b7418577986aaca98490d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GuessMimeType</definition>
        <argsstring>(const char *filename, BMimeType *type)</argsstring>
        <name>GuessMimeType</name>
        <qualifiedname>BMimeType::GuessMimeType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Guesses a MIME type for the given filename. </para>
        </briefdescription>
        <detaileddescription>
<para>Only the filename itself is taken into consideration (in particular its name extension), not the entry it refers to. I.e. an entry with that name doesn&apos;t need to exist at all.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBMimeType" kindref="compound">BMimeType</ref> which is set to the resulting MIME type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>ref</emphasis> or <emphasis>result</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="146" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a014ae51a0763796a1c9ed57c942fd46e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GuessMimeType</definition>
        <argsstring>(const entry_ref *file, BMimeType *type)</argsstring>
        <name>GuessMimeType</name>
        <qualifiedname>BMimeType::GuessMimeType</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Guesses a MIME type for the entry referred to by the given <ref refid="structentry__ref" kindref="compound">entry_ref</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This version of <ref refid="classBMimeType_1a014ae51a0763796a1c9ed57c942fd46e" kindref="member">GuessMimeType()</ref> combines the features of the other versions: First the data of the given file are checked (sniffed). Only if the result of this operation is inconclusive, i.e. &quot;application/octet-stream&quot;, the filename is examined for extensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structentry__ref" kindref="compound">entry_ref</ref> referring to the entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBMimeType" kindref="compound">BMimeType</ref> which is set to the resulting MIME type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>ref</emphasis> or <emphasis>result</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>ref</emphasis> refers to an abstract entry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="143" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1aac732b4c4943f51fb682e6edeea3c9ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GuessMimeType</definition>
        <argsstring>(const void *buffer, int32 length, BMimeType *type)</argsstring>
        <name>GuessMimeType</name>
        <qualifiedname>BMimeType::GuessMimeType</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Guesses a MIME type for the supplied chunk of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a pre-allocated <ref refid="classBMimeType" kindref="compound">BMimeType</ref> which is set to the resulting MIME type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>NULL</computeroutput> <emphasis>buffer</emphasis> or <emphasis>result</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_INIT</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBMimeType" kindref="compound">BMimeType</ref> was uninitialized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="144" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1abd581b5da6138967bbf028371e03181d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BMimeType::IsValid</definition>
        <argsstring>(const char *mimeType)</argsstring>
        <name>IsValid</name>
        <qualifiedname>BMimeType::IsValid</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>mimeType</declname>
          <defname>string</defname>
        </param>
        <briefdescription>
<para>Returns whether the given string represents a valid MIME type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME type string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the given string represents a valid MIME type.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMimeType_1ab4eb64b2e47f111b796e641ffa624046" kindref="member">SetTo()</ref> for further information.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="121" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a503a2f6daed253b2bb5f7a9469e9c2f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::StartWatching</definition>
        <argsstring>(BMessenger target)</argsstring>
        <name>StartWatching</name>
        <qualifiedname>BMimeType::StartWatching</qualifiedname>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Starts monitoring the MIME database for a given target. </para>
        </briefdescription>
        <detaileddescription>
<para>Until <ref refid="classBMimeType_1a3d48acac5d9fb081c55729c2b7045a6f" kindref="member">StopWatching()</ref> is called for the target, an update message is sent to it whenever the MIME database changes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBMessenger" kindref="compound">BMessenger</ref> identifying the target for the update messages.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="148" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a3d48acac5d9fb081c55729c2b7045a6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::StopWatching</definition>
        <argsstring>(BMessenger target)</argsstring>
        <name>StopWatching</name>
        <qualifiedname>BMimeType::StopWatching</qualifiedname>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Stops monitoring the MIME database for a given target (previously started via <ref refid="classBMimeType_1a503a2f6daed253b2bb5f7a9469e9c2f7" kindref="member">StartWatching()</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classBMessenger" kindref="compound">BMessenger</ref> identifying the target for the update messages.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> on success or another error code on failure.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="149" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMimeType_1a0e114f7d8402bc45c09601587ceac897" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMimeType::BMimeType</definition>
        <argsstring>(const BMimeType &amp;source)</argsstring>
        <name>BMimeType</name>
        <qualifiedname>BMimeType::BMimeType</qualifiedname>
        <param>
          <type>const <ref refid="classBMimeType" kindref="compound">BMimeType</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a8b1c8d4c1c385282929a5915ecaf142c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMimeType::BMimeType</definition>
        <argsstring>(const char *mimeType, const char *mimePath)</argsstring>
        <name>BMimeType</name>
        <qualifiedname>BMimeType::BMimeType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>mimeType</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mimePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a04c096aac936d3ab2c1df3c32d5537d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMimeType::_ReservedMimeType1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMimeType1</name>
        <qualifiedname>BMimeType::_ReservedMimeType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="163" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1ae3ca15655ddd90c9b7a443c588386151" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMimeType::_ReservedMimeType2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMimeType2</name>
        <qualifiedname>BMimeType::_ReservedMimeType2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="164" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a9119634903fdee7414b8d7cfffa4b91b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMimeType::_ReservedMimeType3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedMimeType3</name>
        <qualifiedname>BMimeType::_ReservedMimeType3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="165" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1a11dedff57529d599594bc3c855b15829" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::GetSupportedTypes</definition>
        <argsstring>(BMessage *types)</argsstring>
        <name>GetSupportedTypes</name>
        <qualifiedname>BMimeType::GetSupportedTypes</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="170" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1aa5c3d5d32fa8449c8bcfd2317a2ef454" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMimeType" kindref="compound">BMimeType</ref> &amp;</type>
        <definition>BMimeType &amp; BMimeType::operator=</definition>
        <argsstring>(const BMimeType &amp;source)</argsstring>
        <name>operator=</name>
        <qualifiedname>BMimeType::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBMimeType" kindref="compound">BMimeType</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="167" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBMimeType_1acd6ec897c80e8a18ada702c95fd4cbdf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMimeType::SetSupportedTypes</definition>
        <argsstring>(const BMessage *types, bool fullSync=true)</argsstring>
        <name>SetSupportedTypes</name>
        <qualifiedname>BMimeType::SetSupportedTypes</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>types</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fullSync</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="171" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classBMimeType_1abda7a0c4b26643e6a1f48cfa06e5363f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BMimeType::GetAssociatedTypes</definition>
        <argsstring>(const char *extension, BMessage *types)</argsstring>
        <name>GetAssociatedTypes</name>
        <qualifiedname>BMimeType::GetAssociatedTypes</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="173" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that represents a MIME (Multi-purpose Internet Mail Extensions) type string. </para>
    </briefdescription>
    <detaileddescription>
<para>MIME types use, has grown beyond describing the content of email to describe the content types of applications and file formats.</para>
<para>MIME types consist of a supertype and a subtype.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/storage/MimeType.h" line="74" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/MimeType.h" bodystart="74" bodyend="182"/>
    <listofallmembers>
      <member refid="classBMimeType_1ab9006b4613d3b54c5a3685bd37cdac50" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>_reserved</name></member>
      <member refid="classBMimeType_1a04c096aac936d3ab2c1df3c32d5537d7" prot="private" virt="virtual"><scope>BMimeType</scope><name>_ReservedMimeType1</name></member>
      <member refid="classBMimeType_1ae3ca15655ddd90c9b7a443c588386151" prot="private" virt="virtual"><scope>BMimeType</scope><name>_ReservedMimeType2</name></member>
      <member refid="classBMimeType_1a9119634903fdee7414b8d7cfffa4b91b" prot="private" virt="virtual"><scope>BMimeType</scope><name>_ReservedMimeType3</name></member>
      <member refid="classBMimeType_1ae0a73dcf2040f903dbbf807f7afc4960" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>_unused</name></member>
      <member refid="classBMimeType_1a1fdf3459c8af726c9846770d7aea5e09" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>BMimeType</name></member>
      <member refid="classBMimeType_1a9a0f254e32643872f7c2379bb20b634a" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>BMimeType</name></member>
      <member refid="classBMimeType_1a8b1c8d4c1c385282929a5915ecaf142c" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>BMimeType</name></member>
      <member refid="classBMimeType_1a0e114f7d8402bc45c09601587ceac897" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>BMimeType</name></member>
      <member refid="classBMimeType_1a7e1d370ef1e52b167ac7cee93ca1410e" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>CheckSnifferRule</name></member>
      <member refid="classBMimeType_1a1f5de6e7f1349432a061664e4764a101" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>Contains</name></member>
      <member refid="classBMimeType_1a928153d3227956971ee5e0d7ad23bbfd" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>Delete</name></member>
      <member refid="classBMimeType_1abbf60ec22e09ff526c989fda134977f4" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>fCStatus</name></member>
      <member refid="classBMimeType_1aab7631ec44094dc0a4f563f04efed76e" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>fMeta</name></member>
      <member refid="classBMimeType_1a3f8a57c32476ddfa865a77e672898877" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>fRef</name></member>
      <member refid="classBMimeType_1a398fbd3e1697aa025c5bb4c128e83675" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>fType</name></member>
      <member refid="classBMimeType_1ab2768b8a9e6254791cd6628a58675115" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetAppHint</name></member>
      <member refid="classBMimeType_1abda7a0c4b26643e6a1f48cfa06e5363f" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>GetAssociatedTypes</name></member>
      <member refid="classBMimeType_1a9018ca198dd5ca710326f6601fc58fb4" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetAttrInfo</name></member>
      <member refid="classBMimeType_1a353aea2c7e048f66912b67e1c29a852d" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetFileExtensions</name></member>
      <member refid="classBMimeType_1af549bda9abf4470f838333a4c99d541c" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetIcon</name></member>
      <member refid="classBMimeType_1a3e787905dd154ab589f80f805ed01ef1" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetIcon</name></member>
      <member refid="classBMimeType_1ad1f67fec0e6ca8c244c10c0ab41e9d34" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetIconForType</name></member>
      <member refid="classBMimeType_1aa10038e1db9d8669320c2d8690db8cad" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetIconForType</name></member>
      <member refid="classBMimeType_1a3e829715b115ef4c9ffdcd244655f637" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetInstalledSupertypes</name></member>
      <member refid="classBMimeType_1ab7c36a18387907085d2135960af41551" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetInstalledTypes</name></member>
      <member refid="classBMimeType_1a6d6c8d8478e87d16965e52c5776f13ca" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetInstalledTypes</name></member>
      <member refid="classBMimeType_1a8f0f647361c5f2873e8d4b474a96cf62" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetLongDescription</name></member>
      <member refid="classBMimeType_1ac2b36e26d733f92749823a78c800a416" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetPreferredApp</name></member>
      <member refid="classBMimeType_1a35f404ae1c8942d91ef901c81f5d3392" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetShortDescription</name></member>
      <member refid="classBMimeType_1ad6294a567022c4fb4b22f797d3fae6aa" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetSnifferRule</name></member>
      <member refid="classBMimeType_1aae9ee70db2704a737a05ff073d97a850" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetSupertype</name></member>
      <member refid="classBMimeType_1a11dedff57529d599594bc3c855b15829" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>GetSupportedTypes</name></member>
      <member refid="classBMimeType_1a32e1d909b97c84d943ac50467e56fc3d" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetSupportingApps</name></member>
      <member refid="classBMimeType_1a21419efb577f0a7bdae84c1b700bf12f" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GetWildcardApps</name></member>
      <member refid="classBMimeType_1a014ae51a0763796a1c9ed57c942fd46e" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GuessMimeType</name></member>
      <member refid="classBMimeType_1aac732b4c4943f51fb682e6edeea3c9ca" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GuessMimeType</name></member>
      <member refid="classBMimeType_1a9c7f383db42b7418577986aaca98490d" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>GuessMimeType</name></member>
      <member refid="classBMimeType_1a5a1c59c7ad858324d50a3f419bc285d5" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>InitCheck</name></member>
      <member refid="classBMimeType_1a79f20914ab176d2b7a6b3e41a3387dc4" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>Install</name></member>
      <member refid="classBMimeType_1aa6988f049900d2c19c333da3a9fb0428" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>IsInstalled</name></member>
      <member refid="classBMimeType_1aa952ebae10a18465f89bdf22a6b32762" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>IsSupertypeOnly</name></member>
      <member refid="classBMimeType_1a12c9b6d8c40c1f505d0d7c04a299914b" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>IsValid</name></member>
      <member refid="classBMimeType_1abd581b5da6138967bbf028371e03181d" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>IsValid</name></member>
      <member refid="classBMimeType_1aa5c3d5d32fa8449c8bcfd2317a2ef454" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>operator=</name></member>
      <member refid="classBMimeType_1a670f3b9ab71f46c85315c83fe3e2aa78" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>operator==</name></member>
      <member refid="classBMimeType_1a303623e252ecf9932ae2c735d6774add" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>operator==</name></member>
      <member refid="classBMimeType_1a3308b9ea259de72cc79d5a3a84c9aa13" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetAppHint</name></member>
      <member refid="classBMimeType_1ac95cc9cea6b036d9b7baec668cf32822" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetAttrInfo</name></member>
      <member refid="classBMimeType_1a0a4dc7205fa52a36a84b9c0b6ed1d904" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetFileExtensions</name></member>
      <member refid="classBMimeType_1a44b252859ffae8b70bf9c8e70b0d9d48" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetIcon</name></member>
      <member refid="classBMimeType_1a9f75552ced0097078921f6be0730787d" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetIcon</name></member>
      <member refid="classBMimeType_1af4f299f8d833c42c693e5650c18c46b8" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetIconForType</name></member>
      <member refid="classBMimeType_1a7101fe71a0c72127edd4b80ccce9f4c4" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetIconForType</name></member>
      <member refid="classBMimeType_1ad976818e62d2f12542f05fc6ca49b49d" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetLongDescription</name></member>
      <member refid="classBMimeType_1aa4ec5c9f0e4bd29872bd525b7ce5dbd0" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetPreferredApp</name></member>
      <member refid="classBMimeType_1a5d46d51dd1665d49f2c91e46721c6bb4" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetShortDescription</name></member>
      <member refid="classBMimeType_1ab9da3155010b5f6d1a0868ca202b1ab9" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetSnifferRule</name></member>
      <member refid="classBMimeType_1acd6ec897c80e8a18ada702c95fd4cbdf" prot="private" virt="non-virtual"><scope>BMimeType</scope><name>SetSupportedTypes</name></member>
      <member refid="classBMimeType_1ab4eb64b2e47f111b796e641ffa624046" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetTo</name></member>
      <member refid="classBMimeType_1a8c7dec5efadd37df42cbc2679777f980" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>SetType</name></member>
      <member refid="classBMimeType_1a503a2f6daed253b2bb5f7a9469e9c2f7" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>StartWatching</name></member>
      <member refid="classBMimeType_1a3d48acac5d9fb081c55729c2b7045a6f" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>StopWatching</name></member>
      <member refid="classBMimeType_1a9b1e232d61a088a8197fdee7db580071" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>Type</name></member>
      <member refid="classBMimeType_1a24cc52aecc8310fdc109b7afa827040b" prot="public" virt="non-virtual"><scope>BMimeType</scope><name>Unset</name></member>
      <member refid="classBMimeType_1a6a3cc1a25aa82d1bad7e10b25f169991" prot="public" virt="virtual"><scope>BMimeType</scope><name>~BMimeType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
