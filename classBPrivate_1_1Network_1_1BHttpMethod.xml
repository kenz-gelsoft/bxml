<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BHttpMethod" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BHttpMethod</compoundname>
    <innerclass refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod" prot="public">BPrivate::Network::BHttpMethod::InvalidMethod</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55e" prot="public" static="no" strong="no">
        <type></type>
        <name>Verb</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::Verb</qualifiedname>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55eae16d94bfc1bdba38523d7d09648f314f" prot="public">
          <name>Get</name>
          <briefdescription>
<para>Represents the <computeroutput>GET</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55ea41984f3842879643666cf3f3b1d3e456" prot="public">
          <name>Head</name>
          <briefdescription>
<para>Represents the <computeroutput>HEAD</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55ea55be2f2974c6f903a1b0d1c30ca46b5b" prot="public">
          <name>Post</name>
          <briefdescription>
<para>Represents the <computeroutput>POST</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55eae0137507cae043e027cdad7ebe2cea24" prot="public">
          <name>Put</name>
          <briefdescription>
<para>Represents the <computeroutput>PUT</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55ead0cb22b2ff63a668a766616e9a673db2" prot="public">
          <name>Delete</name>
          <briefdescription>
<para>Represents the <computeroutput>DELETE</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55eaf14bc741c0fd31f10ce0ca5d6d9bd9fb" prot="public">
          <name>Connect</name>
          <briefdescription>
<para>Represents the <computeroutput>CONNECT</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55ea2bb635871c8cdf7dc4ca44366ceee71d" prot="public">
          <name>Options</name>
          <briefdescription>
<para>Represents the <computeroutput>OPTIONS</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55ead5fe555fa7ad65b5e951a63e2c45acbd" prot="public">
          <name>Trace</name>
          <briefdescription>
<para>Represents the <computeroutput>TRACE</computeroutput> method. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A list of standard HTTP methods. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="36" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="36" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpMethod_1a6c65f7df4368b08e2c4a8041e0ac4b82" prot="private" static="no" mutable="no">
        <type>std::variant&lt; <ref refid="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55e" kindref="member">Verb</ref>, <ref refid="classBString" kindref="compound">BString</ref> &gt;</type>
        <definition>std::variant&lt;Verb, BString&gt; BPrivate::Network::BHttpMethod::fMethod</definition>
        <argsstring></argsstring>
        <name>fMethod</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::fMethod</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="60" column="14" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1a1dde8f2e72bd791376a5ac52c366df6e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpMethod::BHttpMethod</definition>
        <argsstring>(BHttpMethod &amp;&amp;other) noexcept</argsstring>
        <name>BHttpMethod</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::BHttpMethod</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Moves the data from the <emphasis>other</emphasis> to this object. The <emphasis>other</emphasis> object will be set to <ref refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55eae16d94bfc1bdba38523d7d09648f314f" kindref="member">BHttpMethod::Get</ref>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1aab95cc2c8bb0b0a454458b765e5d7c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpMethod::BHttpMethod</definition>
        <argsstring>(const BHttpMethod &amp;other)</argsstring>
        <name>BHttpMethod</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::BHttpMethod</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy data from an <emphasis>other</emphasis> object.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>When the <emphasis>other</emphasis> object contains a custom verb, this exception will be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1a4657c7a2181f6a77d981455c06f24dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpMethod::BHttpMethod</definition>
        <argsstring>(const std::string_view &amp;method)</argsstring>
        <name>BHttpMethod</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::BHttpMethod</qualifiedname>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>method</declname>
        </param>
        <briefdescription>
<para>Construct a custom method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>The verb for the method.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>In case it is not possible to allocate memory for the custom string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classBPrivate_1_1Network_1_1BHttpMethod_1_1InvalidMethod" kindref="compound">BHttpMethod::InvalidMethod</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>In case the <emphasis>method</emphasis> is empty or contains invalid characters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1afad640b36abdaa3ce9ab2aa973745073" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpMethod::BHttpMethod</definition>
        <argsstring>(Verb verb) noexcept</argsstring>
        <name>BHttpMethod</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::BHttpMethod</qualifiedname>
        <param>
          <type><ref refid="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55e" kindref="member">Verb</ref></type>
          <declname>verb</declname>
        </param>
        <briefdescription>
<para>Construct a standard method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>The chosen method.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1a0a01b80dc314bf8802c2f80b5a5bd1f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpMethod::~BHttpMethod</definition>
        <argsstring>()</argsstring>
        <name>~BHttpMethod</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::~BHttpMethod</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1a4f8bc5715db0def42e5241b6b7618f30" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const std::string_view</type>
        <definition>const std::string_view BPrivate::Network::BHttpMethod::Method</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Method</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::Method</qualifiedname>
        <briefdescription>
<para>Get a string representation of the method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>std::string_view</computeroutput> that is a string representation of the standard or custom method in this object. The lifetime of the string view is bound to the lifetime of this method.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="57" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1a11140387e4a692f1656fecbaf15f7b99" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpMethod::operator!=</definition>
        <argsstring>(const Verb &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55e" kindref="member">Verb</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The verb to compare to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>This method is different from <emphasis>other</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>This method is equal to <emphasis>other</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1a69b49f84e78f00e7b8532dca8b02cac1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;</type>
        <definition>BHttpMethod &amp; BPrivate::Network::BHttpMethod::operator=</definition>
        <argsstring>(BHttpMethod &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment. Moves the data from the <emphasis>other</emphasis> to this object. The <emphasis>other</emphasis> object will be set to <ref refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55eae16d94bfc1bdba38523d7d09648f314f" kindref="member">BHttpMethod::Get</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="50" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1a1a5554c8211b2cd6d730a359f6a700d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;</type>
        <definition>BHttpMethod &amp; BPrivate::Network::BHttpMethod::operator=</definition>
        <argsstring>(const BHttpMethod &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpMethod" kindref="compound">BHttpMethod</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy data from an <emphasis>other</emphasis> object.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>When the <emphasis>other</emphasis> object contains a custom verb, this exception will be raised if it is impossible to allocate memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="49" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpMethod_1aeebfa89b7e5f85ef5995cdc730ce40cd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpMethod::operator==</definition>
        <argsstring>(const Verb &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>BPrivate::Network::BHttpMethod::operator==</qualifiedname>
        <param>
          <type>const <ref refid="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55e" kindref="member">Verb</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The verb to compare to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>This method is equal to <emphasis>other</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>This method is different from <emphasis>other</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="53" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represent a HTTP method. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ulink url="https://datatracker.ietf.org/doc/html/rfc7231#section-4.1">HTTP standard</ulink> specifies that HTTP requests have a method. Common methods are <computeroutput>GET</computeroutput> and <computeroutput>HEAD</computeroutput> methods. Standardized and common methods are in the form of <emphasis>verbs</emphasis> and are in capitalized letters from the ASCII token set, though any valid token can be used.</para>
<para>It is most likely that you will not use the methods of this class directly, instead you will use the implicit constructors while interacting with the <ref refid="classBPrivate_1_1Network_1_1BHttpRequest" kindref="compound">BHttpRequest</ref> class.</para>
<para><programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>url<sp/>=<sp/><ref refid="classBUrl" kindref="compound">BUrl</ref>(</highlight><highlight class="stringliteral">&quot;https://www.haiku-os.org/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>implicitly<sp/>construct<sp/>a<sp/>standard<sp/>get<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>standard<sp/>=<sp/>BHttpRequest(url,<sp/><ref refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55eae16d94bfc1bdba38523d7d09648f314f" kindref="member">BHttpMethod::Get</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>implicitly<sp/>construct<sp/>a<sp/>nonstandard<sp/>patch<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>custom<sp/>=<sp/>BHttpRequest(url,<sp/></highlight><highlight class="stringliteral">&quot;PATCH&quot;</highlight><highlight class="normal">sv);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>When you are using the standard list of verbs, there will never be an exception when creating objects of this type. When you create a custom method, exceptions may be raised when the system runs out of memory, or when your custom method contains invalid characters. In almost all cases, you can probably safely assume you will not run into these exceptions, except for cases where you use user input to create methods or you are very defensive about memory management.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" line="32" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpRequest.h" bodystart="33" bodyend="61"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1afad640b36abdaa3ce9ab2aa973745073" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>BHttpMethod</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a4657c7a2181f6a77d981455c06f24dcf" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>BHttpMethod</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1aab95cc2c8bb0b0a454458b765e5d7c75" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>BHttpMethod</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a1dde8f2e72bd791376a5ac52c366df6e" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>BHttpMethod</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55eaf14bc741c0fd31f10ce0ca5d6d9bd9fb" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Connect</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55ead0cb22b2ff63a668a766616e9a673db2" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Delete</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a6c65f7df4368b08e2c4a8041e0ac4b82" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>fMethod</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55eae16d94bfc1bdba38523d7d09648f314f" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Get</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55ea41984f3842879643666cf3f3b1d3e456" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Head</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a4f8bc5715db0def42e5241b6b7618f30" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Method</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a11140387e4a692f1656fecbaf15f7b99" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>operator!=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a1a5554c8211b2cd6d730a359f6a700d6" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a69b49f84e78f00e7b8532dca8b02cac1" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1aeebfa89b7e5f85ef5995cdc730ce40cd" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>operator==</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55ea2bb635871c8cdf7dc4ca44366ceee71d" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Options</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55ea55be2f2974c6f903a1b0d1c30ca46b5b" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Post</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55eae0137507cae043e027cdad7ebe2cea24" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Put</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1ga16eddbfe1a87e0c5c233416f2358e55ead5fe555fa7ad65b5e951a63e2c45acbd" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Trace</name></member>
      <member refid="group__netservices_1ga16eddbfe1a87e0c5c233416f2358e55e" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>Verb</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpMethod_1a0a01b80dc314bf8802c2f80b5a5bd1f5" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpMethod</scope><name>~BHttpMethod</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
