<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBFont" kind="class" language="C++" prot="public">
    <compoundname>BFont</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBFont_1aa88e201fe20441184ed8419ca7c13d2b" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BFont::_reserved[1]</definition>
        <argsstring>[1]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BFont::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="315" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1aa56a7ca82ce35c5a869eeae89584a97d" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BFont::fEncoding</definition>
        <argsstring></argsstring>
        <name>fEncoding</name>
        <qualifiedname>BFont::fEncoding</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="309" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a1e8884d15d707d319a66a83043940258" prot="private" static="no" mutable="yes">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BFont::fExtraFlags</definition>
        <argsstring></argsstring>
        <name>fExtraFlags</name>
        <qualifiedname>BFont::fExtraFlags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="313" column="14" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a2efd1f7b082ef125f55fe0ed1e028591" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BFont::fFace</definition>
        <argsstring></argsstring>
        <name>fFace</name>
        <qualifiedname>BFont::fFace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="310" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1aaebb19d7cf04d998a432bcc023b2f6d3" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BFont::fFalseBoldWidth</definition>
        <argsstring></argsstring>
        <name>fFalseBoldWidth</name>
        <qualifiedname>BFont::fFalseBoldWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="307" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a6cdefff39c12131ea8ceb90faa5163d6" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BFont::fFamilyID</definition>
        <argsstring></argsstring>
        <name>fFamilyID</name>
        <qualifiedname>BFont::fFamilyID</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="302" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1ad268fb21e0f1fcdad6442aff385509c2" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BFont::fFlags</definition>
        <argsstring></argsstring>
        <name>fFlags</name>
        <qualifiedname>BFont::fFlags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="311" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a41b63fdf465ded52026133e7e8de8fc2" prot="private" static="no" mutable="yes">
        <type><ref refid="structfont__height" kindref="compound">font_height</ref></type>
        <definition>font_height BFont::fHeight</definition>
        <argsstring></argsstring>
        <name>fHeight</name>
        <qualifiedname>BFont::fHeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="312" column="19" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a1c7491920bc85cf4151f91a872186d2f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BFont::fRotation</definition>
        <argsstring></argsstring>
        <name>fRotation</name>
        <qualifiedname>BFont::fRotation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="306" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a1ba8957402f1fea60e183d93a4f7fbc2" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BFont::fShear</definition>
        <argsstring></argsstring>
        <name>fShear</name>
        <qualifiedname>BFont::fShear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="305" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a2f90b47d01b4a5c6f04aeb686878aac0" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BFont::fSize</definition>
        <argsstring></argsstring>
        <name>fSize</name>
        <qualifiedname>BFont::fSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="304" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a7bac031b5a0caf6c456a3b60ec5f7e21" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BFont::fSpacing</definition>
        <argsstring></argsstring>
        <name>fSpacing</name>
        <qualifiedname>BFont::fSpacing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="308" column="6" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBFont_1a70e5c138862818693c013869c996d8d2" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BFont::fStyleID</definition>
        <argsstring></argsstring>
        <name>fStyleID</name>
        <qualifiedname>BFont::fStyleID</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="303" column="7" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBFont_1ad66965429ac72d5b3d0cce32fc855e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BFont::BFont</definition>
        <argsstring>()</argsstring>
        <name>BFont</name>
        <qualifiedname>BFont::BFont</qualifiedname>
        <briefdescription>
<para>Creates a <ref refid="classBFont" kindref="compound">BFont</ref> object initialized to <computeroutput>be_plain_font</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBView_1af244d01f85e6d9ae7f5fcca4637dc78c" kindref="member">BView::GetFont()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a6a6820b1f9b64355195bbc859da96195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BFont::BFont</definition>
        <argsstring>(const BFont &amp;font)</argsstring>
        <name>BFont</name>
        <qualifiedname>BFont::BFont</qualifiedname>
        <param>
          <type>const <ref refid="classBFont" kindref="compound">BFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Creates and initializes a <ref refid="classBFont" kindref="compound">BFont</ref> object from another <ref refid="classBFont" kindref="compound">BFont</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBFont" kindref="compound">BFont</ref> object to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a5ad29ba7ce99d5d7a1788ab94d1b498c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BFont::BFont</definition>
        <argsstring>(const BFont *font)</argsstring>
        <name>BFont</name>
        <qualifiedname>BFont::BFont</qualifiedname>
        <param>
          <type>const <ref refid="classBFont" kindref="compound">BFont</ref> *</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Creates and initializes a <ref refid="classBFont" kindref="compound">BFont</ref> object from a pointer to a <ref refid="classBFont" kindref="compound">BFont</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to a <ref refid="classBFont" kindref="compound">BFont</ref> object to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3</para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to a <ref refid="classBFont" kindref="compound">BFont</ref> object to initialize from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a8151aa73d7f435cd9c4115a8b92f62cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classunicode__block" kindref="compound">unicode_block</ref></type>
        <definition>unicode_block BFont::Blocks</definition>
        <argsstring>() const</argsstring>
        <name>Blocks</name>
        <qualifiedname>BFont::Blocks</qualifiedname>
        <briefdescription>
<para>Gets a <computeroutput><ref refid="classunicode__block" kindref="compound">unicode_block</ref></computeroutput> object that identifies the Unicode blocks supported by this font face and family. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput><ref refid="classunicode__block" kindref="compound">unicode_block</ref></computeroutput> object containing supported Unicode blocks.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="212" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ae8ad82beb4f332876a5ad93cd527cdb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
        <definition>BRect BFont::BoundingBox</definition>
        <argsstring>() const</argsstring>
        <name>BoundingBox</name>
        <qualifiedname>BFont::BoundingBox</qualifiedname>
        <briefdescription>
<para>Gets a <ref refid="classBRect" kindref="compound">BRect</ref> that encloses the font text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <ref refid="classBRect" kindref="compound">BRect</ref> that encloses the font text.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="211" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aeb2d8695b587d341116bda8bd272ae1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BFont::CountTuned</definition>
        <argsstring>() const</argsstring>
        <name>CountTuned</name>
        <qualifiedname>BFont::CountTuned</qualifiedname>
        <briefdescription>
<para>Gets the number of tuned fonts for the font family and style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of tuned fonts.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="216" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a035e23156c1224ae163edef7c4cc3f42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Font_8h_1aa8e9a83eb695e753a0f0dc1683fe858c" kindref="member">font_direction</ref></type>
        <definition>font_direction BFont::Direction</definition>
        <argsstring>() const</argsstring>
        <name>Direction</name>
        <qualifiedname>BFont::Direction</qualifiedname>
        <briefdescription>
<para>Gets the font direction, left-to-right or right-to left. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The font direction.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="208" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a0a9a61b8b505f3853ff4f2e2354a8645" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BFont::Encoding</definition>
        <argsstring>() const</argsstring>
        <name>Encoding</name>
        <qualifiedname>BFont::Encoding</qualifiedname>
        <briefdescription>
<para>Gets the character encoding constant. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The character encoding constant.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1afdb8a74829abab2dd57591eb471e7901" kindref="member">SetEncoding()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="204" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a4ebe97df6ee2e3afe23a74e12f3268f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BFont::Face</definition>
        <argsstring>() const</argsstring>
        <name>Face</name>
        <qualifiedname>BFont::Face</qualifiedname>
        <briefdescription>
<para>Gets the font face flags bitmap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The font face flags bitmap.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1afded119b1f1e6912d78d83fd23962adb" kindref="member">SetFace()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="205" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a3c9abfe103d7d57f665e61442f89005b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BFont::FalseBoldWidth</definition>
        <argsstring>() const</argsstring>
        <name>FalseBoldWidth</name>
        <qualifiedname>BFont::FalseBoldWidth</qualifiedname>
        <briefdescription>
<para>Gets the width of the font as if it were bold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The font width of the bold font variety.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1aef0c684bbe795fb491807d81cfb0827e" kindref="member">SetFalseBoldWidth()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="202" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1af1fd7295648a7202cfedff55c557353e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BFont::FamilyAndStyle</definition>
        <argsstring>() const</argsstring>
        <name>FamilyAndStyle</name>
        <qualifiedname>BFont::FamilyAndStyle</qualifiedname>
        <briefdescription>
<para>Gets the code of the font family and style combination. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The family and style combination encoded as a unique integer.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1ae15269df487fd4de01d1ce13612625af" kindref="member">SetFamilyAndStyle(uint32 code)</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="198" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a40f571f695c6c684c52fc82a3ea22a52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Font_8h_1a21cfe5cab078ab3a0f40c56a13bfc21c" kindref="member">font_file_format</ref></type>
        <definition>font_file_format BFont::FileFormat</definition>
        <argsstring>() const</argsstring>
        <name>FileFormat</name>
        <qualifiedname>BFont::FileFormat</qualifiedname>
        <briefdescription>
<para>Gets whether the font is a TrueType™ or PostScript™ Type1 font. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>font_file_format</computeroutput> struct containing the font file format.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="214" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a0aff01f09a6f66531bf84ff9291ce3c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BFont::Flags</definition>
        <argsstring>() const</argsstring>
        <name>Flags</name>
        <qualifiedname>BFont::Flags</qualifiedname>
        <briefdescription>
<para>Gets the antialiasing flags. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The antialiasing flags.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1aaf75531591c0b34fd58319dde7e73490" kindref="member">SetFlags()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="206" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1afe3a10678a3dbe21fd04a1bac05a850d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetBoundingBoxesAsGlyphs</definition>
        <argsstring>(const char charArray[], int32 numChars, font_metric_mode mode, BRect boundingBoxArray[]) const</argsstring>
        <name>GetBoundingBoxesAsGlyphs</name>
        <qualifiedname>BFont::GetBoundingBoxesAsGlyphs</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type><ref refid="Font_8h_1a387f5f5a7488dc30f9c39fec61a11c16" kindref="member">font_metric_mode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>boundingBoxArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Writes an array of <ref refid="classBRect" kindref="compound">BRect</ref> objects to <emphasis>boundingBoxArray</emphasis> representing the bounding rectangles of each character in <emphasis>charArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Each <ref refid="classBRect" kindref="compound">BRect</ref> object corresponds to the glyph of one character.</para>
<para>The <computeroutput>font_metric_mode</computeroutput> should contain one of the following values:<itemizedlist>
<listitem><para><computeroutput>B_SCREEN_METRIC</computeroutput> The bounding boxes should use the screen metric.</para>
</listitem><listitem><para><computeroutput>B_PRINTING_METRIC</computeroutput> The bounding boxes should use the print metric.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>font_metric_mode</computeroutput> to use, screen or printing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundingBoxArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of <ref refid="classBRect" kindref="compound">BRect</ref> bounding boxes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="256" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a6fd11aac2f55781dfe60d021e40cd7f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetBoundingBoxesAsString</definition>
        <argsstring>(const char charArray[], int32 numChars, font_metric_mode mode, escapement_delta *delta, BRect boundingBoxArray[]) const</argsstring>
        <name>GetBoundingBoxesAsString</name>
        <qualifiedname>BFont::GetBoundingBoxesAsString</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type><ref refid="Font_8h_1a387f5f5a7488dc30f9c39fec61a11c16" kindref="member">font_metric_mode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>boundingBoxArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Writes an array of <ref refid="classBRect" kindref="compound">BRect</ref> objects to <emphasis>boundingBoxArray</emphasis> representing the bounding rectangles of each character in <emphasis>charArray</emphasis> with consideration to the horizontal space provided by the escapement <emphasis>delta</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Each <ref refid="classBRect" kindref="compound">BRect</ref> object corresponds to the glyph of one character.</para>
<para>The <computeroutput>font_metric_mode</computeroutput> should contain one of the following values:<itemizedlist>
<listitem><para><computeroutput>B_SCREEN_METRIC</computeroutput> The bounding boxes should use the screen metric.</para>
</listitem><listitem><para><computeroutput>B_PRINTING_METRIC</computeroutput> The bounding boxes should use the print metric.</para>
</listitem></itemizedlist>
</para>
<para>The provided escapement <emphasis>delta</emphasis> is applied as part of the bounding box calculations. This lets you specify a character spacing is looser or tighter than normal.</para>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure contains the following values:<itemizedlist>
<listitem><para><computeroutput>nonspace</computeroutput> The amount of horizontal space to surround a visible glyph character with.</para>
</listitem><listitem><para><computeroutput>space</computeroutput> The amount of horizontal space to surround a whitespace character with, for example <computeroutput>B_TAB</computeroutput> or <computeroutput>B_SPACE</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>font_metric_mode</computeroutput> to use, screen or printing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundingBoxArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of <ref refid="classBRect" kindref="compound">BRect</ref> bounding boxes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="260" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a3a0625c7fcb2af6fe24a4c961ed8a937" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetBoundingBoxesForStrings</definition>
        <argsstring>(const char *stringArray[], int32 numStrings, font_metric_mode mode, escapement_delta deltas[], BRect boundingBoxArray[]) const</argsstring>
        <name>GetBoundingBoxesForStrings</name>
        <qualifiedname>BFont::GetBoundingBoxesForStrings</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>stringArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type><ref refid="Font_8h_1a387f5f5a7488dc30f9c39fec61a11c16" kindref="member">font_metric_mode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref></type>
          <declname>deltas</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>boundingBoxArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Writes an array of <ref refid="classBRect" kindref="compound">BRect</ref> objects to <emphasis>boundingBoxArray</emphasis> representing the bounding rectangles of each string in <emphasis>stringArray</emphasis> with consideration to the horizontal space provided by the escapement <emphasis>deltas</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Each <ref refid="classBRect" kindref="compound">BRect</ref> object corresponds to the bounding box of the entire string.</para>
<para>The <computeroutput>font_metric_mode</computeroutput> should contain one of the following values:<itemizedlist>
<listitem><para><computeroutput>B_SCREEN_METRIC</computeroutput> The bounding boxes should use the screen metric.</para>
</listitem><listitem><para><computeroutput>B_PRINTING_METRIC</computeroutput> The bounding boxes should use the print metric.</para>
</listitem></itemizedlist>
</para>
<para>The provided escapement <emphasis>deltas</emphasis> are applied as part of the bounding box calculations. This lets you specify a character spacing is looser or tighter than normal.</para>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure contains the following values:<itemizedlist>
<listitem><para><computeroutput>nonspace</computeroutput> The amount of horizontal space to surround a visible glyph character with.</para>
</listitem><listitem><para><computeroutput>space</computeroutput> The amount of horizontal space to surround a whitespace character with, for example <computeroutput>B_TAB</computeroutput> or <computeroutput>B_SPACE</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of strings to consider in <emphasis>stringArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>font_metric_mode</computeroutput> to use, screen or printing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltas</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structures to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundingBoxArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of <ref refid="classBRect" kindref="compound">BRect</ref> bounding boxes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="265" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aa08a3467e1720dd4431fb7264a242c45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetEdges</definition>
        <argsstring>(const char charArray[], int32 numBytes, edge_info edgeArray[]) const</argsstring>
        <name>GetEdges</name>
        <qualifiedname>BFont::GetEdges</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numBytes</declname>
          <defname>numChars</defname>
        </param>
        <param>
          <type><ref refid="structedge__info" kindref="compound">edge_info</ref></type>
          <declname>edgeArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Determines the edge information for each character in <emphasis>charArray</emphasis> and writes the result in <emphasis>edgeArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput><ref refid="structedge__info" kindref="compound">edge_info</ref></computeroutput> struct contains the following values:<itemizedlist>
<listitem><para><computeroutput>left</computeroutput> The distance that the character outline is inset from the left escapement boundary.</para>
</listitem><listitem><para><computeroutput>right</computeroutput> The distance that the character outline is inset from the right escapement boundary.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgeArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of <computeroutput><ref refid="structedge__info" kindref="compound">edge_info</ref></computeroutput> structs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="251" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aa8c8b0cdba41438877b020549ac9d479" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetEscapements</definition>
        <argsstring>(const char charArray[], int32 numChars, escapement_delta *delta, BPoint escapementArray[]) const</argsstring>
        <name>GetEscapements</name>
        <qualifiedname>BFont::GetEscapements</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>escapementArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Determines the escapements for each char in <emphasis>charArray</emphasis> and writes the result in <emphasis>escapementArray</emphasis> as an array of <ref refid="classBPoint" kindref="compound">BPoint</ref> objects with consideration to the horizontal space provided by the escapement <emphasis>delta</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure contains the following values:<itemizedlist>
<listitem><para><computeroutput>nonspace</computeroutput> The amount of horizontal space to surround a visible glyph character with.</para>
</listitem><listitem><para><computeroutput>space</computeroutput> The amount of horizontal space to surround a whitespace character with, for example <computeroutput>B_TAB</computeroutput> or <computeroutput>B_SPACE</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escapementArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of escapements as <ref refid="classBPoint" kindref="compound">BPoint</ref> objects.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="243" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ae89a618b3b920d802c67b6ce39e8e010" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetEscapements</definition>
        <argsstring>(const char charArray[], int32 numChars, escapement_delta *delta, BPoint escapementArray[], BPoint offsetArray[]) const</argsstring>
        <name>GetEscapements</name>
        <qualifiedname>BFont::GetEscapements</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>escapementArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="classBPoint" kindref="compound">BPoint</ref></type>
          <declname>offsetArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Determines the escapements for each char in <emphasis>charArray</emphasis> and writes the result in <emphasis>escapementArray</emphasis> as an array of <ref refid="classBPoint" kindref="compound">BPoint</ref> objects with consideration to the horizontal space provided by the escapement <emphasis>delta</emphasis> and writes the offsets to <emphasis>offsetArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure contains the following values:<itemizedlist>
<listitem><para><computeroutput>nonspace</computeroutput> The amount of horizontal space to surround a visible glyph character with.</para>
</listitem><listitem><para><computeroutput>space</computeroutput> The amount of horizontal space to surround a whitespace character with, for example <computeroutput>B_TAB</computeroutput> or <computeroutput>B_SPACE</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escapementArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of escapements as <ref refid="classBPoint" kindref="compound">BPoint</ref> objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsetArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of offsets as <ref refid="classBPoint" kindref="compound">BPoint</ref> objects.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="246" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aa39a97d880d8794025af782f14a40a74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetEscapements</definition>
        <argsstring>(const char charArray[], int32 numChars, escapement_delta *delta, float escapementArray[]) const</argsstring>
        <name>GetEscapements</name>
        <qualifiedname>BFont::GetEscapements</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>float</type>
          <declname>escapementArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Determines the escapements for each char in <emphasis>charArray</emphasis> and writes the result in <emphasis>escapementArray</emphasis> with consideration to the horizontal space provided by the escapement <emphasis>delta</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure contains the following values:<itemizedlist>
<listitem><para><computeroutput>nonspace</computeroutput> The amount of horizontal space to surround a visible glyph character with.</para>
</listitem><listitem><para><computeroutput>space</computeroutput> The amount of horizontal space to surround a whitespace character with, for example <computeroutput>B_TAB</computeroutput> or <computeroutput>B_SPACE</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> structure to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escapementArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array to put the escapements.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="240" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aca49530c494a52f06fd5ea88d66a0f31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetEscapements</definition>
        <argsstring>(const char charArray[], int32 numChars, float escapementArray[]) const</argsstring>
        <name>GetEscapements</name>
        <qualifiedname>BFont::GetEscapements</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type>float</type>
          <declname>escapementArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Determines the escapements for each char in <emphasis>charArray</emphasis> and writes the result in <emphasis>escapementArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escapementArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array to put the escapements.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="237" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ae2dc43eff88752137b4f4323a8666efa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetFamilyAndStyle</definition>
        <argsstring>(font_family *family, font_style *style) const</argsstring>
        <name>GetFamilyAndStyle</name>
        <qualifiedname>BFont::GetFamilyAndStyle</qualifiedname>
        <param>
          <type>font_family *</type>
          <declname>family</declname>
        </param>
        <param>
          <type>font_style *</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Writes out the name of the font family and/or font style. </para>
        </briefdescription>
        <detaileddescription>
<para>This method may be called with either <emphasis>family</emphasis> or <emphasis>style</emphasis> set to <computeroutput>NULL</computeroutput> in order to get one or the other.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>A font_family pointer to be filled out. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>A font_style pointer to be filled out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="196" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ac51729d5adbaabf69520f9d2342af1b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetGlyphShapes</definition>
        <argsstring>(const char charArray[], int32 numChars, BShape *glyphShapeArray[]) const</argsstring>
        <name>GetGlyphShapes</name>
        <qualifiedname>BFont::GetGlyphShapes</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type><ref refid="classBShape" kindref="compound">BShape</ref> *</type>
          <declname>glyphShapeArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Writes an array of <ref refid="classBShape" kindref="compound">BShape</ref> objects to <emphasis>glyphShapeArray</emphasis> representing the glyph shapes of each character in <emphasis>charArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Each <ref refid="classBShape" kindref="compound">BShape</ref> object corresponds to the glyph of one character.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>glyphShapeArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of <ref refid="classBShape" kindref="compound">BShape</ref> glyphs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="271" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ad00446a1de8b804235e76c8160f056e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetHasGlyphs</definition>
        <argsstring>(const char charArray[], int32 numChars, bool hasArray[]) const</argsstring>
        <name>GetHasGlyphs</name>
        <qualifiedname>BFont::GetHasGlyphs</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Fills out <emphasis>hasArray</emphasis> with whether or not each characters in <emphasis>charArray</emphasis> has a glyph for the font. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>true</computeroutput> is written in <emphasis>hasArray</emphasis> if the character has a glyph in the current font and <computeroutput>false</computeroutput> is written in <emphasis>hasArray</emphasis> if the character does NOT have a glyph in the current font.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source character array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numChars</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider in <emphasis>charArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hasArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array of booleans.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="275" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a9748877645b9e3ab98a3a43a5375f392" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetHeight</definition>
        <argsstring>(font_height *height) const</argsstring>
        <name>GetHeight</name>
        <qualifiedname>BFont::GetHeight</qualifiedname>
        <param>
          <type><ref refid="structfont__height" kindref="compound">font_height</ref> *</type>
          <declname>height</declname>
          <defname>_height</defname>
        </param>
        <briefdescription>
<para>Fills out the <computeroutput><ref refid="structfont__height" kindref="compound">font_height</ref></computeroutput> struct with the amount of vertical space surrounding a character. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput><ref refid="structfont__height" kindref="compound">font_height</ref></computeroutput> struct contains the following values:<itemizedlist>
<listitem><para><computeroutput>ascent</computeroutput> The distance characters can ascend above the baseline.</para>
</listitem><listitem><para><computeroutput>descent</computeroutput> The distance characters can descend below the baseline.</para>
</listitem><listitem><para><computeroutput>leading</computeroutput> The distance between lines, descent above to ascent below.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_height</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="structfont__height" kindref="compound">font_height</ref></computeroutput> struct to fill out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="254" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a876823361e0c90c6c5e2a1fb3ab7c317" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetStringWidths</definition>
        <argsstring>(const char *stringArray[], const int32 lengthArray[], int32 numStrings, float widthArray[]) const</argsstring>
        <name>GetStringWidths</name>
        <qualifiedname>BFont::GetStringWidths</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>stringArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const <ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>lengthArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type>float</type>
          <declname>widthArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Determines the amount of space required to draw each string in <emphasis>stringArray</emphasis> and writes the result in <emphasis>widthArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lengthArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters to consider for each string in <emphasis>stringArray</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of strings in <emphasis>stringArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>widthArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination array to put the widths required to draw each string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="232" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1abbee20530f5e414a27b4437220459aec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetTruncatedStrings</definition>
        <argsstring>(const char *stringArray[], int32 numStrings, uint32 mode, float width, BString resultArray[]) const</argsstring>
        <name>GetTruncatedStrings</name>
        <qualifiedname>BFont::GetTruncatedStrings</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>stringArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref></type>
          <declname>resultArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Write truncated <ref refid="classBString" kindref="compound">BString</ref> objects to <emphasis>resultArray</emphasis> given source <ref refid="classBString" kindref="compound">BString</ref> objects in <emphasis>stringArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following truncation modes are supported:<itemizedlist>
<listitem><para><computeroutput>B_TRUNCATE_BEGINNING</computeroutput> Truncate from the beginning of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_MIDDLE</computeroutput> Truncate from the middle of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_END</computeroutput> Truncate from the end of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_SMART</computeroutput> Truncate from anywhere, but do so so that each string is made unique after being truncated.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of strings in <emphasis>stringArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Truncation mode to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width to truncate to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination string array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="222" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aa8313e73eb3a0a2aac8799f8d0cd52bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetTruncatedStrings</definition>
        <argsstring>(const char *stringArray[], int32 numStrings, uint32 mode, float width, char *resultArray[]) const</argsstring>
        <name>GetTruncatedStrings</name>
        <qualifiedname>BFont::GetTruncatedStrings</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>stringArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numStrings</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>resultArray</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Write truncated strings to <emphasis>resultArray</emphasis> given source <ref refid="classBString" kindref="compound">BString</ref> objects in <emphasis>stringArray</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>resultArray</emphasis> is an array of pointers to string buffers which should be allocated ahead of time and should be at least 3 bytes longer than the matching input string. The 3 extra bytes provide enough room for the truncated output given that <ref refid="classBFont_1abbee20530f5e414a27b4437220459aec" kindref="member">GetTruncatedStrings()</ref> truncates only a single-byte character from the input string and replaces it with an ellipsis character (which takes three bytes for the UTF-8 encoding), and adds a <computeroutput>NUL-terminator</computeroutput>.</para>
<para>The following truncation modes are supported:<itemizedlist>
<listitem><para><computeroutput>B_TRUNCATE_BEGINNING</computeroutput> Truncate from the beginning of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_MIDDLE</computeroutput> Truncate from the middle of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_END</computeroutput> Truncate from the end of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_SMART</computeroutput> Truncate from anywhere, but do so so that each string is made unique after being truncated.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stringArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numStrings</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of strings in <emphasis>stringArray</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Truncation mode to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width to truncate to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination string array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="225" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a763a5d1ed2a35417906502a90649fd4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::GetTunedInfo</definition>
        <argsstring>(int32 index, tuned_font_info *info) const</argsstring>
        <name>GetTunedInfo</name>
        <qualifiedname>BFont::GetTunedInfo</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structtuned__font__info" kindref="compound">tuned_font_info</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Writes information about the tuned font at <emphasis>index</emphasis> into <emphasis>info</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The index begins at 0 and counts tuned fonts for current font family and style only.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of desired tuned font. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>turned_font_info</emphasis> struct to be filled out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="217" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a4ff3f4ffa944efcfa87499942d5174c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BFont::IncludesBlock</definition>
        <argsstring>(uint32 start, uint32 end) const</argsstring>
        <name>IncludesBlock</name>
        <qualifiedname>BFont::IncludesBlock</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Gets whether the font includes the specified Unicode block. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="213" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a206276168f466f05b8b59cb5b4532b02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BFont::IsFixed</definition>
        <argsstring>() const</argsstring>
        <name>IsFixed</name>
        <qualifiedname>BFont::IsFixed</qualifiedname>
        <briefdescription>
<para>Gets whether or not the font is fixed width. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the font is fixed width, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="209" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ab740fb49c0e04f29fc70ce8b3f61841b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BFont::IsFullAndHalfFixed</definition>
        <argsstring>() const</argsstring>
        <name>IsFullAndHalfFixed</name>
        <qualifiedname>BFont::IsFullAndHalfFixed</qualifiedname>
        <briefdescription>
<para>Returns whether or not the font is fixed-width and contains both full and half-width characters. </para>
        </briefdescription>
        <detaileddescription>
<para>A full-and-half-fixed font is one that contains characters of only two sizes, so that CJK languages can be properly supported.</para>
<para><simplesect kind="note"><para>This was unimplemented in BeOS R5, but is implemented in Haiku.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="210" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a7c1cc2f59b5a77f4376a60144dfed318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFont::LoadFont</definition>
        <argsstring>(const area_id fontAreaID, size_t size=0, size_t offset=0)</argsstring>
        <name>LoadFont</name>
        <qualifiedname>BFont::LoadFont</qualifiedname>
        <param>
          <type>const area_id</type>
          <declname>fontAreaID</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="286" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1acaf53e43ee71631a24fed79d6c76983e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFont::LoadFont</definition>
        <argsstring>(const char *path)</argsstring>
        <name>LoadFont</name>
        <qualifiedname>BFont::LoadFont</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="285" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a9ddc9342d0276ec8a88e7031aec601fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BFont::operator!=</definition>
        <argsstring>(const BFont &amp;font) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BFont::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classBFont" kindref="compound">BFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Inequality comparison overload method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBFont" kindref="compound">BFont</ref> object to compare the current font to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the fonts objects are NOT identical, <computeroutput>true</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="281" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ad729bd608054c0d2a32a576b6bbd3109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBFont" kindref="compound">BFont</ref> &amp;</type>
        <definition>BFont &amp; BFont::operator=</definition>
        <argsstring>(const BFont &amp;font)</argsstring>
        <name>operator=</name>
        <qualifiedname>BFont::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBFont" kindref="compound">BFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Assignment overload method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBFont" kindref="compound">BFont</ref> object to assign from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="279" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a610dd945338bae7c426f55e22210818a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BFont::operator==</definition>
        <argsstring>(const BFont &amp;font) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BFont::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBFont" kindref="compound">BFont</ref> &amp;</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Equality comparison overload method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBFont" kindref="compound">BFont</ref> object to compare the current font to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the fonts objects are identical, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="280" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a36f7ff96cbbf27b03fec141ca1846f5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::PrintToStream</definition>
        <argsstring>() const</argsstring>
        <name>PrintToStream</name>
        <qualifiedname>BFont::PrintToStream</qualifiedname>
        <briefdescription>
<para>Writes information about the font to <computeroutput>stdout</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>printf(&quot;BFont { %s (%d), %s (%d) 0x%x %f/%f %fpt (%f %f %f), %d }\n&quot;, family, fFamilyID, style, fStyleID, fFace, fShear, fRotation, fSize, fHeight.ascent, fHeight.descent, fHeight.leading, fEncoding);</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="283" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a8b6fbf57e4a5ac50aff40828c5429131" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BFont::Rotation</definition>
        <argsstring>() const</argsstring>
        <name>Rotation</name>
        <qualifiedname>BFont::Rotation</qualifiedname>
        <briefdescription>
<para>Gets the font rotation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The font rotation as an angle in degrees.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1a77545e73f293e08b9c9ddc7d6a547808" kindref="member">SetRotation()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="201" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1afdb8a74829abab2dd57591eb471e7901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetEncoding</definition>
        <argsstring>(uint8 encoding)</argsstring>
        <name>SetEncoding</name>
        <qualifiedname>BFont::SetEncoding</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
<para>Sets the character encoding of the font for example <computeroutput>B_UNICODE_UTF8</computeroutput> or <computeroutput>B_ISO_8859_1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following character encodings are supported:<itemizedlist>
<listitem><para><computeroutput>B_UNICODE_UTF8</computeroutput> </para>
</listitem><listitem><para><computeroutput>B_ISO_8859_1</computeroutput> aka Latin 1 aka &quot;Western European&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_2</computeroutput> aka Latin 2 aka &quot;Eastern European&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_3</computeroutput> aka Latin 3 aka &quot;South European&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_4</computeroutput> aka Latin 4 aka &quot;Northern European&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_5</computeroutput> aka &quot;Latin/Cyrillic&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_6</computeroutput> aka &quot;Latin/Arabic&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_7</computeroutput> aka &quot;Latin/Greek&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_8</computeroutput> aka &quot;Latin/Hebrew&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_9</computeroutput> aka Latin 5 aka &quot;Latin/Turkish&quot;.</para>
</listitem><listitem><para><computeroutput>B_ISO_8859_10</computeroutput> aka Latin 6 aka &quot;Nordic&quot;.</para>
</listitem><listitem><para><computeroutput>B_MACINTOSH_ROMAN</computeroutput> </para>
</listitem></itemizedlist>
</para>
<para>UTF-8 is the standard encoding used by classes in the Interface Kit. It is part of the Unicode® standard and allows Haiku to represent characters from all over the world while maintaining backwards compatibility with 7-bit ASCII codes.</para>
<para>Each of the encodings extend the ASCII codes and differ from each other only when the highest bit is set to 1, in other words, the value is greater than 127. Furthermore each of the encodings except for UTF-8 are represented by a single byte and consequently encompass a limited set of characters. Most of the encodings are in the ISO/IEC 8859 family of character codes with the notable exception of Macintosh Roman which is the standard encoding used by the classic Mac OS®.</para>
<para>If the value of the first byte of a UTF-8 character is greater than 127 it indicates that the character is a multibyte character and therefore you must look at the next byte (and possibly the third byte, or rarely even forth byte) to get the whole character.</para>
<para>Setting the character encoding on a view determines how <ref refid="classBView_1a5c261dbbb4e8157799e85d6ad1530920" kindref="member">BView::DrawString()</ref> interprets the values passed to it and also how <ref refid="classBView_1abea50ea665ce5fcb76b32f1302a6852d" kindref="member">BView::KeyDown()</ref> interprets the values representing the keys that the user presses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>The character encoding to set the font to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="192" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1afded119b1f1e6912d78d83fd23962adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetFace</definition>
        <argsstring>(uint16 face)</argsstring>
        <name>SetFace</name>
        <qualifiedname>BFont::SetFace</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Sets the font face according to the flags set by <emphasis>face</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following font face flags are supported:<itemizedlist>
<listitem><para><computeroutput>B_ITALIC_FACE</computeroutput> Characters are slanted to the right.</para>
</listitem><listitem><para><computeroutput>B_UNDERSCORE_FACE</computeroutput> Characters are underlined.</para>
</listitem><listitem><para><computeroutput>B_NEGATIVE_FACE</computeroutput> High and low colors are reversed when drawing characters.</para>
</listitem><listitem><para><computeroutput>B_OUTLINED_FACE</computeroutput> Characters are drawn hollowed out.</para>
</listitem><listitem><para><computeroutput>B_STRIKEOUT_FACE</computeroutput> A horizontal line is drawn through their middle.</para>
</listitem><listitem><para><computeroutput>B_BOLD_FACE</computeroutput> Characters are bold.</para>
</listitem><listitem><para><computeroutput>B_REGULAR_FACE</computeroutput> Characters are drawn normally.</para>
</listitem><listitem><para><computeroutput>B_CONDENSED_FACE</computeroutput> Characters are drawn condensed. Not in BeOS 5.</para>
</listitem><listitem><para><computeroutput>B_LIGHT_FACE</computeroutput> Characters are drawn thiner than normal. Not in BeOS 5.</para>
</listitem><listitem><para><computeroutput>B_HEAVY_FACE</computeroutput> Characters are drawn heavier than normal. Not in BeOS 5.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>face</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap of font face flags to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="193" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aef0c684bbe795fb491807d81cfb0827e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetFalseBoldWidth</definition>
        <argsstring>(float width)</argsstring>
        <name>SetFalseBoldWidth</name>
        <qualifiedname>BFont::SetFalseBoldWidth</qualifiedname>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Sets the false bold width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The false bold width to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="190" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a1ddd1ad258ca1cb017dcbcf9f218ebb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFont::SetFamilyAndFace</definition>
        <argsstring>(const font_family family, uint16 face)</argsstring>
        <name>SetFamilyAndFace</name>
        <qualifiedname>BFont::SetFamilyAndFace</qualifiedname>
        <param>
          <type>const font_family</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Sets the font&apos;s family and face all at once. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>Font family to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>face</parametername>
</parameternamelist>
<parameterdescription>
<para>Font face to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>To comply with the BeBook, this function will only set valid values, i.e. passing a nonexistent family will cause only the face to be set. Additionally, if a particular face does not exist in a family, the closest match will be chosen.</para>
</simplesect>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>Family does not exists or face has an invalid value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R4 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="184" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aadfd617a19b12a433d51dcdd75e356c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFont::SetFamilyAndStyle</definition>
        <argsstring>(const font_family family, const font_style style)</argsstring>
        <name>SetFamilyAndStyle</name>
        <qualifiedname>BFont::SetFamilyAndStyle</qualifiedname>
        <param>
          <type>const font_family</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const font_style</type>
          <declname>style</declname>
        </param>
        <briefdescription>
<para>Sets the font&apos;s family and style all at once. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>Font family to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>style</parametername>
</parameternamelist>
<parameterdescription>
<para>Font style to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> on success or an error code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>family</emphasis> is <computeroutput>NULL</computeroutput> and <emphasis>style</emphasis> is <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NAME_NOT_FOUND</parametername>
</parameternamelist>
<parameterdescription>
<para>Family or style do not exist.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="181" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ae15269df487fd4de01d1ce13612625af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetFamilyAndStyle</definition>
        <argsstring>(uint32 code)</argsstring>
        <name>SetFamilyAndStyle</name>
        <qualifiedname>BFont::SetFamilyAndStyle</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Sets the font&apos;s family and style from a font identifier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique font identifier obtained from the server.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="183" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aaf75531591c0b34fd58319dde7e73490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetFlags</definition>
        <argsstring>(uint32 flags)</argsstring>
        <name>SetFlags</name>
        <qualifiedname>BFont::SetFlags</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Sets font flags controlling antialiasing. </para>
        </briefdescription>
        <detaileddescription>
<para>The following flags are supported:<itemizedlist>
<listitem><para><computeroutput>B_DISABLE_ANTIALIASING</computeroutput> Disable antialiasing.</para>
</listitem><listitem><para><computeroutput>B_FORCE_ANTIALIASING</computeroutput> Force antialiasing.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The bitmap of flags to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="194" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a77545e73f293e08b9c9ddc7d6a547808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetRotation</definition>
        <argsstring>(float rotation)</argsstring>
        <name>SetRotation</name>
        <qualifiedname>BFont::SetRotation</qualifiedname>
        <param>
          <type>float</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
<para>Sets the font rotation from the baseline in degrees. </para>
        </briefdescription>
        <detaileddescription>
<para>The default baseline is 0° and rotates counterclockwise. Rotation is not supported by <ref refid="classBTextView" kindref="compound">BTextView</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotation in degrees to set the font to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="189" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a1dc08c49306eabc5b197bf8c59571ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetShear</definition>
        <argsstring>(float shear)</argsstring>
        <name>SetShear</name>
        <qualifiedname>BFont::SetShear</qualifiedname>
        <param>
          <type>float</type>
          <declname>shear</declname>
        </param>
        <briefdescription>
<para>Sets the angle in degrees relative to the baseline. </para>
        </briefdescription>
        <detaileddescription>
<para>The default shear is 90.0° measured counterclockwise. The shear range is from 45.0° to 135.0°.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shear</parametername>
</parameternamelist>
<parameterdescription>
<para>The shear in degrees to set the font to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="188" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a433aa71874a3dbee8119d31b2f6307fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetSize</definition>
        <argsstring>(float size)</argsstring>
        <name>SetSize</name>
        <qualifiedname>BFont::SetSize</qualifiedname>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the font size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The point size to set the font to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="187" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a60124c81326dc4ded81c7271669f111a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::SetSpacing</definition>
        <argsstring>(uint8 spacing)</argsstring>
        <name>SetSpacing</name>
        <qualifiedname>BFont::SetSpacing</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>spacing</declname>
        </param>
        <briefdescription>
<para>Sets how characters are horizontally spaced relative to each other. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>B_CHAR_SPACING</computeroutput> Position each character without adjustment. Best mode for printing. Characters may collide or overlap at small font sizes.</para>
</listitem><listitem><para><computeroutput>B_STRING_SPACING</computeroutput> Optimizes the position of each character within its space. Collisions are unlikely but characters may touch each other. Best mode to use when the screen needs to match what appears on the printed page. Adding new characters requires the entire string to be redrawn.</para>
</listitem><listitem><para><computeroutput>B_BITMAP_SPACING</computeroutput> The widths of the characters are chosen so that they never collide and rarely touch. Best mode for drawing small amounts of text. Character widths are integral values. Spacing on screen will not match spacing used by <computeroutput>B_CHAR_SPACING</computeroutput> mode for printing.</para>
</listitem><listitem><para><computeroutput>B_FIXED_SPACING</computeroutput> Positions characters at a constant width. Must be used with fixed-width fonts otherwise <computeroutput>B_CHAR_SPACING</computeroutput> mode is used. All characters have an identical integral escapement.</para>
</listitem></itemizedlist>
</para>
<para><computeroutput>B_STRING_SPACING</computeroutput> and <computeroutput>B_BITMAP_SPACING</computeroutput> modes are relevant only for font sizes from 7.0pt to 18.0pt, above and below that range <computeroutput>B_CHAR_SPACING</computeroutput> produces nicer results. <computeroutput>B_CHAR_SPACING</computeroutput> is also always used for rotated or sheared text and when antialiasing is disabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spacing</parametername>
</parameternamelist>
<parameterdescription>
<para>The spacing mode to set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classBView_1a5c261dbbb4e8157799e85d6ad1530920" kindref="member">BView::DrawString()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1aca49530c494a52f06fd5ea88d66a0f31" kindref="member">GetEscapements()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="191" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a4f13782b1626e9f48ac4a5e0d6a76f8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BFont::Shear</definition>
        <argsstring>() const</argsstring>
        <name>Shear</name>
        <qualifiedname>BFont::Shear</qualifiedname>
        <briefdescription>
<para>Gets the font shear. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The font shear as an angle from 45.0° to 135.0°.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1a1dc08c49306eabc5b197bf8c59571ab3" kindref="member">SetShear()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="200" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a97fd1a9309aee35a38ed236e7d0413d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BFont::Size</definition>
        <argsstring>() const</argsstring>
        <name>Size</name>
        <qualifiedname>BFont::Size</qualifiedname>
        <briefdescription>
<para>Gets the font size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The font size in points.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1a433aa71874a3dbee8119d31b2f6307fe" kindref="member">SetSize()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="199" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a95ad6df520a33a4e762f70b1d7d9bf47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BFont::Spacing</definition>
        <argsstring>() const</argsstring>
        <name>Spacing</name>
        <qualifiedname>BFont::Spacing</qualifiedname>
        <briefdescription>
<para>Gets the spacing constant. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The spacing constant.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBFont_1a60124c81326dc4ded81c7271669f111a" kindref="member">SetSpacing()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="203" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a752ca8369dbd8eb6be6dcebf168fb236" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BFont::StringWidth</definition>
        <argsstring>(const char *string) const</argsstring>
        <name>StringWidth</name>
        <qualifiedname>BFont::StringWidth</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Determines the amount of space required to draw <emphasis>string</emphasis> in the current font. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The width required to draw the string.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="229" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a53db68d7afb883f5b3be53c449faa765" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BFont::StringWidth</definition>
        <argsstring>(const char *string, int32 length) const</argsstring>
        <name>StringWidth</name>
        <qualifiedname>BFont::StringWidth</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Determines the amount of space required to draw <emphasis>string</emphasis> in the current font up to <emphasis>length</emphasis> characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters in <emphasis>string</emphasis> to consider.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The width required to draw the string.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="230" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1a91c0d35cea2f5142cc7c5a01505de80f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::TruncateString</definition>
        <argsstring>(BString *inOut, uint32 mode, float width) const</argsstring>
        <name>TruncateString</name>
        <qualifiedname>BFont::TruncateString</qualifiedname>
        <param>
          <type><ref refid="classBString" kindref="compound">BString</ref> *</type>
          <declname>inOut</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Truncates <emphasis>inOut</emphasis> to be no longer than <emphasis>width</emphasis> using the supplied truncation <emphasis>mode</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following truncation modes are supported:<itemizedlist>
<listitem><para><computeroutput>B_NO_TRUNCATION</computeroutput> Does nothing.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_BEGINNING</computeroutput> Truncate from the beginning of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_MIDDLE</computeroutput> Truncate from the middle of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_END</computeroutput> Truncate from the end of the string.</para>
</listitem><listitem><para><computeroutput>B_TRUNCATE_SMART</computeroutput> Truncate from anywhere, but do so so that each string is made unique after being truncated.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inOut</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBString" kindref="compound">BString</ref> to truncate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Truncation mode to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width to truncate to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R5 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="220" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1aec114f482b6b3bf898e2ae58faa1418d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BFont::UnloadFont</definition>
        <argsstring>()</argsstring>
        <name>UnloadFont</name>
        <qualifiedname>BFont::UnloadFont</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="288" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBFont_1a129f0a28d9a9aede0d20b2f21fb34ac6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _init_global_fonts_</definition>
        <argsstring>()</argsstring>
        <name>_init_global_fonts_</name>
        <qualifiedname>BFont::_init_global_fonts_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="291" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBFont_1abe4fe16e05436e7aeff83b1d8fa572fc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::_GetBoundingBoxes</definition>
        <argsstring>(const char charArray[], int32 numChars, font_metric_mode mode, bool string_escapement, escapement_delta *delta, BRect boundingBoxArray[], bool asString) const</argsstring>
        <name>_GetBoundingBoxes</name>
        <qualifiedname>BFont::_GetBoundingBoxes</qualifiedname>
        <param>
          <type>const char</type>
          <declname>charArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>numChars</declname>
        </param>
        <param>
          <type><ref refid="Font_8h_1a387f5f5a7488dc30f9c39fec61a11c16" kindref="member">font_metric_mode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>string_escapement</declname>
        </param>
        <param>
          <type><ref refid="structescapement__delta" kindref="compound">escapement_delta</ref> *</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="classBRect" kindref="compound">BRect</ref></type>
          <declname>boundingBoxArray</declname>
          <array>[]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>asString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="294" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBFont_1ae5fe8dcc33ee71797b1a60611f6c1b61" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BFont::_GetExtraFlags</definition>
        <argsstring>() const</argsstring>
        <name>_GetExtraFlags</name>
        <qualifiedname>BFont::_GetExtraFlags</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="293" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a typeface including its family, style and size. </para>
    </briefdescription>
    <detaileddescription>
<para>The Interface Kit provides three prebuilt <ref refid="classBFont" kindref="compound">BFont</ref> objects which can be used but not modified.<itemizedlist>
<listitem><para><computeroutput>const</computeroutput> BFont* <computeroutput>be_plain_font</computeroutput> A plain font used by many controls.</para>
</listitem><listitem><para><computeroutput>const</computeroutput> BFont* <computeroutput>be_bold_font</computeroutput> A bold font used by titles.</para>
</listitem><listitem><para><computeroutput>const</computeroutput> BFont* <computeroutput>be_fixed_font</computeroutput> A fixed-width font.</para>
</listitem></itemizedlist>
</para>
<para>A <ref refid="classBFont" kindref="compound">BFont</ref> object does nothing on its own but is used in combination with a view or control. Here is an example of creating a <ref refid="classBFont" kindref="compound">BFont</ref> object from a system font and assigning it to a view:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBFont" kindref="compound">BFont</ref><sp/>font(be_plain_font);</highlight></codeline>
<codeline><highlight class="normal">font.SetSize(12.0);</highlight></codeline>
<codeline><highlight class="normal">font.SetEncoding(<ref refid="Font_8h_1adb49720dc49f7d4e4cf9adbf2948e409add911f2292339def8046db3a035115fd" kindref="member">B_ISO_8859_1</ref>);</highlight></codeline>
<codeline><highlight class="normal">view-&gt;SetFont(&amp;font);</highlight></codeline>
</programlisting></para>
<para>You may also create a <ref refid="classBFont" kindref="compound">BFont</ref> object from a view, modify it and reassign it back to the view like this:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="classBFont" kindref="compound">BFont</ref><sp/>font;</highlight></codeline>
<codeline><highlight class="normal">view-&gt;GetFont(&amp;font);</highlight></codeline>
<codeline><highlight class="normal">font.<ref refid="classBFont_1afded119b1f1e6912d78d83fd23962adb" kindref="member">SetFace</ref>(<ref refid="Font_8h_1a39fca1837c5ce7715cbf571669660c13a8019df66780784d35c133a11f4f3d475" kindref="member">B_ITALIC_FACE</ref>);</highlight></codeline>
<codeline><highlight class="normal">font.<ref refid="classBFont_1a60124c81326dc4ded81c7271669f111a" kindref="member">SetSpacing</ref>(<ref refid="Font_8h_1a80155586fa275b28773c9b203f52cabaa9035ba868612127d12ac93512440c484" kindref="member">B_CHAR_SPACING</ref>);</highlight></codeline>
<codeline><highlight class="normal">myView-&gt;SetFont(&amp;font);</highlight></codeline>
</programlisting></para>
<para>You can change the way a font renders with the <ref refid="classBFont_1aadfd617a19b12a433d51dcdd75e356c1" kindref="member">SetFamilyAndStyle()</ref>, <ref refid="classBFont_1a1ddd1ad258ca1cb017dcbcf9f218ebb2" kindref="member">SetFamilyAndFace()</ref>, <ref refid="classBFont_1a433aa71874a3dbee8119d31b2f6307fe" kindref="member">SetSize()</ref>, <ref refid="classBFont_1a1dc08c49306eabc5b197bf8c59571ab3" kindref="member">SetShear()</ref>, <ref refid="classBFont_1a77545e73f293e08b9c9ddc7d6a547808" kindref="member">SetRotation()</ref>, <ref refid="classBFont_1aef0c684bbe795fb491807d81cfb0827e" kindref="member">SetFalseBoldWidth()</ref>, <ref refid="classBFont_1a60124c81326dc4ded81c7271669f111a" kindref="member">SetSpacing()</ref>, <ref refid="classBFont_1afdb8a74829abab2dd57591eb471e7901" kindref="member">SetEncoding()</ref>, <ref refid="classBFont_1afded119b1f1e6912d78d83fd23962adb" kindref="member">SetFace()</ref>, and <ref refid="classBFont_1aaf75531591c0b34fd58319dde7e73490" kindref="member">SetFlags()</ref> methods.</para>
<para>More information about the space taken up by a font can be determined by querying a <ref refid="classBFont" kindref="compound">BFont</ref> object using the following methods: <ref refid="classBFont_1a752ca8369dbd8eb6be6dcebf168fb236" kindref="member">StringWidth()</ref>, <ref refid="classBFont_1a876823361e0c90c6c5e2a1fb3ab7c317" kindref="member">GetStringWidths()</ref> <ref refid="classBFont_1aca49530c494a52f06fd5ea88d66a0f31" kindref="member">GetEscapements()</ref>, <ref refid="classBFont_1aa08a3467e1720dd4431fb7264a242c45" kindref="member">GetEdges()</ref>, <ref refid="classBFont_1a9748877645b9e3ab98a3a43a5375f392" kindref="member">GetHeight()</ref>, <ref refid="classBFont_1ae8ad82beb4f332876a5ad93cd527cdb3" kindref="member">BoundingBox()</ref> <ref refid="classBFont_1afe3a10678a3dbe21fd04a1bac05a850d" kindref="member">GetBoundingBoxesAsGlyphs()</ref>, <ref refid="classBFont_1a6fd11aac2f55781dfe60d021e40cd7f7" kindref="member">GetBoundingBoxesAsString()</ref>, and <ref refid="classBFont_1a3a0625c7fcb2af6fe24a4c961ed8a937" kindref="member">GetBoundingBoxesForStrings()</ref>.</para>
<para>You can also perform intelligent string truncation with the <ref refid="classBFont_1a91c0d35cea2f5142cc7c5a01505de80f" kindref="member">TruncateString()</ref> and <ref refid="classBFont_1abbee20530f5e414a27b4437220459aec" kindref="member">GetTruncatedStrings()</ref> methods.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/interface/Font.h" line="175" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/Font.h" bodystart="175" bodyend="316"/>
    <listofallmembers>
      <member refid="classBFont_1abe4fe16e05436e7aeff83b1d8fa572fc" prot="private" virt="non-virtual"><scope>BFont</scope><name>_GetBoundingBoxes</name></member>
      <member refid="classBFont_1ae5fe8dcc33ee71797b1a60611f6c1b61" prot="private" virt="non-virtual"><scope>BFont</scope><name>_GetExtraFlags</name></member>
      <member refid="classBFont_1a129f0a28d9a9aede0d20b2f21fb34ac6" prot="private" virt="non-virtual"><scope>BFont</scope><name>_init_global_fonts_</name></member>
      <member refid="classBFont_1aa88e201fe20441184ed8419ca7c13d2b" prot="private" virt="non-virtual"><scope>BFont</scope><name>_reserved</name></member>
      <member refid="classBFont_1ad66965429ac72d5b3d0cce32fc855e3c" prot="public" virt="non-virtual"><scope>BFont</scope><name>BFont</name></member>
      <member refid="classBFont_1a6a6820b1f9b64355195bbc859da96195" prot="public" virt="non-virtual"><scope>BFont</scope><name>BFont</name></member>
      <member refid="classBFont_1a5ad29ba7ce99d5d7a1788ab94d1b498c" prot="public" virt="non-virtual"><scope>BFont</scope><name>BFont</name></member>
      <member refid="classBFont_1a8151aa73d7f435cd9c4115a8b92f62cc" prot="public" virt="non-virtual"><scope>BFont</scope><name>Blocks</name></member>
      <member refid="classBFont_1ae8ad82beb4f332876a5ad93cd527cdb3" prot="public" virt="non-virtual"><scope>BFont</scope><name>BoundingBox</name></member>
      <member refid="classBFont_1aeb2d8695b587d341116bda8bd272ae1f" prot="public" virt="non-virtual"><scope>BFont</scope><name>CountTuned</name></member>
      <member refid="classBFont_1a035e23156c1224ae163edef7c4cc3f42" prot="public" virt="non-virtual"><scope>BFont</scope><name>Direction</name></member>
      <member refid="classBFont_1a0a9a61b8b505f3853ff4f2e2354a8645" prot="public" virt="non-virtual"><scope>BFont</scope><name>Encoding</name></member>
      <member refid="classBFont_1a4ebe97df6ee2e3afe23a74e12f3268f9" prot="public" virt="non-virtual"><scope>BFont</scope><name>Face</name></member>
      <member refid="classBFont_1a3c9abfe103d7d57f665e61442f89005b" prot="public" virt="non-virtual"><scope>BFont</scope><name>FalseBoldWidth</name></member>
      <member refid="classBFont_1af1fd7295648a7202cfedff55c557353e" prot="public" virt="non-virtual"><scope>BFont</scope><name>FamilyAndStyle</name></member>
      <member refid="classBFont_1aa56a7ca82ce35c5a869eeae89584a97d" prot="private" virt="non-virtual"><scope>BFont</scope><name>fEncoding</name></member>
      <member refid="classBFont_1a1e8884d15d707d319a66a83043940258" prot="private" virt="non-virtual"><scope>BFont</scope><name>fExtraFlags</name></member>
      <member refid="classBFont_1a2efd1f7b082ef125f55fe0ed1e028591" prot="private" virt="non-virtual"><scope>BFont</scope><name>fFace</name></member>
      <member refid="classBFont_1aaebb19d7cf04d998a432bcc023b2f6d3" prot="private" virt="non-virtual"><scope>BFont</scope><name>fFalseBoldWidth</name></member>
      <member refid="classBFont_1a6cdefff39c12131ea8ceb90faa5163d6" prot="private" virt="non-virtual"><scope>BFont</scope><name>fFamilyID</name></member>
      <member refid="classBFont_1ad268fb21e0f1fcdad6442aff385509c2" prot="private" virt="non-virtual"><scope>BFont</scope><name>fFlags</name></member>
      <member refid="classBFont_1a41b63fdf465ded52026133e7e8de8fc2" prot="private" virt="non-virtual"><scope>BFont</scope><name>fHeight</name></member>
      <member refid="classBFont_1a40f571f695c6c684c52fc82a3ea22a52" prot="public" virt="non-virtual"><scope>BFont</scope><name>FileFormat</name></member>
      <member refid="classBFont_1a0aff01f09a6f66531bf84ff9291ce3c3" prot="public" virt="non-virtual"><scope>BFont</scope><name>Flags</name></member>
      <member refid="classBFont_1a1c7491920bc85cf4151f91a872186d2f" prot="private" virt="non-virtual"><scope>BFont</scope><name>fRotation</name></member>
      <member refid="classBFont_1a1ba8957402f1fea60e183d93a4f7fbc2" prot="private" virt="non-virtual"><scope>BFont</scope><name>fShear</name></member>
      <member refid="classBFont_1a2f90b47d01b4a5c6f04aeb686878aac0" prot="private" virt="non-virtual"><scope>BFont</scope><name>fSize</name></member>
      <member refid="classBFont_1a7bac031b5a0caf6c456a3b60ec5f7e21" prot="private" virt="non-virtual"><scope>BFont</scope><name>fSpacing</name></member>
      <member refid="classBFont_1a70e5c138862818693c013869c996d8d2" prot="private" virt="non-virtual"><scope>BFont</scope><name>fStyleID</name></member>
      <member refid="classBFont_1afe3a10678a3dbe21fd04a1bac05a850d" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetBoundingBoxesAsGlyphs</name></member>
      <member refid="classBFont_1a6fd11aac2f55781dfe60d021e40cd7f7" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetBoundingBoxesAsString</name></member>
      <member refid="classBFont_1a3a0625c7fcb2af6fe24a4c961ed8a937" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetBoundingBoxesForStrings</name></member>
      <member refid="classBFont_1aa08a3467e1720dd4431fb7264a242c45" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetEdges</name></member>
      <member refid="classBFont_1aca49530c494a52f06fd5ea88d66a0f31" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetEscapements</name></member>
      <member refid="classBFont_1aa39a97d880d8794025af782f14a40a74" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetEscapements</name></member>
      <member refid="classBFont_1aa8c8b0cdba41438877b020549ac9d479" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetEscapements</name></member>
      <member refid="classBFont_1ae89a618b3b920d802c67b6ce39e8e010" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetEscapements</name></member>
      <member refid="classBFont_1ae2dc43eff88752137b4f4323a8666efa" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetFamilyAndStyle</name></member>
      <member refid="classBFont_1ac51729d5adbaabf69520f9d2342af1b1" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetGlyphShapes</name></member>
      <member refid="classBFont_1ad00446a1de8b804235e76c8160f056e3" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetHasGlyphs</name></member>
      <member refid="classBFont_1a9748877645b9e3ab98a3a43a5375f392" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetHeight</name></member>
      <member refid="classBFont_1a876823361e0c90c6c5e2a1fb3ab7c317" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetStringWidths</name></member>
      <member refid="classBFont_1abbee20530f5e414a27b4437220459aec" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetTruncatedStrings</name></member>
      <member refid="classBFont_1aa8313e73eb3a0a2aac8799f8d0cd52bc" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetTruncatedStrings</name></member>
      <member refid="classBFont_1a763a5d1ed2a35417906502a90649fd4a" prot="public" virt="non-virtual"><scope>BFont</scope><name>GetTunedInfo</name></member>
      <member refid="classBFont_1a4ff3f4ffa944efcfa87499942d5174c0" prot="public" virt="non-virtual"><scope>BFont</scope><name>IncludesBlock</name></member>
      <member refid="classBFont_1a206276168f466f05b8b59cb5b4532b02" prot="public" virt="non-virtual"><scope>BFont</scope><name>IsFixed</name></member>
      <member refid="classBFont_1ab740fb49c0e04f29fc70ce8b3f61841b" prot="public" virt="non-virtual"><scope>BFont</scope><name>IsFullAndHalfFixed</name></member>
      <member refid="classBFont_1acaf53e43ee71631a24fed79d6c76983e" prot="public" virt="non-virtual"><scope>BFont</scope><name>LoadFont</name></member>
      <member refid="classBFont_1a7c1cc2f59b5a77f4376a60144dfed318" prot="public" virt="non-virtual"><scope>BFont</scope><name>LoadFont</name></member>
      <member refid="classBFont_1a9ddc9342d0276ec8a88e7031aec601fe" prot="public" virt="non-virtual"><scope>BFont</scope><name>operator!=</name></member>
      <member refid="classBFont_1ad729bd608054c0d2a32a576b6bbd3109" prot="public" virt="non-virtual"><scope>BFont</scope><name>operator=</name></member>
      <member refid="classBFont_1a610dd945338bae7c426f55e22210818a" prot="public" virt="non-virtual"><scope>BFont</scope><name>operator==</name></member>
      <member refid="classBFont_1a36f7ff96cbbf27b03fec141ca1846f5f" prot="public" virt="non-virtual"><scope>BFont</scope><name>PrintToStream</name></member>
      <member refid="classBFont_1a8b6fbf57e4a5ac50aff40828c5429131" prot="public" virt="non-virtual"><scope>BFont</scope><name>Rotation</name></member>
      <member refid="classBFont_1afdb8a74829abab2dd57591eb471e7901" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetEncoding</name></member>
      <member refid="classBFont_1afded119b1f1e6912d78d83fd23962adb" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetFace</name></member>
      <member refid="classBFont_1aef0c684bbe795fb491807d81cfb0827e" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetFalseBoldWidth</name></member>
      <member refid="classBFont_1a1ddd1ad258ca1cb017dcbcf9f218ebb2" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetFamilyAndFace</name></member>
      <member refid="classBFont_1aadfd617a19b12a433d51dcdd75e356c1" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetFamilyAndStyle</name></member>
      <member refid="classBFont_1ae15269df487fd4de01d1ce13612625af" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetFamilyAndStyle</name></member>
      <member refid="classBFont_1aaf75531591c0b34fd58319dde7e73490" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetFlags</name></member>
      <member refid="classBFont_1a77545e73f293e08b9c9ddc7d6a547808" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetRotation</name></member>
      <member refid="classBFont_1a1dc08c49306eabc5b197bf8c59571ab3" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetShear</name></member>
      <member refid="classBFont_1a433aa71874a3dbee8119d31b2f6307fe" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetSize</name></member>
      <member refid="classBFont_1a60124c81326dc4ded81c7271669f111a" prot="public" virt="non-virtual"><scope>BFont</scope><name>SetSpacing</name></member>
      <member refid="classBFont_1a4f13782b1626e9f48ac4a5e0d6a76f8c" prot="public" virt="non-virtual"><scope>BFont</scope><name>Shear</name></member>
      <member refid="classBFont_1a97fd1a9309aee35a38ed236e7d0413d7" prot="public" virt="non-virtual"><scope>BFont</scope><name>Size</name></member>
      <member refid="classBFont_1a95ad6df520a33a4e762f70b1d7d9bf47" prot="public" virt="non-virtual"><scope>BFont</scope><name>Spacing</name></member>
      <member refid="classBFont_1a752ca8369dbd8eb6be6dcebf168fb236" prot="public" virt="non-virtual"><scope>BFont</scope><name>StringWidth</name></member>
      <member refid="classBFont_1a53db68d7afb883f5b3be53c449faa765" prot="public" virt="non-virtual"><scope>BFont</scope><name>StringWidth</name></member>
      <member refid="classBFont_1a91c0d35cea2f5142cc7c5a01505de80f" prot="public" virt="non-virtual"><scope>BFont</scope><name>TruncateString</name></member>
      <member refid="classBFont_1aec114f482b6b3bf898e2ae58faa1418d" prot="public" virt="non-virtual"><scope>BFont</scope><name>UnloadFont</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
