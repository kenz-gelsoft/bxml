<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMediaBufferDecoder" kind="class" language="C++" prot="public">
    <compoundname>BMediaBufferDecoder</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BMediaDecoder</basecompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBMediaBufferDecoder_1adef399e6b173c6f3477aa6cf0779016b" prot="protected" static="no" mutable="no">
        <type>const void *</type>
        <definition>const void* BMediaBufferDecoder::fBuffer</definition>
        <argsstring></argsstring>
        <name>fBuffer</name>
        <qualifiedname>BMediaBufferDecoder::fBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="88" column="12" bodyfile="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMediaBufferDecoder_1a8193ca7de0ac161e7a35976f4f726032" prot="protected" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BMediaBufferDecoder::fBufferSize</definition>
        <argsstring></argsstring>
        <name>fBufferSize</name>
        <qualifiedname>BMediaBufferDecoder::fBufferSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="89" column="7" bodyfile="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBMediaBufferDecoder_1a584e6f327a6d3058e462c5a4387bba9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMediaBufferDecoder::BMediaBufferDecoder</definition>
        <argsstring>()</argsstring>
        <name>BMediaBufferDecoder</name>
        <qualifiedname>BMediaBufferDecoder::BMediaBufferDecoder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaBufferDecoder_1a512cd73975a117a4cf55c217f8ed171b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMediaBufferDecoder::BMediaBufferDecoder</definition>
        <argsstring>(const media_codec_info *mci)</argsstring>
        <name>BMediaBufferDecoder</name>
        <qualifiedname>BMediaBufferDecoder::BMediaBufferDecoder</qualifiedname>
        <param>
          <type>const media_codec_info *</type>
          <declname>mci</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaBufferDecoder_1aaa3bbaa1379442a096060736dfb7a697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMediaBufferDecoder::BMediaBufferDecoder</definition>
        <argsstring>(const media_format *in_format, const void *info=NULL, size_t info_size=0)</argsstring>
        <name>BMediaBufferDecoder</name>
        <qualifiedname>BMediaBufferDecoder::BMediaBufferDecoder</qualifiedname>
        <param>
          <type>const media_format *</type>
          <declname>in_format</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>info</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>info_size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMediaBufferDecoder_1a59e43a148ea3ee53ad4337b09b17f029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMediaBufferDecoder::DecodeBuffer</definition>
        <argsstring>(const void *input_buffer, size_t input_size, void *out_buffer, int64 *out_frameCount, media_header *out_mh, media_decode_info *info=NULL)</argsstring>
        <name>DecodeBuffer</name>
        <qualifiedname>BMediaBufferDecoder::DecodeBuffer</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>input_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out_buffer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1abfe468d3544c044c1b17902a4876e7f0" kindref="member">int64</ref> *</type>
          <declname>out_frameCount</declname>
        </param>
        <param>
          <type>media_header *</type>
          <declname>out_mh</declname>
        </param>
        <param>
          <type>media_decode_info *</type>
          <declname>info</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="81" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBMediaBufferDecoder_1ad071c3a7c7b5602beaa63b97a99b4b7f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BMediaBufferDecoder::GetNextChunk</definition>
        <argsstring>(const void **chunkData, size_t *chunkLen, media_header *mh)</argsstring>
        <name>GetNextChunk</name>
        <qualifiedname>BMediaBufferDecoder::GetNextChunk</qualifiedname>
        <param>
          <type>const void **</type>
          <declname>chunkData</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>chunkLen</declname>
        </param>
        <param>
          <type>media_header *</type>
          <declname>mh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="86" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" line="75" column="1" bodyfile="/boot/home/src/haiku/headers/os/media/MediaDecoder.h" bodystart="75" bodyend="90"/>
    <listofallmembers>
      <member refid="classBMediaBufferDecoder_1a584e6f327a6d3058e462c5a4387bba9e" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>BMediaBufferDecoder</name></member>
      <member refid="classBMediaBufferDecoder_1aaa3bbaa1379442a096060736dfb7a697" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>BMediaBufferDecoder</name></member>
      <member refid="classBMediaBufferDecoder_1a512cd73975a117a4cf55c217f8ed171b" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>BMediaBufferDecoder</name></member>
      <member refid="classBMediaDecoder_1abf6cfb0f0c4ba637127a6627201e1082" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>BMediaDecoder</name></member>
      <member refid="classBMediaDecoder_1ad70bfe95a2f8a4cf6849d89f5d21f165" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>BMediaDecoder</name></member>
      <member refid="classBMediaDecoder_1a6f413427b0cda2e6ed7d4da7334da2d4" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>BMediaDecoder</name></member>
      <member refid="classBMediaDecoder_1a299bbe8593703f023d5c86c8b1096b5a" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>Decode</name></member>
      <member refid="classBMediaBufferDecoder_1a59e43a148ea3ee53ad4337b09b17f029" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>DecodeBuffer</name></member>
      <member refid="classBMediaBufferDecoder_1adef399e6b173c6f3477aa6cf0779016b" prot="protected" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>fBuffer</name></member>
      <member refid="classBMediaBufferDecoder_1a8193ca7de0ac161e7a35976f4f726032" prot="protected" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>fBufferSize</name></member>
      <member refid="classBMediaDecoder_1a15fd7584169a415357ba8fb35b194d20" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>GetDecoderInfo</name></member>
      <member refid="classBMediaBufferDecoder_1ad071c3a7c7b5602beaa63b97a99b4b7f" prot="protected" virt="virtual"><scope>BMediaBufferDecoder</scope><name>GetNextChunk</name></member>
      <member refid="classBMediaDecoder_1a97df04860bf5f41ba73e1ca190e87b61" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>InitCheck</name></member>
      <member refid="classBMediaDecoder_1a0ffdb3fbcea875d7f94128d39a6fa663" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>SetInputFormat</name></member>
      <member refid="classBMediaDecoder_1a717a63a9b53847062c3b44a10ec9d2c5" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>SetOutputFormat</name></member>
      <member refid="classBMediaDecoder_1aa4d12844d91eabcc5e24e5815ae8fc93" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>SetTo</name></member>
      <member refid="classBMediaDecoder_1ade3c12e9416dcb0d1016fd4f253e0291" prot="public" virt="non-virtual"><scope>BMediaBufferDecoder</scope><name>SetTo</name></member>
      <member refid="classBMediaDecoder_1a11e1a63813c3e35b0710b692ff988d5e" prot="public" virt="virtual"><scope>BMediaBufferDecoder</scope><name>~BMediaDecoder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
