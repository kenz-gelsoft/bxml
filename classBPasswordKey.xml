<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPasswordKey" kind="class" language="C++" prot="public">
    <compoundname>BPasswordKey</compoundname>
    <basecompoundref refid="classBKey" prot="public" virt="non-virtual">BKey</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPasswordKey_1aa667369ca41b313313374cfbf556c797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPasswordKey::BPasswordKey</definition>
        <argsstring>()</argsstring>
        <name>BPasswordKey</name>
        <qualifiedname>BPasswordKey::BPasswordKey</qualifiedname>
        <briefdescription>
<para>Constructor for an empty password key. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty key has no data associated with it, other than that it has a generic purpose and a password key type.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1a97d1797a04fae33d6ce5c87a0dd6c6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPasswordKey::BPasswordKey</definition>
        <argsstring>(BPasswordKey &amp;other)</argsstring>
        <name>BPasswordKey</name>
        <qualifiedname>BPasswordKey::BPasswordKey</qualifiedname>
        <param>
          <type><ref refid="classBPasswordKey" kindref="compound">BPasswordKey</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor that makes a copy of an <emphasis>other</emphasis> <ref refid="classBPasswordKey" kindref="compound">BPasswordKey</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1abfd39eba0b2d9295af356dd591854e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPasswordKey::BPasswordKey</definition>
        <argsstring>(const char *password, BKeyPurpose purpose, const char *identifier, const char *secondaryIdentifier=NULL)</argsstring>
        <name>BPasswordKey</name>
        <qualifiedname>BPasswordKey::BPasswordKey</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
          <declname>purpose</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Constructor for a password key with the provided data. </para>
        </briefdescription>
        <detaileddescription>
<para>See the <ref refid="classBKey" kindref="compound">BKey</ref> introduction for more information about the properties of a key. As you can see, the only required parameters are the <emphasis>purpose</emphasis> and the <emphasis>identifier</emphasis>. Any data you provide will be copied into the <ref refid="classBKey" kindref="compound">BKey</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated string that contains the password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>purpose</parametername>
</parameternamelist>
<parameterdescription>
<para>The purpose of this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique identifier for this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondaryIdentifier</parametername>
</parameternamelist>
<parameterdescription>
<para>An (optional) secondary identifier for this key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1af21b7ed6f6546491459478d7a56a23d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BPasswordKey::~BPasswordKey</definition>
        <argsstring>()</argsstring>
        <name>~BPasswordKey</name>
        <qualifiedname>BPasswordKey::~BPasswordKey</qualifiedname>
        <briefdescription>
<para>Free all resources associated with this key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="100" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1ad554ead88f376d5b86a35e19e63b346c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BPasswordKey::Password</definition>
        <argsstring>() const</argsstring>
        <name>Password</name>
        <qualifiedname>BPasswordKey::Password</qualifiedname>
        <briefdescription>
<para>Get the password for the key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="110" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1a64ff92b5e0fde95eef53112a99f868dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BPasswordKey::PrintToStream</definition>
        <argsstring>()</argsstring>
        <name>PrintToStream</name>
        <qualifiedname>BPasswordKey::PrintToStream</qualifiedname>
        <reimplements refid="classBKey_1ac7cd25324b948b012a6e0cf16f940658">PrintToStream</reimplements>
        <briefdescription>
<para>Dump the contents of the key to standard output. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a debug function that helps you read the contents of the key. All properties, including the actual <bold>password</bold>, will be printed to <computeroutput>stdout</computeroutput>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="112" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1a2f68636af50e84b753a646c68fb17c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPasswordKey::SetPassword</definition>
        <argsstring>(const char *password)</argsstring>
        <name>SetPassword</name>
        <qualifiedname>BPasswordKey::SetPassword</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Set the <emphasis>password</emphasis> for this key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated string that contains the password.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="109" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1a1beb95e09102cd23d24b10a97a566f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BPasswordKey::SetTo</definition>
        <argsstring>(const char *password, BKeyPurpose purpose, const char *identifier, const char *secondaryIdentifier=NULL)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BPasswordKey::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <param>
          <type><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5d" kindref="member">BKeyPurpose</ref></type>
          <declname>purpose</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>secondaryIdentifier</declname>
          <defval><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></defval>
        </param>
        <briefdescription>
<para>Set the key to specific values. </para>
        </briefdescription>
        <detaileddescription>
<para>All properties of the key will be set to the parameters. If the key had a creation time set, it will be cleared. If there was an owner set, this piece of information will <emphasis>not</emphasis> be cleared.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated string that contains the password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>purpose</parametername>
</parameternamelist>
<parameterdescription>
<para>The purpose of this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique identifier for this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondaryIdentifier</parametername>
</parameternamelist>
<parameterdescription>
<para>An (optional) secondary identifier for this key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para><computeroutput>B_OK</computeroutput> if the changes were successful.</para>
</listitem><listitem><para><computeroutput>B_NO_MEMORY</computeroutput> in case it fails to allocate memory.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="104" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBPasswordKey_1a8c53e208ace43023a7ed026bdf0938b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444" kindref="member">BKeyType</ref></type>
        <definition>BKeyType BPasswordKey::Type</definition>
        <argsstring>() const</argsstring>
        <name>Type</name>
        <qualifiedname>BPasswordKey::Type</qualifiedname>
        <reimplements refid="classBKey_1a7971f210c7d6805a415ec19dbae3038d">Type</reimplements>
        <briefdescription>
<para>Returns BKeyType::B_KEY_TYPE_PASSWORD. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="102" column="16" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="102" bodyend="102"/>
        <references refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444aed0cd6ae9d3daf69a44facdf0852836a" compoundref="Key_8h" startline="28">B_KEY_TYPE_PASSWORD</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that represents a password for or from the Haiku key store. </para>
    </briefdescription>
    <detaileddescription>
<para>This is a specialized version of the <ref refid="classBKey" kindref="compound">BKey</ref> class, which represents a key of the BKeyType::B_KEY_TYPE_PASSWORD.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BKey</label>
        <link refid="classBKey"/>
      </node>
      <node id="1">
        <label>BPasswordKey</label>
        <link refid="classBPasswordKey"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BKey</label>
        <link refid="classBKey"/>
      </node>
      <node id="1">
        <label>BPasswordKey</label>
        <link refid="classBPasswordKey"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/app/Key.h" line="93" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/Key.h" bodystart="93" bodyend="113"/>
    <listofallmembers>
      <member refid="classBKey_1a77809839d879a1c07eddd64d8ff88b1a" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>BKey</name></member>
      <member refid="classBKey_1a25764fe6ea6418ea5a3f10d903f80aa4" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>BKey</name></member>
      <member refid="classBKey_1ab797b11dcd56baefc46b298fc0b8a718" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>BKey</name></member>
      <member refid="classBPasswordKey_1aa667369ca41b313313374cfbf556c797" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>BPasswordKey</name></member>
      <member refid="classBPasswordKey_1abfd39eba0b2d9295af356dd591854e10" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>BPasswordKey</name></member>
      <member refid="classBPasswordKey_1a97d1797a04fae33d6ce5c87a0dd6c6e0" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>BPasswordKey</name></member>
      <member refid="classBKey_1af14a6300c8eccb77040c3d06fa7c9933" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>CreationTime</name></member>
      <member refid="classBKey_1a55f2daba99a80eacfae784ec5b681c65" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>Data</name></member>
      <member refid="classBKey_1a8691803a6b74f8e27ae9cbc89ab6eb21" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>DataLength</name></member>
      <member refid="classBKey_1a054a1fea3c3a71393589ff6f45d873f2" prot="public" virt="virtual"><scope>BPasswordKey</scope><name>Flatten</name></member>
      <member refid="classBKey_1ae129138c6f94b3e6b796122c07c80f94" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>GetData</name></member>
      <member refid="classBKey_1a519fb286f9b9bf340c45ab42ade87257" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>Identifier</name></member>
      <member refid="classBKey_1ae67824b7f83adf295a47b9cb31edac81" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>operator!=</name></member>
      <member refid="classBKey_1a9ffb98b62e2f1d1f2bbadbc9e917ee69" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>operator=</name></member>
      <member refid="classBKey_1abec7406e9dbf876d9102ee08642f663d" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>operator==</name></member>
      <member refid="classBKey_1aea174803d7f63f94dd9de82bdf7b70b4" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>Owner</name></member>
      <member refid="classBPasswordKey_1ad554ead88f376d5b86a35e19e63b346c" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>Password</name></member>
      <member refid="classBPasswordKey_1a64ff92b5e0fde95eef53112a99f868dc" prot="public" virt="virtual"><scope>BPasswordKey</scope><name>PrintToStream</name></member>
      <member refid="classBKey_1a3545ab4336657b23ce9f062e4d2eb831" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>Purpose</name></member>
      <member refid="classBKey_1a8f31e4a4b0eb8ccce2e4a9214d7651a6" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>SecondaryIdentifier</name></member>
      <member refid="classBKey_1adaf416afe5767fcc27bd79caa990e488" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>SetData</name></member>
      <member refid="classBKey_1aaf927007ee39004f99acebd9741ba621" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>SetIdentifier</name></member>
      <member refid="classBPasswordKey_1a2f68636af50e84b753a646c68fb17c2d" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>SetPassword</name></member>
      <member refid="classBKey_1adba48733f398dd45a12c5ac15a4ce938" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>SetPurpose</name></member>
      <member refid="classBKey_1a7d7f282241d38ba79da68cc2aa2c5785" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>SetSecondaryIdentifier</name></member>
      <member refid="classBPasswordKey_1a1beb95e09102cd23d24b10a97a566f34" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>SetTo</name></member>
      <member refid="classBKey_1a753f3fd6c65c9abf4fe7957a653d9685" prot="public" virt="non-virtual" ambiguityscope="BKey::"><scope>BPasswordKey</scope><name>SetTo</name></member>
      <member refid="classBPasswordKey_1a8c53e208ace43023a7ed026bdf0938b6" prot="public" virt="virtual"><scope>BPasswordKey</scope><name>Type</name></member>
      <member refid="classBKey_1a0a59826da2f3a2da218f846e1e2aa216" prot="public" virt="virtual"><scope>BPasswordKey</scope><name>Unflatten</name></member>
      <member refid="classBKey_1a7c001778a01edb880e215b5851c7254b" prot="public" virt="non-virtual"><scope>BPasswordKey</scope><name>Unset</name></member>
      <member refid="classBKey_1a2dfdbc566ae1f2643db4c46bbd4942c0" prot="public" virt="virtual"><scope>BPasswordKey</scope><name>~BKey</name></member>
      <member refid="classBPasswordKey_1af21b7ed6f6546491459478d7a56a23d2" prot="public" virt="virtual"><scope>BPasswordKey</scope><name>~BPasswordKey</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
