<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBUnarchiver" kind="class" language="C++" prot="public">
    <compoundname>BUnarchiver</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" prot="public" static="no" strong="no">
        <type></type>
        <name>ownership_policy</name>
        <qualifiedname>BUnarchiver::ownership_policy</qualifiedname>
        <enumvalue id="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" prot="public">
          <name>B_ASSUME_OWNERSHIP</name>
          <briefdescription>
<para>Ownership of unarchived objects will be transferred to the caller. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a4cc389b871e531d4f05c9d72e641b7e3" prot="public">
          <name>B_DONT_ASSUME_OWNERSHIP</name>
          <briefdescription>
<para>The unarchived objects will be borrowed to the caller. </para>
          </briefdescription>
          <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Options for the ownership policy of objects retrieved from <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="87" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="87" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBUnarchiver_1a16a3ffbcce3947fffa303073b50ebde2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BArchivable</definition>
        <argsstring></argsstring>
        <name>BArchivable</name>
        <qualifiedname>BUnarchiver::BArchivable</qualifiedname>
        <param>
          <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="140" column="14" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBUnarchiver_1a1ba36cabcc9c7a63aef21eafc1baa889" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BUnarchiver::_reserved[2]</definition>
        <argsstring>[2]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BUnarchiver::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="152" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBUnarchiver_1a657f66a12e452b7e45d18e14935aab75" prot="private" static="no" mutable="no">
        <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>const BMessage* BUnarchiver::fArchive</definition>
        <argsstring></argsstring>
        <name>fArchive</name>
        <qualifiedname>BUnarchiver::fArchive</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="150" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBUnarchiver_1aae90572adbe4d793b58ab96aecc189fb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BUnarchiver::fFinished</definition>
        <argsstring></argsstring>
        <name>fFinished</name>
        <qualifiedname>BUnarchiver::fFinished</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="151" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBUnarchiver_1a66553d66e3dec74d530e3344790f7256" prot="private" static="no" mutable="no">
        <type>BUnarchiveManager *</type>
        <definition>BUnarchiveManager* BUnarchiver::fManager</definition>
        <argsstring></argsstring>
        <name>fManager</name>
        <qualifiedname>BUnarchiver::fManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="149" column="18" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBUnarchiver_1ac01e05c6da11e90d27808dcd30cf9120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BUnarchiver::BUnarchiver</definition>
        <argsstring>(const BMessage *archive)</argsstring>
        <name>BUnarchiver</name>
        <qualifiedname>BUnarchiver::BUnarchiver</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> object to manage <computeroutput>archive</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>To guarantee that your AllUnarchived() method will be called during archival, you must create a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> object in your archive constructor. It is necessary to do this even if you won&apos;t use the <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> object in your archive constructor.</para>
</simplesect>
<simplesect kind="warning"><para>Do not construct a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> object without first calling <ref refid="classBUnarchiver_1acdd712bd85312bc7d36896e20b71b6b9" kindref="member">BUnarchiver::PrepareArchive()</ref> on <computeroutput>archive</computeroutput>. It is only safe to build a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> without this call in your AllUnarchived() implementation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBUnarchiver_1acdd712bd85312bc7d36896e20b71b6b9" kindref="member">BUnarchiver::PrepareArchive()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a3476736967aaed6de3cd21cb00a91496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BUnarchiver::~BUnarchiver</definition>
        <argsstring>()</argsstring>
        <name>~BUnarchiver</name>
        <qualifiedname>BUnarchiver::~BUnarchiver</qualifiedname>
        <briefdescription>
<para>Destroys a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls this objects <ref refid="classBUnarchiver_1a7640fa5d84dc6dca19d7513326d2bba2" kindref="member">Finish()</ref> method, if it has not yet been called.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a9ac2b68a35e07a5e831a9fe4714c2f9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>const BMessage * BUnarchiver::ArchiveMessage</definition>
        <argsstring>() const</argsstring>
        <name>ArchiveMessage</name>
        <qualifiedname>BUnarchiver::ArchiveMessage</qualifiedname>
        <briefdescription>
<para>Returns the BMessage* used to construct this <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the archive that <ref refid="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" kindref="member">FindObject()</ref> uses. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="127" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1aeac457088aaae9dabced13103b8c4205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BUnarchiver::AssumeOwnership</definition>
        <argsstring>(BArchivable *archivable)</argsstring>
        <name>AssumeOwnership</name>
        <qualifiedname>BUnarchiver::AssumeOwnership</qualifiedname>
        <param>
          <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *</type>
          <declname>archivable</declname>
        </param>
        <briefdescription>
<para>Become the owner of <emphasis>archivable</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this method you are responsible for deleting the <emphasis>archivable</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>archivable</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>archivable</emphasis> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="129" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1af2a3f90c5405356b8f9588dcec99d61e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::EnsureUnarchived</definition>
        <argsstring>(const char *name, int32 index=0)</argsstring>
        <name>EnsureUnarchived</name>
        <qualifiedname>BUnarchiver::EnsureUnarchived</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Ensure the object archived under <emphasis>name</emphasis> at <emphasis>index</emphasis> is unarchived and instantiated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The archive <emphasis>name</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The archive <emphasis>index</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="118" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="275" bodyend="279"/>
        <references refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a4cc389b871e531d4f05c9d72e641b7e3" compoundref="Archivable_8h" startline="89">B_DONT_ASSUME_OWNERSHIP</references>
        <references refid="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" compoundref="Archivable_8h" startline="251" endline="254">FindObject</references>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a265dcb1cfd3cb185deb80c0fb0836613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::EnsureUnarchived</definition>
        <argsstring>(int32 token)</argsstring>
        <name>EnsureUnarchived</name>
        <qualifiedname>BUnarchiver::EnsureUnarchived</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Ensure the object represented by <emphasis>token</emphasis> is unarchived and instantiated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>the object <emphasis>token</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="120" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="267" bodyend="271"/>
        <references refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a4cc389b871e531d4f05c9d72e641b7e3" compoundref="Archivable_8h" startline="89">B_DONT_ASSUME_OWNERSHIP</references>
        <references refid="classBUnarchiver_1a60bc2e909dbdc0b9a786e073dc56e9d7" compoundref="Archivable_8h" startline="235" endline="238">GetObject</references>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a192a5151daa47c1c9e02e61915db5a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::FindObject</definition>
        <argsstring>(const char *name, int32 index, ownership_policy owning, BArchivable *&amp;archivable)</argsstring>
        <name>FindObject</name>
        <qualifiedname>BUnarchiver::FindObject</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" kindref="member">ownership_policy</ref></type>
          <declname>owning</declname>
        </param>
        <param>
          <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *&amp;</type>
          <declname>archivable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a65b5036350c00bb31cff5f484287071a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::FindObject</definition>
        <argsstring>(const char *name, int32 index, ownership_policy owning, T *&amp;object)</argsstring>
        <name>FindObject</name>
        <qualifiedname>BUnarchiver::FindObject</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" kindref="member">ownership_policy</ref></type>
          <declname>owning</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Recover an object that had previously been archived using the <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para>If the object has not yet been instantiated, and this request is not coming from an AllUnarchived() implementation, the object will be instantiated now.</para>
<para>If the retrieved object is not of the type T, then this method will fail. If this method fails, you will not receive ownership of the object, no matter what you specified in <computeroutput>owning</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object you wish to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name that was passed to <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> when adding this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the object you wish to recover (<computeroutput>0-based</computeroutput>, like <ref refid="classBMessage_1a1e896648ee668dd5d6c8a4311d6cfa94" kindref="member">BMessage::FindData()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owning</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictates whether or not you wish to take ownership of the retrieved object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Return parameter for the retrieved object of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was of type T. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was not of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="115" column="9" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="184" bodyend="202"/>
        <references refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" compoundref="Archivable_8h" startline="88">B_ASSUME_OWNERSHIP</references>
        <references refid="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" compoundref="Archivable_8h" startline="251" endline="254">FindObject</references>
        <references refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="SupportDefs_8h" startline="226">NULL</references>
        <references refid="classBUnarchiver_1aa14b4974578f4a6587ce29d7408f722e">RelinquishOwnership</references>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1ae88614876a0f399827072b114f6edff0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::FindObject</definition>
        <argsstring>(const char *name, int32 index, T *&amp;object)</argsstring>
        <name>FindObject</name>
        <qualifiedname>BUnarchiver::FindObject</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Recover and take ownership of an object that had previously been archived using the <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of object you wish to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name that was passed to <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> when adding this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the object you wish to recover (<computeroutput>0-based</computeroutput>, like <ref refid="classBMessage_1a1e896648ee668dd5d6c8a4311d6cfa94" kindref="member">BMessage::FindData()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Return parameter for the retrieved object of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was of type T. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was not of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="111" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="259" bodyend="263"/>
        <references refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" compoundref="Archivable_8h" startline="88">B_ASSUME_OWNERSHIP</references>
        <references refid="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" compoundref="Archivable_8h" startline="251" endline="254">FindObject</references>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1aa04b2639901179ce0472b8fa3b23ba94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::FindObject</definition>
        <argsstring>(const char *name, ownership_policy owning, T *&amp;object)</argsstring>
        <name>FindObject</name>
        <qualifiedname>BUnarchiver::FindObject</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" kindref="member">ownership_policy</ref></type>
          <declname>owning</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Recover an object at index <computeroutput>0</computeroutput> that had previously been archived using the <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to calling FindObject(name, <computeroutput>0</computeroutput>, owning, object).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <emphasis>object</emphasis> you wish to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name that was passed to <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> when adding this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owning</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictates whether or not you wish to take ownership of the retrieved object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Return parameter for the retrieved object of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was of type T. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was not of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="106" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="243" bodyend="246"/>
        <references refid="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" compoundref="Archivable_8h" startline="251" endline="254">FindObject</references>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::FindObject</definition>
        <argsstring>(const char *name, T *&amp;object)</argsstring>
        <name>FindObject</name>
        <qualifiedname>BUnarchiver::FindObject</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Recover and take ownership of an object at index <computeroutput>0</computeroutput> that had previously been archived using the <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to calling FindObject(name, <computeroutput>0</computeroutput>, <ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" kindref="member">BUnarchiver::B_ASSUME_OWNERSHIP</ref>, object).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <emphasis>object</emphasis> you wish to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name that was passed to <ref refid="classBArchiver_1a237a50590efba0121bf12249c5b6cb7f" kindref="member">BArchiver::AddArchivable()</ref> when adding this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Return parameter for the retrieved <emphasis>object</emphasis> of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>object</emphasis> retrieved was of type T. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>object</emphasis> retrieved was not of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="103" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="251" bodyend="254"/>
        <references refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" compoundref="Archivable_8h" startline="88">B_ASSUME_OWNERSHIP</references>
        <referencedby refid="classBUnarchiver_1af2a3f90c5405356b8f9588dcec99d61e" compoundref="Archivable_8h" startline="275" endline="279">EnsureUnarchived</referencedby>
        <referencedby refid="classBUnarchiver_1a65b5036350c00bb31cff5f484287071a" compoundref="Archivable_8h" startline="184" endline="202">FindObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a7640fa5d84dc6dca19d7513326d2bba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::Finish</definition>
        <argsstring>(status_t err=B_OK)</argsstring>
        <name>Finish</name>
        <qualifiedname>BUnarchiver::Finish</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
          <declname>err</declname>
          <defval>B_OK</defval>
        </param>
        <briefdescription>
<para>Report any unarchiving errors and possibly complete the archiving session. </para>
        </briefdescription>
        <detaileddescription>
<para>This method may finish an unarchiving session (triggering the call of all instantiated objects&apos; AllUnarchived() methods) if the following conditions are true:</para>
<para><itemizedlist>
<listitem><para>No errors have been reported to this or any other <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> object within this session.</para>
</listitem><listitem><para>This is the last remaining <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> that has not had its <ref refid="classBUnarchiver_1a7640fa5d84dc6dca19d7513326d2bba2" kindref="member">Finish()</ref> method invoked.</para>
</listitem></itemizedlist>
</para>
<para>If you call this method with an error code not equal to B_OK, then this unarchiving session has failed, instantiated objects will not have their AllUnarchived() methods called, and any subsequent calls to this method on any <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> objects in this session will return your error code. Furthermore, any objects that have been instantiated, but have not had their ownership assumed by another object will now be deleted (excluding the root object).</para>
<para><simplesect kind="return"><para>The first error reported in this unarchiving session, or <computeroutput>B_OK</computeroutput>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="126" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a75ed5256453cd1b5ba8b2bb21aca28bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::GetObject</definition>
        <argsstring>(int32 token, ownership_policy owning, BArchivable *&amp;object)</argsstring>
        <name>GetObject</name>
        <qualifiedname>BUnarchiver::GetObject</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" kindref="member">ownership_policy</ref></type>
          <declname>owning</declname>
        </param>
        <param>
          <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a939359c608ad87dee82b073d0ac79517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::GetObject</definition>
        <argsstring>(int32 token, ownership_policy owning, T *&amp;object)</argsstring>
        <name>GetObject</name>
        <qualifiedname>BUnarchiver::GetObject</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" kindref="member">ownership_policy</ref></type>
          <declname>owning</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Recover an object by token that was archived by a <ref refid="classBArchiver" kindref="compound">BArchiver</ref> object. If the object has not yet been instantiated, and this request is not coming from an AllUnarchived() implementation, the object will be instantiated now. </para>
        </briefdescription>
        <detaileddescription>
<para>If the retrieved object is not of the type T, then this method will fail. If this method fails, you will not receive ownership of the object, no matter what you specified in <computeroutput>owning</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <emphasis>object</emphasis> you wish to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>token</emphasis> you got for this object from <ref refid="classBArchiver_1a787a6a7972a6c4624829c5c8d8d16e55" kindref="member">BArchiver::GetTokenForArchivable()</ref> during archival. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owning</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not you wish to take ownership of the retrieved object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Return parameter for the retrieved object of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was of type T. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was not of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="99" column="9" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="213" bodyend="230"/>
        <references refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" compoundref="Archivable_8h" startline="88">B_ASSUME_OWNERSHIP</references>
        <references refid="classBUnarchiver_1a60bc2e909dbdc0b9a786e073dc56e9d7" compoundref="Archivable_8h" startline="235" endline="238">GetObject</references>
        <references refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="SupportDefs_8h" startline="226">NULL</references>
        <references refid="classBUnarchiver_1aa14b4974578f4a6587ce29d7408f722e">RelinquishOwnership</references>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a60bc2e909dbdc0b9a786e073dc56e9d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::GetObject</definition>
        <argsstring>(int32 token, T *&amp;object)</argsstring>
        <name>GetObject</name>
        <qualifiedname>BUnarchiver::GetObject</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Recover and take ownership of an object represented by <emphasis>token</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to calling GetObject(token, <computeroutput>B_ASSUME_OWNERSHIP</computeroutput>, object)</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <emphasis>object</emphasis> you wish to find.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>token</emphasis> you got for this object from <ref refid="classBArchiver_1a787a6a7972a6c4624829c5c8d8d16e55" kindref="member">BArchiver::GetTokenForArchivable()</ref> during archival. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>The return parameter for the retrieved object of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was of type T. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was not of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="96" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="235" bodyend="238"/>
        <references refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" compoundref="Archivable_8h" startline="88">B_ASSUME_OWNERSHIP</references>
        <referencedby refid="classBUnarchiver_1a265dcb1cfd3cb185deb80c0fb0836613" compoundref="Archivable_8h" startline="267" endline="271">EnsureUnarchived</referencedby>
        <referencedby refid="classBUnarchiver_1a939359c608ad87dee82b073d0ac79517" compoundref="Archivable_8h" startline="213" endline="230">GetObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1ad497bb9f706e1147c197827b66e914ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BUnarchiver::IsInstantiated</definition>
        <argsstring>(const char *name, int32 index=0)</argsstring>
        <name>IsInstantiated</name>
        <qualifiedname>BUnarchiver::IsInstantiated</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Checks whether the object archived under <emphasis>name</emphasis> at <emphasis>index</emphasis> has been instantiated in this session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The archive <emphasis>name</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The arcive <emphasis>token</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if instantiated, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="123" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a952bf7fa844b79b7e5a503945a6df7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BUnarchiver::IsInstantiated</definition>
        <argsstring>(int32 token)</argsstring>
        <name>IsInstantiated</name>
        <qualifiedname>BUnarchiver::IsInstantiated</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Checks whether the object represented by <computeroutput>token</computeroutput> has been instantiated in this session. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The object <emphasis>token</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if instantiated, <computeroutput>false</computeroutput> otherwise</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="122" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1aa14b4974578f4a6587ce29d7408f722e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BUnarchiver::RelinquishOwnership</definition>
        <argsstring>(BArchivable *archivable)</argsstring>
        <name>RelinquishOwnership</name>
        <qualifiedname>BUnarchiver::RelinquishOwnership</qualifiedname>
        <param>
          <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *</type>
          <declname>archivable</declname>
        </param>
        <briefdescription>
<para>Relinquish ownership of <emphasis>archivable</emphasis>. If <emphasis>archivable</emphasis> remains unclaimed at the end of the unarchiving session, it will be deleted (unless it is the root object). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>archivable</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>archivable</emphasis> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="130" column="5"/>
        <referencedby refid="classBUnarchiver_1a65b5036350c00bb31cff5f484287071a" compoundref="Archivable_8h" startline="184" endline="202">FindObject</referencedby>
        <referencedby refid="classBUnarchiver_1a939359c608ad87dee82b073d0ac79517" compoundref="Archivable_8h" startline="213" endline="230">GetObject</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBUnarchiver_1a3bf0c1cbca1644015d17850424d0c374" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::InstantiateObject</definition>
        <argsstring>(BMessage *archive, T *&amp;object)</argsstring>
        <name>InstantiateObject</name>
        <qualifiedname>BUnarchiver::InstantiateObject</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
          <defname>from</defname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Attempt to instantiate an object of type T from BMessage* <emphasis>from</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the instantiated object is not of type T, then it will be deleted, and this method will return <computeroutput>B_BAD_TYPE</computeroutput>. This method is similar to the <ref refid="group__support__globals_1gac98d3af4a84cd0880d8a853f7c526764" kindref="member">instantiate_object()</ref> function, but provides error reporting and protection from memory leaks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classBMessage" kindref="compound">BMessage</ref> to instantiate from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Return parameter for the retrieved object of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was of type T. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_TYPE</parametername>
</parameternamelist>
<parameterdescription>
<para>The object retrieved was not of type T.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="136" column="15" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="290" bodyend="306"/>
        <references refid="classBUnarchiver_1a3bf0c1cbca1644015d17850424d0c374" compoundref="Archivable_8h" startline="290" endline="306">InstantiateObject</references>
        <references refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="SupportDefs_8h" startline="226">NULL</references>
        <referencedby refid="classBUnarchiver_1a3bf0c1cbca1644015d17850424d0c374" compoundref="Archivable_8h" startline="290" endline="306">InstantiateObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a0944f46541c8c27eb955375fe3ead593" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BUnarchiver::InstantiateObject</definition>
        <argsstring>(BMessage *from, BArchivable *&amp;object)</argsstring>
        <name>InstantiateObject</name>
        <qualifiedname>BUnarchiver::InstantiateObject</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *&amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1af5a80d3440ee8d7b1ce7055157fef814" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BUnarchiver::IsArchiveManaged</definition>
        <argsstring>(const BMessage *archive)</argsstring>
        <name>IsArchiveManaged</name>
        <qualifiedname>BUnarchiver::IsArchiveManaged</qualifiedname>
        <param>
          <type>const <ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
<para>Checks whether <emphasis>archive</emphasis> was managed by a <ref refid="classBArchiver" kindref="compound">BArchiver</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used to maintain archive backwards-compatibility for a class that has been updated to use the <ref refid="classBArchiver" kindref="compound">BArchiver</ref> class. If there is a possibility that you are may dealing with a legacy archive, you can use this method to find out before calling any methods on your <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> object.</para>
<para>Here is an example of how you might use this method. Note that you must still call PrepareArchive(archive) either way.</para>
<para><programlisting><codeline><highlight class="normal">MyArchivableClas::MyArchivableClass(<ref refid="classBMessage" kindref="compound">BMessage</ref>*<sp/>archive)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBArchivable" kindref="compound">BArchivable</ref>(<ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref>::<ref refid="classBUnarchiver_1acdd712bd85312bc7d36896e20b71b6b9" kindref="member">PrepareArchive</ref>(archive))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref><sp/>unarchiver(archive);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBUnarchiver_1af5a80d3440ee8d7b1ce7055157fef814" kindref="member">BUnarchiver::IsArchiveManaged</ref>(archive))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>calls<sp/>to<sp/>FindObject()<sp/>or<sp/>GetObject()<sp/>here<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>calls<sp/>to<sp/>BMessage::FindMessage()<sp/>here<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>Whether <emphasis>archive</emphasis> was managed by a <ref refid="classBArchiver" kindref="compound">BArchiver</ref> object. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>archive</emphasis> was managed by a <ref refid="classBArchiver" kindref="compound">BArchiver</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="132" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1acdd712bd85312bc7d36896e20b71b6b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        <definition>static BMessage * BUnarchiver::PrepareArchive</definition>
        <argsstring>(BMessage *&amp;archive)</argsstring>
        <name>PrepareArchive</name>
        <qualifiedname>BUnarchiver::PrepareArchive</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *&amp;</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
<para>Prepares <computeroutput>archive</computeroutput> for use by a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method must be called if you plan to use a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> on an archive. It must be called once for each class an object inherits from that will use a <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref>.</para>
<para><simplesect kind="warning"><para>This method <bold>must</bold> be called <bold>before</bold> a call to the archive constructor of your parent class.</para>
</simplesect>
Notice the use of this method in the example provided below. <programlisting><codeline><highlight class="normal">MyArchivableClas::MyArchivableClas(<ref refid="classBMessage" kindref="compound">BMessage</ref>*<sp/>archive)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBArchivable" kindref="compound">BArchivable</ref>(<ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref>::<ref refid="classBUnarchiver_1acdd712bd85312bc7d36896e20b71b6b9" kindref="member">PrepareArchive</ref>(archive))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>archive</parametername>
</parameternamelist>
<parameterdescription>
<para>The archive you wish to have prepared.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same <ref refid="classBMessage" kindref="compound">BMessage</ref> as is passed in.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="133" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBUnarchiver_1add64b88c063bdabad4bcd7408bbfd74c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BUnarchiver::BUnarchiver</definition>
        <argsstring>()</argsstring>
        <name>BUnarchiver</name>
        <qualifiedname>BUnarchiver::BUnarchiver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a8251d42b954f2c086268b9c66f086204" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BUnarchiver::BUnarchiver</definition>
        <argsstring>(const BUnarchiver &amp;)</argsstring>
        <name>BUnarchiver</name>
        <qualifiedname>BUnarchiver::BUnarchiver</qualifiedname>
        <param>
          <type>const <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1a2293871aa1e5429c8c63c59a1af12623" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BUnarchiver::_CallDebuggerIfManagerNull</definition>
        <argsstring>()</argsstring>
        <name>_CallDebuggerIfManagerNull</name>
        <qualifiedname>BUnarchiver::_CallDebuggerIfManagerNull</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="147" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBUnarchiver_1ac76d91a3989f7a2395c2ac4b2cbb948f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BUnarchiver::RegisterArchivable</definition>
        <argsstring>(BArchivable *archivable)</argsstring>
        <name>RegisterArchivable</name>
        <qualifiedname>BUnarchiver::RegisterArchivable</qualifiedname>
        <param>
          <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *</type>
          <declname>archivable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="145" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that simplifies the unarchiving of complicated <ref refid="classBArchivable" kindref="compound">BArchivable</ref> hierarchies. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> class is a small class used to recover <ref refid="classBArchivable" kindref="compound">BArchivable</ref> objects that have been archived with the <ref refid="classBArchiver" kindref="compound">BArchiver</ref> class. It also provides ownership semantics, so that memory leaks can be avoided during the unarchival process. When retrieving an object (either via <ref refid="classBUnarchiver_1a60bc2e909dbdc0b9a786e073dc56e9d7" kindref="member">GetObject()</ref> or <ref refid="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" kindref="member">FindObject()</ref>), you can specify a <ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" kindref="member">BUnarchiver::ownership_policy</ref>. If you specify <ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" kindref="member">BUnarchiver::B_ASSUME_OWNERSHIP</ref>, you will become responsible for deleting the retrieved item. If you specify <ref refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a4cc389b871e531d4f05c9d72e641b7e3" kindref="member">BUnarchiver::B_DONT_ASSUME_OWNERSHIP</ref>, you will not become responsible. You cannot take ownership of the same object twice. After the unarchival process finishes, any unclaimed objects, excluding the root object (the object being instantiated via <ref refid="group__support__globals_1gac98d3af4a84cd0880d8a853f7c526764" kindref="member">instantiate_object()</ref> or <ref refid="classBUnarchiver_1a3bf0c1cbca1644015d17850424d0c374" kindref="member">BUnarchiver::InstantiateObject()</ref>), will be deleted.</para>
<para>If you are updating a class that previously did not use the <ref refid="classBArchiver" kindref="compound">BArchiver</ref> and <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> helper classes, and want to maintain backwards compatibility with old archive, this can be done using the <ref refid="classBUnarchiver_1af5a80d3440ee8d7b1ce7055157fef814" kindref="member">IsArchiveManaged()</ref> method.</para>
<para><simplesect kind="warning"><para>Calling methods on your <ref refid="classBUnarchiver" kindref="compound">BUnarchiver</ref> with a legacy archive (one that was not managed by a <ref refid="classBArchiver" kindref="compound">BArchiver</ref> during archival) will result in a call to debugger().</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/support/Archivable.h" line="85" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Archivable.h" bodystart="85" bodyend="153"/>
    <listofallmembers>
      <member refid="classBUnarchiver_1a2293871aa1e5429c8c63c59a1af12623" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>_CallDebuggerIfManagerNull</name></member>
      <member refid="classBUnarchiver_1a1ba36cabcc9c7a63aef21eafc1baa889" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>_reserved</name></member>
      <member refid="classBUnarchiver_1a9ac2b68a35e07a5e831a9fe4714c2f9c" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>ArchiveMessage</name></member>
      <member refid="classBUnarchiver_1aeac457088aaae9dabced13103b8c4205" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>AssumeOwnership</name></member>
      <member refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a915cee940a254f586f0fc83402dcd4d4" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>B_ASSUME_OWNERSHIP</name></member>
      <member refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640a4cc389b871e531d4f05c9d72e641b7e3" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>B_DONT_ASSUME_OWNERSHIP</name></member>
      <member refid="classBUnarchiver_1ac01e05c6da11e90d27808dcd30cf9120" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>BUnarchiver</name></member>
      <member refid="classBUnarchiver_1add64b88c063bdabad4bcd7408bbfd74c" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>BUnarchiver</name></member>
      <member refid="classBUnarchiver_1a8251d42b954f2c086268b9c66f086204" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>BUnarchiver</name></member>
      <member refid="classBUnarchiver_1af2a3f90c5405356b8f9588dcec99d61e" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>EnsureUnarchived</name></member>
      <member refid="classBUnarchiver_1a265dcb1cfd3cb185deb80c0fb0836613" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>EnsureUnarchived</name></member>
      <member refid="classBUnarchiver_1a657f66a12e452b7e45d18e14935aab75" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>fArchive</name></member>
      <member refid="classBUnarchiver_1aae90572adbe4d793b58ab96aecc189fb" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>fFinished</name></member>
      <member refid="classBUnarchiver_1ad64f70e03bc7b9c202eec4d5d07d075e" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>FindObject</name></member>
      <member refid="classBUnarchiver_1aa04b2639901179ce0472b8fa3b23ba94" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>FindObject</name></member>
      <member refid="classBUnarchiver_1ae88614876a0f399827072b114f6edff0" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>FindObject</name></member>
      <member refid="classBUnarchiver_1a65b5036350c00bb31cff5f484287071a" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>FindObject</name></member>
      <member refid="classBUnarchiver_1a192a5151daa47c1c9e02e61915db5a55" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>FindObject</name></member>
      <member refid="classBUnarchiver_1a7640fa5d84dc6dca19d7513326d2bba2" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>Finish</name></member>
      <member refid="classBUnarchiver_1a66553d66e3dec74d530e3344790f7256" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>fManager</name></member>
      <member refid="classBUnarchiver_1a60bc2e909dbdc0b9a786e073dc56e9d7" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>GetObject</name></member>
      <member refid="classBUnarchiver_1a939359c608ad87dee82b073d0ac79517" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>GetObject</name></member>
      <member refid="classBUnarchiver_1a75ed5256453cd1b5ba8b2bb21aca28bc" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>GetObject</name></member>
      <member refid="classBUnarchiver_1a3bf0c1cbca1644015d17850424d0c374" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>InstantiateObject</name></member>
      <member refid="classBUnarchiver_1a0944f46541c8c27eb955375fe3ead593" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>InstantiateObject</name></member>
      <member refid="classBUnarchiver_1af5a80d3440ee8d7b1ce7055157fef814" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>IsArchiveManaged</name></member>
      <member refid="classBUnarchiver_1a952bf7fa844b79b7e5a503945a6df7cd" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>IsInstantiated</name></member>
      <member refid="classBUnarchiver_1ad497bb9f706e1147c197827b66e914ac" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>IsInstantiated</name></member>
      <member refid="classBUnarchiver_1ac1a5a14b2ae797c7f051dc44e725d640" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>ownership_policy</name></member>
      <member refid="classBUnarchiver_1acdd712bd85312bc7d36896e20b71b6b9" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>PrepareArchive</name></member>
      <member refid="classBUnarchiver_1ac76d91a3989f7a2395c2ac4b2cbb948f" prot="private" virt="non-virtual"><scope>BUnarchiver</scope><name>RegisterArchivable</name></member>
      <member refid="classBUnarchiver_1aa14b4974578f4a6587ce29d7408f722e" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>RelinquishOwnership</name></member>
      <member refid="classBUnarchiver_1a3476736967aaed6de3cd21cb00a91496" prot="public" virt="non-virtual"><scope>BUnarchiver</scope><name>~BUnarchiver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
