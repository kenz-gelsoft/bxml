<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBVolumeRoster" kind="class" language="C++" prot="public">
    <compoundname>BVolumeRoster</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBVolumeRoster_1a2b542c4d6a21a79a2120a02c108d1815" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BVolumeRoster::_reserved[3]</definition>
        <argsstring>[3]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BVolumeRoster::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="47" column="7" bodyfile="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBVolumeRoster_1ae34228960bc54e47960b5e1bf2a0dfd7" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BVolumeRoster::fCookie</definition>
        <argsstring></argsstring>
        <name>fCookie</name>
        <qualifiedname>BVolumeRoster::fCookie</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="38" column="6" bodyfile="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBVolumeRoster_1ad8941692e2dd1a5f2b744527c85c2a6c" prot="private" static="no" mutable="no">
        <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref> *</type>
        <definition>BMessenger* BVolumeRoster::fTarget</definition>
        <argsstring></argsstring>
        <name>fTarget</name>
        <qualifiedname>BVolumeRoster::fTarget</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="41" column="11" bodyfile="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBVolumeRoster_1ac3d5de1081dff8e5d3acdb7de76f61e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BVolumeRoster::BVolumeRoster</definition>
        <argsstring>()</argsstring>
        <name>BVolumeRoster</name>
        <qualifiedname>BVolumeRoster::BVolumeRoster</qualifiedname>
        <briefdescription>
<para>Creates a <ref refid="classBVolumeRoster" kindref="compound">BVolumeRoster</ref> object. The object is ready to be used. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1abaf24db5614655d7b1c10dc266bffd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BVolumeRoster::~BVolumeRoster</definition>
        <argsstring>()</argsstring>
        <name>~BVolumeRoster</name>
        <qualifiedname>BVolumeRoster::~BVolumeRoster</qualifiedname>
        <briefdescription>
<para>Deletes the volume roster and frees all associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para>If a watch was activated (by <ref refid="classBVolumeRoster_1ab437b00c523ed563d5456f46ad8a89b2" kindref="member">StartWatching()</ref>), it is deactivated.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="21" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1a1df1b33f20f83ede40149d17555c7a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BVolumeRoster::GetBootVolume</definition>
        <argsstring>(BVolume *volume)</argsstring>
        <name>GetBootVolume</name>
        <qualifiedname>BVolumeRoster::GetBootVolume</qualifiedname>
        <param>
          <type><ref refid="classBVolume" kindref="compound">BVolume</ref> *</type>
          <declname>volume</declname>
        </param>
        <briefdescription>
<para>Fills out the passed in <ref refid="classBVolume" kindref="compound">BVolume</ref> object with the boot volume. </para>
        </briefdescription>
        <detaileddescription>
<para>Currently, this method looks for the volume that is mounted at &quot;/boot&quot;. The only way to fool the system into thinking that there is not a boot volume is to rename &quot;/boot&quot; <ndash/> but, please refrain from doing this.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBVolume" kindref="compound">BVolume</ref> to be initialized to refer to the boot volume.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code, <computeroutput>B_OK</computeroutput> if everything went fine or an error code otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="26" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1a8f8fbd0e558c214536d97e74026ac183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BVolumeRoster::GetNextVolume</definition>
        <argsstring>(BVolume *volume)</argsstring>
        <name>GetNextVolume</name>
        <qualifiedname>BVolumeRoster::GetNextVolume</qualifiedname>
        <param>
          <type><ref refid="classBVolume" kindref="compound">BVolume</ref> *</type>
          <declname>volume</declname>
        </param>
        <briefdescription>
<para>Fills out the passed in <ref refid="classBVolume" kindref="compound">BVolume</ref> object with the next available volume. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a pre-allocated <ref refid="classBVolume" kindref="compound">BVolume</ref> object to be initialized to the next available volume.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The last volume in the list was already returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="23" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1a347c10c05554e3a96a33da78b6ac7657" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
        <definition>BMessenger BVolumeRoster::Messenger</definition>
        <argsstring>() const</argsstring>
        <name>Messenger</name>
        <qualifiedname>BVolumeRoster::Messenger</qualifiedname>
        <briefdescription>
<para>Returns the messenger currently watching the volume list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A messenger to the target currently watching the volume list, or an invalid messenger if not watching.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="31" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1aab13bb090dab13062b708b03a1534172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BVolumeRoster::Rewind</definition>
        <argsstring>()</argsstring>
        <name>Rewind</name>
        <qualifiedname>BVolumeRoster::Rewind</qualifiedname>
        <briefdescription>
<para>Rewinds the list of available volumes back to the first item. </para>
        </briefdescription>
        <detaileddescription>
<para>The next call to <ref refid="classBVolumeRoster_1a8f8fbd0e558c214536d97e74026ac183" kindref="member">GetNextVolume()</ref> will return the first available volume.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="24" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1ab437b00c523ed563d5456f46ad8a89b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BVolumeRoster::StartWatching</definition>
        <argsstring>(BMessenger messenger=be_app_messenger)</argsstring>
        <name>StartWatching</name>
        <qualifiedname>BVolumeRoster::StartWatching</qualifiedname>
        <param>
          <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref></type>
          <declname>messenger</declname>
          <defval><ref refid="Application_8h_1a78416f29c7026049c0cbdaec790f918f" kindref="member">be_app_messenger</ref></defval>
        </param>
        <briefdescription>
<para>Starts watching the available volumes for changes. </para>
        </briefdescription>
        <detaileddescription>
<para>Notifications are sent to the specified target whenever a volume is mounted or unmounted. The format of the notification messages is described under <ref refid="NodeMonitor_8h_1aa47570f615a5e07a38f452a47f9a8f48" kindref="member">watch_node()</ref>. Actually <ref refid="classBVolumeRoster" kindref="compound">BVolumeRoster</ref> just provides a more convenient interface for it.</para>
<para>If <ref refid="classBVolumeRoster_1ab437b00c523ed563d5456f46ad8a89b2" kindref="member">StartWatching()</ref> has been called before with another target and no <ref refid="classBVolumeRoster_1a17aad18f747c04a89ea99325f55af158" kindref="member">StopWatching()</ref> since, <ref refid="classBVolumeRoster_1a17aad18f747c04a89ea99325f55af158" kindref="member">StopWatching()</ref> is called first, so that the former target won&apos;t receive any notifications anymore.</para>
<para>When the object is destroyed all watching ends as well.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>messenger</parametername>
</parameternamelist>
<parameterdescription>
<para>The target which the notification messages are sent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>B_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>Everything went fine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_BAD_VALUE</parametername>
</parameternamelist>
<parameterdescription>
<para>The supplied <ref refid="classBMessenger" kindref="compound">BMessenger</ref> was invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_NO_MEMORY</parametername>
</parameternamelist>
<parameterdescription>
<para>There was insufficient memory to carry out this operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="NodeMonitor_8h_1aa47570f615a5e07a38f452a47f9a8f48" kindref="member">watch_node()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="28" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1a17aad18f747c04a89ea99325f55af158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BVolumeRoster::StopWatching</definition>
        <argsstring>()</argsstring>
        <name>StopWatching</name>
        <qualifiedname>BVolumeRoster::StopWatching</qualifiedname>
        <briefdescription>
<para>Stops watching volumes initiated by <ref refid="classBVolumeRoster_1ab437b00c523ed563d5456f46ad8a89b2" kindref="member">StartWatching()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="NodeMonitor_8h_1a0f58e29c5793f34222c9779ab7aa4f60" kindref="member">stop_watching()</ref></para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="30" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBVolumeRoster_1ab685f75fc6a9d3ef1cde64e82ebfdebd" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BVolumeRoster::_SeveredVRoster1</definition>
        <argsstring>()</argsstring>
        <name>_SeveredVRoster1</name>
        <qualifiedname>BVolumeRoster::_SeveredVRoster1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="34" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBVolumeRoster_1aca2274b1acfd895e9919daf2c7d8407d" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BVolumeRoster::_SeveredVRoster2</definition>
        <argsstring>()</argsstring>
        <name>_SeveredVRoster2</name>
        <qualifiedname>BVolumeRoster::_SeveredVRoster2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="35" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides an interface for iterating through available volumes and watching for mounting/unmounting. </para>
    </briefdescription>
    <detaileddescription>
<para>This class wraps the next_dev() function for iterating through the list of available volumes and <ref refid="NodeMonitor_8h_1aa47570f615a5e07a38f452a47f9a8f48" kindref="member">watch_node()</ref>/stop_watching() for watching volumes.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" line="18" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/VolumeRoster.h" bodystart="18" bodyend="49"/>
    <listofallmembers>
      <member refid="classBVolumeRoster_1a2b542c4d6a21a79a2120a02c108d1815" prot="private" virt="non-virtual"><scope>BVolumeRoster</scope><name>_reserved</name></member>
      <member refid="classBVolumeRoster_1ab685f75fc6a9d3ef1cde64e82ebfdebd" prot="private" virt="virtual"><scope>BVolumeRoster</scope><name>_SeveredVRoster1</name></member>
      <member refid="classBVolumeRoster_1aca2274b1acfd895e9919daf2c7d8407d" prot="private" virt="virtual"><scope>BVolumeRoster</scope><name>_SeveredVRoster2</name></member>
      <member refid="classBVolumeRoster_1ac3d5de1081dff8e5d3acdb7de76f61e3" prot="public" virt="non-virtual"><scope>BVolumeRoster</scope><name>BVolumeRoster</name></member>
      <member refid="classBVolumeRoster_1ae34228960bc54e47960b5e1bf2a0dfd7" prot="private" virt="non-virtual"><scope>BVolumeRoster</scope><name>fCookie</name></member>
      <member refid="classBVolumeRoster_1ad8941692e2dd1a5f2b744527c85c2a6c" prot="private" virt="non-virtual"><scope>BVolumeRoster</scope><name>fTarget</name></member>
      <member refid="classBVolumeRoster_1a1df1b33f20f83ede40149d17555c7a9e" prot="public" virt="non-virtual"><scope>BVolumeRoster</scope><name>GetBootVolume</name></member>
      <member refid="classBVolumeRoster_1a8f8fbd0e558c214536d97e74026ac183" prot="public" virt="non-virtual"><scope>BVolumeRoster</scope><name>GetNextVolume</name></member>
      <member refid="classBVolumeRoster_1a347c10c05554e3a96a33da78b6ac7657" prot="public" virt="non-virtual"><scope>BVolumeRoster</scope><name>Messenger</name></member>
      <member refid="classBVolumeRoster_1aab13bb090dab13062b708b03a1534172" prot="public" virt="non-virtual"><scope>BVolumeRoster</scope><name>Rewind</name></member>
      <member refid="classBVolumeRoster_1ab437b00c523ed563d5456f46ad8a89b2" prot="public" virt="non-virtual"><scope>BVolumeRoster</scope><name>StartWatching</name></member>
      <member refid="classBVolumeRoster_1a17aad18f747c04a89ea99325f55af158" prot="public" virt="non-virtual"><scope>BVolumeRoster</scope><name>StopWatching</name></member>
      <member refid="classBVolumeRoster_1abaf24db5614655d7b1c10dc266bffd38" prot="public" virt="virtual"><scope>BVolumeRoster</scope><name>~BVolumeRoster</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
