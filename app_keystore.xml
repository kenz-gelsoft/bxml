<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="app_keystore" kind="page">
    <compoundname>app_keystore</compoundname>
    <title>Password and Key Storage API</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Haiku R1 introduces the first version of a system-wide key store service, allows you as developer to outsource some of the credential and certificate management, as well as providing an infrastructure that enables sharing these artifacts between applications.</para>
<para><simplesect kind="warning"><para>The implementation in Haiku R1 is limited and is a promise of more to come. Functionality beyond storing and sharing passwords is for the future. Also please read the security section of this document, especially when you are working with artifacts that are more sensitive. In many cases you will find that this system service will work just as well as making your own implementation, but there are instances in which you may chose not to use it.</para>
</simplesect>
</para>
<sect1 id="app_keystore_1app_keystore_overview">
<title>1. Highlevel Overview (components)</title>
<para>The implementation is based around the following concepts:<itemizedlist>
<listitem><para>The <bold>keystore</bold> is the centralized repository for your keys. It is managed by the <bold>keystore_server</bold> and it contains one or more <bold>keyrings</bold>.</para>
</listitem><listitem><para>A <bold>keyring</bold> is a collection of keys. There is always a <bold>master</bold> <bold>keyring</bold>, which cannot be removed. Access is organized around keyrings. From a user&apos;s perspective, when an application wants to access keys in a keyring, the user will have to grant permission to that application to access the keyring. A keyring is identified by a name, which needs to be unique on the user&apos;s system.</para>
</listitem><listitem><para>A keyring contains <bold>keys</bold>. These are the smallest unit in the system. A key can be anything that you want to safeguard in the keystore. Keys are identified by the combination of an identifier and a secondary identifier. These should be unique within a keyring.</para>
</listitem><listitem><para>The final piece is the concept of <bold>permissions</bold>. In the current implementation, an application needs to ask permission to access a keyring. The <computeroutput>keystore_server</computeroutput> will validate the permissions, and if necessary prompt the user to grant one-time or a permant access. If the user only allows it once, access is granted until the application terminates.</para>
</listitem></itemizedlist>
</para>
<para>As a user of the API, you will mostly be working with <ref refid="classBKeyStore" kindref="compound">BKeyStore</ref>, as the access point that queries and modifies keyrings and keys. An individual key is represented by the <ref refid="classBKey" kindref="compound">BKey</ref> object.</para>
</sect1>
<sect1 id="app_keystore_1app_keystore_security">
<title>2. Security</title>
<para>The current implementation of this API should be considered low-security. The most important thing to know is that there is <bold>no</bold> <bold>encryption</bold> applied when storing the keys and keyrings to the drive. This means that the data can be read by any malicious actor that can access the drive of your machine.</para>
<para>This should also puts the current locking mechanism in perspective. While the <computeroutput>keystore_server</computeroutput> will prompt the user to grant (or deny) access to your application, when it wants to access a keyring, this again does not prevent any malicious actor to bypass the <computeroutput>keystore_server</computeroutput> and directly read from (and write to!) the file.</para>
<para>When considering on whether to use the current API, there are a few things to think about:<itemizedlist>
<listitem><para>First, consider whether you should store the keys at all. Passwords to services with extremely sensitive personal or financial information, such as email passwords or credentials to financial institutions, should not be stored at all. Prompt your user for the credentials when needed, and don&apos;t keep them for later use.</para>
</listitem><listitem><para>Secondly, if you are storing credentials for use with web services, check if the service you are using supports using access tokens. Many APIs have them, and often use it in combination with some form of permission system or scoping, making it possible for you to keep access as limited as possible. Furthermore, the user often has the ability to revoke access to a token, in case they think it is compromised.</para>
</listitem><listitem><para>When you assess that you really do need to store the credentials, make a determination first about whether or not the credentials should have some form of encryption. For now you should consider looking for another solution to storing sensitive data, but contributions to improve this API are very welcome. It is beyond the scope of this document to discuss strategies around encryption.</para>
</listitem><listitem><para>When you assess the risk is low enough not to employ encryption strategies, you may consider using this API. It is particularly recommended if you will be sharing the credentials with more than one application.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>In the end, it is up to you as a developer to be conscious of any choices you make when it comes to user data, and credentials are no different. When you decide that the Password and Key API does not fit your needs, choose a framework or library that does fit your purpose.</para>
</simplesect>
</para>
</sect1>
<sect1 id="app_keystore_1app_keystore_usage">
<title>3. Practical use of the API</title>
<para>Below are two distinct examples on how you may use the API.</para>
<sect2 id="app_keystore_1app_keystore_usage_web">
<title>The Langlaufer Web Browser</title>
<para>We are working on the infamous Langlaufer web browser, and we are adding a feature where we autocomplete user names and passwords. It is decided to use the Password and Key Storage API to do our key management. Whenever we land on a web page with a login screen, we will try to see if we have credentials for that web page. Part of the requirements is that we support more than one set of credentials for a web page.</para>
<para>It is decided that the application will store the user credentials in it&apos;s own keyring, as we do not want to interfere with any other keys in the master key. Additionally, we will use both the primary and secondary identifier fields. The primary will contain the hostname of the website, and the secondary will contain the user name.</para>
<para>One final design note is that all the calls to the <computeroutput>keystore_server</computeroutput> are synchronous, meaning they will block until there is a response back from the keystore. In the case that a user needs to be prompted for a password, the call will be blocked until they make a decision. That is why any calls on <ref refid="classBKeyStore" kindref="compound">BKeyStore</ref> should be done on a separate worker thread, instead of within the logic of a Window.</para>
<para>For clarity, the example below displays the interaction with the <ref refid="classBKeyStore" kindref="compound">BKeyStore</ref> and <ref refid="classBKey" kindref="compound">BKey</ref> classes through some utility functions. It is up to the reader to put that in a separate working thread.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="Key_8h" kindref="compound">Key.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="KeyStore_8h" kindref="compound">KeyStore.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*kLanglauferKeyringName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Langlaufer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classBObjectList" kindref="compound">BObjectList&lt;BPasswordKey&gt;</ref></highlight></codeline>
<codeline><highlight class="normal">GetKeysForWebsite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*baseUrl)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>may<sp/>be<sp/>more<sp/>than<sp/>one<sp/>match,<sp/>so<sp/>we<sp/>use<sp/>the<sp/>iteration<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBKeyStore" kindref="compound">BKeyStore</ref><sp/>keyStore;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref><sp/>cookie;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBPasswordKey" kindref="compound">BPasswordKey</ref><sp/>currentKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBObjectList" kindref="compound">BObjectList&lt;BPasswordKey&gt;</ref><sp/>list;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(next)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref><sp/>status<sp/>=<sp/>keyStore.<ref refid="classBKeyStore_1a2b19dd024340ae18fdcbdc2e9feb69ce" kindref="member">GetNextKey</ref>(kLanglauferKeyringName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444aed0cd6ae9d3daf69a44facdf0852836a" kindref="member">B_KEY_TYPE_PASSWORD</ref>,<sp/><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5daf29e40dbca19b7504beb01a03fb1d5f4" kindref="member">B_KEY_PURPOSE_WEB</ref>,<sp/>cookie,<sp/>currentKey);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(status)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>B_OK:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>see<sp/>if<sp/>the<sp/>key<sp/>matches<sp/>the<sp/>website</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentKey.<ref refid="classBKey_1a519fb286f9b9bf340c45ab42ade87257" kindref="member">Identifier</ref>()<sp/>==<sp/>baseUrl)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>item<sp/>to<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="classBObjectList_1a8474455acae0f14ac9c4104727f06f99" kindref="member">AddItem</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classBPasswordKey" kindref="compound">BPasswordKey</ref>(currentKey));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>B_BAD_VALUE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>keyring<sp/>does<sp/>not<sp/>exist,<sp/>create<sp/>it,<sp/>and<sp/>end<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CreateKeyring();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Something<sp/>else<sp/>went<sp/>wrong,<sp/>like<sp/>the<sp/>user<sp/>did<sp/>not<sp/>give</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>authorization,<sp/>or<sp/>we<sp/>are<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bail<sp/>out<sp/>the<sp/>search<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">CreateKeyring()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBKeyStore" kindref="compound">BKeyStore</ref><sp/>keyStore;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>the<sp/>return<sp/>value<sp/>in<sp/>the<sp/>next<sp/>line,<sp/>it<sp/>may<sp/>fail<sp/>but<sp/>that<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupt<sp/>the<sp/>flow<sp/>of<sp/>our<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>keyStore.<ref refid="classBKeyStore_1a21196565a98779d7f453b34a83defffc" kindref="member">AddKeyring</ref>(kLanglauferKeyringName);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">AddOrReplaceKey(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*baseUrl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*password)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBKeyStore" kindref="compound">BKeyStore</ref><sp/>keyStore;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBPasswordKey" kindref="compound">BPasswordKey</ref><sp/>key;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>out<sp/>the<sp/>key<sp/>with<sp/>existing<sp/>data,<sp/>or<sp/>create<sp/>new<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyStore.<ref refid="classBKeyStore_1a1512f697b5398543f7668cd5358f4fb4" kindref="member">GetKey</ref>(kLanglauferKeyringName,<sp/><ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444aed0cd6ae9d3daf69a44facdf0852836a" kindref="member">B_KEY_TYPE_PASSWORD</ref>,<sp/>baseUrl,<sp/>user,<sp/>&amp;key)<sp/>==<sp/>B_OK)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>existing<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyStore.<ref refid="classBKeyStore_1af509aae99028fc2c828b25df258fe17d" kindref="member">RemoveKey</ref>(kLanglauferKeyringName,<sp/>key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>password</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key.<ref refid="classBPasswordKey_1a2f68636af50e84b753a646c68fb17c2d" kindref="member">SetPassword</ref>(password);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key.<ref refid="classBPasswordKey_1a1beb95e09102cd23d24b10a97a566f34" kindref="member">SetTo</ref>(password,<sp/><ref refid="Key_8h_1a9518f864f4ad0bbd2fc5056a51f9ed5daf29e40dbca19b7504beb01a03fb1d5f4" kindref="member">B_KEY_PURPOSE_WEB</ref>,<sp/>user,<sp/>password);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>updated/new<sp/>key<sp/>in<sp/>the<sp/>keyring</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>keyStore.<ref refid="classBKeyStore_1a758592b27bbd551b3c67452eb73f7f61" kindref="member">AddKey</ref>(kLanglauferKeyringName,<sp/>key);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="app_keystore_1app_keystore_usage_coolwebservice">
<title>The CoolWebService Tool Suite</title>
<para>We are working on a set of tools that interface with a cool web service. Instead of building one monolithic application, we make several small tools with specific jobs for this cool web service. One of the tools does the authentication, and stores the key in the master keyring on the system. The other tools use this key to access the API.</para>
<para>Each tool requires the authentication token to be set up properly. That&apos;s why in the <ref refid="classBApplication_1af912cef601090a89cc20cb3a7af48315" kindref="member">BApplication::ReadyToRun()</ref> hook we check for the availability of the key. If it is not available, or it does not work, the user will be redirected to the authentication tool. The key will be stored as a password. It will be identified by the identifier &quot;CoolWebService&quot;.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">CoolPushTool::ReadyToRun()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBKeyStore" kindref="compound">BKeyStore</ref><sp/>keyStore;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBPasswordKey" kindref="compound">BPasswordKey</ref><sp/>key;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyStore.<ref refid="classBKeyStore_1a1512f697b5398543f7668cd5358f4fb4" kindref="member">GetKey</ref>(<ref refid="Key_8h_1ab6fe8f56a119810db6dd4146fcece444aed0cd6ae9d3daf69a44facdf0852836a" kindref="member">B_KEY_TYPE_PASSWORD</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CoolWebService&quot;</highlight><highlight class="normal">,<sp/>key)<sp/>!=<sp/>B_OK)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Terminate<sp/>the<sp/>application<sp/>and<sp/>re-authenticate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBString" kindref="compound">BString</ref><sp/>accessToken<sp/>=<sp/>key.<ref refid="classBPasswordKey_1ad554ead88f376d5b86a35e19e63b346c" kindref="member">Password</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>the<sp/>key,<sp/>and<sp/>if<sp/>succesful,<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="app/_app_keystore.dox"/>
  </compounddef>
</doxygen>
