<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBAbstractSocket" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BAbstractSocket</compoundname>
    <basecompoundref refid="classBDataIO" prot="public" virt="non-virtual">BDataIO</basecompoundref>
    <derivedcompoundref refid="classBDatagramSocket" prot="public" virt="non-virtual">BDatagramSocket</derivedcompoundref>
    <derivedcompoundref refid="classBSocket" prot="public" virt="non-virtual">BSocket</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBAbstractSocket_1a46610bcbcd9211d997a76fc0fe213c27" prot="protected" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::fInitStatus</definition>
        <argsstring></argsstring>
        <name>fInitStatus</name>
        <qualifiedname>BAbstractSocket::fInitStatus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="64" column="9" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAbstractSocket_1a636afd8410e4ad2966e6739658901eaa" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BAbstractSocket::fIsBound</definition>
        <argsstring></argsstring>
        <name>fIsBound</name>
        <qualifiedname>BAbstractSocket::fIsBound</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="68" column="5" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAbstractSocket_1a635435da828eb4502560e14285f07a03" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BAbstractSocket::fIsConnected</definition>
        <argsstring></argsstring>
        <name>fIsConnected</name>
        <qualifiedname>BAbstractSocket::fIsConnected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="69" column="5" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAbstractSocket_1a897b420ef72d4d4816ed25e261ea72ca" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BAbstractSocket::fIsListening</definition>
        <argsstring></argsstring>
        <name>fIsListening</name>
        <qualifiedname>BAbstractSocket::fIsListening</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="70" column="5" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAbstractSocket_1aa2421b31589c606b087797a42374943f" prot="protected" static="no" mutable="no">
        <type>BNetworkAddress</type>
        <definition>BNetworkAddress BAbstractSocket::fLocal</definition>
        <argsstring></argsstring>
        <name>fLocal</name>
        <qualifiedname>BAbstractSocket::fLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="66" column="16" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAbstractSocket_1a5c5fac0c69409cc2d4ef3f942ae2a31a" prot="protected" static="no" mutable="no">
        <type>BNetworkAddress</type>
        <definition>BNetworkAddress BAbstractSocket::fPeer</definition>
        <argsstring></argsstring>
        <name>fPeer</name>
        <qualifiedname>BAbstractSocket::fPeer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="67" column="16" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAbstractSocket_1afbd827826b10fd154601a612df28c6d0" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int BAbstractSocket::fSocket</definition>
        <argsstring></argsstring>
        <name>fSocket</name>
        <qualifiedname>BAbstractSocket::fSocket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="65" column="4" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBAbstractSocket_1aa0eff1ec277cbae66613975c3bb67da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAbstractSocket::BAbstractSocket</definition>
        <argsstring>()</argsstring>
        <name>BAbstractSocket</name>
        <qualifiedname>BAbstractSocket::BAbstractSocket</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an uninitialized socket in disconnected and unbound state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1adad46cb8129dad3066d464e34320211f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BAbstractSocket::BAbstractSocket</definition>
        <argsstring>(const BAbstractSocket &amp;other)</argsstring>
        <name>BAbstractSocket</name>
        <qualifiedname>BAbstractSocket::BAbstractSocket</qualifiedname>
        <param>
          <type>const <ref refid="classBAbstractSocket" kindref="compound">BAbstractSocket</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The copied object accesses the same underlying socket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a8813b61b49c1a409fc64d85e155f77fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BAbstractSocket::~BAbstractSocket</definition>
        <argsstring>()</argsstring>
        <name>~BAbstractSocket</name>
        <qualifiedname>BAbstractSocket::~BAbstractSocket</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="19" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1ab342815add8223e087a5e765276f1467" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractSocket::Accept</definition>
        <argsstring>(BAbstractSocket *&amp;_socket)=0</argsstring>
        <name>Accept</name>
        <qualifiedname>BAbstractSocket::Accept</qualifiedname>
        <reimplementedby refid="classBDatagramSocket_1ac4850f7bd76423cc709e17488f361292">Accept</reimplementedby>
        <param>
          <type><ref refid="classBAbstractSocket" kindref="compound">BAbstractSocket</ref> *&amp;</type>
          <declname>_socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="28" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a9a3d46a34d8b96f443bbbf676db8dfb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractSocket::Bind</definition>
        <argsstring>(const BNetworkAddress &amp;local, bool reuseAddr)=0</argsstring>
        <name>Bind</name>
        <qualifiedname>BAbstractSocket::Bind</qualifiedname>
        <reimplementedby refid="classBDatagramSocket_1a09527623a391e9001895b231b37c62d4">Bind</reimplementedby>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>local</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reuseAddr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="23" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1af43b41f6fdbb1610ef6c671b02fb14d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractSocket::Connect</definition>
        <argsstring>(const BNetworkAddress &amp;peer, bigtime_t timeout=B_INFINITE_TIMEOUT)=0</argsstring>
        <name>Connect</name>
        <qualifiedname>BAbstractSocket::Connect</qualifiedname>
        <reimplementedby refid="classBDatagramSocket_1ae63f37f5632adf98d7a0bbe2202d72d0">Connect</reimplementedby>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>peer</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="30" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1aa10aba8e260b4051c1ed381aee6f0fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BAbstractSocket::Disconnect</definition>
        <argsstring>()</argsstring>
        <name>Disconnect</name>
        <qualifiedname>BAbstractSocket::Disconnect</qualifiedname>
        <briefdescription>
<para>Close the connection. </para>
        </briefdescription>
        <detaileddescription>
<para>The socket becomes disconnected and unbound. You can Connect or Bind it again, either to the same or another peer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="33" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1af9d46dffaf8377e7235680873e82d66f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BAbstractSocket::InitCheck</qualifiedname>
        <briefdescription>
<para>Check connection status. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>B_OK if the connection is working, or an error code if something went wrong. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="21" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1ac645bece7a4d03ea21988243ba169c02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BAbstractSocket::IsBound</definition>
        <argsstring>() const</argsstring>
        <name>IsBound</name>
        <qualifiedname>BAbstractSocket::IsBound</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A socket becomes bound when Bind succeeds, and stops being bound when Disconnect is called.</para>
<para><simplesect kind="return"><para>wether the socket is currently bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="24" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1adc36a9456fed2b132630b2411b58e81b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BAbstractSocket::IsConnected</definition>
        <argsstring>() const</argsstring>
        <name>IsConnected</name>
        <qualifiedname>BAbstractSocket::IsConnected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A socket becomes connected when Connect succeeds, and disconnected when Disconnect is called.</para>
<para><simplesect kind="return"><para>wether the socket is currently connected </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="32" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a872930e548f84eca5b25e2f2996453fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BAbstractSocket::IsListening</definition>
        <argsstring>() const</argsstring>
        <name>IsListening</name>
        <qualifiedname>BAbstractSocket::IsListening</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="25" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a037ab912c5b1edfb60e8a8e9d1b44dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BAbstractSocket::Listen</definition>
        <argsstring>(int backlog=10)</argsstring>
        <name>Listen</name>
        <qualifiedname>BAbstractSocket::Listen</qualifiedname>
        <param>
          <type>int</type>
          <declname>backlog</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="27" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a958ca85bdfcfe2b4414ef1e03efa86ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const BNetworkAddress &amp;</type>
        <definition>const BNetworkAddress &amp; BAbstractSocket::Local</definition>
        <argsstring>() const</argsstring>
        <name>Local</name>
        <qualifiedname>BAbstractSocket::Local</qualifiedname>
        <briefdescription>
<para>gets the local address for this socket </para>
        </briefdescription>
        <detaileddescription>
<para>This gives useful results only if the socket is either connected or bound. Otherwise, an uninitialized address is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="38" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1aeb86b990a759fae1d7f15cb150510e2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t BAbstractSocket::MaxTransmissionSize</definition>
        <argsstring>() const</argsstring>
        <name>MaxTransmissionSize</name>
        <qualifiedname>BAbstractSocket::MaxTransmissionSize</qualifiedname>
        <reimplementedby refid="classBDatagramSocket_1a14121c4a20ea7583b5b29bcef28aeb26">MaxTransmissionSize</reimplementedby>
        <briefdescription>
<para>Return the maximal size of a transmission on this socket. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation always returns SSIZE_MAX, but subclasses may restrict this to a smaller size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="41" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a26c3225da767963450b74be2b46d515c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const BNetworkAddress &amp;</type>
        <definition>const BNetworkAddress &amp; BAbstractSocket::Peer</definition>
        <argsstring>() const</argsstring>
        <name>Peer</name>
        <qualifiedname>BAbstractSocket::Peer</qualifiedname>
        <briefdescription>
<para>gets the peer address </para>
        </briefdescription>
        <detaileddescription>
<para>This gives useful results only if the socket is either connected or bound. Otherwise, an uninitialized address is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="39" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1aadd29c12de2b666f398d8605b7b72c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::SetTimeout</definition>
        <argsstring>(bigtime_t timeout)</argsstring>
        <name>SetTimeout</name>
        <qualifiedname>BAbstractSocket::SetTimeout</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>sets the read and write timeout </para>
        </briefdescription>
        <detaileddescription>
<para>A negative value disables timeouts, so the Read and Write calls will wait until data is available or can be sent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout in microseconds, or B_INFINITE_TIMEOUT. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="35" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a6994fc974cf477aaff8728931302e395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BAbstractSocket::Socket</definition>
        <argsstring>() const</argsstring>
        <name>Socket</name>
        <qualifiedname>BAbstractSocket::Socket</qualifiedname>
        <briefdescription>
<para>get the underlying socket descriptor </para>
        </briefdescription>
        <detaileddescription>
<para>The BSD socket descriptor can be used to modify advanced connection paramters using the POSIX socket API.</para>
<para><simplesect kind="return"><para>the socket descriptor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="48" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a5f014ac80e2457bcb931c9b5a20dae05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
        <definition>bigtime_t BAbstractSocket::Timeout</definition>
        <argsstring>() const</argsstring>
        <name>Timeout</name>
        <qualifiedname>BAbstractSocket::Timeout</qualifiedname>
        <briefdescription>
<para>gets the socket timeout </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the timeout in microseconds, or B_INFINITE_TIMEOUT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="36" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a174391627c31e9789ebe9f74719b837a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::WaitForReadable</definition>
        <argsstring>(bigtime_t timeout=B_INFINITE_TIMEOUT) const</argsstring>
        <name>WaitForReadable</name>
        <qualifiedname>BAbstractSocket::WaitForReadable</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>wait for incoming data </para>
        </briefdescription>
        <detaileddescription>
<para>Wait until data comes in, or the timeout expires. After this function returns B_OK, Read can be called without blocking.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout in microseconds, or B_INFINITE_TIMEOUT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>B_OK when data is available, B_TIMED_OUT when the timeout expires, or B_WOULD_BLOCK when the wait was interrupted for other reasons. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="43" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a66a1117d00833276e19ac9f8e5950c30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::WaitForWritable</definition>
        <argsstring>(bigtime_t timeout=B_INFINITE_TIMEOUT) const</argsstring>
        <name>WaitForWritable</name>
        <qualifiedname>BAbstractSocket::WaitForWritable</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>wait until writing is possible </para>
        </briefdescription>
        <detaileddescription>
<para>Wait until the socket becomes ready for writing, or the timeout expires. After this function returns B_OK, Write can be called without blocking.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout in microseconds, or B_INFINITE_TIMEOUT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>B_OK when the socket is ready to accept writes, B_TIMED_OUT when the timeout expires, or B_WOULD_BLOCK when the wait was interrupted for another reason. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="45" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBAbstractSocket_1a338ddf351780ed4fef160e78b937ff01" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::AcceptNext</definition>
        <argsstring>(int &amp;_acceptedSocket, BNetworkAddress &amp;_peer)</argsstring>
        <name>AcceptNext</name>
        <qualifiedname>BAbstractSocket::AcceptNext</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>_acceptedSocket</declname>
        </param>
        <param>
          <type>BNetworkAddress &amp;</type>
          <declname>_peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="55" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a1b4ea12b64505e5dbbc33628f8aa8ca1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::Bind</definition>
        <argsstring>(const BNetworkAddress &amp;local, bool reuseAddr, int type)</argsstring>
        <name>Bind</name>
        <qualifiedname>BAbstractSocket::Bind</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>local</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reuseAddr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>binds the socket to the given address </para>
        </briefdescription>
        <detaileddescription>
<para>If the socket was already bound, the previous binding is removed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>the local address to bind </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reuseAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>true</computeroutput>, non-zero requests reuse <emphasis>local</emphasis> address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the socket type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>B_OK on success, other error codes on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="51" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a20f10d2f72c427132973bf813ec18092" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::Connect</definition>
        <argsstring>(const BNetworkAddress &amp;peer, int type, bigtime_t timeout=B_INFINITE_TIMEOUT)</argsstring>
        <name>Connect</name>
        <qualifiedname>BAbstractSocket::Connect</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>peer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>B_INFINITE_TIMEOUT</defval>
        </param>
        <briefdescription>
<para>Connect the socket to the given peer. </para>
        </briefdescription>
        <detaileddescription>
<para>The socket is disconnected from any previous connections.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peer</parametername>
</parameternamelist>
<parameterdescription>
<para>the peer to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the socket type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout in microseconds or B_INFINITE_TIMEOUT. This is used for subsequent reads and writes as well. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="53" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBAbstractSocket_1a602109d26eee3dad9e8691fb2b64a529" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::_OpenIfNeeded</definition>
        <argsstring>(int family, int type)</argsstring>
        <name>_OpenIfNeeded</name>
        <qualifiedname>BAbstractSocket::_OpenIfNeeded</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="59" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1af989f0d368345fbfcd7d3108178ba043" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::_UpdateLocalAddress</definition>
        <argsstring>()</argsstring>
        <name>_UpdateLocalAddress</name>
        <qualifiedname>BAbstractSocket::_UpdateLocalAddress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="60" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBAbstractSocket_1a28c29c2319e614ee145ea406773bd4bb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BAbstractSocket::_WaitFor</definition>
        <argsstring>(int flags, bigtime_t timeout) const</argsstring>
        <name>_WaitFor</name>
        <qualifiedname>BAbstractSocket::_WaitFor</qualifiedname>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="61" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract interface for all socket connections. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBAbstractSocket" kindref="compound">BAbstractSocket</ref> provides a common interface for all socket-based communication streams. These include <ref refid="classBDatagramSocket" kindref="compound">BDatagramSocket</ref>, BSocket, BSecureSocket and BServerSocket.</para>
<para><ref refid="classBAbstractSocket" kindref="compound">BAbstractSocket</ref> implements common behavior between these different socket types. This includes management of a BSD socket integer handle, knowledge of the local and remote network addresses, as well as the connection state. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BAbstractSocket</label>
        <link refid="classBAbstractSocket"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
      <node id="3">
        <label>BDatagramSocket</label>
        <link refid="classBDatagramSocket"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BAbstractSocket</label>
        <link refid="classBAbstractSocket"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BDataIO</label>
        <link refid="classBDataIO"/>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" line="15" column="1" bodyfile="/boot/home/src/haiku/headers/os/net/AbstractSocket.h" bodystart="15" bodyend="71"/>
    <listofallmembers>
      <member refid="classBAbstractSocket_1a602109d26eee3dad9e8691fb2b64a529" prot="private" virt="non-virtual"><scope>BAbstractSocket</scope><name>_OpenIfNeeded</name></member>
      <member refid="classBAbstractSocket_1af989f0d368345fbfcd7d3108178ba043" prot="private" virt="non-virtual"><scope>BAbstractSocket</scope><name>_UpdateLocalAddress</name></member>
      <member refid="classBAbstractSocket_1a28c29c2319e614ee145ea406773bd4bb" prot="private" virt="non-virtual"><scope>BAbstractSocket</scope><name>_WaitFor</name></member>
      <member refid="classBAbstractSocket_1ab342815add8223e087a5e765276f1467" prot="public" virt="pure-virtual"><scope>BAbstractSocket</scope><name>Accept</name></member>
      <member refid="classBAbstractSocket_1a338ddf351780ed4fef160e78b937ff01" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>AcceptNext</name></member>
      <member refid="classBAbstractSocket_1aa0eff1ec277cbae66613975c3bb67da7" prot="public" virt="non-virtual"><scope>BAbstractSocket</scope><name>BAbstractSocket</name></member>
      <member refid="classBAbstractSocket_1adad46cb8129dad3066d464e34320211f" prot="public" virt="non-virtual"><scope>BAbstractSocket</scope><name>BAbstractSocket</name></member>
      <member refid="classBDataIO_1a67891b7afe78d6a77845dd0352218801" prot="public" virt="non-virtual"><scope>BAbstractSocket</scope><name>BDataIO</name></member>
      <member refid="classBAbstractSocket_1a9a3d46a34d8b96f443bbbf676db8dfb0" prot="public" virt="pure-virtual"><scope>BAbstractSocket</scope><name>Bind</name></member>
      <member refid="classBAbstractSocket_1a1b4ea12b64505e5dbbc33628f8aa8ca1" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>Bind</name></member>
      <member refid="classBAbstractSocket_1af43b41f6fdbb1610ef6c671b02fb14d2" prot="public" virt="pure-virtual"><scope>BAbstractSocket</scope><name>Connect</name></member>
      <member refid="classBAbstractSocket_1a20f10d2f72c427132973bf813ec18092" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>Connect</name></member>
      <member refid="classBAbstractSocket_1aa10aba8e260b4051c1ed381aee6f0fb9" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Disconnect</name></member>
      <member refid="classBAbstractSocket_1a46610bcbcd9211d997a76fc0fe213c27" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>fInitStatus</name></member>
      <member refid="classBAbstractSocket_1a636afd8410e4ad2966e6739658901eaa" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>fIsBound</name></member>
      <member refid="classBAbstractSocket_1a635435da828eb4502560e14285f07a03" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>fIsConnected</name></member>
      <member refid="classBAbstractSocket_1a897b420ef72d4d4816ed25e261ea72ca" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>fIsListening</name></member>
      <member refid="classBAbstractSocket_1aa2421b31589c606b087797a42374943f" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>fLocal</name></member>
      <member refid="classBDataIO_1a38a8df63b367585fe5e6b6a85c406d05" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Flush</name></member>
      <member refid="classBAbstractSocket_1a5c5fac0c69409cc2d4ef3f942ae2a31a" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>fPeer</name></member>
      <member refid="classBAbstractSocket_1afbd827826b10fd154601a612df28c6d0" prot="protected" virt="non-virtual"><scope>BAbstractSocket</scope><name>fSocket</name></member>
      <member refid="classBAbstractSocket_1af9d46dffaf8377e7235680873e82d66f" prot="public" virt="non-virtual"><scope>BAbstractSocket</scope><name>InitCheck</name></member>
      <member refid="classBAbstractSocket_1ac645bece7a4d03ea21988243ba169c02" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>IsBound</name></member>
      <member refid="classBAbstractSocket_1adc36a9456fed2b132630b2411b58e81b" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>IsConnected</name></member>
      <member refid="classBAbstractSocket_1a872930e548f84eca5b25e2f2996453fe" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>IsListening</name></member>
      <member refid="classBAbstractSocket_1a037ab912c5b1edfb60e8a8e9d1b44dc7" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Listen</name></member>
      <member refid="classBAbstractSocket_1a958ca85bdfcfe2b4414ef1e03efa86ce" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Local</name></member>
      <member refid="classBAbstractSocket_1aeb86b990a759fae1d7f15cb150510e2a" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>MaxTransmissionSize</name></member>
      <member refid="classBAbstractSocket_1a26c3225da767963450b74be2b46d515c" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Peer</name></member>
      <member refid="classBDataIO_1a847ec8576c368bf9aada412e92aed623" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Read</name></member>
      <member refid="classBDataIO_1a3a0b0fc36232531a1d8c1144a7d75741" prot="public" virt="non-virtual"><scope>BAbstractSocket</scope><name>ReadExactly</name></member>
      <member refid="classBAbstractSocket_1aadd29c12de2b666f398d8605b7b72c8e" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>SetTimeout</name></member>
      <member refid="classBAbstractSocket_1a6994fc974cf477aaff8728931302e395" prot="public" virt="non-virtual"><scope>BAbstractSocket</scope><name>Socket</name></member>
      <member refid="classBAbstractSocket_1a5f014ac80e2457bcb931c9b5a20dae05" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Timeout</name></member>
      <member refid="classBAbstractSocket_1a174391627c31e9789ebe9f74719b837a" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>WaitForReadable</name></member>
      <member refid="classBAbstractSocket_1a66a1117d00833276e19ac9f8e5950c30" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>WaitForWritable</name></member>
      <member refid="classBDataIO_1a01692303eba7601c6a7cfa72c06d6afb" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>Write</name></member>
      <member refid="classBDataIO_1a0095cfffa454a82eac3dedda2e187ab7" prot="public" virt="non-virtual"><scope>BAbstractSocket</scope><name>WriteExactly</name></member>
      <member refid="classBAbstractSocket_1a8813b61b49c1a409fc64d85e155f77fc" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>~BAbstractSocket</name></member>
      <member refid="classBDataIO_1a45daa9db670dd2e5b83efcefcf8dbaed" prot="public" virt="virtual"><scope>BAbstractSocket</scope><name>~BDataIO</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
