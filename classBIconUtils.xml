<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBIconUtils" kind="class" language="C++" prot="public">
    <compoundname>BIconUtils</compoundname>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBIconUtils_1a2d4be4d4018fb2cbabb4d67cd113dcf2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BIconUtils::BIconUtils</definition>
        <argsstring>()</argsstring>
        <name>BIconUtils</name>
        <qualifiedname>BIconUtils::BIconUtils</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1a1e7ce683fa9f17918453deee7ec2d580" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BIconUtils::BIconUtils</definition>
        <argsstring>(const BIconUtils &amp;)</argsstring>
        <name>BIconUtils</name>
        <qualifiedname>BIconUtils::BIconUtils</qualifiedname>
        <param>
          <type>const <ref refid="classBIconUtils" kindref="compound">BIconUtils</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1a0b585b8ba0402e74a932296a5adbbc42" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BIconUtils::~BIconUtils</definition>
        <argsstring>()</argsstring>
        <name>~BIconUtils</name>
        <qualifiedname>BIconUtils::~BIconUtils</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1a8367889d77e3455a60d611c90942371a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBIconUtils" kindref="compound">BIconUtils</ref> &amp;</type>
        <definition>BIconUtils &amp; BIconUtils::operator=</definition>
        <argsstring>(const BIconUtils &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BIconUtils::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBIconUtils" kindref="compound">BIconUtils</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="19" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBIconUtils_1af83e5eafeb50e2cc99174aef5c849522" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::ConvertFromCMAP8</definition>
        <argsstring>(BBitmap *source, BBitmap *result)</argsstring>
        <name>ConvertFromCMAP8</name>
        <qualifiedname>BIconUtils::ConvertFromCMAP8</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Converts an old-style icon to another colorspace. </para>
        </briefdescription>
        <detaileddescription>
<para>Utility function to convert from old icon colorspace into colorspace of <ref refid="classBBitmap" kindref="compound">BBitmap</ref> <emphasis>result</emphasis> </para>
<para><simplesect kind="note"><para>result should be in B_RGBA32 colorspace, and source in B_CMAP8.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="39" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1af5c23a33394ffed219698b70adc8572a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::ConvertFromCMAP8</definition>
        <argsstring>(const uint8 *data, uint32 width, uint32 height, uint32 bytesPerRow, BBitmap *result)</argsstring>
        <name>ConvertFromCMAP8</name>
        <qualifiedname>BIconUtils::ConvertFromCMAP8</qualifiedname>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>bytesPerRow</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Convert raw data in B_CMAP8 colorspace to a B_RGBA32 <ref refid="classBBitmap" kindref="compound">BBitmap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="44" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1a825b85295d102cf882e53feddf725781" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::ConvertToCMAP8</definition>
        <argsstring>(BBitmap *source, BBitmap *result)</argsstring>
        <name>ConvertToCMAP8</name>
        <qualifiedname>BIconUtils::ConvertToCMAP8</qualifiedname>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Converts a true-color icon to CMAP8 colorspace. </para>
        </briefdescription>
        <detaileddescription>
<para>Utility function to convert data from source into <emphasis>result</emphasis> colorspace. Call this to convert a picture to a format suitable for storage as an old-style icon.</para>
<para><simplesect kind="note"><para>result should be in B_CMAP8 colorspace, and source in B_RGBA32.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="41" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1acec2db32c0fd064ad24ba3290ff84fd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::ConvertToCMAP8</definition>
        <argsstring>(const uint8 *data, uint32 width, uint32 height, uint32 bytesPerRow, BBitmap *result)</argsstring>
        <name>ConvertToCMAP8</name>
        <qualifiedname>BIconUtils::ConvertToCMAP8</qualifiedname>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>bytesPerRow</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Convert B_RGBA32 raw data into a B_CMAP8 <ref refid="classBBitmap" kindref="compound">BBitmap</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="48" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1a1c86f2249cec405ba86cefaf57877190" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::GetCMAP8Icon</definition>
        <argsstring>(BNode *node, const char *smallIconAttrName, const char *largeIconAttrName, icon_size size, BBitmap *icon)</argsstring>
        <name>GetCMAP8Icon</name>
        <qualifiedname>BIconUtils::GetCMAP8Icon</qualifiedname>
        <param>
          <type><ref refid="classBNode" kindref="compound">BNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>smallIconAttrName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>largeIconAttrName</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
<para>Utility function to import an &quot;old&quot; BeOS icon in B_CMAP8 colorspace. </para>
        </briefdescription>
        <detaileddescription>
<para>Utility function to import an &quot;old&quot; BeOS icon in B_CMAP8 colorspace from either the small icon attribute or the large icon attribute as given in <emphasis>smallIconAttrName</emphasis> and <emphasis>largeIconAttrName</emphasis>. Which icon is loaded depends on the given <emphasis>size</emphasis>.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="34" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1a892a955ed7a66348f7e36e764347db41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::GetIcon</definition>
        <argsstring>(BNode *node, const char *vectorIconAttrName, const char *smallIconAttrName, const char *largeIconAttrName, icon_size size, BBitmap *result)</argsstring>
        <name>GetIcon</name>
        <qualifiedname>BIconUtils::GetIcon</qualifiedname>
        <param>
          <type><ref refid="classBNode" kindref="compound">BNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>vectorIconAttrName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>smallIconAttrName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>largeIconAttrName</declname>
        </param>
        <param>
          <type><ref refid="Mime_8h_1a4eaa14a487fd1f13f91438b15b96cf15" kindref="member">icon_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Utility function to import an icon from a node. </para>
        </briefdescription>
        <detaileddescription>
<para>Utility function to import an icon from the node that has either of the provided attribute names. Which icon type is preferred (vector, small or large B_CMAP8 icon) depends on the colorspace of the provided bitmap.</para>
<para><simplesect kind="note"><para>If the colorspace is B_CMAP8, B_CMAP8 icons are preferred. In that case, the bitmap size must also match the provided icon_size &quot;size&quot;!</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="22" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1adeaaa371ea8dad53906c7019803ff2a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::GetVectorIcon</definition>
        <argsstring>(BNode *node, const char *attrName, BBitmap *result)</argsstring>
        <name>GetVectorIcon</name>
        <qualifiedname>BIconUtils::GetVectorIcon</qualifiedname>
        <param>
          <type><ref refid="classBNode" kindref="compound">BNode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attrName</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Utility function to import a vector icon in &quot;flat icon&quot; format. </para>
        </briefdescription>
        <detaileddescription>
<para>Utility function to import a vector icon in &quot;flat icon&quot; format from a <ref refid="classBNode" kindref="compound">BNode</ref> attribute into the preallocated <ref refid="classBBitmap" kindref="compound">BBitmap</ref> <emphasis>result</emphasis>. The colorspace of result needs to be B_RGBA32 or at least B_RGB32 (though that makes less sense). The icon will be scaled from its &quot;native&quot; size of 64x64 to the size of the bitmap.</para>
<para><simplesect kind="note"><para>The scale is derived from the bitmap width, the bitmap should have square dimension, or the icon will be cut off at the bottom (or have room left).</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="28" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBIconUtils_1a049e211e3002526351a17f7f64df0d25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>static status_t BIconUtils::GetVectorIcon</definition>
        <argsstring>(const uint8 *buffer, size_t size, BBitmap *result)</argsstring>
        <name>GetVectorIcon</name>
        <qualifiedname>BIconUtils::GetVectorIcon</qualifiedname>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Utility function to import a vector icon in &quot;flat icon&quot; format. </para>
        </briefdescription>
        <detaileddescription>
<para>Utility function to import a vector icon in &quot;flat icon&quot; format from the given <emphasis>buffer</emphasis> into the preallocated <ref refid="classBBitmap" kindref="compound">BBitmap</ref> <emphasis>result</emphasis>. The colorspace of result needs to be B_RGBA32 or at least B_RGB32 (though that makes less sense). The icon will be scaled from its &quot;native&quot; size of 64x64 to the size of the bitmap.</para>
<para><simplesect kind="note"><para>The scale is derived from the bitmap width, the bitmap should have square dimension, or the icon will be cut off at the bottom (or have room left).</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="31" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classBIconUtils" kindref="compound">BIconUtils</ref> class provide utility methods for managing and drawing vector icons. </para>
    </briefdescription>
    <detaileddescription>
<para>Haiku icons are stored in the HVIF (Haiku Vector Icon Format). This format was designed specifically for this purpose, and allows the icon data to be small enough to fit in file&apos;s inodes. This way, the icon can be displayed like any other file attribute, without extra disk access.</para>
<para>This class provide only static methods to allow access to the icon data and rendering to BBitmaps for later use in an application. It also supports older icons in bitmap format. These may still be useful at very small sizes. Note you can&apos;t create an instance of <ref refid="classBIconUtils" kindref="compound">BIconUtils</ref>, just call the static methods.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/interface/IconUtils.h" line="15" column="1" bodyfile="/boot/home/src/haiku/headers/os/interface/IconUtils.h" bodystart="15" bodyend="51"/>
    <listofallmembers>
      <member refid="classBIconUtils_1a2d4be4d4018fb2cbabb4d67cd113dcf2" prot="private" virt="non-virtual"><scope>BIconUtils</scope><name>BIconUtils</name></member>
      <member refid="classBIconUtils_1a1e7ce683fa9f17918453deee7ec2d580" prot="private" virt="non-virtual"><scope>BIconUtils</scope><name>BIconUtils</name></member>
      <member refid="classBIconUtils_1af83e5eafeb50e2cc99174aef5c849522" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>ConvertFromCMAP8</name></member>
      <member refid="classBIconUtils_1af5c23a33394ffed219698b70adc8572a" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>ConvertFromCMAP8</name></member>
      <member refid="classBIconUtils_1a825b85295d102cf882e53feddf725781" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>ConvertToCMAP8</name></member>
      <member refid="classBIconUtils_1acec2db32c0fd064ad24ba3290ff84fd8" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>ConvertToCMAP8</name></member>
      <member refid="classBIconUtils_1a1c86f2249cec405ba86cefaf57877190" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>GetCMAP8Icon</name></member>
      <member refid="classBIconUtils_1a892a955ed7a66348f7e36e764347db41" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>GetIcon</name></member>
      <member refid="classBIconUtils_1adeaaa371ea8dad53906c7019803ff2a1" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>GetVectorIcon</name></member>
      <member refid="classBIconUtils_1a049e211e3002526351a17f7f64df0d25" prot="public" virt="non-virtual"><scope>BIconUtils</scope><name>GetVectorIcon</name></member>
      <member refid="classBIconUtils_1a8367889d77e3455a60d611c90942371a" prot="private" virt="non-virtual"><scope>BIconUtils</scope><name>operator=</name></member>
      <member refid="classBIconUtils_1a0b585b8ba0402e74a932296a5adbbc42" prot="private" virt="non-virtual"><scope>BIconUtils</scope><name>~BIconUtils</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
