<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBBlockCache" kind="class" language="C++" prot="public">
    <compoundname>BBlockCache</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBBlockCache_1ab344e1bf62ad847cde6a7f2813fc7de5" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BBlockCache::_reserved[2]</definition>
        <argsstring>[2]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BBlockCache::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="61" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBlockCache_1a65e577fb20975e6be18941ee92763d2f" prot="private" static="no" mutable="no">
        <type>void *(*</type>
        <definition>void *(* BBlockCache::fAlloc) (size_t size)</definition>
        <argsstring>)(size_t size)</argsstring>
        <name>fAlloc</name>
        <qualifiedname>BBlockCache::fAlloc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="59" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBlockCache_1a91e4ee7cae0d3aa904a1691dce60e46a" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BBlockCache::fBlockCount</definition>
        <argsstring></argsstring>
        <name>fBlockCount</name>
        <qualifiedname>BBlockCache::fBlockCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="57" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBlockCache_1a897fd70fa807ba5c3d4c018166c6c3c0" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t BBlockCache::fBlockSize</definition>
        <argsstring></argsstring>
        <name>fBlockSize</name>
        <qualifiedname>BBlockCache::fBlockSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="55" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBlockCache_1ac6f4bea08f415bf32bf3664f9058c4ae" prot="private" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* BBlockCache::fFree) (void *pointer)</definition>
        <argsstring>)(void *pointer)</argsstring>
        <name>fFree</name>
        <qualifiedname>BBlockCache::fFree</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="60" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBlockCache_1a649cbc2fa7353d2fc1a5fa5d5aff160a" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BBlockCache::fFreeBlocks</definition>
        <argsstring></argsstring>
        <name>fFreeBlocks</name>
        <qualifiedname>BBlockCache::fFreeBlocks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="56" column="6" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBlockCache_1a5fdf96e47bdec1014fd8b2837855c825" prot="private" static="no" mutable="no">
        <type>_FreeBlock *</type>
        <definition>_FreeBlock* BBlockCache::fFreeList</definition>
        <argsstring></argsstring>
        <name>fFreeList</name>
        <qualifiedname>BBlockCache::fFreeList</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="54" column="11" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBBlockCache_1ab9b637d8d83a08e0e7247d668d1a6129" prot="private" static="no" mutable="no">
        <type><ref refid="classBLocker" kindref="compound">BLocker</ref></type>
        <definition>BLocker BBlockCache::fLocker</definition>
        <argsstring></argsstring>
        <name>fLocker</name>
        <qualifiedname>BBlockCache::fLocker</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="58" column="8" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBBlockCache_1a03b66b65aaabf96bf08eca5f0e46f945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BBlockCache::BBlockCache</definition>
        <argsstring>(uint32 blockCount, size_t blockSize, uint32 allocationType)</argsstring>
        <name>BBlockCache</name>
        <qualifiedname>BBlockCache::BBlockCache</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>blockCount</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>allocationType</declname>
        </param>
        <briefdescription>
<para>Allocate a new memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of free memory blocks you want to allocate initially. This number is also used as the maximum number of free blocks that will be kept. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocationType</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba9dcad77c9fcf0f4be8332af2a541d004" kindref="member">B_OBJECT_CACHE</ref> for using <computeroutput>new</computeroutput>[] and <computeroutput>delete</computeroutput>[] or <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba5785baf710ae44d11020aa00eadc1bca" kindref="member">B_MALLOC_CACHE</ref> for <computeroutput>malloc()</computeroutput> and <computeroutput>free()</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBBlockCache_1ae9b912af354a845798644df023639195" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BBlockCache::~BBlockCache</definition>
        <argsstring>()</argsstring>
        <name>~BBlockCache</name>
        <qualifiedname>BBlockCache::~BBlockCache</qualifiedname>
        <briefdescription>
<para>Destroy the empty blocks in the free list. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the blocks you checked out with <ref refid="classBBlockCache_1ad3029dc7884e862338e0b20dfdf77f18" kindref="member">Get()</ref> and not checked back in with <ref refid="classBBlockCache_1a9a4b1d9199fcd8107b08f9b8b736921c" kindref="member">Save()</ref> will not be freed, since ownership belongs to you. Make sure you clean up after yourself.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="40" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBBlockCache_1ad3029dc7884e862338e0b20dfdf77f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * BBlockCache::Get</definition>
        <argsstring>(size_t blockSize)</argsstring>
        <name>Get</name>
        <qualifiedname>BBlockCache::Get</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Get a block from the pool of free blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>If the pool runs out of free blocks, a new one will be allocated. Please note that if the size given in the <computeroutput>blockSize</computeroutput> parameter is different from the size given in the constructor, a new block of memory will be created. Only sizes that match the blocks in the memory pool will come from the pool.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The required size of the memory block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a pointer to a memory block, or <computeroutput>NULL</computeroutput> if locking the object failed.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="42" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBBlockCache_1a9a4b1d9199fcd8107b08f9b8b736921c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BBlockCache::Save</definition>
        <argsstring>(void *pointer, size_t blockSize)</argsstring>
        <name>Save</name>
        <qualifiedname>BBlockCache::Save</qualifiedname>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Save a block of memory to the memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para>The block of memory will only be added to the pool if the <computeroutput>blockSize</computeroutput> is equal to the size the object was created with and if the maximum number of free blocks in the list will not be exceeded. If not, the memory will be freed.</para>
<para>Note that it is perfectly valid to pass objects other than those you got from <ref refid="classBBlockCache_1ad3029dc7884e862338e0b20dfdf77f18" kindref="member">Get()</ref>, but please note that the way it was created conforms to the way memory is allocated and freed in this pool. Therefore, only feed blocks that were created with <computeroutput>new</computeroutput>[] if the allocation type is <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba9dcad77c9fcf0f4be8332af2a541d004" kindref="member">B_OBJECT_CACHE</ref>. Likewise, you should only use objects allocated with <computeroutput>malloc()</computeroutput> when the allocation type is <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba5785baf710ae44d11020aa00eadc1bca" kindref="member">B_MALLOC_CACHE</ref>.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="43" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBBlockCache_1adff26eb217cc53843db451831c64b440" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BBlockCache::BBlockCache</definition>
        <argsstring>(const BBlockCache &amp;)</argsstring>
        <name>BBlockCache</name>
        <qualifiedname>BBlockCache::BBlockCache</qualifiedname>
        <param>
          <type>const <ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBBlockCache_1a446f3194cd132cc2e8ed5bffb1837ce0" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BBlockCache::_ReservedBlockCache1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedBlockCache1</name>
        <qualifiedname>BBlockCache::_ReservedBlockCache1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="46" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBlockCache_1a568db5babf50c7a9d524a8c1b81f1c77" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BBlockCache::_ReservedBlockCache2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedBlockCache2</name>
        <qualifiedname>BBlockCache::_ReservedBlockCache2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="47" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBBlockCache_1a06bff581b1a47e0368b0187a68359ad6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> &amp;</type>
        <definition>BBlockCache &amp; BBlockCache::operator=</definition>
        <argsstring>(const BBlockCache &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>BBlockCache::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="50" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that creates and maintains a pool of memory blocks. </para>
    </briefdescription>
    <detaileddescription>
<para>In some performance critical code there might come a time where you require a lot of little blocks of memory that you want to access and dispose of continuously. Since allocating and freeing memory are &apos;expensive&apos; operations, it is better to have a pool of memory blocks at your disposal. Luckily, the Haiku API provides a class that will act as the administrator of your memory pool, so you will not have to reinvent the wheel every time.</para>
<para>The principle is easy. The constructor takes the number of blocks you want to create beforehand, the size of the blocks, and the method of allocation. This can either be <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba9dcad77c9fcf0f4be8332af2a541d004" kindref="member">B_OBJECT_CACHE</ref> or <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba5785baf710ae44d11020aa00eadc1bca" kindref="member">B_MALLOC_CACHE</ref>. The first one uses C++ operators <computeroutput>new</computeroutput>[] and <computeroutput>delete</computeroutput>[], while the second one uses <computeroutput>malloc()</computeroutput> and <computeroutput>free()</computeroutput>. Unless you have specific demands on performance or you want to take care of freeing the objects yourself, either way works fine.</para>
<para>As soon as you have the memory pool, you can <ref refid="classBBlockCache_1ad3029dc7884e862338e0b20dfdf77f18" kindref="member">Get()</ref> blocks. If the pre-allocated memory blocks run out, <ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> will allocate new ones, so you will not have to worry about availability. As soon as you are done you can <ref refid="classBBlockCache_1a9a4b1d9199fcd8107b08f9b8b736921c" kindref="member">Save()</ref> the memory back into the pool. <ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> will make sure that no more blocks will be saved than the initial number you requested when you created the object, so be aware of that.</para>
<para>As soon as you got a pointer from the <ref refid="classBBlockCache_1ad3029dc7884e862338e0b20dfdf77f18" kindref="member">Get()</ref> method, you own that block of memory; this means that you have the liberty to dispose of it yourself. It also means that when you delete your <ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> instance, any blocks of memory that are checked out will not be destroyed. In case you might want to delete your objects yourself, make sure you free the memory the right way. If you created the object as <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba9dcad77c9fcf0f4be8332af2a541d004" kindref="member">B_OBJECT_CACHE</ref>, use <computeroutput>delete</computeroutput>[] to free your object. If you created the object as <ref refid="BlockCache_8h_1a73c53bacb25588538843a1dcfe5f382ba5785baf710ae44d11020aa00eadc1bca" kindref="member">B_MALLOC_CACHE</ref>, use <computeroutput>free()</computeroutput>. Please note that it defeats the purpose of this class if your are going to free all the objects yourself since it basically means that when the pool runs out, <ref refid="classBBlockCache_1ad3029dc7884e862338e0b20dfdf77f18" kindref="member">Get()</ref> will be allocating the objects by itself.</para>
<para><simplesect kind="note"><para><ref refid="classBBlockCache" kindref="compound">BBlockCache</ref> is thread-safe.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/support/BlockCache.h" line="36" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/BlockCache.h" bodystart="36" bodyend="62"/>
    <listofallmembers>
      <member refid="classBBlockCache_1ab344e1bf62ad847cde6a7f2813fc7de5" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>_reserved</name></member>
      <member refid="classBBlockCache_1a446f3194cd132cc2e8ed5bffb1837ce0" prot="private" virt="virtual"><scope>BBlockCache</scope><name>_ReservedBlockCache1</name></member>
      <member refid="classBBlockCache_1a568db5babf50c7a9d524a8c1b81f1c77" prot="private" virt="virtual"><scope>BBlockCache</scope><name>_ReservedBlockCache2</name></member>
      <member refid="classBBlockCache_1a03b66b65aaabf96bf08eca5f0e46f945" prot="public" virt="non-virtual"><scope>BBlockCache</scope><name>BBlockCache</name></member>
      <member refid="classBBlockCache_1adff26eb217cc53843db451831c64b440" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>BBlockCache</name></member>
      <member refid="classBBlockCache_1a65e577fb20975e6be18941ee92763d2f" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>fAlloc</name></member>
      <member refid="classBBlockCache_1a91e4ee7cae0d3aa904a1691dce60e46a" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>fBlockCount</name></member>
      <member refid="classBBlockCache_1a897fd70fa807ba5c3d4c018166c6c3c0" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>fBlockSize</name></member>
      <member refid="classBBlockCache_1ac6f4bea08f415bf32bf3664f9058c4ae" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>fFree</name></member>
      <member refid="classBBlockCache_1a649cbc2fa7353d2fc1a5fa5d5aff160a" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>fFreeBlocks</name></member>
      <member refid="classBBlockCache_1a5fdf96e47bdec1014fd8b2837855c825" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>fFreeList</name></member>
      <member refid="classBBlockCache_1ab9b637d8d83a08e0e7247d668d1a6129" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>fLocker</name></member>
      <member refid="classBBlockCache_1ad3029dc7884e862338e0b20dfdf77f18" prot="public" virt="non-virtual"><scope>BBlockCache</scope><name>Get</name></member>
      <member refid="classBBlockCache_1a06bff581b1a47e0368b0187a68359ad6" prot="private" virt="non-virtual"><scope>BBlockCache</scope><name>operator=</name></member>
      <member refid="classBBlockCache_1a9a4b1d9199fcd8107b08f9b8b736921c" prot="public" virt="non-virtual"><scope>BBlockCache</scope><name>Save</name></member>
      <member refid="classBBlockCache_1ae9b912af354a845798644df023639195" prot="public" virt="virtual"><scope>BBlockCache</scope><name>~BBlockCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
