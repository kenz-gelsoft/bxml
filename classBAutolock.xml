<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBAutolock" kind="class" language="C++" prot="public">
    <compoundname>BAutolock</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBAutolock_1a26c1aca4de6f32aca756ac7e59e85df9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BAutolock::fIsLocked</definition>
        <argsstring></argsstring>
        <name>fIsLocked</name>
        <qualifiedname>BAutolock::fIsLocked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="28" column="5" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAutolock_1a295bdde7c2d376f89b70d10652013667" prot="private" static="no" mutable="no">
        <type><ref refid="classBLocker" kindref="compound">BLocker</ref> *</type>
        <definition>BLocker* BAutolock::fLocker</definition>
        <argsstring></argsstring>
        <name>fLocker</name>
        <qualifiedname>BAutolock::fLocker</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="26" column="8" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBAutolock_1ae10ffd2605e7d3d7d28f20b5c6406185" prot="private" static="no" mutable="no">
        <type><ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
        <definition>BLooper* BAutolock::fLooper</definition>
        <argsstring></argsstring>
        <name>fLooper</name>
        <qualifiedname>BAutolock::fLooper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="27" column="8" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBAutolock_1a28e4047538936e011cde19d4815756e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BAutolock::BAutolock</definition>
        <argsstring>(BLocker &amp;locker)</argsstring>
        <name>BAutolock</name>
        <qualifiedname>BAutolock::BAutolock</qualifiedname>
        <param>
          <type><ref refid="classBLocker" kindref="compound">BLocker</ref> &amp;</type>
          <declname>locker</declname>
        </param>
        <briefdescription>
<para>Create an object and lock the <ref refid="classBLocker" kindref="compound">BLocker</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="17" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classBAutolock_1a3a64bb8f598284952f9c07c5f551b914" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BAutolock::BAutolock</definition>
        <argsstring>(BLocker *locker)</argsstring>
        <name>BAutolock</name>
        <qualifiedname>BAutolock::BAutolock</qualifiedname>
        <param>
          <type><ref refid="classBLocker" kindref="compound">BLocker</ref> *</type>
          <declname>locker</declname>
        </param>
        <briefdescription>
<para>Create an object and lock the <ref refid="classBLocker" kindref="compound">BLocker</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="16" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classBAutolock_1a233e8c62e49a70b4b3708c2327d2bc16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BAutolock::BAutolock</definition>
        <argsstring>(BLooper *looper)</argsstring>
        <name>BAutolock</name>
        <qualifiedname>BAutolock::BAutolock</qualifiedname>
        <param>
          <type><ref refid="classBLooper" kindref="compound">BLooper</ref> *</type>
          <declname>looper</declname>
        </param>
        <briefdescription>
<para>Create an object and lock the <ref refid="classBLooper" kindref="compound">BLooper</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="15" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classBAutolock_1a85fc5fd8722878d78f35eee797143e69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BAutolock::~BAutolock</definition>
        <argsstring>()</argsstring>
        <name>~BAutolock</name>
        <qualifiedname>BAutolock::~BAutolock</qualifiedname>
        <briefdescription>
<para>Destroy the object and unlock the associated <ref refid="classBLocker" kindref="compound">BLocker</ref> or <ref refid="classBLooper" kindref="compound">BLooper</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="18" column="7" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="63" bodyend="66"/>
        <references refid="classBAutolock_1a62e220b72b39ffa459b51dae1ca50332" compoundref="Autolock_8h" startline="92" endline="102">Unlock</references>
      </memberdef>
      <memberdef kind="function" id="classBAutolock_1a271307ad7bf96be725f315d62a8739cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAutolock::IsLocked</definition>
        <argsstring>()</argsstring>
        <name>IsLocked</name>
        <qualifiedname>BAutolock::IsLocked</qualifiedname>
        <briefdescription>
<para>Verify whether the associated <ref refid="classBLocker" kindref="compound">BLocker</ref> or <ref refid="classBLooper" kindref="compound">BLooper</ref> are actually locked. </para>
        </briefdescription>
        <detaileddescription>
<para>Basically you may assume that when the object is created, you are almost always sure the actual locking succeeds. It might fail if the <ref refid="classBLocker" kindref="compound">BLocker</ref> or <ref refid="classBLooper" kindref="compound">BLooper</ref> are destroyed though. The semaphore will be released and the <ref refid="classBAutolock_1a5808a41f3c76294ed35deef3864c9a7c" kindref="member">Lock()</ref> call will fail.</para>
<para>If you expect this to happen, you can use this method to help you protect yourself from any harm.</para>
<para><simplesect kind="return"><para>Whether or not the <ref refid="classBLocker" kindref="compound">BLocker</ref> or <ref refid="classBLooper" kindref="compound">BLooper</ref> is locked. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The lock was acquired. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed to acquire the lock.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="20" column="11" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classBAutolock_1a5808a41f3c76294ed35deef3864c9a7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BAutolock::Lock</definition>
        <argsstring>()</argsstring>
        <name>Lock</name>
        <qualifiedname>BAutolock::Lock</qualifiedname>
        <briefdescription>
<para>Lock the <ref refid="classBAutolock" kindref="compound">BAutolock</ref> if it has not already happened. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that unlike <ref refid="classBLocker" kindref="compound">BLocker</ref>, the object is not locked with lock count. That means that if the lock is already taken, this method returns <computeroutput>true</computeroutput> without any action.</para>
<para><simplesect kind="return"><para>Whether or not the <ref refid="classBLocker" kindref="compound">BLocker</ref> or <ref refid="classBLooper" kindref="compound">BLooper</ref> was locked. </para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The lock was acquired (or had already been acquired). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed to acquire the lock.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="22" column="11" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="77" bodyend="88"/>
        <references refid="classBLooper_1a757a3e406ea3b7bb9a1ad16d04689b1d">BLooper::Lock</references>
        <references refid="classBLocker_1a42596788c0e5dca043987b2efad244bd">BLocker::Lock</references>
        <references refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="SupportDefs_8h" startline="226">NULL</references>
      </memberdef>
      <memberdef kind="function" id="classBAutolock_1a62e220b72b39ffa459b51dae1ca50332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BAutolock::Unlock</definition>
        <argsstring>()</argsstring>
        <name>Unlock</name>
        <qualifiedname>BAutolock::Unlock</qualifiedname>
        <briefdescription>
<para>Unlock the <ref refid="classBAutolock" kindref="compound">BAutolock</ref> if the lock is being held. </para>
        </briefdescription>
        <detaileddescription>
<para>If the lock is not held, the method does nothing.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="23" column="11" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="92" bodyend="102"/>
        <references refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="SupportDefs_8h" startline="226">NULL</references>
        <references refid="classBLooper_1ac84ea15405640082b9fda58f6672467c">BLooper::Unlock</references>
        <references refid="classBLocker_1a0ebddc8ec0db8f51e57d6bff0f5ac2bf">BLocker::Unlock</references>
        <referencedby refid="classBAutolock_1a85fc5fd8722878d78f35eee797143e69" compoundref="Autolock_8h" startline="63" endline="66">~BAutolock</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Convenient utility to make parts of your code thread-safe easily. </para>
    </briefdescription>
    <detaileddescription>
<para>The autolocker uses a <ref refid="classBLooper" kindref="compound">BLooper</ref> or a <ref refid="classBLocker" kindref="compound">BLocker</ref> in order to protect a part of your code. This class is usually used in combination with a <ref refid="classBLocker" kindref="compound">BLocker</ref> that protects a certain part of your code and data that are being accessed by multiple threads. While <ref refid="classBAutolock" kindref="compound">BAutolock</ref> does not add any features to locking, it provides a mechanism to easily lock and protect a part of your code.</para>
<para>Normally, when you need to protect data, you would have to make sure that all your locks are paired with unlocks. Below is a simple example, but you can imagine that there are more complex situations where you might spend a lot of time debugging a hang because you didn&apos;t pair all the <ref refid="classBAutolock_1a5808a41f3c76294ed35deef3864c9a7c" kindref="member">Lock()</ref>s with an <ref refid="classBAutolock_1a62e220b72b39ffa459b51dae1ca50332" kindref="member">Unlock()</ref>. See the example:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></highlight></codeline>
<codeline><highlight class="normal">Receiver::HandleCall(Call<sp/>*call)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/>work<sp/>on<sp/>call<sp/>data<sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fDataLocker-&gt;Lock()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/>perform<sp/>changes<sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fDataLocker-&gt;Unlock();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fDataLocker-&gt;Unlock()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B_OK;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> With the <ref refid="classBAutolock" kindref="compound">BAutolock</ref> this example can be rewritten as follows:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></highlight></codeline>
<codeline><highlight class="normal">Receiver::HandleCall(Call<sp/>*call)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/>work<sp/>on<sp/>call<sp/>data<sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBAutolock" kindref="compound">BAutolock</ref><sp/>autolock(fDataLocker);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/>perform<sp/>changes<sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B_ERROR;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B_OK;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Since the object is created on stack, it is destroyed as soon as we leave the function. Because the destruction of the object causes it to unlock the <ref refid="classBLocker" kindref="compound">BLocker</ref> or <ref refid="classBLooper" kindref="compound">BLooper</ref>, you don&apos;t have to manually make sure that every exit from the function is properly unlocked.</para>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/support/Autolock.h" line="13" column="1" bodyfile="/boot/home/src/haiku/headers/os/support/Autolock.h" bodystart="13" bodyend="29"/>
    <listofallmembers>
      <member refid="classBAutolock_1a233e8c62e49a70b4b3708c2327d2bc16" prot="public" virt="non-virtual"><scope>BAutolock</scope><name>BAutolock</name></member>
      <member refid="classBAutolock_1a3a64bb8f598284952f9c07c5f551b914" prot="public" virt="non-virtual"><scope>BAutolock</scope><name>BAutolock</name></member>
      <member refid="classBAutolock_1a28e4047538936e011cde19d4815756e5" prot="public" virt="non-virtual"><scope>BAutolock</scope><name>BAutolock</name></member>
      <member refid="classBAutolock_1a26c1aca4de6f32aca756ac7e59e85df9" prot="private" virt="non-virtual"><scope>BAutolock</scope><name>fIsLocked</name></member>
      <member refid="classBAutolock_1a295bdde7c2d376f89b70d10652013667" prot="private" virt="non-virtual"><scope>BAutolock</scope><name>fLocker</name></member>
      <member refid="classBAutolock_1ae10ffd2605e7d3d7d28f20b5c6406185" prot="private" virt="non-virtual"><scope>BAutolock</scope><name>fLooper</name></member>
      <member refid="classBAutolock_1a271307ad7bf96be725f315d62a8739cb" prot="public" virt="non-virtual"><scope>BAutolock</scope><name>IsLocked</name></member>
      <member refid="classBAutolock_1a5808a41f3c76294ed35deef3864c9a7c" prot="public" virt="non-virtual"><scope>BAutolock</scope><name>Lock</name></member>
      <member refid="classBAutolock_1a62e220b72b39ffa459b51dae1ca50332" prot="public" virt="non-virtual"><scope>BAutolock</scope><name>Unlock</name></member>
      <member refid="classBAutolock_1a85fc5fd8722878d78f35eee797143e69" prot="public" virt="non-virtual"><scope>BAutolock</scope><name>~BAutolock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
