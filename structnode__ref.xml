<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="structnode__ref" kind="struct" language="C++" prot="public">
    <compoundname>node_ref</compoundname>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="structnode__ref_1a01f8d43a61ba910af3390f1eb6f52d26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool node_ref::operator==</definition>
        <argsstring>(const node_ref &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>node_ref::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tests whether this <ref refid="structnode__ref" kindref="compound">node_ref</ref> and the supplied one are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnode__ref" kindref="compound">node_ref</ref> to be compared against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the objects are equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="23" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structnode__ref_1ad4dab79b91781c05e998b767b874b0aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool node_ref::operator!=</definition>
        <argsstring>(const node_ref &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>node_ref::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tests whether this <ref refid="structnode__ref" kindref="compound">node_ref</ref> and the supplied one are NOT equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnode__ref" kindref="compound">node_ref</ref> to be compared against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if the objects are <bold>NOT</bold> equal, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="24" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structnode__ref_1aa116637e70bb5c74bc2eb8bd882cc8fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool node_ref::operator&lt;</definition>
        <argsstring>(const node_ref &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>node_ref::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tests whether this <ref refid="structnode__ref" kindref="compound">node_ref</ref> is less than the supplied one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnode__ref" kindref="compound">node_ref</ref> to be compared against.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput>, if this <ref refid="structnode__ref" kindref="compound">node_ref</ref> is less than <emphasis>other</emphasis>, <computeroutput>false</computeroutput> otherwise.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structnode__ref_1ac11068e1e602560147bbfd69883bc0d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnode__ref" kindref="compound">node_ref</ref> &amp;</type>
        <definition>node_ref &amp; node_ref::operator=</definition>
        <argsstring>(const node_ref &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>node_ref::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Makes this node ref a copy of the supplied one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structnode__ref" kindref="compound">node_ref</ref> to be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to this object.</para>
</simplesect>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="26" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structnode__ref_1a9c22ea29daa9253ca04088117808e3c1" prot="public" static="no" mutable="no">
        <type>dev_t</type>
        <definition>node_ref::device</definition>
        <argsstring></argsstring>
        <name>device</name>
        <qualifiedname>node_ref::device</qualifiedname>
        <briefdescription>
<para>The device number on which the node is located. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="28" column="7" bodyfile="/boot/home/src/haiku/headers/os/storage/Node.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnode__ref_1a374a1e7f07677c0dd2ac949b4441d642" prot="public" static="no" mutable="no">
        <type>ino_t</type>
        <definition>node_ref::node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <qualifiedname>node_ref::node</qualifiedname>
        <briefdescription>
<para>The node&apos;s inode number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="29" column="7" bodyfile="/boot/home/src/haiku/headers/os/storage/Node.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structnode__ref_1a2b097557fa33781260d4a566c19d907c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>node_ref::node_ref</definition>
        <argsstring>()</argsstring>
        <name>node_ref</name>
        <qualifiedname>node_ref::node_ref</qualifiedname>
        <briefdescription>
<para>Creates an uninitialized <ref refid="structnode__ref" kindref="compound">node_ref</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structnode__ref_1a94c3c6a2b3277965a85d9f7ed5c07ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>node_ref::node_ref</definition>
        <argsstring>(const node_ref &amp;other)</argsstring>
        <name>node_ref</name>
        <qualifiedname>node_ref::node_ref</qualifiedname>
        <param>
          <type>const <ref refid="structnode__ref" kindref="compound">node_ref</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a copy of the given <ref refid="structnode__ref" kindref="compound">node_ref</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structnode__ref" kindref="compound">node_ref</ref> to be copied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structnode__ref_1a2493d942ed2514deb414e649cf80d347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>node_ref::node_ref</definition>
        <argsstring>(dev_t device, ino_t node)</argsstring>
        <name>node_ref</name>
        <qualifiedname>node_ref::node_ref</qualifiedname>
        <param>
          <type>dev_t</type>
          <declname>device</declname>
        </param>
        <param>
          <type>ino_t</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="20" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reference structure to a particular vnode on a device. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>BeOS R3 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/storage/Node.h" line="18" column="1" bodyfile="/boot/home/src/haiku/headers/os/storage/Node.h" bodystart="18" bodyend="30"/>
    <listofallmembers>
      <member refid="structnode__ref_1a9c22ea29daa9253ca04088117808e3c1" prot="public" virt="non-virtual"><scope>node_ref</scope><name>device</name></member>
      <member refid="structnode__ref_1a374a1e7f07677c0dd2ac949b4441d642" prot="public" virt="non-virtual"><scope>node_ref</scope><name>node</name></member>
      <member refid="structnode__ref_1a2b097557fa33781260d4a566c19d907c" prot="public" virt="non-virtual"><scope>node_ref</scope><name>node_ref</name></member>
      <member refid="structnode__ref_1a2493d942ed2514deb414e649cf80d347" prot="public" virt="non-virtual"><scope>node_ref</scope><name>node_ref</name></member>
      <member refid="structnode__ref_1a94c3c6a2b3277965a85d9f7ed5c07ef9" prot="public" virt="non-virtual"><scope>node_ref</scope><name>node_ref</name></member>
      <member refid="structnode__ref_1ad4dab79b91781c05e998b767b874b0aa" prot="public" virt="non-virtual"><scope>node_ref</scope><name>operator!=</name></member>
      <member refid="structnode__ref_1aa116637e70bb5c74bc2eb8bd882cc8fe" prot="public" virt="non-virtual"><scope>node_ref</scope><name>operator&lt;</name></member>
      <member refid="structnode__ref_1ac11068e1e602560147bbfd69883bc0d9" prot="public" virt="non-virtual"><scope>node_ref</scope><name>operator=</name></member>
      <member refid="structnode__ref_1a01f8d43a61ba910af3390f1eb6f52d26" prot="public" virt="non-virtual"><scope>node_ref</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
