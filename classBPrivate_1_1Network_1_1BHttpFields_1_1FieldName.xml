<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kind="class" language="C++" prot="public">
    <compoundname>BPrivate::Network::BHttpFields::FieldName</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a8b17f2673c20bb7446a9a33550ec20e4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BHttpFields</definition>
        <argsstring></argsstring>
        <name>BHttpFields</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::BHttpFields</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields" kindref="compound">BHttpFields</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="98" column="14" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1af0f3bbb4cefb936ae84583fb2e0bfd1e" prot="private" static="no" mutable="no">
        <type>std::string_view</type>
        <definition>std::string_view BPrivate::Network::BHttpFields::FieldName::fName</definition>
        <argsstring></argsstring>
        <name>fName</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::fName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="107" column="17" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1afee5149fbeac4c6a50345fab7b65cb07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::FieldName::operator std::string_view</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string_view</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::string_view</qualifiedname>
        <briefdescription>
<para>Return a <computeroutput>std::string_view</computeroutput> over the header name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>std::string_view</computeroutput> object over the header name.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a865c2a5b932f83a770f5e0124cddc2f2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpFields::FieldName::operator==</definition>
        <argsstring>(const BString &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare the header name to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>other</computeroutput> string to compare it to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The comparison is case-insensitive. So if this header name is set to <computeroutput>Content-Encoding</computeroutput>, comparing it to <computeroutput>content-encoding</computeroutput> will return <computeroutput>true</computeroutput>.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The current header name is equal to the <emphasis>other</emphasis> name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The current header name is different from the <emphasis>other</emphasis> name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="90" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1ae1e738b4c759a35a0daa89c58511f70a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpFields::FieldName::operator==</definition>
        <argsstring>(const FieldName &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare the header name to a string.   noexcept</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>other</computeroutput> string to compare it to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The comparison is case-insensitive. So if this header name is set to <computeroutput>Content-Encoding</computeroutput>, comparing it to <computeroutput>content-encoding</computeroutput> will return <computeroutput>true</computeroutput>.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The current header name is equal to the <emphasis>other</emphasis> name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The current header name is different from the <emphasis>other</emphasis> name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1   noexcept </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="92" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a57627124710224a270205430bd397b0a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BPrivate::Network::BHttpFields::FieldName::operator==</definition>
        <argsstring>(const std::string_view &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::operator==</qualifiedname>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare the header name to a string.   noexcept</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>other</computeroutput> string to compare it to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The comparison is case-insensitive. So if this header name is set to <computeroutput>Content-Encoding</computeroutput>, comparing it to <computeroutput>content-encoding</computeroutput> will return <computeroutput>true</computeroutput>.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The current header name is equal to the <emphasis>other</emphasis> name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The current header name is different from the <emphasis>other</emphasis> name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>Haiku R1   noexcept </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="91" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a7fda423c0a5b43bc1148fe990ef2b421" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::FieldName::FieldName</definition>
        <argsstring>() noexcept</argsstring>
        <name>FieldName</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::FieldName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1ae34ee0f4158fa918b40aa90d194fc5b7" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::FieldName::FieldName</definition>
        <argsstring>(const FieldName &amp;other) noexcept</argsstring>
        <name>FieldName</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::FieldName</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a9a5a4409f21ba145818bc031619b775a" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::FieldName::FieldName</definition>
        <argsstring>(const std::string_view &amp;name) noexcept</argsstring>
        <name>FieldName</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::FieldName</qualifiedname>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1ab25dbb022d65c3ebc106bb80c49cfc35" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BPrivate::Network::BHttpFields::FieldName::FieldName</definition>
        <argsstring>(FieldName &amp;&amp;) noexcept</argsstring>
        <name>FieldName</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::FieldName</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1abd68b520b7248b828d4c5cbc68f9ddd2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;</type>
        <definition>FieldName &amp; BPrivate::Network::BHttpFields::FieldName::operator=</definition>
        <argsstring>(const FieldName &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a63f5908c9c6a1906f74b3aff16918aee" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;</type>
        <definition>FieldName &amp; BPrivate::Network::BHttpFields::FieldName::operator=</definition>
        <argsstring>(FieldName &amp;&amp;) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>BPrivate::Network::BHttpFields::FieldName::operator=</qualifiedname>
        <param>
          <type><ref refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName" kindref="compound">FieldName</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="105" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Representation of a HTTP header name. </para>
    </briefdescription>
    <detaileddescription>
<para>As per the HTTP specification, header fields have a name. There are limitations to which characters are supported. As per the specification, header field names are case insensitive. This means that the <computeroutput>content-encoding</computeroutput> is equal to <computeroutput>Content-Encoding</computeroutput> or even <computeroutput>COnTenT-ENcOdING</computeroutput>.</para>
<para>A header field name can never be empty.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" line="86" column="1" bodyfile="/boot/home/src/haiku/headers/private/netservices2/HttpFields.h" bodystart="87" bodyend="108"/>
    <listofallmembers>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a7fda423c0a5b43bc1148fe990ef2b421" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>FieldName</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a9a5a4409f21ba145818bc031619b775a" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>FieldName</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1ae34ee0f4158fa918b40aa90d194fc5b7" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>FieldName</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1ab25dbb022d65c3ebc106bb80c49cfc35" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>FieldName</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1af0f3bbb4cefb936ae84583fb2e0bfd1e" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>fName</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1afee5149fbeac4c6a50345fab7b65cb07" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>operator std::string_view</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1abd68b520b7248b828d4c5cbc68f9ddd2" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a63f5908c9c6a1906f74b3aff16918aee" prot="private" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>operator=</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a865c2a5b932f83a770f5e0124cddc2f2" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>operator==</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1a57627124710224a270205430bd397b0a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>operator==</name></member>
      <member refid="classBPrivate_1_1Network_1_1BHttpFields_1_1FieldName_1ae1e738b4c759a35a0daa89c58511f70a" prot="public" virt="non-virtual"><scope>BPrivate::Network::BHttpFields::FieldName</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
