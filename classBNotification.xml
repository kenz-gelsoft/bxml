<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBNotification" kind="class" language="C++" prot="public">
    <compoundname>BNotification</compoundname>
    <basecompoundref refid="classBArchivable" prot="public" virt="non-virtual">BArchivable</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBNotification_1ae8ba73fb369c6a0def9739775cce0198" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BNotification::_reserved[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BNotification::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="103" column="7" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1acabb77a6d2198f9bada2a0a24499774f" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNotification::fApp</definition>
        <argsstring></argsstring>
        <name>fApp</name>
        <qualifiedname>BNotification::fApp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="97" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a804131ec2d84aa229b72a0806d78d31b" prot="private" static="no" mutable="no">
        <type><ref refid="classBList" kindref="compound">BList</ref></type>
        <definition>BList BNotification::fArgv</definition>
        <argsstring></argsstring>
        <name>fArgv</name>
        <qualifiedname>BNotification::fArgv</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="100" column="6" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a4c77b9f70e1eb16b98274dea1a907a24" prot="private" static="no" mutable="no">
        <type><ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
        <definition>BBitmap* BNotification::fBitmap</definition>
        <argsstring></argsstring>
        <name>fBitmap</name>
        <qualifiedname>BNotification::fBitmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="101" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a7088c6db39e85693dda63e0fed6608b4" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNotification::fContent</definition>
        <argsstring></argsstring>
        <name>fContent</name>
        <qualifiedname>BNotification::fContent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="93" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a65387694789b963552c11f9cc4962429" prot="private" static="no" mutable="no">
        <type><ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
        <definition>entry_ref* BNotification::fFile</definition>
        <argsstring></argsstring>
        <name>fFile</name>
        <qualifiedname>BNotification::fFile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="98" column="10" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1abc4da4a24b215b1ba0ffd35db5df8f6e" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNotification::fGroup</definition>
        <argsstring></argsstring>
        <name>fGroup</name>
        <qualifiedname>BNotification::fGroup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="91" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1aa2fb91bde49f5742a8dcf23fc6521714" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNotification::fID</definition>
        <argsstring></argsstring>
        <name>fID</name>
        <qualifiedname>BNotification::fID</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="94" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1aada21fb0f0e454eaab4ca942780e111c" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::fInitStatus</definition>
        <argsstring></argsstring>
        <name>fInitStatus</name>
        <qualifiedname>BNotification::fInitStatus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="86" column="9" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a516933dd0725af60d2a7ab7f70c8ccfd" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float BNotification::fProgress</definition>
        <argsstring></argsstring>
        <name>fProgress</name>
        <qualifiedname>BNotification::fProgress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="95" column="6" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a61ea177bd0f324d237795fe5c9900c8f" prot="private" static="no" mutable="no">
        <type><ref refid="classBList" kindref="compound">BList</ref></type>
        <definition>BList BNotification::fRefs</definition>
        <argsstring></argsstring>
        <name>fRefs</name>
        <qualifiedname>BNotification::fRefs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="99" column="6" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a651eb1ef02d8664feef8ac25cd2e4bf2" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNotification::fSourceName</definition>
        <argsstring></argsstring>
        <name>fSourceName</name>
        <qualifiedname>BNotification::fSourceName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="89" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a384ce949649e1072cd9cbc13998a0d36" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNotification::fSourceSignature</definition>
        <argsstring></argsstring>
        <name>fSourceSignature</name>
        <qualifiedname>BNotification::fSourceSignature</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="88" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1ac039267d58d34804fa18830b097edada" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNotification::fTitle</definition>
        <argsstring></argsstring>
        <name>fTitle</name>
        <qualifiedname>BNotification::fTitle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="92" column="8" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNotification_1a6cd5e2c122a9d6b800b332b9c6f4b22d" prot="private" static="no" mutable="no">
        <type><ref refid="Notification_8h_1a370f98dad9f23a468a12fd1545825b39" kindref="member">notification_type</ref></type>
        <definition>notification_type BNotification::fType</definition>
        <argsstring></argsstring>
        <name>fType</name>
        <qualifiedname>BNotification::fType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="90" column="18" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBNotification_1a4d489ddd75407b3a2883ad7fb95ef326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNotification::BNotification</definition>
        <argsstring>(BMessage *archive)</argsstring>
        <name>BNotification</name>
        <qualifiedname>BNotification::BNotification</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
<para>Construct a notification from an archive. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a4fa33dacdecb98a0d007feecbc678c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNotification::BNotification</definition>
        <argsstring>(notification_type type)</argsstring>
        <name>BNotification</name>
        <qualifiedname>BNotification::BNotification</qualifiedname>
        <param>
          <type><ref refid="Notification_8h_1a370f98dad9f23a468a12fd1545825b39" kindref="member">notification_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Construct an empty message, with the specified <emphasis>type</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The type influences the style of the notification view. See the <ref refid="Notification_8h_1a370f98dad9f23a468a12fd1545825b39" kindref="member">notification_type</ref> enumerator for details.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a7682ffdc4eb03e6275053abcf993b5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>BNotification::~BNotification</definition>
        <argsstring>()</argsstring>
        <name>~BNotification</name>
        <qualifiedname>BNotification::~BNotification</qualifiedname>
        <briefdescription>
<para>Frees all resources associated with the object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="30" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1ab6613ca8fd4af20fe1401bfdbd9bfbaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::AddOnClickArg</definition>
        <argsstring>(const BString &amp;arg)</argsstring>
        <name>AddOnClickArg</name>
        <qualifiedname>BNotification::AddOnClickArg</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Add to a list of arguments that are passed to an application when the user clicks on the notification. </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows you to construct a list of arguments, that will be sent to the application specified by BNotification::AddOnClickApp(), or the one that is associated with BNotification::AddOnClickFile(). The args will be handled by the application&apos;s <ref refid="classBApplication_1a0826684edce56baa7a31c89c97a1d161" kindref="member">BApplication::ArgvReceived()</ref> hook method.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="67" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::AddOnClickRef</definition>
        <argsstring>(const entry_ref *ref)</argsstring>
        <name>AddOnClickRef</name>
        <qualifiedname>BNotification::AddOnClickRef</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Add a <computeroutput>ref</computeroutput> to the list of arguments passed when a user clicks the notification. </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows you to construct a list of refs, that will be sent to the application specified by BNotification::AddOnClickApp(), or the one that is associated with BNotification::AddOnClickFile(). The refs will be handled by the application&apos;s <ref refid="classBApplication_1a5fae9740458d9aec66f3b1d5c50fae87" kindref="member">BApplication::RefsReceived()</ref> hook method.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="63" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a8fb050723adcf52d9f8179808c0bea07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::Archive</definition>
        <argsstring>(BMessage *archive, bool deep=true) const</argsstring>
        <name>Archive</name>
        <qualifiedname>BNotification::Archive</qualifiedname>
        <reimplements refid="classBArchivable_1a051c5263dd1a75dcf28787b60825dc44">Archive</reimplements>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Archives the <ref refid="classBNotification" kindref="compound">BNotification</ref> in the <computeroutput>archive</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBArchivable_1a051c5263dd1a75dcf28787b60825dc44" kindref="member">BArchivable::Archive()</ref>, <ref refid="classBNotification_1a7d8df816c5bf9c62d6e392450a53e367" kindref="member">Instantiate()</ref> static function. </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>B_OK:</computeroutput> if everything went fine, or other errors that describe why archiving has failed.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="35" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a8c26d427a94033a9a3f8a59c97eb089e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::Content</definition>
        <argsstring>() const</argsstring>
        <name>Content</name>
        <qualifiedname>BNotification::Content</qualifiedname>
        <briefdescription>
<para>Returns the message of the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The message of the notification as a string.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="48" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1abe4207c02d859c9c540606092c8be38f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BNotification::CountOnClickArgs</definition>
        <argsstring>() const</argsstring>
        <name>CountOnClickArgs</name>
        <qualifiedname>BNotification::CountOnClickArgs</qualifiedname>
        <briefdescription>
<para>Returns the number of args to be passed when the user clicks on the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1ab6613ca8fd4af20fe1401bfdbd9bfbaf" kindref="member">BNotification::AddOnClickArg()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="68" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1ae6be8277157147f7b3cc086316b4c401" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
        <definition>int32 BNotification::CountOnClickRefs</definition>
        <argsstring>() const</argsstring>
        <name>CountOnClickRefs</name>
        <qualifiedname>BNotification::CountOnClickRefs</qualifiedname>
        <briefdescription>
<para>Returns the number of refs to be passed when the user clicks on the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" kindref="member">BNotification::AddOnClickRef()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="64" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1af5739072388055457d3c6978a8452050" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::Group</definition>
        <argsstring>() const</argsstring>
        <name>Group</name>
        <qualifiedname>BNotification::Group</qualifiedname>
        <briefdescription>
<para>Returns the group of the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1aa9560f4753f510f5c1a416983f062903" kindref="member">BNotification::SetGroup()</ref> for more information about groups.</para>
</simplesect>
<simplesect kind="return"><para>The string of the notification&apos;s group.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="42" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a22e167cd5232a79e9dc17756dbc246ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
        <definition>const BBitmap * BNotification::Icon</definition>
        <argsstring>() const</argsstring>
        <name>Icon</name>
        <qualifiedname>BNotification::Icon</qualifiedname>
        <briefdescription>
<para>Returns the icon for the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1a967120fe3a33bc132b66d3b8e80e58ed" kindref="member">BNotification::SetIcon()</ref> for more information on this property.</para>
</simplesect>
<simplesect kind="return"><para>Returns a borrowed unchangeable reference to the icon.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="71" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a2df093ced99025ae2ed0b84e23e17ff1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BNotification::InitCheck</qualifiedname>
        <briefdescription>
<para>Returns the status of the constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="32" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a7d53fa51193ba570e2df359cef213141" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::MessageID</definition>
        <argsstring>() const</argsstring>
        <name>MessageID</name>
        <qualifiedname>BNotification::MessageID</qualifiedname>
        <briefdescription>
<para>Returns the identifier of the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1aa3dd25a096e335700185985060e17e68" kindref="member">BNotification::SetMessageID()</ref> for the purpose of having an identifier.</para>
</simplesect>
<simplesect kind="return"><para>The identifier of the notification as a string.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="51" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1ab66cb0d4e76fe050bf7a548b62ac68bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::OnClickApp</definition>
        <argsstring>() const</argsstring>
        <name>OnClickApp</name>
        <qualifiedname>BNotification::OnClickApp</qualifiedname>
        <briefdescription>
<para>Returns the signature of the application that will be called when the notification is clicked. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>More information about this property in <ref refid="classBNotification_1ad273375772837f2948a88a1e9d58cbeb" kindref="member">BNotification::SetOnClickApp()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="57" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a5800cb655c9a57d3fc09a8b3747a777c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::OnClickArgAt</definition>
        <argsstring>(int32 index) const</argsstring>
        <name>OnClickArgAt</name>
        <qualifiedname>BNotification::OnClickArgAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the arg that is stored at <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1ab6613ca8fd4af20fe1401bfdbd9bfbaf" kindref="member">BNotification::AddOnClickArg()</ref> </para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="69" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a03804c53c12166a2cad230b633633c41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
        <definition>const entry_ref * BNotification::OnClickFile</definition>
        <argsstring>() const</argsstring>
        <name>OnClickFile</name>
        <qualifiedname>BNotification::OnClickFile</qualifiedname>
        <briefdescription>
<para>Returns the reference to the file that will be opened when the notification is clicked. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>More information about this property in <ref refid="classBNotification_1a9e71982001e56a65c742cbd13f84a3c7" kindref="member">BNotification::SetOnClickFile()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="60" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1ae97f2d2f2563442ca056a61838bbb90b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
        <definition>const entry_ref * BNotification::OnClickRefAt</definition>
        <argsstring>(int32 index) const</argsstring>
        <name>OnClickRefAt</name>
        <qualifiedname>BNotification::OnClickRefAt</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the ref that is stored at <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" kindref="member">BNotification::AddOnClickRef()</ref></para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="65" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a58e816c637be7090021f0ae2e23d276c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float BNotification::Progress</definition>
        <argsstring>() const</argsstring>
        <name>Progress</name>
        <qualifiedname>BNotification::Progress</qualifiedname>
        <briefdescription>
<para>Returns the progress for the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBNotification_1a1cdba659820f9a3fd3a36800113e7436" kindref="member">BNotification::SetProgress()</ref> for more information about this value.</para>
</simplesect>
<simplesect kind="return"><para>A value between 0.0 and 1.0 if notification&apos;s type is <computeroutput>B_PROGRESS_NOTIFICATION</computeroutput>, or otherwise -1.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="54" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a8c8d51fc222c94ae28fa292fd1aebe3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::Send</definition>
        <argsstring>(bigtime_t timeout=-1)</argsstring>
        <name>Send</name>
        <qualifiedname>BNotification::Send</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref></type>
          <declname>timeout</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Send the notification to the notification_server. </para>
        </briefdescription>
        <detaileddescription>
<para>The notification is delivered asynchronously to the notification_server, which will display it according to its settings and filters.</para>
<para>After sending, you retain ownership of the notification. The advantage is that you can re-use the notification at a later moment, or use the object to update the notification. See <ref refid="classBNotification_1aa3dd25a096e335700185985060e17e68" kindref="member">BNotification::SetMessageID()</ref> about updating displayed notifications. If you allocate the notification on the heap, be sure to free the memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>timeout</emphasis> in microsecond that the notification should be displayed. If you want to use the default timing, use the default argument or pass <computeroutput>-1</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if everything went fine, <computeroutput>B_BAD_PORT_ID</computeroutput> if there was a problem connecting to the <computeroutput>notification_server</computeroutput>, or any other errors if something went wrong transmitting the notification.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="74" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a1ae33572f1ebcd9fb4ac6aad418dbaaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNotification::SetContent</definition>
        <argsstring>(const BString &amp;content)</argsstring>
        <name>SetContent</name>
        <qualifiedname>BNotification::SetContent</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>content</declname>
        </param>
        <briefdescription>
<para>Set a message for the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="49" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1aa9560f4753f510f5c1a416983f062903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNotification::SetGroup</definition>
        <argsstring>(const BString &amp;group)</argsstring>
        <name>SetGroup</name>
        <qualifiedname>BNotification::SetGroup</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Set a group for the notifcation. </para>
        </briefdescription>
        <detaileddescription>
<para>The default behaviour of the <computeroutput>notification_server</computeroutput> is group the visible notifications per running application, and then in order in which they have been received. There may be situations where you want to override that behavior and group related notifications. When you set a group name, the <computeroutput>notification_server</computeroutput> will create a box with the <computeroutput>group</computeroutput> name as label, and insert all related notifications in that box.</para>
<para><image type="html" name="notification_group.png"></image>
</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a967120fe3a33bc132b66d3b8e80e58ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::SetIcon</definition>
        <argsstring>(const BBitmap *icon)</argsstring>
        <name>SetIcon</name>
        <qualifiedname>BNotification::SetIcon</qualifiedname>
        <param>
          <type>const <ref refid="classBBitmap" kindref="compound">BBitmap</ref> *</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
<para>Set the icon of the notification. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the icon for the notification. By default, the application icon is used. This method makes a copy of the <emphasis>icon</emphasis>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>The icon that should be displayed with the notification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>B_OK</computeroutput> if everything went fine, <computeroutput>B_NO_MEMORY</computeroutput> when the <emphasis>icon</emphasis> could not be copied, or another error if something else went wrong.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="72" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1aa3dd25a096e335700185985060e17e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNotification::SetMessageID</definition>
        <argsstring>(const BString &amp;id)</argsstring>
        <name>SetMessageID</name>
        <qualifiedname>BNotification::SetMessageID</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Sets notification&apos;s message identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>If you want to update the contents of an existing notification, you can set a identifier for this message. When you send a new or updated message with the same identifier, the <computeroutput>notification_server</computeroutput> will update the existing message with the new content.</para>
<para>In order to effectively use this feature, you will have to make sure the identifier is unique within the current application.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="52" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1ad273375772837f2948a88a1e9d58cbeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNotification::SetOnClickApp</definition>
        <argsstring>(const BString &amp;app)</argsstring>
        <name>SetOnClickApp</name>
        <qualifiedname>BNotification::SetOnClickApp</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>Set which application should be called when the notification is clicked by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>The value <computeroutput>app</computeroutput> should be a valid application signature, for example <computeroutput>&apos;application/x-vnd.Haiku-StyledEdit&apos;</computeroutput>.</para>
<para>Using this property has precedence on when <ref refid="classBNotification_1a9e71982001e56a65c742cbd13f84a3c7" kindref="member">BNotification::SetOnClickFile()</ref> is used. If you want interacting with the notification opening a specific file, then you should use this method in combination with <ref refid="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" kindref="member">BNotification::AddOnClickRef()</ref>.</para>
<para><simplesect kind="see"><para>Additional actions and parameters can be set through <ref refid="classBNotification_1a9e71982001e56a65c742cbd13f84a3c7" kindref="member">BNotification::SetOnClickFile()</ref>, <ref refid="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" kindref="member">BNotification::AddOnClickRef()</ref> and <ref refid="classBNotification_1ab6613ca8fd4af20fe1401bfdbd9bfbaf" kindref="member">BNotification::AddOnClickArg()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a9e71982001e56a65c742cbd13f84a3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNotification::SetOnClickFile</definition>
        <argsstring>(const entry_ref *file)</argsstring>
        <name>SetOnClickFile</name>
        <qualifiedname>BNotification::SetOnClickFile</qualifiedname>
        <param>
          <type>const <ref refid="structentry__ref" kindref="compound">entry_ref</ref> *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Set which file should be opened when the notification is clicked by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>The file will be opened by the default application for this file type.</para>
<para>You cannot use this action in combination with <ref refid="classBNotification_1ad273375772837f2948a88a1e9d58cbeb" kindref="member">BNotification::SetOnClickApp()</ref>. If you use this way of setting an action, this action will be ignored.</para>
<para><simplesect kind="see"><para>Additional actions and parameters can be set through <ref refid="classBNotification_1ad273375772837f2948a88a1e9d58cbeb" kindref="member">BNotification::SetOnClickApp()</ref>, <ref refid="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" kindref="member">BNotification::AddOnClickRef()</ref> and <ref refid="classBNotification_1ab6613ca8fd4af20fe1401bfdbd9bfbaf" kindref="member">BNotification::AddOnClickArg()</ref>.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="61" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a1cdba659820f9a3fd3a36800113e7436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNotification::SetProgress</definition>
        <argsstring>(float progress)</argsstring>
        <name>SetProgress</name>
        <qualifiedname>BNotification::SetProgress</qualifiedname>
        <param>
          <type>float</type>
          <declname>progress</declname>
        </param>
        <briefdescription>
<para>Sets progress information. </para>
        </briefdescription>
        <detaileddescription>
<para>When you are building a notification of the type <computeroutput>B_PROGRESS_NOTIFICATION</computeroutput> the notification view will show a progress bar and a label that expresses the progress in a percentage. Using this method you can set what the bar and label express.</para>
<para>The valid range is between 0.0 and 1.0. If <computeroutput>progress</computeroutput> is lower than 0.0 (i.e. negative), the value will be set to 0.0. If it is higher than 1.0, it will be set to 1.0.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1ad01b2804337a3d2a2a97de71b2200c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNotification::SetTitle</definition>
        <argsstring>(const BString &amp;title)</argsstring>
        <name>SetTitle</name>
        <qualifiedname>BNotification::SetTitle</qualifiedname>
        <param>
          <type>const <ref refid="classBString" kindref="compound">BString</ref> &amp;</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Set a title for the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="46" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a65f95233321dd342d7dea96ebe7361ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::SourceName</definition>
        <argsstring>() const</argsstring>
        <name>SourceName</name>
        <qualifiedname>BNotification::SourceName</qualifiedname>
        <briefdescription>
<para>Returns the name of the application where the notification originated. </para>
        </briefdescription>
        <detaileddescription>
<para>When you build your own notifications, this will contain the name of the current application. If you receive notifications from other applications, it will include theirs.</para>
<para><simplesect kind="return"><para>Name of the source application.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="38" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a14286e96129adf2266ed6ab3388ad8d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::SourceSignature</definition>
        <argsstring>() const</argsstring>
        <name>SourceSignature</name>
        <qualifiedname>BNotification::SourceSignature</qualifiedname>
        <briefdescription>
<para>Returns signature of the application where the notification originated. </para>
        </briefdescription>
        <detaileddescription>
<para>When you build your own notifications, this will contain the signature of the current application. If you receive notifications from other applications, it will include theirs.</para>
<para><simplesect kind="return"><para>Signature of the source application.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="37" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a62cc78f8d317f3a9bf3e117d66a2305f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * BNotification::Title</definition>
        <argsstring>() const</argsstring>
        <name>Title</name>
        <qualifiedname>BNotification::Title</qualifiedname>
        <briefdescription>
<para>Returns the title of the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The title of the notification as a string.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="45" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a916cdcb1c28676bd838e74073b5dbc08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="Notification_8h_1a370f98dad9f23a468a12fd1545825b39" kindref="member">notification_type</ref></type>
        <definition>notification_type BNotification::Type</definition>
        <argsstring>() const</argsstring>
        <name>Type</name>
        <qualifiedname>BNotification::Type</qualifiedname>
        <briefdescription>
<para>Returns the type of the notification. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A value of the <computeroutput>notification_type</computeroutput> enum that represents notification type.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="40" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBNotification_1a7d8df816c5bf9c62d6e392450a53e367" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBArchivable" kindref="compound">BArchivable</ref> *</type>
        <definition>static BArchivable * BNotification::Instantiate</definition>
        <argsstring>(BMessage *archive)</argsstring>
        <name>Instantiate</name>
        <qualifiedname>BNotification::Instantiate</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
          <declname>archive</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classBNotification" kindref="compound">BNotification</ref> object from <emphasis>archive</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This class implements the archiving API, and as such, you can build a new <ref refid="classBNotification" kindref="compound">BNotification</ref> object from a previously created <ref refid="classBMessage" kindref="compound">BMessage</ref> archive. However, if the message doesn&apos;t contain an archived data for a <ref refid="classBNotification" kindref="compound">BNotification</ref> object, this method returns <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="return"><para><ref refid="classBNotification" kindref="compound">BNotification</ref> object from <emphasis>archive</emphasis> or <computeroutput>NULL</computeroutput> if it doesn&apos;t contain a valid <ref refid="classBNotification" kindref="compound">BNotification</ref> object.</para>
</simplesect>
<simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="34" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBNotification_1a10cae8c57f1ac87b748b552d1bcb0467" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification1</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification1</name>
        <qualifiedname>BNotification::_ReservedNotification1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="77" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a8ff4dadd675fbe6357c11718fae39b11" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification2</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification2</name>
        <qualifiedname>BNotification::_ReservedNotification2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="78" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a29192daa84125e0602bd435e6e6b9365" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification3</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification3</name>
        <qualifiedname>BNotification::_ReservedNotification3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="79" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a4ca92fc570aac70524cd234c8586688f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification4</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification4</name>
        <qualifiedname>BNotification::_ReservedNotification4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="80" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a330dfc1fcef953dca5b4fc84f49437f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification5</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification5</name>
        <qualifiedname>BNotification::_ReservedNotification5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="81" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1af673bbe7c868ecb2c5820634621c1c5f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification6</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification6</name>
        <qualifiedname>BNotification::_ReservedNotification6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="82" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a9b1e99001645cd82d91ee03b58c80cdb" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification7</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification7</name>
        <qualifiedname>BNotification::_ReservedNotification7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="83" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBNotification_1a98a8994749e12fbd602fa2e286db2327" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BNotification::_ReservedNotification8</definition>
        <argsstring>()</argsstring>
        <name>_ReservedNotification8</name>
        <qualifiedname>BNotification::_ReservedNotification8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="84" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Construct system-default notifications to be displayed to the user. </para>
    </briefdescription>
    <detaileddescription>
<para>Haiku provides a notification system that allows you to display messages to the user. There is quite some flexibility in how the message is presented. You may use this class to build and send the notification. The properties you can set are:<itemizedlist>
<listitem><para>The <ref refid="classBNotification_1a4fa33dacdecb98a0d007feecbc678c2e" kindref="member">type of notification</ref>, which can be an information message, a warning, an error, or a progress message.</para>
</listitem><listitem><para>The <ref refid="classBNotification_1aa9560f4753f510f5c1a416983f062903" kindref="member">group</ref>, which allows you to organize notification display into different categories.</para>
</listitem><listitem><para>A <ref refid="classBNotification_1ad01b2804337a3d2a2a97de71b2200c73" kindref="member">title</ref>, which is a distinct text element at the top of a notification view.</para>
</listitem><listitem><para>The <ref refid="classBNotification_1a1ae33572f1ebcd9fb4ac6aad418dbaaa" kindref="member">content</ref>, which is the text message that is shown to the user.</para>
</listitem><listitem><para>A <ref refid="classBNotification_1aa3dd25a096e335700185985060e17e68" kindref="member">message identifier</ref> that allows you to modify the contents of a message that is being displayed, which is particularly useful for progress notifications.</para>
</listitem><listitem><para>For progress notifications, the <ref refid="classBNotification_1a1cdba659820f9a3fd3a36800113e7436" kindref="member">percentage of completion</ref> can be set.</para>
</listitem><listitem><para>By default the notification uses the application&apos;s icon, but you may set an <ref refid="classBNotification_1a967120fe3a33bc132b66d3b8e80e58ed" kindref="member">alternative icon</ref>.</para>
</listitem><listitem><para>Finally there are a few ways you can configure the actions that happen when a user clicks the notification. More on that below.</para>
</listitem></itemizedlist>
</para>
<para>For example, with the following code, you may display a notification:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classBNotification" kindref="compound">BNotification</ref><sp/>notification(<ref refid="Notification_8h_1a370f98dad9f23a468a12fd1545825b39a21c6be93601d2b413cc270aa3484f06e" kindref="member">B_PROGRESS_NOTIFICATION</ref>);</highlight></codeline>
<codeline><highlight class="normal">notification.SetGroup(</highlight><highlight class="stringliteral">&quot;Group&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">notification.SetTitle(</highlight><highlight class="stringliteral">&quot;Title&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">notification.SetContent(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>content&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">notification.SetMessageID(</highlight><highlight class="stringliteral">&quot;mainwindow_progress&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">notification.SetProgress(0.5);</highlight></codeline>
<codeline><highlight class="normal">notification.Send();</highlight></codeline>
</programlisting></para>
<para><image type="html" name="notification_intro.png"></image>
</para>
<para>Note that in the previous code example, we set a <ref refid="classBNotification_1aa3dd25a096e335700185985060e17e68" kindref="member">message identifier</ref>, which will allow to update the notification when we have progressed. The use would be:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>After<sp/>sending<sp/>the<sp/>notification,<sp/>you<sp/>retain<sp/>ownership<sp/>so<sp/>that<sp/>you<sp/>can<sp/>update<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">notification.SetProgress(0.7);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>display<sp/>the<sp/>update,<sp/>you<sp/>send<sp/>it<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">notification.Send();</highlight></codeline>
</programlisting></para>
<para>Furthermore, it is possible to support some form of follow-up action, when the user clicks the notification. First of all, you need to choose whether you want to <ref refid="classBNotification_1ad273375772837f2948a88a1e9d58cbeb" kindref="member">open a specific application</ref>, or whether you want to <ref refid="classBNotification_1a9e71982001e56a65c742cbd13f84a3c7" kindref="member">open a specific file</ref> and have the system determine which application fits that. Additionally, you may specify <ref refid="classBNotification_1ab6613ca8fd4af20fe1401bfdbd9bfbaf" kindref="member">command line arguments</ref> or pass additional <ref refid="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" kindref="member">file references</ref> for the receiving application to process.</para>
<para>Finally, a note about the <computeroutput>notification_server</computeroutput> and how it groups and handles messages coming from your application. The system is aware of the source of the notifications, and identifies your application by it&apos;s signature. That means that the identification of your application is consistent, even if it is restarted, or if you have multiple instances running. This impacts the <ref refid="classBNotification_1aa9560f4753f510f5c1a416983f062903" kindref="member">grouping</ref> functionality and the <ref refid="classBNotification_1aa3dd25a096e335700185985060e17e68" kindref="member">message updating</ref> functionality. If you have an application that can have multiple instances, you will need to make sure that you properly manage your group names and identifiers if you want to keep things separate.</para>
<para><simplesect kind="since"><para>Haiku R1 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="1">
        <label>BNotification</label>
        <link refid="classBNotification"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BArchivable</label>
        <link refid="classBArchivable"/>
      </node>
      <node id="1">
        <label>BNotification</label>
        <link refid="classBNotification"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/app/Notification.h" line="26" column="1" bodyfile="/boot/home/src/haiku/headers/os/app/Notification.h" bodystart="26" bodyend="104"/>
    <listofallmembers>
      <member refid="classBNotification_1ae8ba73fb369c6a0def9739775cce0198" prot="private" virt="non-virtual"><scope>BNotification</scope><name>_reserved</name></member>
      <member refid="classBNotification_1a10cae8c57f1ac87b748b552d1bcb0467" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification1</name></member>
      <member refid="classBNotification_1a8ff4dadd675fbe6357c11718fae39b11" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification2</name></member>
      <member refid="classBNotification_1a29192daa84125e0602bd435e6e6b9365" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification3</name></member>
      <member refid="classBNotification_1a4ca92fc570aac70524cd234c8586688f" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification4</name></member>
      <member refid="classBNotification_1a330dfc1fcef953dca5b4fc84f49437f6" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification5</name></member>
      <member refid="classBNotification_1af673bbe7c868ecb2c5820634621c1c5f" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification6</name></member>
      <member refid="classBNotification_1a9b1e99001645cd82d91ee03b58c80cdb" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification7</name></member>
      <member refid="classBNotification_1a98a8994749e12fbd602fa2e286db2327" prot="private" virt="virtual"><scope>BNotification</scope><name>_ReservedNotification8</name></member>
      <member refid="classBNotification_1ab6613ca8fd4af20fe1401bfdbd9bfbaf" prot="public" virt="non-virtual"><scope>BNotification</scope><name>AddOnClickArg</name></member>
      <member refid="classBNotification_1ab0323e6d240cef4ea4b8d31748dfe8cc" prot="public" virt="non-virtual"><scope>BNotification</scope><name>AddOnClickRef</name></member>
      <member refid="classBArchivable_1a4075315c407443a3b0dbb3d7551b53c9" prot="public" virt="virtual"><scope>BNotification</scope><name>AllArchived</name></member>
      <member refid="classBArchivable_1a2b1d74c147ea18e4b4bfacd42f11e0d2" prot="public" virt="virtual"><scope>BNotification</scope><name>AllUnarchived</name></member>
      <member refid="classBNotification_1a8fb050723adcf52d9f8179808c0bea07" prot="public" virt="virtual"><scope>BNotification</scope><name>Archive</name></member>
      <member refid="classBArchivable_1aed4f0566f9659b03912a859077c27c89" prot="public" virt="non-virtual"><scope>BNotification</scope><name>BArchivable</name></member>
      <member refid="classBArchivable_1a66e6b947f092d32f287913a8c253290f" prot="public" virt="non-virtual"><scope>BNotification</scope><name>BArchivable</name></member>
      <member refid="classBNotification_1a4fa33dacdecb98a0d007feecbc678c2e" prot="public" virt="non-virtual"><scope>BNotification</scope><name>BNotification</name></member>
      <member refid="classBNotification_1a4d489ddd75407b3a2883ad7fb95ef326" prot="public" virt="non-virtual"><scope>BNotification</scope><name>BNotification</name></member>
      <member refid="classBNotification_1a8c26d427a94033a9a3f8a59c97eb089e" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Content</name></member>
      <member refid="classBNotification_1abe4207c02d859c9c540606092c8be38f" prot="public" virt="non-virtual"><scope>BNotification</scope><name>CountOnClickArgs</name></member>
      <member refid="classBNotification_1ae6be8277157147f7b3cc086316b4c401" prot="public" virt="non-virtual"><scope>BNotification</scope><name>CountOnClickRefs</name></member>
      <member refid="classBNotification_1acabb77a6d2198f9bada2a0a24499774f" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fApp</name></member>
      <member refid="classBNotification_1a804131ec2d84aa229b72a0806d78d31b" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fArgv</name></member>
      <member refid="classBNotification_1a4c77b9f70e1eb16b98274dea1a907a24" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fBitmap</name></member>
      <member refid="classBNotification_1a7088c6db39e85693dda63e0fed6608b4" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fContent</name></member>
      <member refid="classBNotification_1a65387694789b963552c11f9cc4962429" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fFile</name></member>
      <member refid="classBNotification_1abc4da4a24b215b1ba0ffd35db5df8f6e" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fGroup</name></member>
      <member refid="classBNotification_1aa2fb91bde49f5742a8dcf23fc6521714" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fID</name></member>
      <member refid="classBNotification_1aada21fb0f0e454eaab4ca942780e111c" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fInitStatus</name></member>
      <member refid="classBNotification_1a516933dd0725af60d2a7ab7f70c8ccfd" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fProgress</name></member>
      <member refid="classBNotification_1a61ea177bd0f324d237795fe5c9900c8f" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fRefs</name></member>
      <member refid="classBNotification_1a651eb1ef02d8664feef8ac25cd2e4bf2" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fSourceName</name></member>
      <member refid="classBNotification_1a384ce949649e1072cd9cbc13998a0d36" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fSourceSignature</name></member>
      <member refid="classBNotification_1ac039267d58d34804fa18830b097edada" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fTitle</name></member>
      <member refid="classBNotification_1a6cd5e2c122a9d6b800b332b9c6f4b22d" prot="private" virt="non-virtual"><scope>BNotification</scope><name>fType</name></member>
      <member refid="classBNotification_1af5739072388055457d3c6978a8452050" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Group</name></member>
      <member refid="classBNotification_1a22e167cd5232a79e9dc17756dbc246ef" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Icon</name></member>
      <member refid="classBNotification_1a2df093ced99025ae2ed0b84e23e17ff1" prot="public" virt="non-virtual"><scope>BNotification</scope><name>InitCheck</name></member>
      <member refid="classBNotification_1a7d8df816c5bf9c62d6e392450a53e367" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Instantiate</name></member>
      <member refid="classBNotification_1a7d53fa51193ba570e2df359cef213141" prot="public" virt="non-virtual"><scope>BNotification</scope><name>MessageID</name></member>
      <member refid="classBNotification_1ab66cb0d4e76fe050bf7a548b62ac68bb" prot="public" virt="non-virtual"><scope>BNotification</scope><name>OnClickApp</name></member>
      <member refid="classBNotification_1a5800cb655c9a57d3fc09a8b3747a777c" prot="public" virt="non-virtual"><scope>BNotification</scope><name>OnClickArgAt</name></member>
      <member refid="classBNotification_1a03804c53c12166a2cad230b633633c41" prot="public" virt="non-virtual"><scope>BNotification</scope><name>OnClickFile</name></member>
      <member refid="classBNotification_1ae97f2d2f2563442ca056a61838bbb90b" prot="public" virt="non-virtual"><scope>BNotification</scope><name>OnClickRefAt</name></member>
      <member refid="classBArchivable_1a827fa92febcf925f07545aa9777df9de" prot="public" virt="virtual"><scope>BNotification</scope><name>Perform</name></member>
      <member refid="classBNotification_1a58e816c637be7090021f0ae2e23d276c" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Progress</name></member>
      <member refid="classBNotification_1a8c8d51fc222c94ae28fa292fd1aebe3f" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Send</name></member>
      <member refid="classBNotification_1a1ae33572f1ebcd9fb4ac6aad418dbaaa" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetContent</name></member>
      <member refid="classBNotification_1aa9560f4753f510f5c1a416983f062903" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetGroup</name></member>
      <member refid="classBNotification_1a967120fe3a33bc132b66d3b8e80e58ed" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetIcon</name></member>
      <member refid="classBNotification_1aa3dd25a096e335700185985060e17e68" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetMessageID</name></member>
      <member refid="classBNotification_1ad273375772837f2948a88a1e9d58cbeb" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetOnClickApp</name></member>
      <member refid="classBNotification_1a9e71982001e56a65c742cbd13f84a3c7" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetOnClickFile</name></member>
      <member refid="classBNotification_1a1cdba659820f9a3fd3a36800113e7436" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetProgress</name></member>
      <member refid="classBNotification_1ad01b2804337a3d2a2a97de71b2200c73" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SetTitle</name></member>
      <member refid="classBNotification_1a65f95233321dd342d7dea96ebe7361ea" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SourceName</name></member>
      <member refid="classBNotification_1a14286e96129adf2266ed6ab3388ad8d5" prot="public" virt="non-virtual"><scope>BNotification</scope><name>SourceSignature</name></member>
      <member refid="classBNotification_1a62cc78f8d317f3a9bf3e117d66a2305f" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Title</name></member>
      <member refid="classBNotification_1a916cdcb1c28676bd838e74073b5dbc08" prot="public" virt="non-virtual"><scope>BNotification</scope><name>Type</name></member>
      <member refid="classBArchivable_1af1a37be4b953423787b0d0be0b345ff3" prot="public" virt="virtual"><scope>BNotification</scope><name>~BArchivable</name></member>
      <member refid="classBNotification_1a7682ffdc4eb03e6275053abcf993b5a7" prot="public" virt="virtual"><scope>BNotification</scope><name>~BNotification</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
