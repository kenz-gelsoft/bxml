<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__midi2" kind="group">
    <compoundname>midi2</compoundname>
    <title>MIDI 2 Kit</title>
    <innerfile refid="Midi2Defs_8h">Midi2Defs.h</innerfile>
    <innerfile refid="MidiConsumer_8h">MidiConsumer.h</innerfile>
    <innerfile refid="MidiEndpoint_8h">MidiEndpoint.h</innerfile>
    <innerfile refid="MidiProducer_8h">MidiProducer.h</innerfile>
    <innerfile refid="MidiRoster_8h">MidiRoster.h</innerfile>
    <innerclass refid="classBMidiConsumer" prot="public">BMidiConsumer</innerclass>
    <innerclass refid="classBMidiEndpoint" prot="public">BMidiEndpoint</innerclass>
    <innerclass refid="classBMidiLocalConsumer" prot="public">BMidiLocalConsumer</innerclass>
    <innerclass refid="classBMidiLocalProducer" prot="public">BMidiLocalProducer</innerclass>
    <innerclass refid="classBMidiProducer" prot="public">BMidiProducer</innerclass>
    <innerclass refid="classBMidiRoster" prot="public">BMidiRoster</innerclass>
    <briefdescription>
<para>The Midi Kit is the API that implements support for generating, processing, and playing music in MIDI format. </para>
    </briefdescription>
    <detaileddescription>
<para><ulink url="https://www.midi.org/">MIDI</ulink>, which stands for &apos;Musical Instrument Digital Interface&apos;, is a well-established standard for representing and communicating musical data. This document serves as an overview. If you would like to see all the components, please look at <ref refid="group__midi2" kindref="compound">the list with classes </ref>.</para>
<sect1 id="group__midi2_1book_midi2twokits">
<title>A Tale of Two MIDI Kits</title>
<para>BeOS comes with two different, but compatible Midi Kits. This documentation focuses on the &quot;new&quot; Midi Kit, or midi2 as we like to call it, that was introduced with BeOS R5. The old kit, which we&apos;ll refer to as midi1, is more complete than the new kit, but less powerful.</para>
<para>Both kits let you create so-called MIDI endpoints, but the endpoints from midi1 cannot be shared between different applications. The midi2 kit solves that problem, but unlike midi1 it does not include a General MIDI softsynth, nor does it have a facility for reading and playing Standard MIDI Files. Don&apos;t worry: both kits are compatible and you can mix-and-match them in your applications.</para>
<para>The main differences between the two kits:<itemizedlist>
<listitem><para>Instead of one BMidi object that both produces and consumes events, we have <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref> and <ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref>.</para>
</listitem><listitem><para>Applications are capable of sharing MIDI producers and consumers with other applications via the centralized Midi Roster.</para>
</listitem><listitem><para>Physical MIDI ports are now sharable without apps &quot;stealing&quot; events from each other.</para>
</listitem><listitem><para>Applications can now send/receive raw MIDI byte streams (useful if an application has its own MIDI parser/engine).</para>
</listitem><listitem><para>Channels are numbered 0<ndash/>15, not 1<ndash/>16</para>
</listitem><listitem><para>Timing is now specified in microseconds rather than milliseconds.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="group__midi2_1book_midi2concepts">
<title>Midi Kit Concepts</title>
<para>A brief overview of the elements that comprise the Midi Kit:<itemizedlist>
<listitem><para><bold>Endpoints</bold>. This is what the Midi Kit is all about: sending MIDI messages between endpoints. An endpoint is like a MIDI In or MIDI Out socket on your equipment; it either receives information or it sends information. Endpoints that send MIDI events are called <bold>producers</bold>; the endpoints that receive those events are called <bold>consumers</bold>. An endpoint that is created by your own application is called <bold>local</bold>; endpoints from other applications are <bold>remote</bold>. You can access remote endpoints using <bold>proxies</bold>.</para>
</listitem><listitem><para><bold>Filters</bold>. A filter is an object that has a consumer and a producer endpoint. It reads incoming events from its consumer, performs some operation, and tells its producer to send out the results. In its current form, the Midi Kit doesn&apos;t provide any special facilities for writing filters.</para>
</listitem><listitem><para><bold>Midi</bold> <bold>Roster</bold>. The roster is the list of all published producers and consumers. By publishing an endpoint, you allow other applications to talk to it. You are not required to publish your endpoints, in which case only your own application can use them.</para>
</listitem><listitem><para><bold>Midi</bold> <bold>Server</bold>. The Midi Server does the behind-the-scenes work. It manages the roster, it connects endpoints, it makes sure that endpoints can communicate, and so on. The Midi Server is started automatically when BeOS boots, and you never have to deal with it directly. Just remember that it runs the show.</para>
</listitem><listitem><para><bold>libmidi</bold>. The BMidi* classes live inside two shared libraries: libmidi.so and libmidi2.so. If you write an application that uses old Midi Kit, you must link it to libmidi.so. Applications that use the new Midi Kit must link to libmidi2.so. If you want to mix-and-match both kits, you should also link to both libraries.</para>
</listitem></itemizedlist>
</para>
<para>Here is a pretty picture:</para>
<para><image type="html" name="midi2concepts.png"></image>
</para>
</sect1>
<sect1 id="group__midi2_1book_midi2mediakit">
<title>Midi Kit != Media Kit</title>
<para>Be chose not to integrate the Midi Kit into the Media Kit as another media type, mainly because MIDI doesn&apos;t require any of the format negotiation that other media types need. Although the two kits look similar <ndash/> both have a &quot;roster&quot; for finding or registering &quot;consumers&quot; and &quot;producers&quot; <ndash/> there are some very important differences.</para>
<para>The first and most important point to note is that <ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref> and <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref> in the Midi Kit are <bold>NOT</bold> directly analogous to BBufferConsumer and BBufferProducer in the Media Kit! In the Media Kit, consumers and producers are the data consuming and producing properties of a media node. A filter in the Media Kit, therefore, inherits from both BBufferConsumer and BBufferProducer, and implements their virtual member functions to do its work.</para>
<para>In the Midi Kit, consumers and producers act as endpoints of MIDI data connections, much as media_source and media_destination do in the Media Kit. Thus, a MIDI filter does not derive from <ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref> and <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>; instead, it contains <ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref> and <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref> objects for each of its distinct endpoints that connect to other MIDI objects. The Midi Kit does not allow the use of multiple virtual inheritance, so you can&apos;t create an object that&apos;s both a <ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref> and a <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>.</para>
<para>This also contrasts with the old Midi Kit&apos;s conception of a BMidi object, which stood for an object that both received and sent MIDI data. In the new Midi Kit, the endpoints of MIDI connections are all that matters. What lies between the endpoints, i.e. how a MIDI filter is actually structured, is entirely at your discretion.</para>
<para>Also, rather than use token structs like media_node to make connections via the MediaRoster, the new kit makes the connections directly via the <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref> object.</para>
</sect1>
<sect1 id="group__midi2_1book_midi2remotelocal">
<title>Remote vs. Local Objects</title>
<para>The Midi Kit makes a distinction between remote and local MIDI objects. You can only create local MIDI endpoints, which derive from either <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref> or <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref>. Remote endpoints are endpoints that live in other applications, and you access them through <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>.</para>
<para><ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> only gives you access to BMidiEndpoints, BMidiConsumers, and BMidiProducers. When you want to talk to remote MIDI objects, you do so through the proxy objects that <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> provides. Unlike <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref> and <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref>, these classes do not provide a lot of functions. That is intentional. In order to hide the details of communication with MIDI endpoints in other applications, the Midi Kit must hide the details of how a particular endpoint is implemented.</para>
<para>So what can you do with remote objects? Only what <ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref>, <ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>, and <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> will let you do. You can connect objects, get the properties of these objects <ndash/> and that&apos;s about it.</para>
</sect1>
<sect1 id="group__midi2_1book_midi2lifespan">
<title>Creating and Destroying Objects</title>
<para>The constructors and destructors of most midi2 classes are private, which means that you cannot directly create them using the C++ <computeroutput>new</computeroutput> operator, on the stack, or as globals. Nor can you <computeroutput>delete</computeroutput> them. Instead, these objects are obtained through <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>. The only two exceptions to this rule are <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref> and <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref>. These two objects may be directly created and subclassed by developers.</para>
</sect1>
<sect1 id="group__midi2_1book_midi2refcount">
<title>Reference Counting</title>
<para>Each MIDI endpoint has a reference count associated with it, so that the Midi Roster can do proper bookkeeping. When you construct a <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref> or <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref> endpoint, it starts with a reference count of 1. In addition, <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> increments the reference count of any object it hands to you as a result of <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint() </ref> or <ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint() </ref>. Once the count hits 0, the endpoint will be deleted.</para>
<para>This means that, to delete an endpoint, you don&apos;t call the <computeroutput>delete</computeroutput> operator directly; instead, you call <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release() </ref>. To balance this call, there&apos;s also an <ref refid="classBMidiEndpoint_1a504efce89310e4473c4a9ae77da7a641" kindref="member">Acquire() </ref>, in case you have two disparate parts of your application working with the endpoint, and you don&apos;t want to have to keep track of who needs to Release() the endpoint.</para>
<para>When you&apos;re done with any endpoint object, you must Release() it. This is true for both local and remote objects. Repeat after me: Release() when you&apos;re done.</para>
</sect1>
<sect1 id="group__midi2_1book_midi2events">
<title>MIDI Events</title>
<para>To make some actual music, you need to <ref refid="classBMidiProducer_1ae1fe6a25736a3f8eb154158429fc224a" kindref="member">Connect() </ref> your consumers to your producers. Then you tell the producer to &quot;spray&quot; MIDI events to all the connected consumers. The consumers are notified of these incoming events through a set of hook functions.</para>
<para>The Midi Kit already provides a set of commonly used spray functions, such as <ref refid="classBMidiLocalProducer_1ae894fdb7f04b2c65329720592cb525dd" kindref="member">SprayNoteOn() </ref>, <ref refid="classBMidiLocalProducer_1a25e58f5d855eadfebd50d8ac5e9db423" kindref="member">SprayControlChange() </ref>, and so on. These correspond one-to-one with the message types from the MIDI spec. You don&apos;t need to be a MIDI expert to use the kit, but of course some knowledge of the protocol helps. If you are really hardcore, you can also use the <ref refid="classBMidiLocalProducer_1ae8cabda990298dbb11a3c4d70edcb047" kindref="member">SprayData() </ref> to send raw MIDI events to the consumers.</para>
<para>At the consumer side, a dedicated thread invokes a hook function for every incoming MIDI event. For every spray function, there is a corresponding hook function, e.g. <ref refid="classBMidiLocalConsumer_1af8986251fbb08548712e0273c13dd87e" kindref="member">NoteOn() </ref> and <ref refid="classBMidiLocalConsumer_1a48ae4c29a7044c1f53fa2901f0aad548" kindref="member">ControlChange() </ref>. The hardcore MIDI fanatics among you will be pleased to know that you can also tap into the <ref refid="classBMidiLocalConsumer_1a4b99be774374a9098cdb7535baef51bb" kindref="member">Data() </ref> hook and get your hands dirty with the raw MIDI data.</para>
</sect1>
<sect1 id="group__midi2_1book_midi2time">
<title>Time</title>
<para>The spray and hook functions accept a bigtime_t parameter named &quot;time&quot;. This indicates when the MIDI event should be performed. The time is given in microseconds since the computer booted. To get the current tick measurement, you call the system_time() function from the Kernel Kit.</para>
<para>If you override a hook function in one of your consumer objects, it should look at the time argument, wait until the designated time, and then perform its action. The preferred method is to use the Kernel Kit&apos;s <computeroutput>snooze_until()</computeroutput> function, which sends the consumer thread to sleep until the requested time has come. (Or, if the time has already passed, returns immediately.)</para>
<para>Like this:</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyConsumer::NoteOn(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>channel,<sp/><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>note,<sp/><ref refid="SupportDefs_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref><sp/>velocity,<sp/><ref refid="SupportDefs_8h_1a29bb8e432e460af113ef8938cef96f8b" kindref="member">bigtime_t</ref><sp/>time)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>snooze_until(time,<sp/>B_SYSTEM_TIMEBASE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...do<sp/>your<sp/>thing...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If you want your producers to run in real time, i.e. they produce MIDI data that needs to be performed immediately, you should pass time 0 to the spray functions (which also happens to be the default value). Since time 0 has already passed, <computeroutput>snooze_until()</computeroutput> returns immediately, and the consumer will process the events as soon as they are received.</para>
<para>To schedule MIDI events for a performance time that lies somewhere in the future, the producer must take into account the consumer&apos;s latency. Producers should attempt to get notes to the consumer by or before <emphasis>(scheduled_performance_time - latency)</emphasis>. The time argument is still the scheduled performance time, so if your consumer has latency, it should snooze like this before it starts to perform the events:</para>
<para><programlisting><codeline><highlight class="normal">snooze_until(time<sp/>-<sp/>Latency(),<sp/>B_SYSTEM_TIMEBASE);</highlight></codeline>
</programlisting></para>
<para>Note that a typical producer sends out its events as soon as it can; unlike a consumer, it does not have to snooze.</para>
</sect1>
<sect1 id="group__midi2_1book_midi2ports">
<title>Other Timing Issues</title>
<para>Each consumer object uses a Kernel Kit port to receive MIDI events from connected producers. The queue for this port is only 1 message deep. This means that if the consumer thread is asleep in a <computeroutput>snooze_until()</computeroutput>, it will not read its port. Consequently, any producer that tries to write a new event to this port will block until the consumer thread is ready to receive a new message. This is intentional, because it prevents producers from generating and queueing up thousands of events.</para>
<para>This mechanism, while simple, puts on the producer the responsibility for sorting the events in time. Suppose your producer sends three Note On events, the first on t + 0, the second on t + 4, and the third on t + 2. This last event won&apos;t be received until after t + 4, so it will be two ticks too late. If this sort of thing can happen with your producer, you should somehow sort the events before you spray them. Of course, if you have two or more producers connected to the same consumer, it is nearly impossible to sort this all out (pardon the pun). So it is not wise to send the same kinds of events from more than one producer to one consumer at the same time.</para>
<para>The article Introduction to MIDI, Part 2 in <ulink url="https://open-beos.sourceforge.net/nsl.php?mode=display&amp;id=36">OpenBeOS Newsletter 36</ulink> describes this problem in more detail, and provides a solution. Go read it now!</para>
</sect1>
<sect1 id="group__midi2_1book_midi2filters">
<title>Writing a Filter</title>
<para>A typical filter contains a consumer and a producer endpoint. It receives events from the consumer, processes them, and sends them out again using the producer. The consumer endpoint is a subclass of <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref>, whereas the producer is simply a <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref>, not a subclass. This is a common configuration, because consumers work by overriding the event hooks to do work when MIDI data arrives. Producers work by sending an event when you call their member functions. You should hardly ever need to derive from <ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref> (unless you need to know when the producer gets connected or disconnected, perhaps), but you&apos;ll always have to override one or more of <ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref>&apos;s member functions to do something useful with incoming data.</para>
<para>Filters should ignore the time argument from the spray and hook functions, and simply pass it on unchanged. Objects that only filter data should process the event as quickly as possible and be done with it. Do not <computeroutput>snooze_until()</computeroutput> in the consumer endpoint of a filter!</para>
</sect1>
<sect1 id="group__midi2_1book_midi2apidiffs">
<title>API Differences</title>
<para>As far as the end user is concerned, the Haiku Midi Kit is mostly the same as the BeOS R5 kits, although there are a few small differences in the API (mostly bug fixes):<itemizedlist>
<listitem><para><ref refid="classBMidiEndpoint_1a20623d6d71190a701e9bccc23e646e6a" kindref="member">BMidiEndpoint::IsPersistent()</ref> always returns false.</para>
</listitem><listitem><para>The B_MIDI_CHANGE_LATENCY notification is now properly sent. The Be kit incorrectly set be:op to B_MIDI_CHANGED_NAME, even though the rest of the message was properly structured.</para>
</listitem><listitem><para>If creating a local endpoint fails, you can still Release() the object without crashing into the debugger.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="group__midi2_1book_midi2seealso">
<title>See also</title>
<para>More about the Midi Kit:<itemizedlist>
<listitem><para><ref refid="Midi2Defs_8h" kindref="compound">Midi2Defs.h</ref></para>
</listitem><listitem><para>Be Newsletter Volume 3, Issue 47 - Motor Mix sample code</para>
</listitem><listitem><para>Be Newsletter Volume 4, Issue 3 - Overview of the new kit</para>
</listitem><listitem><para><ulink url="https://haiku-os.org/documents/dev/introduction_to_midi_part_1">Newsletter 33</ulink>, Introduction to MIDI, Part 1</para>
</listitem><listitem><para><ulink url="https://haiku-os.org/documents/dev/introduction_to_midi_part_2">Newsletter 36</ulink>, Introduction to MIDI, Part 2</para>
</listitem><listitem><para>Sample code and other goodies at the <ulink url="https://haiku-os.org/about/teams/midi_kit">Haiku Midi Kit team page</ulink></para>
</listitem></itemizedlist>
</para>
<para>Information about MIDI in general:<itemizedlist>
<listitem><para><ulink url="https://www.midi.org">MIDI Manufacturers Association</ulink></para>
</listitem><listitem><para><ulink url="https://www.borg.com/~jglatt/tutr/miditutr.htm">MIDI Tutorials</ulink></para>
</listitem><listitem><para><ulink url="https://www.borg.com/~jglatt/tech/midispec.htm">MIDI Specification</ulink></para>
</listitem><listitem><para><ulink url="https://www.borg.com/~jglatt/tech/midifile.htm">Standard MIDI File Format</ulink></para>
</listitem><listitem><para><ulink url="https://www.io.com/~jimm/midi_ref.html">Jim Menard&apos;s MIDI Reference</ulink></para>
</listitem></itemizedlist>
</para>
<para>Please have a look at the <ref refid="midi2_intro" kindref="compound">introduction </ref> for a more comprehensive overview on how everything ties together. </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
