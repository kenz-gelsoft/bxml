<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBMidiRoster" kind="class" language="C++" prot="public">
    <compoundname>BMidiRoster</compoundname>
    <includes local="no">MidiRoster.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classBMidiRoster_1a398cf5b1ce05a99475dd0a29e230e2b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiConsumer</definition>
        <argsstring></argsstring>
        <name>BMidiConsumer</name>
        <qualifiedname>BMidiRoster::BMidiConsumer</qualifiedname>
        <param>
          <type><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="53" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiRoster_1a5be44dc817b935005f6ae4b727e8edfa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiEndpoint</definition>
        <argsstring></argsstring>
        <name>BMidiEndpoint</name>
        <qualifiedname>BMidiRoster::BMidiEndpoint</qualifiedname>
        <param>
          <type><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="54" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiRoster_1a3beaf49e9cd5e53e1061d9184b6bbe32" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiLocalConsumer</definition>
        <argsstring></argsstring>
        <name>BMidiLocalConsumer</name>
        <qualifiedname>BMidiRoster::BMidiLocalConsumer</qualifiedname>
        <param>
          <type><ref refid="classBMidiLocalConsumer" kindref="compound">BMidiLocalConsumer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="56" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiRoster_1af26e8954f5c14a4c48bfcd3766d9abd8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiLocalProducer</definition>
        <argsstring></argsstring>
        <name>BMidiLocalProducer</name>
        <qualifiedname>BMidiRoster::BMidiLocalProducer</qualifiedname>
        <param>
          <type><ref refid="classBMidiLocalProducer" kindref="compound">BMidiLocalProducer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="55" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiRoster_1a7856d0e4613229160506e41c7affe4bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BMidiProducer</definition>
        <argsstring></argsstring>
        <name>BMidiProducer</name>
        <qualifiedname>BMidiRoster::BMidiProducer</qualifiedname>
        <param>
          <type><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="57" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiRoster_1a1b3d3fc96300255fc9b2527223e78d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct BPrivate::BMidiRosterKiller</definition>
        <argsstring></argsstring>
        <name>BPrivate::BMidiRosterKiller</name>
        <qualifiedname>BMidiRoster::BMidiRosterKiller</qualifiedname>
        <param>
          <type>BPrivate::BMidiRosterKiller</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="59" column="15" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classBMidiRoster_1a5510ba3d18d9044213eea55d0051eb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BPrivate::BMidiRosterLooper</definition>
        <argsstring></argsstring>
        <name>BPrivate::BMidiRosterLooper</name>
        <qualifiedname>BMidiRoster::BMidiRosterLooper</qualifiedname>
        <param>
          <type>BPrivate::BMidiRosterLooper</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="58" column="14" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBMidiRoster_1ae4cd2194d937f58f2767729266f6d626" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BMidiRoster::_reserved[16]</definition>
        <argsstring>[16]</argsstring>
        <name>_reserved</name>
        <qualifiedname>BMidiRoster::_reserved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="81" column="8" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiRoster_1a712fa011b1a0a36dbb68037793fa260e" prot="private" static="no" mutable="no">
        <type>BPrivate::BMidiRosterLooper *</type>
        <definition>BPrivate::BMidiRosterLooper* BMidiRoster::fLooper</definition>
        <argsstring></argsstring>
        <name>fLooper</name>
        <qualifiedname>BMidiRoster::fLooper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="78" column="29" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBMidiRoster_1adc0ef821dcdf6fe5c7318498dd0236f7" prot="private" static="no" mutable="no">
        <type><ref refid="classBMessenger" kindref="compound">BMessenger</ref> *</type>
        <definition>BMessenger* BMidiRoster::fServer</definition>
        <argsstring></argsstring>
        <name>fServer</name>
        <qualifiedname>BMidiRoster::fServer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="79" column="12" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBMidiRoster_1adb6d1d3d9eeb5de0d4e21e5d310eab36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref> *</type>
        <definition>BMidiConsumer * BMidiRoster::FindConsumer</definition>
        <argsstring>(int32 id, bool localOnly=false)</argsstring>
        <name>FindConsumer</name>
        <qualifiedname>BMidiRoster::FindConsumer</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>localOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Finds the consumer with the specified <emphasis>id</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint()</ref>, but only looks for consumer endpoints. Returns <computeroutput>NULL</computeroutput> if no endpoint with that ID exists, or if that endpoint is not a consumer.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiRoster_1a8fbecc301ebc83a0439d021cb26e7795" kindref="member">FindProducer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="41" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> *</type>
        <definition>BMidiEndpoint * BMidiRoster::FindEndpoint</definition>
        <argsstring>(int32 id, bool localOnly=false)</argsstring>
        <name>FindEndpoint</name>
        <qualifiedname>BMidiRoster::FindEndpoint</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>localOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the endpoint with the specified <emphasis>id</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint()</ref> will always find <bold>any</bold> local endpoints created by this application; they do not have to be published with <ref refid="classBMidiRoster_1a6fcc9df349fdd3ce7f6daa0786fd4371" kindref="member">Register()</ref> first. If localOnly is false, <ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint()</ref> also looks at remote endpoints, otherwise only local endpoints will be resolved. Returns NULL if no such endpoint could be found.</para>
<para>You should use a dynamic_cast to convert the <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> into a producer or consumer: <programlisting><codeline><highlight class="normal"><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref>*<sp/>endp<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>*<sp/>prod<sp/>=<sp/><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref>*<sp/>cons<sp/>=<sp/><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endp-&gt;<ref refid="classBMidiEndpoint_1a2555a377a070eaea225ca40b9e5bb696" kindref="member">IsProducer</ref>())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>prod<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(endp);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endp-&gt;<ref refid="classBMidiEndpoint_1ae20fe83d79bd0d08cb818d3dda0fdc23" kindref="member">IsConsumer</ref>())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cons<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(endp);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Remember that <ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint()</ref> increments the endpoint&apos;s reference count, so you should always <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release() </ref> an endpoint when you are done with it: <programlisting><codeline><highlight class="normal"><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref>*<sp/>endp<sp/>=<sp/><ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">BMidiRoster::FindEndpoint</ref>(someID);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endp<sp/>!=<sp/><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...do<sp/>stuff<sp/>with<sp/>the<sp/>endpoint...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endp-&gt;<ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="39" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a8fbecc301ebc83a0439d021cb26e7795" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref> *</type>
        <definition>BMidiProducer * BMidiRoster::FindProducer</definition>
        <argsstring>(int32 id, bool localOnly=false)</argsstring>
        <name>FindProducer</name>
        <qualifiedname>BMidiRoster::FindProducer</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>localOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Finds the producer with the specified <emphasis>id</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint()</ref>, but only looks for producer endpoints. Returns <computeroutput>NULL</computeroutput> if no endpoint with that ID exists, or if that endpoint is not a producer.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiRoster_1adb6d1d3d9eeb5de0d4e21e5d310eab36" kindref="member">FindConsumer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="40" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a258aff3bfde5f2d9f375db492e13b94b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> *</type>
        <definition>BMidiRoster * BMidiRoster::MidiRoster</definition>
        <argsstring>()</argsstring>
        <name>MidiRoster</name>
        <qualifiedname>BMidiRoster::MidiRoster</qualifiedname>
        <briefdescription>
<para>Returns a pointer to the only instance of <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>There is no real reason use this function, since all <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>&apos;s public function are static. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="49" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a6c42527bb3ed1651ca3918f7708d041a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMidiConsumer" kindref="compound">BMidiConsumer</ref> *</type>
        <definition>BMidiConsumer * BMidiRoster::NextConsumer</definition>
        <argsstring>(int32 *id)</argsstring>
        <name>NextConsumer</name>
        <qualifiedname>BMidiRoster::NextConsumer</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the next consumer from the roster. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint()</ref>, but only returns consumer endpoints.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiRoster_1a314b7e6366c2e0bb561f15f5d508be38" kindref="member">NextProducer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="37" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> *</type>
        <definition>BMidiEndpoint * BMidiRoster::NextEndpoint</definition>
        <argsstring>(int32 *id)</argsstring>
        <name>NextEndpoint</name>
        <qualifiedname>BMidiRoster::NextEndpoint</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the next endpoint from the roster. </para>
        </briefdescription>
        <detaileddescription>
<para>The &quot;next endpoint&quot; means: the endpoint with the ID that follows <emphasis>id</emphasis>. So if you set id to 3, the first possible endpoint it returns is endpoint 4. No endpoint can have ID 0, so passing 0 gives you the first endpoint. If you pass <computeroutput>NULL</computeroutput> instead of an ID, <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint()</ref> always returns <computeroutput>NULL</computeroutput>. When the function returns, it sets <emphasis>id</emphasis> to the ID of the endpoint that was found. If no more endpoints exist, <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint()</ref> returns <computeroutput>NULL</computeroutput> and id is not changed. <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint()</ref> does <bold>not</bold> return locally created endpoints, even if they are <ref refid="classBMidiRoster_1a6fcc9df349fdd3ce7f6daa0786fd4371" kindref="member">Register()</ref>&apos;ed.</para>
<para>Usage example: <programlisting><codeline><highlight class="normal"><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref>*<sp/>endp;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((endp<sp/>=<sp/><ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">BMidiRoster::NextEndpoint</ref>(&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>!=<sp/><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...<sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>something<sp/>with<sp/>endpoint<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>endp-&gt;<ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>forget!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Remember that <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint()</ref> bumps the endpoint&apos;s reference count, so you should always <ref refid="classBMidiEndpoint_1a368ed2bdb2b76afe1466daf0cc0e2b08" kindref="member">Release() </ref> it when you are done. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="35" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a314b7e6366c2e0bb561f15f5d508be38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBMidiProducer" kindref="compound">BMidiProducer</ref> *</type>
        <definition>BMidiProducer * BMidiRoster::NextProducer</definition>
        <argsstring>(int32 *id)</argsstring>
        <name>NextProducer</name>
        <qualifiedname>BMidiRoster::NextProducer</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a87905854573530ba20766196388ad2a1" kindref="member">int32</ref> *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the next producer from the roster. </para>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint()</ref>, but only returns producer endpoints.</para>
<para><simplesect kind="see"><para><ref refid="classBMidiRoster_1a6c42527bb3ed1651ca3918f7708d041a" kindref="member">NextConsumer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="36" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a6fcc9df349fdd3ce7f6daa0786fd4371" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiRoster::Register</definition>
        <argsstring>(BMidiEndpoint *endp)</argsstring>
        <name>Register</name>
        <qualifiedname>BMidiRoster::Register</qualifiedname>
        <param>
          <type><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> *</type>
          <declname>endp</declname>
          <defname>object</defname>
        </param>
        <briefdescription>
<para>Publishes an endpoint to other applications. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref>&apos;s <ref refid="classBMidiEndpoint_1a6a818947b6098488a46e5a934d254186" kindref="member">Register() </ref> method to publish an endpoint, which makes it visible to other applications. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="46" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1afe537ff3a6fc157e07436e7f62163622" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiRoster::StartWatching</definition>
        <argsstring>(const BMessenger *msngr)</argsstring>
        <name>StartWatching</name>
        <qualifiedname>BMidiRoster::StartWatching</qualifiedname>
        <param>
          <type>const <ref refid="classBMessenger" kindref="compound">BMessenger</ref> *</type>
          <declname>msngr</declname>
        </param>
        <briefdescription>
<para>Start receiving notifications from the Midi Roster. </para>
        </briefdescription>
        <detaileddescription>
<para>When you start watching, <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> sends you notifications for all currently <bold>published</bold> <computeroutput>remote</computeroutput> endpoints, and all the current connections between them. (At this point, <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> does not let you know about connections between unpublished endpoints, nor does it tell you anything about your local endpoints, even though they may be published.)</para>
<para>Thereafter, you&apos;ll receive notifications any time something important happens to an object. The application that performs these operations is itself not notified. The assumption here is that you already know about these changes, because you are the one that is performing them.</para>
<para>The notifications are BMessages with code B_MIDI_EVENT. You specify the <ref refid="classBMessenger" kindref="compound">BMessenger</ref> that will be used to send these messages. Each message contains a field called be:op that describes the type of notification.</para>
<para>The &quot;registered&quot; and &quot;unregistered&quot; notifications are sent when a remote endpoint <ref refid="classBMidiRoster_1a6fcc9df349fdd3ce7f6daa0786fd4371" kindref="member">Register()</ref>&apos;s or <ref refid="classBMidiRoster_1a6e6f401eeaa94204701732f977663fd1" kindref="member">Unregister()</ref>&apos;s, respectively. You don&apos;t receive these notifications when you register or unregister your local endpoints, but the other apps will.</para>
<para><table rows="3" cols="3"><row>
<entry thead="no"><para>be:op </para>
</entry><entry thead="no"><para>int32 </para>
</entry><entry thead="no"><para><computeroutput>B_MIDI_REGISTERED</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>be:id </para>
</entry><entry thead="no"><para>int32 </para>
</entry><entry thead="no"><para>id of the endpoint  </para>
</entry></row>
<row>
<entry thead="no"><para>be:type </para>
</entry><entry thead="no"><para>string </para>
</entry><entry thead="no"><para>&quot;producer&quot; or &quot;consumer&quot;  </para>
</entry></row>
</table>
<table rows="3" cols="3"><row>
<entry thead="no"><para>be:op </para>
</entry><entry thead="no"><para>int32 </para>
</entry><entry thead="no"><para><computeroutput>B_MIDI_UNREGISTERED</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>be:id </para>
</entry><entry thead="no"><para>int32 </para>
</entry><entry thead="no"><para>id of the endpoint  </para>
</entry></row>
<row>
<entry thead="no"><para>be:type </para>
</entry><entry thead="no"><para>string </para>
</entry><entry thead="no"><para>&quot;producer&quot; or &quot;consumer&quot;  </para>
</entry></row>
</table>
</para>
<para>The &quot;connected&quot; and &quot;disconnected&quot; notifications are sent when a consumer <ref refid="classBMidiProducer_1ae1fe6a25736a3f8eb154158429fc224a" kindref="member">Connect()</ref>&apos;s to a producer, or when they <ref refid="classBMidiProducer_1a7f68b65fd703766a0fccb5d9535ea6ed" kindref="member">Disconnect() </ref>. You will receive these notifications when <bold>any</bold> two endpoints connect or disconnect, even if they are not published. (The purpose of which is debatable.) You won&apos;t receive the notifications if you are the one making the connection, even if both endpoints are remote. You <bold>will</bold> be notified when another app connects one of your published endpoints. <table rows="3" cols="3"><row>
<entry thead="no"><para>be:op </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para><computeroutput>B_MIDI_CONNECTED</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>be:producer </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para>id of the connector  </para>
</entry></row>
<row>
<entry thead="no"><para>be:consumer </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para>id of the connectee  </para>
</entry></row>
</table>
</para>
<para><table rows="3" cols="3"><row>
<entry thead="no"><para>be:op </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para><computeroutput>B_MIDI_DISCONNECTED</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>be:producer </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para>id of the connector  </para>
</entry></row>
<row>
<entry thead="no"><para>be:consumer </para>
</entry><entry thead="no"><para>int32 </para>
</entry><entry thead="no"><para>id of the connectee  </para>
</entry></row>
</table>
</para>
<para>the following notifications are sent when an endpoint&apos;s attributes are changed. you receive these notifications only if another application is changing one of its published endpoints.</para>
<para><table rows="4" cols="3"><row>
<entry thead="no"><para>be:op </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para><computeroutput>B_MIDI_CHANGED_NAME</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>be:id </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para>id of the endpoint  </para>
</entry></row>
<row>
<entry thead="no"><para>be:type </para>
</entry><entry thead="no"><para>string </para>
</entry><entry thead="no"><para>&quot;producer&quot; or &quot;consumer&quot;  </para>
</entry></row>
<row>
<entry thead="no"><para>be:name </para>
</entry><entry thead="no"><para>string </para>
</entry><entry thead="no"><para>the endpoint&apos;s new name  </para>
</entry></row>
</table>
</para>
<para><table rows="4" cols="3"><row>
<entry thead="no"><para>be:op </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para><computeroutput>B_MIDI_CHANGED_LATENCY</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>be:id </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para>id of the endpoint  </para>
</entry></row>
<row>
<entry thead="no"><para>be:type </para>
</entry><entry thead="no"><para>string </para>
</entry><entry thead="no"><para>&quot;producer&quot; or &quot;consumer&quot;  </para>
</entry></row>
<row>
<entry thead="no"><para>be:latency </para>
</entry><entry thead="no"><para>int64 </para>
</entry><entry thead="no"><para>the new latency (microseconds)  </para>
</entry></row>
</table>
</para>
<para><table rows="4" cols="3"><row>
<entry thead="no"><para>be:op </para>
</entry><entry thead="no"><para>int32 </para>
</entry><entry thead="no"><para><computeroutput>B_MIDI_CHANGED_PROPERTIES</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>be:id </para>
</entry><entry thead="no"><para><computeroutput>int32</computeroutput>  </para>
</entry><entry thead="no"><para>id of the endpoint  </para>
</entry></row>
<row>
<entry thead="no"><para>be:type </para>
</entry><entry thead="no"><para>string </para>
</entry><entry thead="no"><para>&quot;producer&quot; or &quot;consumer&quot;  </para>
</entry></row>
<row>
<entry thead="no"><para>be:properties </para>
</entry><entry thead="no"><para>bmessage </para>
</entry><entry thead="no"><para>the new properties  </para>
</entry></row>
</table>
</para>
<para>Typical usage example:</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyView::AttachedToWindow()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBMessenger" kindref="compound">BMessenger</ref><sp/>msgr(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBMidiRoster_1afe537ff3a6fc157e07436e7f62163622" kindref="member">BMidiRoster::StartWatching</ref>(&amp;msgr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyView::MessageReceived(<ref refid="classBMessage" kindref="compound">BMessage</ref>*<sp/>msg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(msg-&gt;<ref refid="classBMessage_1ad074faab0857f51fba778f0d8558df1e" kindref="member">what</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="MidiRoster_8h_1a3b696b80b0b78a9a057b7c58332b1f13" kindref="member">B_MIDI_EVENT</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HandleMidiEvent(msg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super::MessageReceived(msg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>For the possible midi options, see BMidiOp </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="43" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a3af22b3fbb289a1298c7725423d3cdbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiRoster::StopWatching</definition>
        <argsstring>()</argsstring>
        <name>StopWatching</name>
        <qualifiedname>BMidiRoster::StopWatching</qualifiedname>
        <briefdescription>
<para>Stop receiving notifications from the Midi Roster. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classBMidiRoster_1afe537ff3a6fc157e07436e7f62163622" kindref="member">StartWatching()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="44" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a6e6f401eeaa94204701732f977663fd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiRoster::Unregister</definition>
        <argsstring>(BMidiEndpoint *endp)</argsstring>
        <name>Unregister</name>
        <qualifiedname>BMidiRoster::Unregister</qualifiedname>
        <param>
          <type><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> *</type>
          <declname>endp</declname>
          <defname>object</defname>
        </param>
        <briefdescription>
<para>Hides an endpoint from other applications. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref>&apos;s <ref refid="classBMidiEndpoint_1ad60d3fd6a9706a63f57851acf84db042" kindref="member">Unregister() </ref> method to hide a previously published endpoint from other applications. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="47" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBMidiRoster_1ac339f99cd9554fad3ed3440e1b32eb15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BMidiRoster::BMidiRoster</definition>
        <argsstring>()</argsstring>
        <name>BMidiRoster</name>
        <qualifiedname>BMidiRoster::BMidiRoster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a01deee0a6ca66bbe8d150c46ef5c6f30" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BMidiRoster::~BMidiRoster</definition>
        <argsstring>()</argsstring>
        <name>~BMidiRoster</name>
        <qualifiedname>BMidiRoster::~BMidiRoster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="62" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a2ff9e3de2495529e22bac395b1b37319" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved1</definition>
        <argsstring>()</argsstring>
        <name>_Reserved1</name>
        <qualifiedname>BMidiRoster::_Reserved1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="64" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a2f59e7f2d808e8759f97e4ec34e139ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved2</definition>
        <argsstring>()</argsstring>
        <name>_Reserved2</name>
        <qualifiedname>BMidiRoster::_Reserved2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="65" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a8564755fe4d25e232761931e24bf5829" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved3</definition>
        <argsstring>()</argsstring>
        <name>_Reserved3</name>
        <qualifiedname>BMidiRoster::_Reserved3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="66" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a4417b6ceaf920b4ba6ceaf0d141d77ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved4</definition>
        <argsstring>()</argsstring>
        <name>_Reserved4</name>
        <qualifiedname>BMidiRoster::_Reserved4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="67" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a65e881ca1b16bf7dcdf9786973608d8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved5</definition>
        <argsstring>()</argsstring>
        <name>_Reserved5</name>
        <qualifiedname>BMidiRoster::_Reserved5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="68" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a9554226812b5938e8da0cb4b29b0ac4e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved6</definition>
        <argsstring>()</argsstring>
        <name>_Reserved6</name>
        <qualifiedname>BMidiRoster::_Reserved6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="69" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a8cbbd04589a0c19bc155902f562aeb8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved7</definition>
        <argsstring>()</argsstring>
        <name>_Reserved7</name>
        <qualifiedname>BMidiRoster::_Reserved7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="70" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a01752cf3175d25ee255db83772439434" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BMidiRoster::_Reserved8</definition>
        <argsstring>()</argsstring>
        <name>_Reserved8</name>
        <qualifiedname>BMidiRoster::_Reserved8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="71" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a1b8affabf63038549d888ac37806d956" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiRoster::CreateLocal</definition>
        <argsstring>(BMidiEndpoint *)</argsstring>
        <name>CreateLocal</name>
        <qualifiedname>BMidiRoster::CreateLocal</qualifiedname>
        <param>
          <type><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="73" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a92bed51f5f65d08391860a9373f08b98" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMidiRoster::DeleteLocal</definition>
        <argsstring>(BMidiEndpoint *)</argsstring>
        <name>DeleteLocal</name>
        <qualifiedname>BMidiRoster::DeleteLocal</qualifiedname>
        <param>
          <type><ref refid="classBMidiEndpoint" kindref="compound">BMidiEndpoint</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="74" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBMidiRoster_1a90d5b4c0ba468b4da3c39ede31a26f46" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BMidiRoster::SendRequest</definition>
        <argsstring>(BMessage *, BMessage *)</argsstring>
        <name>SendRequest</name>
        <qualifiedname>BMidiRoster::SendRequest</qualifiedname>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        </param>
        <param>
          <type><ref refid="classBMessage" kindref="compound">BMessage</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="76" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface to the system-wide Midi Roster. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> allows you to find available MIDI consumer and producer objects. You can locate these objects using the iterative <ref refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" kindref="member">NextEndpoint()</ref>, <ref refid="classBMidiRoster_1a314b7e6366c2e0bb561f15f5d508be38" kindref="member">NextProducer()</ref>, and <ref refid="classBMidiRoster_1a6c42527bb3ed1651ca3918f7708d041a" kindref="member">NextConsumer()</ref> methods or by requesting notification messages to be sent with <ref refid="classBMidiRoster_1afe537ff3a6fc157e07436e7f62163622" kindref="member">StartWatching()</ref>. Notification messages may contain object IDs which can be resolved using the <ref refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" kindref="member">FindEndpoint()</ref>, <ref refid="classBMidiRoster_1a8fbecc301ebc83a0439d021cb26e7795" kindref="member">FindProducer()</ref>, and <ref refid="classBMidiRoster_1adb6d1d3d9eeb5de0d4e21e5d310eab36" kindref="member">FindConsumer()</ref> methods.</para>
<para>The constructor and destructor of <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> are private, which means that you cannot create or delete your own <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref> objects. Every application can have only one instance of <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>, which is automatically created the very first time you use a Midi Kit function. You can call <ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>&apos;s functions like this: <programlisting><codeline><highlight class="normal">producer<sp/>=<sp/><ref refid="classBMidiRoster_1a8fbecc301ebc83a0439d021cb26e7795" kindref="member">BMidiRoster::FindProducer</ref>(someID);</highlight></codeline>
</programlisting> Or using the slightly more annoying: <programlisting><codeline><highlight class="normal"><ref refid="classBMidiRoster" kindref="compound">BMidiRoster</ref>*<sp/>roster<sp/>=<sp/><ref refid="classBMidiRoster_1a258aff3bfde5f2d9f375db492e13b94b" kindref="member">BMidiRoster::MidiRoster</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(roster<sp/>!=<sp/><ref refid="SupportDefs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>producer<sp/>=<sp/>roster-&gt;<ref refid="classBMidiRoster_1a8fbecc301ebc83a0439d021cb26e7795" kindref="member">FindProducer</ref>(someID);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" line="31" column="1" bodyfile="/boot/home/src/haiku/headers/os/midi2/MidiRoster.h" bodystart="32" bodyend="82"/>
    <listofallmembers>
      <member refid="classBMidiRoster_1ae4cd2194d937f58f2767729266f6d626" prot="private" virt="non-virtual"><scope>BMidiRoster</scope><name>_reserved</name></member>
      <member refid="classBMidiRoster_1a2ff9e3de2495529e22bac395b1b37319" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved1</name></member>
      <member refid="classBMidiRoster_1a2f59e7f2d808e8759f97e4ec34e139ee" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved2</name></member>
      <member refid="classBMidiRoster_1a8564755fe4d25e232761931e24bf5829" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved3</name></member>
      <member refid="classBMidiRoster_1a4417b6ceaf920b4ba6ceaf0d141d77ec" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved4</name></member>
      <member refid="classBMidiRoster_1a65e881ca1b16bf7dcdf9786973608d8d" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved5</name></member>
      <member refid="classBMidiRoster_1a9554226812b5938e8da0cb4b29b0ac4e" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved6</name></member>
      <member refid="classBMidiRoster_1a8cbbd04589a0c19bc155902f562aeb8c" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved7</name></member>
      <member refid="classBMidiRoster_1a01752cf3175d25ee255db83772439434" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>_Reserved8</name></member>
      <member refid="classBMidiRoster_1ac339f99cd9554fad3ed3440e1b32eb15" prot="private" virt="non-virtual"><scope>BMidiRoster</scope><name>BMidiRoster</name></member>
      <member refid="classBMidiRoster_1a1b8affabf63038549d888ac37806d956" prot="private" virt="non-virtual"><scope>BMidiRoster</scope><name>CreateLocal</name></member>
      <member refid="classBMidiRoster_1a92bed51f5f65d08391860a9373f08b98" prot="private" virt="non-virtual"><scope>BMidiRoster</scope><name>DeleteLocal</name></member>
      <member refid="classBMidiRoster_1adb6d1d3d9eeb5de0d4e21e5d310eab36" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>FindConsumer</name></member>
      <member refid="classBMidiRoster_1aa093ac8e2baf81b1fbaa3cdadf4adeab" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>FindEndpoint</name></member>
      <member refid="classBMidiRoster_1a8fbecc301ebc83a0439d021cb26e7795" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>FindProducer</name></member>
      <member refid="classBMidiRoster_1a712fa011b1a0a36dbb68037793fa260e" prot="private" virt="non-virtual"><scope>BMidiRoster</scope><name>fLooper</name></member>
      <member refid="classBMidiRoster_1adc0ef821dcdf6fe5c7318498dd0236f7" prot="private" virt="non-virtual"><scope>BMidiRoster</scope><name>fServer</name></member>
      <member refid="classBMidiRoster_1a258aff3bfde5f2d9f375db492e13b94b" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>MidiRoster</name></member>
      <member refid="classBMidiRoster_1a6c42527bb3ed1651ca3918f7708d041a" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>NextConsumer</name></member>
      <member refid="classBMidiRoster_1afbf8efb9cfac2ac8f16c7a399f23039b" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>NextEndpoint</name></member>
      <member refid="classBMidiRoster_1a314b7e6366c2e0bb561f15f5d508be38" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>NextProducer</name></member>
      <member refid="classBMidiRoster_1a6fcc9df349fdd3ce7f6daa0786fd4371" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>Register</name></member>
      <member refid="classBMidiRoster_1a90d5b4c0ba468b4da3c39ede31a26f46" prot="private" virt="non-virtual"><scope>BMidiRoster</scope><name>SendRequest</name></member>
      <member refid="classBMidiRoster_1afe537ff3a6fc157e07436e7f62163622" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>StartWatching</name></member>
      <member refid="classBMidiRoster_1a3af22b3fbb289a1298c7725423d3cdbb" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>StopWatching</name></member>
      <member refid="classBMidiRoster_1a6e6f401eeaa94204701732f977663fd1" prot="public" virt="non-virtual"><scope>BMidiRoster</scope><name>Unregister</name></member>
      <member refid="classBMidiRoster_1a01deee0a6ca66bbe8d150c46ef5c6f30" prot="private" virt="virtual"><scope>BMidiRoster</scope><name>~BMidiRoster</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
