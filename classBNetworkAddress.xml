<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classBNetworkAddress" kind="class" language="C++" prot="public">
    <compoundname>BNetworkAddress</compoundname>
    <basecompoundref refid="classBFlattenable" prot="public" virt="non-virtual">BFlattenable</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBNetworkAddress_1aa41f756b9a6038c81be9bf6d602d9a8e" prot="private" static="no" mutable="no">
        <type>sockaddr_storage</type>
        <definition>sockaddr_storage BNetworkAddress::fAddress</definition>
        <argsstring></argsstring>
        <name>fAddress</name>
        <qualifiedname>BNetworkAddress::fAddress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="150" column="17" bodyfile="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNetworkAddress_1a32d1bd438541af34131396e88f5f9051" prot="private" static="no" mutable="no">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNetworkAddress::fHostName</definition>
        <argsstring></argsstring>
        <name>fHostName</name>
        <qualifiedname>BNetworkAddress::fHostName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="152" column="8" bodyfile="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBNetworkAddress_1afc3c18208976a50dc45b6bf3fbd210f6" prot="private" static="no" mutable="no">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::fStatus</definition>
        <argsstring></argsstring>
        <name>fStatus</name>
        <qualifiedname>BNetworkAddress::fStatus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="151" column="9" bodyfile="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBNetworkAddress_1a677e21546ba4116df28be6739029a332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>()</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a6b32b021b81f0d09dc7fe8f485c59c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const BNetworkAddress &amp;other)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a91ec0a3fa4d53e1bd09fc1892a91c2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const char *address, const char *service, uint32 flags=0)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a49966752a8c140799bce549fcac2fa84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const char *address, uint16 port=0, uint32 flags=0)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a14edd3911772415a84da21aac6d4cb6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const in6_addr &amp;address, uint16 port=0)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const in6_addr &amp;</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a28de9a2e845f1477055bdfe6b2358c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const sockaddr &amp;address)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a9fe89dd05031365e5d3b79959e2decf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const sockaddr_dl &amp;address)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const sockaddr_dl &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a302aad38827c81931dec88d8aed21457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const sockaddr_in &amp;address)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a80e9accca4aa2afca9fc1558f1859f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const sockaddr_in6 &amp;address)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a0ea25f8c26181da9c8587e793fcf3493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(const sockaddr_storage &amp;address)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>const sockaddr_storage &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ac1f873e46aeb92c3ad1d8caccc23046f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(in_addr_t address, uint16 port=0)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>in_addr_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a9fbee11f091fbaf6704a28bb670031c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(int family, const char *address, const char *service, uint32 flags=0)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a5f14fd302a3d5cf2f15d2524251c69e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::BNetworkAddress</definition>
        <argsstring>(int family, const char *address, uint16 port=0, uint32 flags=0)</argsstring>
        <name>BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::BNetworkAddress</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a660a4021f17ed1f94a8e67bc04098257" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BNetworkAddress::~BNetworkAddress</definition>
        <argsstring>()</argsstring>
        <name>~BNetworkAddress</name>
        <qualifiedname>BNetworkAddress::~BNetworkAddress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="41" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a927a6e7539d1502048cab54f426dfd98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::Equals</definition>
        <argsstring>(const BNetworkAddress &amp;other, bool includePort=true) const</argsstring>
        <name>Equals</name>
        <qualifiedname>BNetworkAddress::Equals</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includePort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="121" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a3b94d8011fc1d095f673eecdc4c14059" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BNetworkAddress::Family</definition>
        <argsstring>() const</argsstring>
        <name>Family</name>
        <qualifiedname>BNetworkAddress::Family</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="85" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ab178eb989534443614fc66f407cfe35b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BNetworkAddress::Flatten</definition>
        <argsstring>(void *buffer, ssize_t size) const</argsstring>
        <name>Flatten</name>
        <qualifiedname>BNetworkAddress::Flatten</qualifiedname>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="129" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a59538bccef3c70bf9b5f6d9d548065e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ssize_t</type>
        <definition>virtual ssize_t BNetworkAddress::FlattenedSize</definition>
        <argsstring>() const</argsstring>
        <name>FlattenedSize</name>
        <qualifiedname>BNetworkAddress::FlattenedSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="127" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a31ec57cb84ab477f2fcb90e793a1e785" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNetworkAddress::HostName</definition>
        <argsstring>() const</argsstring>
        <name>HostName</name>
        <qualifiedname>BNetworkAddress::HostName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="118" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a78844d3c7128a868c8710223728f3369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::InitCheck</definition>
        <argsstring>() const</argsstring>
        <name>InitCheck</name>
        <qualifiedname>BNetworkAddress::InitCheck</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="43" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ae0e7512dabda3eb39967646450cf7371" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsBroadcast</definition>
        <argsstring>() const</argsstring>
        <name>IsBroadcast</name>
        <qualifiedname>BNetworkAddress::IsBroadcast</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="93" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a00b27c4d19bcf713ba2566a984792c9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <qualifiedname>BNetworkAddress::IsEmpty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="91" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ad9c329b0b09563aa06982107aca97972" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BNetworkAddress::IsFixedSize</definition>
        <argsstring>() const</argsstring>
        <name>IsFixedSize</name>
        <qualifiedname>BNetworkAddress::IsFixedSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="125" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ab24fe010ad0123ebf544c2389d370bd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsLinkLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsLinkLocal</name>
        <qualifiedname>BNetworkAddress::IsLinkLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="100" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a418351bfaa8eb232883af564260bae02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsLocal</name>
        <qualifiedname>BNetworkAddress::IsLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="102" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a3e362d289c9f89cf2b4a754280dd0719" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsMulticast</definition>
        <argsstring>() const</argsstring>
        <name>IsMulticast</name>
        <qualifiedname>BNetworkAddress::IsMulticast</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="94" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a227f647041bb9dcb1e34dcbe69273dc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsMulticastGlobal</definition>
        <argsstring>() const</argsstring>
        <name>IsMulticastGlobal</name>
        <qualifiedname>BNetworkAddress::IsMulticastGlobal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="95" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a32a84bd20a666a98389cba68504dfa71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsMulticastLinkLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsMulticastLinkLocal</name>
        <qualifiedname>BNetworkAddress::IsMulticastLinkLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="97" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aa30da114b00db10ec89d6a722e91b4ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsMulticastNodeLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsMulticastNodeLocal</name>
        <qualifiedname>BNetworkAddress::IsMulticastNodeLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="96" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ab02f43e288019390fa7539c6a7b49c2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsMulticastOrgLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsMulticastOrgLocal</name>
        <qualifiedname>BNetworkAddress::IsMulticastOrgLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="99" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a9b3096542fde1c295120f404271f36f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsMulticastSiteLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsMulticastSiteLocal</name>
        <qualifiedname>BNetworkAddress::IsMulticastSiteLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="98" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aa4952cfbbef26dd98c5d0e6382435061" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsSiteLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsSiteLocal</name>
        <qualifiedname>BNetworkAddress::IsSiteLocal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="101" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a531d18bd384b91ac46302bd03a74d80e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::IsWildcard</definition>
        <argsstring>() const</argsstring>
        <name>IsWildcard</name>
        <qualifiedname>BNetworkAddress::IsWildcard</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="92" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1acacd3674c541e36b1bb54817182ec986" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BNetworkAddress::Length</definition>
        <argsstring>() const</argsstring>
        <name>Length</name>
        <qualifiedname>BNetworkAddress::Length</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="87" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a4575081c326c1f7c867e13be76f7569e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
        <definition>uint8 * BNetworkAddress::LinkLevelAddress</definition>
        <argsstring>() const</argsstring>
        <name>LinkLevelAddress</name>
        <qualifiedname>BNetworkAddress::LinkLevelAddress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="110" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a54e8473dd9f65af56d804473217a43a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BNetworkAddress::LinkLevelAddressLength</definition>
        <argsstring>() const</argsstring>
        <name>LinkLevelAddressLength</name>
        <qualifiedname>BNetworkAddress::LinkLevelAddressLength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="111" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aed63975a7f1150a7abe92c0d8c8f5fb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BNetworkAddress::LinkLevelFrameType</definition>
        <argsstring>() const</argsstring>
        <name>LinkLevelFrameType</name>
        <qualifiedname>BNetworkAddress::LinkLevelFrameType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="109" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a421ecbe53fbcf0fcb4c631962827f3b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
        <definition>uint32 BNetworkAddress::LinkLevelIndex</definition>
        <argsstring>() const</argsstring>
        <name>LinkLevelIndex</name>
        <qualifiedname>BNetworkAddress::LinkLevelIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="106" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aaeee326c41bbeb6fd63e3579eeb838ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNetworkAddress::LinkLevelInterface</definition>
        <argsstring>() const</argsstring>
        <name>LinkLevelInterface</name>
        <qualifiedname>BNetworkAddress::LinkLevelInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="107" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a614fd37d7e6f8031bf3e1a9183b9bcee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
        <definition>uint8 BNetworkAddress::LinkLevelType</definition>
        <argsstring>() const</argsstring>
        <name>LinkLevelType</name>
        <qualifiedname>BNetworkAddress::LinkLevelType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="108" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a828dbd7a9ec5613156cbd30096adbde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::operator const sockaddr &amp;</definition>
        <argsstring>()</argsstring>
        <name>operator const sockaddr &amp;</name>
        <qualifiedname>BNetworkAddress::operator const sockaddr &amp;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a2804d9e1ed848a259fd5de607273e40e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::operator const sockaddr &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator const sockaddr &amp;</name>
        <qualifiedname>BNetworkAddress::operator const sockaddr &amp;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ae76673f4f35bc5d95ca034c3d9c3d06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::operator const sockaddr *</definition>
        <argsstring>()</argsstring>
        <name>operator const sockaddr *</name>
        <qualifiedname>BNetworkAddress::operator const sockaddr *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a2d67e079eccf2ecf28777dabae05a6e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::operator const sockaddr *</definition>
        <argsstring>() const</argsstring>
        <name>operator const sockaddr *</name>
        <qualifiedname>BNetworkAddress::operator const sockaddr *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aa23e5b89404e3b21106e693bc4c6936b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::operator sockaddr &amp;</definition>
        <argsstring>()</argsstring>
        <name>operator sockaddr &amp;</name>
        <qualifiedname>BNetworkAddress::operator sockaddr &amp;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ae48a0e5347fb08a119095fb7fa33f847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BNetworkAddress::operator sockaddr *</definition>
        <argsstring>()</argsstring>
        <name>operator sockaddr *</name>
        <qualifiedname>BNetworkAddress::operator sockaddr *</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a957893152e452aae4df4cbfa5fc362ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::operator!=</definition>
        <argsstring>(const BNetworkAddress &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>BNetworkAddress::operator!=</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="136" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a7ebbdf9d3a2738efb67881e534a1e4ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::operator&lt;</definition>
        <argsstring>(const BNetworkAddress &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>BNetworkAddress::operator&lt;</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a51f26d22d0a64df15adcb9d27ca9af32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BNetworkAddress &amp;</type>
        <definition>BNetworkAddress &amp; BNetworkAddress::operator=</definition>
        <argsstring>(const BNetworkAddress &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>BNetworkAddress::operator=</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="133" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a93b39baca8aa5f28561e8ce18dc78380" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BNetworkAddress::operator==</definition>
        <argsstring>(const BNetworkAddress &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>BNetworkAddress::operator==</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="135" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a04499b62dcf21444e4f025b4e15e49c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
        <definition>uint16 BNetworkAddress::Port</definition>
        <argsstring>() const</argsstring>
        <name>Port</name>
        <qualifiedname>BNetworkAddress::Port</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="86" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1af4aca1b46b2da7d6734e46f495d9878b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t BNetworkAddress::PrefixLength</definition>
        <argsstring>() const</argsstring>
        <name>PrefixLength</name>
        <qualifiedname>BNetworkAddress::PrefixLength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="104" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a45fc7c65f42d16a7cf816506d61bbb62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::ResolveForDestination</definition>
        <argsstring>(const BNetworkAddress &amp;destination)</argsstring>
        <name>ResolveForDestination</name>
        <qualifiedname>BNetworkAddress::ResolveForDestination</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="113" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a7e0c7411e72c1ae2081a88b91138d9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::ResolveTo</definition>
        <argsstring>(const BNetworkAddress &amp;address)</argsstring>
        <name>ResolveTo</name>
        <qualifiedname>BNetworkAddress::ResolveTo</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="115" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ac444f437717500f0756a2155d7d7364b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNetworkAddress::ServiceName</definition>
        <argsstring>() const</argsstring>
        <name>ServiceName</name>
        <qualifiedname>BNetworkAddress::ServiceName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="119" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a370cbcf21aa8543774387619e3af86f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetAddress</definition>
        <argsstring>(const in6_addr &amp;address)</argsstring>
        <name>SetAddress</name>
        <qualifiedname>BNetworkAddress::SetAddress</qualifiedname>
        <param>
          <type>const in6_addr &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="74" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aeb026e23a7e907773396eb0848ff912b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetAddress</definition>
        <argsstring>(in_addr_t address)</argsstring>
        <name>SetAddress</name>
        <qualifiedname>BNetworkAddress::SetAddress</qualifiedname>
        <param>
          <type>in_addr_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="73" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a17b6b52a85b4bdc2ddd78b2d1af2ede2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetLinkLevelFrameType</definition>
        <argsstring>(uint16 frameType)</argsstring>
        <name>SetLinkLevelFrameType</name>
        <qualifiedname>BNetworkAddress::SetLinkLevelFrameType</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>frameType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="83" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a46a9235763a584c9d610c7d9b10b5e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetLinkLevelIndex</definition>
        <argsstring>(uint32 index)</argsstring>
        <name>SetLinkLevelIndex</name>
        <qualifiedname>BNetworkAddress::SetLinkLevelIndex</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="81" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a18fc418803a34e14eb7b79c9448fb39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetLinkLevelType</definition>
        <argsstring>(uint8 type)</argsstring>
        <name>SetLinkLevelType</name>
        <qualifiedname>BNetworkAddress::SetLinkLevelType</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="82" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a6d7d327179eb80a2cd13e042b3dd7849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetPort</definition>
        <argsstring>(const char *service)</argsstring>
        <name>SetPort</name>
        <qualifiedname>BNetworkAddress::SetPort</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="76" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a30cb4d3dc21bdaf0088feb7b4a341f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetPort</definition>
        <argsstring>(uint16 port)</argsstring>
        <name>SetPort</name>
        <qualifiedname>BNetworkAddress::SetPort</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="75" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a239592725aa308c2beac1e58cbdea302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const BNetworkAddress &amp;other)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const BNetworkAddress &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="63" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a2e70e588a13839bd54aad2df14f1fa5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetTo</definition>
        <argsstring>(const char *address, const char *service, uint32 flags=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="49" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ac861599f4f3f0a3913382628384e59b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetTo</definition>
        <argsstring>(const char *address, uint16 port=0, uint32 flags=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="47" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ace184eb512d89d1b833fdd04552bc3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const in6_addr &amp;address, uint16 port=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const in6_addr &amp;</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a152a0c1abcf7f39c6bdb24f958b3de20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const sockaddr &amp;address)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="55" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ae29e30af20f1017a5463617cb9121c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const sockaddr &amp;address, size_t length)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const sockaddr &amp;</type>
          <declname>address</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a9fb923a6a7ce478a5c36c38fae7b9a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const sockaddr_dl &amp;address)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const sockaddr_dl &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="60" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a54b6f9bda609662f1176bc5821d22425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const sockaddr_in &amp;address)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a6d1bcd2d603d3015257133979baf23dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const sockaddr_in6 &amp;address)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="59" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ae05be3a797fea49b9ace69acfeee421b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(const sockaddr_storage &amp;address)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>const sockaddr_storage &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ab651b97e1b549fddc28a9ffe3d18ac3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetTo</definition>
        <argsstring>(in_addr_t address, uint16 port=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>in_addr_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a74b1d350d1bc2348e9c7d34d7f6b1a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetTo</definition>
        <argsstring>(int family, const char *address, const char *service, uint32 flags=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="53" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aa18e9a3274605b4c4f81799c3b7e7d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetTo</definition>
        <argsstring>(int family, const char *address, uint16 port=0, uint32 flags=0)</argsstring>
        <name>SetTo</name>
        <qualifiedname>BNetworkAddress::SetTo</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="51" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ae2db03a01331c0cbc31c11820a8401c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetToBroadcast</definition>
        <argsstring>(int family, uint16 port=0)</argsstring>
        <name>SetToBroadcast</name>
        <qualifiedname>BNetworkAddress::SetToBroadcast</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="65" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a76260c050113901377146d3e9f5676e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetToLinkLevel</definition>
        <argsstring>(const char *name)</argsstring>
        <name>SetToLinkLevel</name>
        <qualifiedname>BNetworkAddress::SetToLinkLevel</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a34b2effbeafca42031f15e5b3554f1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetToLinkLevel</definition>
        <argsstring>(const uint8 *address, size_t length)</argsstring>
        <name>SetToLinkLevel</name>
        <qualifiedname>BNetworkAddress::SetToLinkLevel</qualifiedname>
        <param>
          <type>const <ref refid="SupportDefs_8h_1ac56eeb3040e225fafe52dc1872233eeb" kindref="member">uint8</ref> *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="78" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a0d1891112fd0db714b99a283a7603068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::SetToLinkLevel</definition>
        <argsstring>(uint32 index)</argsstring>
        <name>SetToLinkLevel</name>
        <qualifiedname>BNetworkAddress::SetToLinkLevel</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="80" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a28d6d88ea3dfc02d85c669623ff935a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetToLocal</definition>
        <argsstring>(int family=AF_UNSPEC, uint16 port=0)</argsstring>
        <name>SetToLocal</name>
        <qualifiedname>BNetworkAddress::SetToLocal</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
          <defval>AF_UNSPEC</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="66" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ab04429f542391adc1a60b5a1c92d7f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetToLoopback</definition>
        <argsstring>(int family=AF_UNSPEC, uint16 port=0)</argsstring>
        <name>SetToLoopback</name>
        <qualifiedname>BNetworkAddress::SetToLoopback</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
          <defval>AF_UNSPEC</defval>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a7c8e4b3d06d509e94dd4b51c7eea165c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetToMask</definition>
        <argsstring>(int family, uint32 prefixLength)</argsstring>
        <name>SetToMask</name>
        <qualifiedname>BNetworkAddress::SetToMask</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1a9a72138d173e1e5243078b8644d4a1c2" kindref="member">uint32</ref></type>
          <declname>prefixLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="70" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ab7fe7f4f5e7751c57cce99b2c846eb9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::SetToWildcard</definition>
        <argsstring>(int family, uint16 port=0)</argsstring>
        <name>SetToWildcard</name>
        <qualifiedname>BNetworkAddress::SetToWildcard</qualifiedname>
        <param>
          <type>int</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="SupportDefs_8h_1ac267cdaa9a4909f02aa2fc83cc7da477" kindref="member">uint16</ref></type>
          <declname>port</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="71" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ae0f455424feb618cb61ea8d70076e2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sockaddr &amp;</type>
        <definition>sockaddr &amp; BNetworkAddress::SockAddr</definition>
        <argsstring>()</argsstring>
        <name>SockAddr</name>
        <qualifiedname>BNetworkAddress::SockAddr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="89" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1aa3efd210bfb156db099e304cdcfca770" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const sockaddr &amp;</type>
        <definition>const sockaddr &amp; BNetworkAddress::SockAddr</definition>
        <argsstring>() const</argsstring>
        <name>SockAddr</name>
        <qualifiedname>BNetworkAddress::SockAddr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="88" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1abf4be3bde6a07194c2942b4bc9e19706" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBString" kindref="compound">BString</ref></type>
        <definition>BString BNetworkAddress::ToString</definition>
        <argsstring>(bool includePort=true) const</argsstring>
        <name>ToString</name>
        <qualifiedname>BNetworkAddress::ToString</qualifiedname>
        <param>
          <type>bool</type>
          <declname>includePort</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="117" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a97bb916a65f239a1861e6aa59cefe111" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
        <definition>virtual type_code BNetworkAddress::TypeCode</definition>
        <argsstring>() const</argsstring>
        <name>TypeCode</name>
        <qualifiedname>BNetworkAddress::TypeCode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="126" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1a4614ea2774efb5eaebf5d5152a2beb8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>virtual status_t BNetworkAddress::Unflatten</definition>
        <argsstring>(type_code code, const void *buffer, ssize_t size)</argsstring>
        <name>Unflatten</name>
        <qualifiedname>BNetworkAddress::Unflatten</qualifiedname>
        <param>
          <type><ref refid="SupportDefs_8h_1a3b69a2260ff2e376327f0f05542b9536" kindref="member">type_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="130" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBNetworkAddress_1ab04b8cc643aea2e5747678a7ae387c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BNetworkAddress::Unset</definition>
        <argsstring>()</argsstring>
        <name>Unset</name>
        <qualifiedname>BNetworkAddress::Unset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="45" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBNetworkAddress_1a4c3d2d4ba625359a2e8597f66da34532" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="SupportDefs_8h_1ab6735558965995709a53691ae913c81b" kindref="member">status_t</ref></type>
        <definition>status_t BNetworkAddress::_ParseLinkAddress</definition>
        <argsstring>(const char *address)</argsstring>
        <name>_ParseLinkAddress</name>
        <qualifiedname>BNetworkAddress::_ParseLinkAddress</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="147" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
      <node id="1">
        <label>BNetworkAddress</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BFlattenable</label>
        <link refid="classBFlattenable"/>
      </node>
      <node id="1">
        <label>BNetworkAddress</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" line="19" column="1" bodyfile="/boot/home/src/haiku/headers/os/net/NetworkAddress.h" bodystart="19" bodyend="153"/>
    <listofallmembers>
      <member refid="classBNetworkAddress_1a4c3d2d4ba625359a2e8597f66da34532" prot="private" virt="non-virtual"><scope>BNetworkAddress</scope><name>_ParseLinkAddress</name></member>
      <member refid="classBFlattenable_1a30165696bba76fed10e37508cc4f6925" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>AllowsTypeCode</name></member>
      <member refid="classBNetworkAddress_1a677e21546ba4116df28be6739029a332" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a49966752a8c140799bce549fcac2fa84" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a91ec0a3fa4d53e1bd09fc1892a91c2b9" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a5f14fd302a3d5cf2f15d2524251c69e1" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a9fbee11f091fbaf6704a28bb670031c3" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a28de9a2e845f1477055bdfe6b2358c00" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a0ea25f8c26181da9c8587e793fcf3493" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a302aad38827c81931dec88d8aed21457" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a80e9accca4aa2afca9fc1558f1859f35" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a9fe89dd05031365e5d3b79959e2decf0" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1ac1f873e46aeb92c3ad1d8caccc23046f" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a14edd3911772415a84da21aac6d4cb6c" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a6b32b021b81f0d09dc7fe8f485c59c7d" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>BNetworkAddress</name></member>
      <member refid="classBNetworkAddress_1a927a6e7539d1502048cab54f426dfd98" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>Equals</name></member>
      <member refid="classBNetworkAddress_1aa41f756b9a6038c81be9bf6d602d9a8e" prot="private" virt="non-virtual"><scope>BNetworkAddress</scope><name>fAddress</name></member>
      <member refid="classBNetworkAddress_1a3b94d8011fc1d095f673eecdc4c14059" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>Family</name></member>
      <member refid="classBNetworkAddress_1a32d1bd438541af34131396e88f5f9051" prot="private" virt="non-virtual"><scope>BNetworkAddress</scope><name>fHostName</name></member>
      <member refid="classBNetworkAddress_1ab178eb989534443614fc66f407cfe35b" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>Flatten</name></member>
      <member refid="classBNetworkAddress_1a59538bccef3c70bf9b5f6d9d548065e0" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>FlattenedSize</name></member>
      <member refid="classBNetworkAddress_1afc3c18208976a50dc45b6bf3fbd210f6" prot="private" virt="non-virtual"><scope>BNetworkAddress</scope><name>fStatus</name></member>
      <member refid="classBNetworkAddress_1a31ec57cb84ab477f2fcb90e793a1e785" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>HostName</name></member>
      <member refid="classBNetworkAddress_1a78844d3c7128a868c8710223728f3369" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>InitCheck</name></member>
      <member refid="classBNetworkAddress_1ae0e7512dabda3eb39967646450cf7371" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsBroadcast</name></member>
      <member refid="classBNetworkAddress_1a00b27c4d19bcf713ba2566a984792c9c" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsEmpty</name></member>
      <member refid="classBNetworkAddress_1ad9c329b0b09563aa06982107aca97972" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>IsFixedSize</name></member>
      <member refid="classBNetworkAddress_1ab24fe010ad0123ebf544c2389d370bd0" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsLinkLocal</name></member>
      <member refid="classBNetworkAddress_1a418351bfaa8eb232883af564260bae02" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsLocal</name></member>
      <member refid="classBNetworkAddress_1a3e362d289c9f89cf2b4a754280dd0719" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsMulticast</name></member>
      <member refid="classBNetworkAddress_1a227f647041bb9dcb1e34dcbe69273dc8" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsMulticastGlobal</name></member>
      <member refid="classBNetworkAddress_1a32a84bd20a666a98389cba68504dfa71" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsMulticastLinkLocal</name></member>
      <member refid="classBNetworkAddress_1aa30da114b00db10ec89d6a722e91b4ae" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsMulticastNodeLocal</name></member>
      <member refid="classBNetworkAddress_1ab02f43e288019390fa7539c6a7b49c2e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsMulticastOrgLocal</name></member>
      <member refid="classBNetworkAddress_1a9b3096542fde1c295120f404271f36f4" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsMulticastSiteLocal</name></member>
      <member refid="classBNetworkAddress_1aa4952cfbbef26dd98c5d0e6382435061" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsSiteLocal</name></member>
      <member refid="classBNetworkAddress_1a531d18bd384b91ac46302bd03a74d80e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>IsWildcard</name></member>
      <member refid="classBNetworkAddress_1acacd3674c541e36b1bb54817182ec986" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>Length</name></member>
      <member refid="classBNetworkAddress_1a4575081c326c1f7c867e13be76f7569e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>LinkLevelAddress</name></member>
      <member refid="classBNetworkAddress_1a54e8473dd9f65af56d804473217a43a3" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>LinkLevelAddressLength</name></member>
      <member refid="classBNetworkAddress_1aed63975a7f1150a7abe92c0d8c8f5fb5" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>LinkLevelFrameType</name></member>
      <member refid="classBNetworkAddress_1a421ecbe53fbcf0fcb4c631962827f3b7" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>LinkLevelIndex</name></member>
      <member refid="classBNetworkAddress_1aaeee326c41bbeb6fd63e3579eeb838ea" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>LinkLevelInterface</name></member>
      <member refid="classBNetworkAddress_1a614fd37d7e6f8031bf3e1a9183b9bcee" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>LinkLevelType</name></member>
      <member refid="classBNetworkAddress_1a2804d9e1ed848a259fd5de607273e40e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator const sockaddr &amp;</name></member>
      <member refid="classBNetworkAddress_1a828dbd7a9ec5613156cbd30096adbde4" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator const sockaddr &amp;</name></member>
      <member refid="classBNetworkAddress_1a2d67e079eccf2ecf28777dabae05a6e9" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator const sockaddr *</name></member>
      <member refid="classBNetworkAddress_1ae76673f4f35bc5d95ca034c3d9c3d06e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator const sockaddr *</name></member>
      <member refid="classBNetworkAddress_1aa23e5b89404e3b21106e693bc4c6936b" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator sockaddr &amp;</name></member>
      <member refid="classBNetworkAddress_1ae48a0e5347fb08a119095fb7fa33f847" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator sockaddr *</name></member>
      <member refid="classBNetworkAddress_1a957893152e452aae4df4cbfa5fc362ea" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator!=</name></member>
      <member refid="classBNetworkAddress_1a7ebbdf9d3a2738efb67881e534a1e4ea" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator&lt;</name></member>
      <member refid="classBNetworkAddress_1a51f26d22d0a64df15adcb9d27ca9af32" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator=</name></member>
      <member refid="classBNetworkAddress_1a93b39baca8aa5f28561e8ce18dc78380" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>operator==</name></member>
      <member refid="classBNetworkAddress_1a04499b62dcf21444e4f025b4e15e49c7" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>Port</name></member>
      <member refid="classBNetworkAddress_1af4aca1b46b2da7d6734e46f495d9878b" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>PrefixLength</name></member>
      <member refid="classBNetworkAddress_1a45fc7c65f42d16a7cf816506d61bbb62" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>ResolveForDestination</name></member>
      <member refid="classBNetworkAddress_1a7e0c7411e72c1ae2081a88b91138d9b8" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>ResolveTo</name></member>
      <member refid="classBNetworkAddress_1ac444f437717500f0756a2155d7d7364b" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>ServiceName</name></member>
      <member refid="classBNetworkAddress_1aeb026e23a7e907773396eb0848ff912b" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetAddress</name></member>
      <member refid="classBNetworkAddress_1a370cbcf21aa8543774387619e3af86f7" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetAddress</name></member>
      <member refid="classBNetworkAddress_1a17b6b52a85b4bdc2ddd78b2d1af2ede2" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetLinkLevelFrameType</name></member>
      <member refid="classBNetworkAddress_1a46a9235763a584c9d610c7d9b10b5e05" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetLinkLevelIndex</name></member>
      <member refid="classBNetworkAddress_1a18fc418803a34e14eb7b79c9448fb39a" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetLinkLevelType</name></member>
      <member refid="classBNetworkAddress_1a30cb4d3dc21bdaf0088feb7b4a341f75" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetPort</name></member>
      <member refid="classBNetworkAddress_1a6d7d327179eb80a2cd13e042b3dd7849" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetPort</name></member>
      <member refid="classBNetworkAddress_1ac861599f4f3f0a3913382628384e59b8" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1a2e70e588a13839bd54aad2df14f1fa5e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1aa18e9a3274605b4c4f81799c3b7e7d18" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1a74b1d350d1bc2348e9c7d34d7f6b1a7f" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1a152a0c1abcf7f39c6bdb24f958b3de20" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1ae29e30af20f1017a5463617cb9121c3e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1ae05be3a797fea49b9ace69acfeee421b" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1a54b6f9bda609662f1176bc5821d22425" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1a6d1bcd2d603d3015257133979baf23dd" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1a9fb923a6a7ce478a5c36c38fae7b9a6e" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1ab651b97e1b549fddc28a9ffe3d18ac3a" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1ace184eb512d89d1b833fdd04552bc3fd" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1a239592725aa308c2beac1e58cbdea302" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetTo</name></member>
      <member refid="classBNetworkAddress_1ae2db03a01331c0cbc31c11820a8401c6" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToBroadcast</name></member>
      <member refid="classBNetworkAddress_1a34b2effbeafca42031f15e5b3554f1ed" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToLinkLevel</name></member>
      <member refid="classBNetworkAddress_1a76260c050113901377146d3e9f5676e7" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToLinkLevel</name></member>
      <member refid="classBNetworkAddress_1a0d1891112fd0db714b99a283a7603068" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToLinkLevel</name></member>
      <member refid="classBNetworkAddress_1a28d6d88ea3dfc02d85c669623ff935a8" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToLocal</name></member>
      <member refid="classBNetworkAddress_1ab04429f542391adc1a60b5a1c92d7f91" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToLoopback</name></member>
      <member refid="classBNetworkAddress_1a7c8e4b3d06d509e94dd4b51c7eea165c" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToMask</name></member>
      <member refid="classBNetworkAddress_1ab7fe7f4f5e7751c57cce99b2c846eb9b" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SetToWildcard</name></member>
      <member refid="classBNetworkAddress_1aa3efd210bfb156db099e304cdcfca770" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SockAddr</name></member>
      <member refid="classBNetworkAddress_1ae0f455424feb618cb61ea8d70076e2de" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>SockAddr</name></member>
      <member refid="classBNetworkAddress_1abf4be3bde6a07194c2942b4bc9e19706" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>ToString</name></member>
      <member refid="classBNetworkAddress_1a97bb916a65f239a1861e6aa59cefe111" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>TypeCode</name></member>
      <member refid="classBNetworkAddress_1a4614ea2774efb5eaebf5d5152a2beb8a" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>Unflatten</name></member>
      <member refid="classBNetworkAddress_1ab04b8cc643aea2e5747678a7ae387c2d" prot="public" virt="non-virtual"><scope>BNetworkAddress</scope><name>Unset</name></member>
      <member refid="classBFlattenable_1a884e130a5d27acc15b1e4e4c505157ff" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>~BFlattenable</name></member>
      <member refid="classBNetworkAddress_1a660a4021f17ed1f94a8e67bc04098257" prot="public" virt="virtual"><scope>BNetworkAddress</scope><name>~BNetworkAddress</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
